AWSTemplateFormatVersion: 2010-09-09
Description: Sets up a running instance of the OWASP Security Knowledge Framework

Parameters:
  Subnets:
    Description: The subnets where the OWASP SKF will run
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: The VPC in which the OWASP SKF will run
    Type: AWS::EC2::VPC::Id
  KeyName:
    Description: An ssh keypair to put on the OWASP SKF instance
    Type: AWS::EC2::KeyPair::KeyName
  HttpsAccessCidr:
    Description: A CIDR from which https access to the OWASP SKF's load balancers is allowed
    Type: String
    AllowedPattern: ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
  SSHAccessCidr:
    Description: A CIDR from which SSH access to the OWASP SKF instance is allowed
    Type: String
    AllowedPattern: ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
  SSLCertificateArn:
    Description: ARN of SSL certifcate the ELBs should use
    Type: String
  DataBucketName:
    Description: Name to use for the S3 bucket that persists the database
    Type: String
  AMI:
    Description: Base AMI for SKF instances (Ubuntu 14.04 LTS, "trusty")
    Type: AWS::EC2::Image::Id

Mappings:
  Constants:
    App:
      Value: security-knowledge-framework
    Stack:
      Value: security

Resources:
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Ref: DataBucketName
      Tags:
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTPS access to the load balancer from the CIDR block
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp:
          Ref: HttpsAccessCidr
      Tags:
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SKF EC2 instance
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      # allow ELB to talk to instance
      - IpProtocol: tcp
        FromPort: 8001
        ToPort: 8001
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      # allow SSH access to specified IP range
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHAccessCidr
      SecurityGroupEgress:
      # allow instance to make http requests
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: skf-instance-policy
        PolicyDocument:
          Statement:
          # grant access to the S3 bucket that backs up the database
          - Effect: Allow
            Resource:
              Fn::Join:
              - ""
              - - "arn:aws:s3"
                - ":::"
                - Ref: DataBucketName
            Action:
            - s3:ListBucket
          - Effect: Allow
            Resource:
              Fn::Join:
              - ""
              - - "arn:aws:s3"
                - ":::"
                - Ref: DataBucketName
                - /*
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: 443
        Protocol: HTTPS
        SSLCertificateId:
          Ref: SSLCertificateArn
        InstanceProtocol: HTTP
        InstancePort: 8001
      CrossZone: true
      HealthCheck:
        Target: HTTP:8001/
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 10
      Subnets:
        Ref: Subnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Tags:
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: AMI
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: InstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - |
              #!/bin/bash -ev
            - s3bucket=
            - Ref: DataBucketName
            - |

              # install dependencies
              locale-gen en_GB.UTF-8
              apt-get --yes update
              apt-get --yes upgrade
              apt-get install --yes git apache2 libapache2-mod-wsgi sqlite3 lib32z1-dev python-dev libxml2-dev libxslt-dev libffi-dev libssl-dev python-pip
              a2enmod wsgi
              pip install --upgrade pip
              pip install -U setuptools
              pip install awscli https://github.com/mitsuhiko/flask/tarball/master owasp-skf

              # setup skf
              mkdir /owaspskf
              cd /owaspskf
              git clone https://github.com/blabla1337/skf-flask.git
              cd skf-flask/skf

              # remove adhoc SSL
              sed -i "s/, ssl_context='adhoc'//" skf.py

              # fetch db from persistent storage
              aws s3 cp s3://$s3bucket/owaspskf/skf.db skf.db || true

              # application wsgi file
              cat <<SKF_APP_WSGI > skf.wsgi
              import sys, os
              sys.path.insert (0,'/owaspskf/skf-flask/skf')
              os.chdir("/owaspskf/skf-flask/skf")
              from skf import app as application
              SKF_APP_WSGI

              # apache config
              cd /etc/apache2/sites-available/

              cat <<SKF_APACHE_CONF > skf.conf
              WSGIRestrictStdout Off
              Listen 8001
              <VirtualHost *:8001>

                  WSGIDaemonProcess skf user=www-data group=www-data threads=5
                  WSGIScriptAlias / /owaspskf/skf-flask/skf/skf.wsgi

                  <Directory /owaspskf/skf-flask/skf>
                      WSGIProcessGroup skf
                      WSGIApplicationGroup %{GLOBAL}
                      Order deny,allow
                      Allow from all
                      Require all granted
                  </Directory>

              </VirtualHost>
              SKF_APACHE_CONF

              a2dissite 000-default.conf
              a2ensite skf.conf

              # fix perms
              chmod +x /owaspskf/skf-flask/skf/skf.py
              chown -R www-data:www-data /owaspskf/skf-flask

              # restart apache
              sudo service apache2 restart

              # schedule regular sync of the sqlite database
              touch /owaspskf/cron-lastrun.log
              chown www-data /owaspskf/cron-lastrun.log
              cat <<SKF_CRON > /etc/cron.d/skf
              */5 * * * *  www-data  /usr/local/bin/aws s3 cp /owaspskf/skf-flask/skf/skf.db s3://$s3bucket/owaspskf/skf.db > /owaspskf/cron-lastrun.log 2>&1
              SKF_CRON

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ""
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: Name
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
        PropagateAtLaunch: true

Outputs:
  LoadBalancerUrl:
    Value:
      'Fn::GetAtt':
      - LoadBalancer
      - DNSName

