{"items": [{"id": 1, "title": "Re Authentication", "content": "Reauthentication\n\n\n Example:\n\t\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Data.SqlClient;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Web.SessionState;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class reauth\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\tpublic int userID { get; set; }\n\t\t\tpublic string username { get; set; }\n\t\t\tpublic string password { get; set; }\n\t\t\tpublic string access { get; set; }\n\t\t\tpublic string salt { get; set; }\n\t\t\tpublic int privilege { get; set; }\n\n\t\t\t//First we include the audit log class.\n\t\t\tauditLogs Log = new auditLogs();\n\n\t\t\t//Second we include the password hash.\n\t\t\thashing hash = new hashing();\n\n\t\t\t//Third we include the random password/token class.\n\t\t\trandomizer CSRF = new randomizer();\n\n\t\t\t//Add the logout class\n\t\t\tlogout logoff = new logout();\n\n\t\t\tpublic bool reAuthentication()\n\t\t\t{\n\t\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\t\tSqlConnection conn = new SqlConnection\n\t\t\t\t(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\t\tbool loggedin = false;\n\t\t\t\tstring passwordHash = \"\";\n\t\t\t\tconn.Open();\n\n\t\t\t\t//Here we select the user from the users table by the sessionID\n\t\t\t\tstring query = string.Format(\"SELECT * from users WHERE userID = @userID \");\n\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", 1);\n\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t{\n\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tpasswordHash = Convert.ToString(oReader[\"password\"]);\n\t\t\t\t\t\tsalt = Convert.ToString(oReader[\"salt\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\tWe validate the password see \"Password storage(salting stretching hashing)\" in the code examples\n\t\t\t\tfor more detailed information:\n\t\t\t\t*/\n\t\t\t\tif (hash.Validate(passwordHash, salt, password) == true)\n\t\t\t\t{\n\t\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\t\tLog.SetLog(\"Null\", \"login was OK!\", \"SUCCESS\", \"NULL\");\n\n\t\t\t\t\t/*\n\t\t\t\t\tThis is is to prevent session fixation, after login we create a new cookie which\n\t\t\t\t\twe than use to authenticate. This value can not be fixated since it is set after \n\t\t\t\t\tlogin.\n\t\t\t\t \n\t\t\t\t\tcreate a new GUID and save into the session:\n\t\t\t\t\t*/\n\n\t\t\t\t\t//Al the random tokens will now be changed\n\t\t\t\t\tstring guid = Guid.NewGuid().ToString();\n\t\t\t\t\tHttpContext.Current.Session[\"AuthToken\"] = guid;\n\n\t\t\t\t\t// now create a new cookie with this guid value\n\t\t\t\t\tHttpContext.Current.Response.Cookies.Add(new HttpCookie(\"AuthToken\", guid));\n\n\t\t\t\t\t/*\n\t\t\t\t\tNow we create a random value for our CSRF tokens. See \"Random password/token generation\" in\n\t\t\t\t\tthe code examples for more detailed information:\n\t\t\t\t\t*/\n\t\t\t\t\tstring CSRftoken = CSRF.generate(25);\n\t\t\t\t\tSystem.Web.HttpContext.Current.Session[\"CSRF\"] = CSRftoken;\n\n\t\t\t\t\tHttpContext.Current.Session[\"Authenticated\"] = \"access\";\n\t\t\t\t\tloggedin = true;\n\t\t\t\t}else{\n\t\t\t\t\t//If things went wrong we destroy the entire session. see \"logout\" code example for more info:\n\t\t\t\t\tlogoff.logOut();\n\t\t\t\t}\n\t\t\t\treturn loggedin;\n\t\t\t}\n\t\t}\n\t}\n\n", "code_lang": "asp"}, {"id": 2, "title": "X content type pptions header", "content": "XContentTypeOptions header\n\n\n Example:\n\n\n    /*\n    In order to set the \"XContentTypeOptions\" header you''ll have to add the \n    following code to the head of your application, the following code could be used in your controller:\n    */\n    \n    Response.AppendHeader(\"XContentTypeOptions\", \"nosniff\"); \n    \n\t/*\n\tIn your classes you can use the following code:\n\t*/\n\t\n\tHttpContext.Current.Response.AppendHeader(\"XContentTypeOptions\", \"nosniff\"); \n\t\n\n", "code_lang": "asp"}, {"id": 3, "title": "Anti clickjacking header", "content": "Anti clickjacking headers\n\n\n Example:\n\n\t/*\n    One way to defend against clickjacking is to include a \"framebreaker\" script in each \n\tpage that should not be framed. The following methodology will prevent a webpage from \n\tbeing framed even in legacy browsers, that do not support the XFrameOptionsHeader.\n\n\tIn the document HEAD element, add the following:\n\t\n\tFirst apply an ID to the style element itself:\n\t*/\n\t\n\t<style id=\"antiClickjack\">body{display:none !important;}</style>\n\n    //And then delete that style by its ID immediately after in the script:\n\n    <script type=\"text/javascript\">\n\t   if (self === top) {\n\t\t   var antiClickjack = document.getElementById(\"antiClickjack\");\n\t\t   antiClickjack.parentNode.removeChild(antiClickjack);\n\t   } else {\n\t\t   top.location = self.location;\n\t   }\n    </script>\n\n\t\n\t/*\n\tThe second option is to use \"security headers\".\n\tThere are two options for setting the \"anticlickjacking\" headers in your application:\n\t*/\n\n\t//this will completely prevent your page from being displayed in an iframe.\n\tResponse.AddHeader(\"XFrameOptions\", \"deny\")\n\n\n\t//this will completely prevent your page from being displayed in an iframe on other sites.\n\tResponse.AddHeader(\"XFrameOptions\", \"SAMEORIGIN\")\n\t\n\n\n\n\n\t\n", "code_lang": "asp"}, {"id": 4, "title": "XML Injection Prevention", "content": "XML injection prevention \n\n\n Example:\n\n   \t\t\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Text.RegularExpressions;\n\tusing System.IO;\n\tusing System.Xml;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class storeXML\n\t\t{\n\t\t\tpublic void storeFunction(string name, string lastName, string gender)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tFirst we import our inputvalidation control class. for more detailed information about \n\t\t\t\tinput validation check the code examples for \"Input validation\" & \"Single input validation\".\n\t\t\t\t*/\n\t\t\t\tinputValidationControl validate = new inputValidationControl();\n\n\t\t\t\tbool doFunction = true;\n\t\t\t\t//If the function returns false, we do not execute the function\n\t\t\t\t//see the \"input validation\" code example for more detailed information about this function\n\t\t\t\tif (validate.validateInput(name, \"alphanumeric\", \"Invalid userinput name\", \"HIGH\") == false)     { doFunction = false; }\n\t\t\t\tif (validate.validateInput(lastName, \"alphanumeric\", \"Invalid userinput name\", \"HIGH\") == false) { doFunction = false; }\n\t\t\t\tif (validate.validateInput(gender, \"alphanumeric\", \"Invalid userinput name\", \"HIGH\") == false)    { doFunction = false; }\n\n\t\t\t\tif (doFunction == true)\n\t\t\t\t{\n\t\t\t\t\t//Only after validation we proceed to the XMLwriter class where we insert the parameters\n\t\t\t\t\tusing (XmlWriter writer = XmlWriter.Create(@\"C:\\Users\\Public\\xml\\register.xml\"))\n\t\t\t\t\t{\n\t\t\t\t\t\twriter.WriteStartElement(\"person\");\n\t\t\t\t\t\twriter.WriteElementString(\"name\", name);\n\t\t\t\t\t\twriter.WriteElementString(\"lastname\", lastName);\n\t\t\t\t\t\twriter.WriteElementString(\"gender\", gender);\n\t\t\t\t\t\twriter.WriteEndElement();\n\t\t\t\t\t\twriter.Flush();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\tNow we prevented malicious userinput from coming into your XML file.\n\tNOTE: Do not forget to also properly encode your input as a last line of defense, \n\t\t  also In this example the XmlReader disables external entities by default.\n\t\t  If you should choose another parser make sure your parser disables these entities \n\t\t  in order to prevent XXE injections.\n\t*/\n          \n\n    \n\n\n", "code_lang": "asp"}, {"id": 5, "title": "Audit Logs", "content": "Audit logs\n\n\n Example:\n\n\n   \tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.IO;\n\tusing System.Data.SqlClient;\n\tusing System.ComponentModel.DataAnnotations.Schema;\n\tusing System.ComponentModel.DataAnnotations;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\t[Table(\"counter\")]\n\t\tpublic class auditLogs\n\t\t{\n\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\tpublic int countID { get; set; }\n\t\t\tpublic int userID  { get; set; }\n\t\t\tpublic int count   { get; set; }\n\t\t\tpublic int blocker { get; set; }\n\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = new \n\t\t\tSqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\tpublic void SetLog(string session, string message, string state, string threat)\n\t\t\t{\n\t\t\t\tusing (StreamWriter writer = new StreamWriter(@\"C:\\Users\\Public\\xml\\logs.txt\", true))\n\t\t\t\t{\n                    writer.WriteLine(session + \"  \" + message + \"  \" + HttpContext.Current.Request.ServerVariables[\"REMOTE_ADDR\"] +\n                    \"  \" + state + \"  \" + DateTime.Now + \"  \" + threat);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic void counter(int counting)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tFirst we select the counts from the count table in order to verify if the user session should be terminated\n\t\t\t\tor that the user should be locked out.\n\t\t\t\t*/\n\t\t\t\tconn.Open();\n\n\t\t\t\tstring query = string.Format(\"SELECT * from counter WHERE userID = @userID \");\n\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t{\n\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tcount   = Convert.ToInt32(oReader[\"count\"]);\n\t\t\t\t\t\tblocker = Convert.ToInt32(oReader[\"blocker\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//We add the counting to the database results for the final value\n\t\t\t\tint finalCount = counting += count;\n\t\t\t\tint finalBlock = counting += blocker;\n\n\t\t\t\t/*\n\t\t\t\tthen we update the count table in order to keep track of the number of counts\n\t\t\t\t*/\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tusing (SqlCommand command = conn.CreateCommand())\n\t\t\t\t\t{\n\t\t\t\t\t\tcommand.CommandText = \"UPDATE counter set count = @count, blocker = @blocker WHERE userID = @userID\";\n\n\t\t\t\t\t\t//Again we bind the parameters in order to prevent SQL injections\n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@count\", finalCount);\n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@blocker\", finalCount);\n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t\t\tcommand.ExecuteNonQuery();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (SqlException e){\n\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(\"SQL insert query error in update counter\");\n\t\t\t\t\t\tthrow;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconn.Close();\n\n\n\t\t\t\t/*\n\t\t\t\tAfter these steps we check whether the user should be blocked, whenever the count is equal to 12 we take\n\t\t\t\tfurther actions by means of blocking the users account and terminating his session\n\t\t\t\t*/\n\n\t\t\t\tif (finalBlock >= 12)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tusing (SqlCommand command = conn.CreateCommand())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconn.Open();\n\t\t\t\t\t\t\tstring access = \"FALSE\";\n\t\t\t\t\t\t\tcommand.CommandText = \"UPDATE users set access = @access WHERE userID = @userID\";\n\n\t\t\t\t\t\t\t//Again we bind the parameters in order to prevent SQL injections\n\t\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@access\", access);\n\t\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t\t\t\tcommand.ExecuteNonQuery();\n\n\t\t\t\t\t\t\tHttpContext.Current.Session[\"authenticateUser\"] = \"\";\n\t\t\t\t\t\t\tHttpContext.Current.Session.Abandon();\n\t\t\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (SqlException e){\n\t\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(\"SQL insert query error\");\n\t\t\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tIf the count hit three, the user gets a warning by means of a session termination.\n\t\t\t\tWhenever this termination occurs three times he will lock out his account.\n\t\t\t\t*/\n\t\t\t\tif (finalCount >= 3)\n\t\t\t\t{\n\t\t\t\t\tHttpContext.Current.Session[\"authenticateUser\"] = \"\";\n\t\t\t\t\tHttpContext.Current.Session.Abandon();\n\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "code_lang": "asp"}, {"id": 6, "title": "Crossdomain.xml ", "content": "Crossdomain.xml \n\n\n Example:\n\n    \n\t\tA bad example of a crossdomain.xml would be:\n\n\t\t<?xml version=\"1.0\" ?>\n\t\t<crossdomainpolicy>\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowaccessfrom domain=\"*\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*\" headers=\"*\"/>\n\t\t</crossdomainpolicy>\n\n\t\tBecause it allows access from all other domains.\n\n\t\tInstead of this approach you might want to use the following restrictions. \n\t\tExample by twitter''s crossdomain.xml:\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF8\"?>\n\t\t<crossdomainpolicy xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" \n\t\txsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t\t\t<allowaccessfrom domain=\"twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"api.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"search.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"static.twitter.com\" />\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*.twitter.com\" headers=\"*\" secure=\"true\"/>\n\t\t</crossdomainpolicy>\n\n\n\t\n", "code_lang": "asp"}, {"id": 7, "title": "File Upload", "content": "File upload\n\n\n Example:\n\t\n\t\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Text.RegularExpressions;\n\tusing System.IO;\n\tusing System.Xml;\n\n\tnamespace MvcApplication1.Controllers\n\t{ \n\t\tpublic class auditLogs\n\t\t{\n\t\t\tprivate bool continueFunction = true;\n\t\t\tvalidation validate = new validation();\n\n\t\t\t//We check for form submit\n\t\t\tpublic void upload(HttpPostedFileBase file)\n\t\t\t{\n\t\t\t\t//We get the filename for doing different types of tests on it\n\t\t\t\tstring test = file.FileName;\n\n\t\t\t\t/*\n\t\t\t\tFirst we check if the value is alphanumeric only to prevent uploading out of intended directory, \n\t\t\t\tas wel as other injections\n\t\t\t\t*/\n\t\t\t\tif (validate.validateInput(test, \"alphanumeric\", \"validation failed\", \"HIGH\") == false)\n\t\t\t\t{\n\t\t\t\t\tcontinueFunction = false;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\tThe next step would be checking if the file contains the right extension in order to prevent\n\t\t\t\ta user from uploading files which could be used to harm your system. in this example \n\t\t\t\twe check if the last extension found in the file name is a jpg or a png. whenever\n\t\t\t\tan application just regexes for the extension an attacker could\n\t\t\t\tbypass the check by uploading an file like: \"filename.jpg.php\".\n\t\t\t\t*/\n\t\t\t\tstring[] StrSpli = test.Split(''.'');\n\t\t\t\tint count = StrSpli.Count()  1;\n\n\t\t\t\tif ((StrSpli[count] != \"png\") && (StrSpli[count] != \"jpg\"))\n\t\t\t\t{\n\t\t\t\t\tcontinueFunction = false;\n\t\t\t\t\tHttpContext.Current.Response.Write(\"end of function\");\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t If the file came through all the different checks, it is time to upload the file to your system. \n\t\t\t\t */\n\t\t\t\tif (continueFunction == true)\n\t\t\t\t{\n\t\t\t\t\tif (file != null && file.ContentLength > 0)\n\t\t\t\t\t{\n\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// extract only the filename\n\t\t\t\t\t\t\tvar fileName = Path.GetFileName(file.FileName);\n\n\t\t\t\t\t\t\t// The location of stored files should always be outside of your root\n\t\t\t\t\t\t\tvar path = Path.Combine(@\"C:\\Users\\Public\\xml\", fileName);\n\t\t\t\t\t\t\tfile.SaveAs(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch{\n\t\t\t\t\t\t\tHttpContext.Current.Response.Write(\"File did not upload!\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tHttpContext.Current.Response.Write(\"end of function we returned false\");\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\tNow we check the uploaded file for the right mimetype\n\t\t\t\tWe do this after the upload instead of checking the content type header since that header \n\t\t\t\tcan easily manipulated by an attacker. \n\t\t\t\t*/\n\n\t\t\t\tstring mimeType = \"application/unknown\";\n\t\t\t\tstring ext = System.IO.Path.GetExtension(@\"C:\\Users\\Public\\xml\\\"+test+\"\").ToLower();\n\n\t\t\t\tMicrosoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(ext);\n\n\t\t\t\tif (regKey != null && regKey.GetValue(\"Content Type\") != null)\n\t\t\t\t{\n\t\t\t\t\tmimeType = regKey.GetValue(\"Content Type\").ToString();\n\t\t\t\t}\n\n\t\t\t\tif (mimeType != \"image/jpeg\") \n\t\t\t\t{   \n\t\t\t\t\t//If the mimetype is not valid we delete the file from the system.\n\t\t\t\t\tSystem.IO.File.Delete(@\"C:\\Users\\Public\\xml\\\"+test+\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "code_lang": "asp"}, {"id": 8, "title": "Open Forwards & Redirects", "content": "Open forwards & redirects\n\n\n Example:\n\n\t\n\t/*\n\tWhen using forwards & redirects you should make sure the URL is being explicitly \n\tdeclared in the code and cannot be manipulated by an attacker like:\n\t*/\n\t\n\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\n\t/*\n\tGenerally you should avoid getting input into the redirect which could contain\n\tuserinput by any means. if for any reason this may not be feasible than you \n\tshould make a whitelist input validation for the redirect like so:\n\t*/\n\t\n\t     \n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\n\t\tpublic class OpenForwards\n\t\t{\n\t\t\tpublic void openForwards(string redirect)\n\t\t\t{\n\t\t\t\twhitelist listMe = new whitelist();\n\n\t\t\t\tbool validated = true;\n\t\t\t\n\t\t\t\t//For more information about whitelisting see the \"Whitelisting\" code example:\n\t\t\t\tif (listMe.whitelisting(\"page1,page2,page3\", redirect) == false) { validated = false; }\n\t\t\t\n\t\t\t\t//Only if the pattern was true we allow the variable into the streamreader function\n\t\t\t\tif (validated == true)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tHttpContext.Current.Response.Redirect(redirect, true);\n\t\t\t\t\t}\n\t\t\t\t\tcatch\n\t\t\t\t\t{\n\t\t\t\t\t\tHttpContext.Current.Response.Write(\"redirect failed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\n", "code_lang": "asp"}, {"id": 9, "title": "White listing", "content": " Whitelisting\n\n\n Example:\n\t\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class whitelist\n\t\t{\n\t\t\t//Include auditlog class\n\t\t\tauditLogs Log = new auditLogs();\n\n\t\t\tpublic bool whitelisting(string allowed, string input)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tHere we define a whitelist of pages we want the user allow to be redirected to, all \n\t\t\t\tpatterns are terminated whenever they not comply with the predefined withelist\n\t\t\t\t*/\n\n\t\t\t\tstring[] pattern = allowed.Split('','');\n\n\t\t\t\t//For validation if the file returned true\n\t\t\t\tbool validated = false;\n\n\t\t\t\t//To catch the user submitting evil requests we count the number of times the foreach hits false\n\t\t\t\tint count = 0;\n\t\t\t\tint countArray = 0;\n\n\t\t\t\tint counter = allowed.Length;\n\n\t\t\t\tforeach (string item in pattern)\n\t\t\t\t{\n\t\t\t\t\t//If filename is equal to the predefined items\n\t\t\t\t\tif (input == item)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalidated = true;\n\t\t\t\t\t\tcount = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Here we add up the counts, if they are equal we know the function did not hit a valid filename\n\t\t\t\t\tcount++;\n\t\t\t\t\tcountArray++;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (countArray == count)\n\t\t\t\t{\n\t\t\t\t\t//this breach has to be reported into the log files\n\t\t\t\t\tLog.setLog(HttpContext.Current.Session[\"userID\"], \"Audit log message!\", \"FAIL\", \"HIGH\");\n\t\t\t\t\tLog.setCounter.count(3);\n\t\t\t\t}\n\t\t\t\treturn validated;\n\t\t\t}\n\t\t}\n\t}", "code_lang": "asp"}, {"id": 10, "title": "Session Cookies HttpOnly", "content": "Session cookies HttpOnly\n\n\n Example:\n\n\t/*\n\tWhenever a session is started, the \"httpOnly\" option should always be set\n\tin order to prevent session data to be stolen by attackers.\n\t\n    By default, .NET 2.0 sets the HttpOnly attribute for:\n    Session ID,\n    Forms Authentication cookie\n\n    In .NET 2.0, HttpOnly can also be set via the HttpCookie object for all custom application \n    cookies via web.config in the system.web/httpCookies element\n\t*/\n\t\n\t<httpCookies httpOnlyCookies=\"true\"> \n\n    //Or programmatically\n\t//C Code:\n\n\tHttpCookie myCookie = new HttpCookie(\"AuthToken\", guid);\n\tHttpContext.Current.Response.Cookies.Add(myCookie);\n\tmyCookie.HttpOnly = true;\n\n\t\n\n\t\n", "code_lang": "asp"}, {"id": 11, "title": "Privilege Based Authentication", "content": " Privilege based authentication\n\n\n Example:\n\n\n   \t/*\n    For privilege based authentication we need an extra table in your database in order to write the users privileges to.\n\n    TABLE users\n        \n    | userID | userName | password | privilegeID |    access\t| AggregateControl\t|\n       \n    |   1\t | Admin\t| Csdar323 |\t  1\t\t | \t   TRUE\t\t|\t\t2336\t\t|\n       \t\n    |\t2\t | User\t\t| Adf4fsv  |\t  2\t\t |\t   FALSE\t|\t\t 0\t\t\t|\n       \n    |\t3\t | Guest\t| dff4fKr  |\t  3\t\t |\t   TRUE\t\t|\t\t135\t\t\t|\n       \n\n    TABLE privileges\n       \n    | privilegeID | privilege \t\t | \n    \n    |     1\t \t  | edit:read:delete |\n    \n    |\t  2\t \t  | edit:read\t\t |\n    \n    |\t  3\t \t  | read\t\t\t |\n    \n\n    Now instead of using roles in sessions we rather want to assign privileges to users \n    by means of a DatabaseBased Authentication system. \n    Now we can easily assign a user certain privileges for him to access.\n    */\n    \n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Data.SqlClient;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Web.SessionState;\n\tusing System.Text.RegularExpressions;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class privilegeBasedAuthentication\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\tpublic int userID { get; set; }\n\t\t\tpublic string username { get; set; }\n\t\t\tpublic string password { get; set; }\n\t\t\tpublic string access { get; set; }\n\t\t\tpublic string salt { get; set; }\n\t\t\tpublic int privilege { get; set; }\n\n\t\t\t//First we include the audit log class.\n\t\t\tauditLogs Log = new auditLogs();\n\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = \n\t\t\tnew SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\tpublic string privileges()\n\t\t\t{\n\t\t\t\tstring privileges = \"\";\n\n\t\t\t\tconn.Open();\n\n\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\tLog.SetLog(\"Null\", \"Connection to the database was made successfully\", \"SUCCESS\", \"NULL\");\n\n\t\t\t\t/*\n\t\t\t\tHere we select the users privilege level from the users table\n\t\t\t\tNOTE: query has to be in one line but could not fit screen otherwise\n\t\t\t\t*/\n\t\t\t\tstring query = string.Format(\"\n\t\t\t\tSELECT a.username, a.password, a.privilegeID, b.privilegeID, \n\t\t\t\tb.privilege FROM users as a JOIN privileges as b ON a.privilegeID = b.privilegeID \n\t\t\t\tWHERE a.userID =@userID and a.access=''TRUE''\");\n\t\t\t\t\n\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t{\n\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tprivileges = Convert.ToString(oReader[\"privilege\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn privileges;\n\t\t\t}\n\n\t\t\t//Here we check the privileges string against the permissions needed to perform the actions\n\t\t\tpublic bool validator(string privileges, string ispermitted)\n\t\t\t{\n\n\t\t\t\tbool privileged = false;\n\t\t\t\tstring[] privDB = privileges.Split('':'');\n\t\t\t\tstring[] permission = ispermitted.Split('':'');\n\n\t\t\t\tint count = permission.Length;\n\t\t\t\tint countsuccess = 0;\n\n\t\t\t\tforeach (string priv in privDB)\n\t\t\t\t{\n\t\t\t\t\t//We count the number of times the regex hits your privilege\n\t\t\t\t\tRegex regex = new Regex(priv);\n\t\t\t\t\tif (priv != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tMatch match = regex.Match(ispermitted);\n\t\t\t\t\t\tif (match.Success)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcountsuccess += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Whenever the count is bigger or equal to the results we know the user was permitted\n\t\t\t\tif (countsuccess >= count)\n\t\t\t\t{\n\t\t\t\t\tprivileged = true;\n\t\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\t\tLog.SetLog(Convert.ToString(System.Web.HttpContext.Current.Session[\"userID\"]), \n\t\t\t\t\t\"User did have the right privileges!\", \"SUCCESS\", \"NULL\");\n\t\t\t\t}else{\n\t\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\t\tLog.SetLog(\"Null\", \"User did not have the right privileges!\", \"FAIL\", \"NULL\");\n\n\t\t\t\t\t//Terminate session since the user tries to tamper his privileges\n\t\t\t\t\tLog.setCounter(3);\n\t\t\t\t\tprivileged = false;\n\t\t\t\t}\n\t\t\t\treturn privileged;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n    if ever there are new ''roles'' added to the system you can easily assign them the needed privileges without \n    having to add new roles throughout your entire system. This system takes a little more planning up ahead but \n    it enforces higher level of security.\n    */\n    \n    \n", "code_lang": "asp"}, {"id": 12, "title": "Preventing Session Hijacking", "content": "Session hijacking\n\n\n Example:\n\n\n\t/*\n\tAs soon as a user logs into your application you must store his session id as wel as his\n\tIP address along with his userID. This information will be used later on in your application in order to\n\tidentify possible session hijacking.\n\n\tTABLE track_sessions\n\t\n\t| TrackID | userID |\t\t   \t   SESSION \t\t            |     Ip address\t    | \n\t\n\t|   1     | 1      | \t79dcd529c0f5e01a9bfb2425c52036c6    |\t123.45.67.89\t|   \n\t\n\t|   2     | 1      | \t79dcd529c0f5e01a9bfb2425c52036c6    |\t123.45.67.81\t|\n\t\n\t|   3     | 2      | \tc80959d3ea4c166413774e45375ac2a1    |\t987.65.43.21\t|\n\t\n\n\tIn order to prevent session hijacking there are a couple of defense strategies\n\twhich combined are a hardened defense.  \n\t*/\n\n\t/*\n\tFirst we implement the strict transport security header, this is in order to prevent\n\tusers from accessing your application over an unprotected connection.\n\t*/\n\n\t//Example of the strict transport security header:\n\tResponse.AppendHeader(\"StrictTransportSecurity\", \"maxage=31536000\");\n\n\n\t//If all present and future subdomains will be HTTPS:\n\tResponse.AppendHeader(\"StrictTransportSecurity\" maxage=31536000, \"includeSubDomains\");\n\n\t/*\n\tRecommended: If the site owner would like their domain to be included in the HSTS preload \n\tlist maintained by Chrome (and used by Firefox and Safari), then use:\n\t*/\n\n\tResponse.AppendHeader(\"StrictTransportSecurity\", \"maxage=31536000\", \"includeSubDomains\" ,\"preload\");\n\n\t/*\n\tThe `preload` flag indicates the site owner''s consent to have their domain preloaded. \n\tThe site owner still needs to then go and submit the domain to the list. the preload list\n\tenforces the browser to always present your application on HTTPS even on the first time\n\tthe user hits your application\n\t*/\n\n\t/*\n\tThen we set the httpOnly flag\n\t(see \"HttpOnly\" in the code examples for more details about implementation)\n\t*/\n\t\n\t/*\n\tThen we set the flag for session timeout\n\t(see \"Timeout\" in the code examples for more details about implementation)\n\t*/\n\t\n\t/*\n\tThen we set the session secure flag \n\t(see \"Secure flag\" in the code examples for more details about implementation)\n\t*/\n\t\n\t/*\n\tOn login we also add another cookie with a random value to the application in order to\n\tprevent an attacker to fixate an ASPSESSION id on your users and hijack their sessions\n\t(This code example can be found in the \"Login functionality\" for more detailed information)\n\t*/\n\t\n\t\n\t/*\n\tNOTE: On applications that require high level security, there should never be an\n\tremember me functionality implemented.\n\t*/\n\n\n\t/*\n\tNow imagine the scenario after the login of the user (see the \"login functionality\" in\n\tthe code examples for more details). Whenever the user is logged in, the users ip address \n\tand session id are also stored in the database these values are used in order to verify \n\tif there are multiple users active on the same session. \n\tIf so, we can let the user decide to terminate the session and terminate the\n\tother assigned sessions.\n\t*/\n\t\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.ComponentModel.DataAnnotations.Schema;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Data.SqlClient;\n\tusing System.Web.SessionState;\n\n\n\tnamespace MvcApplication1.Models\n\t{\n\t\t[Table(\"users\")]\n\t\tpublic class users\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\tpublic int trackingID  { get; set; }\n\t\t\tpublic int userID      { get; set; }\n\t\t\tpublic string token    { get; set; }\n\t\t\tpublic string ipaddress { get; set; }\n\n\t\t\t//First we include the audit log class.\n\t\t\tAuditLog Log = new AuditLog();\n\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = new \n\t\t\tSqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\t//The count integer is set every time the user connects to the database to process data\n\t\t\tpublic void checkSession()\n\t\t\t{\n\t\t\t\tif ((System.Web.HttpContext.Current.Session[\"authenticateUser\"] != \"isLoggedin\") || \n\t\t\t\t(System.Web.HttpContext.Current.Session[\"authenticateUser\"] == \"\"))\n\t\t\t\t{\n\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t\t}\n\n\t\t\t\tconn.Open();\n\n\t\t\t\tstring query = string.Format(\"SELECT * from tracking WHERE userId = @userID \");\n\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\t\t\t\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t{\n\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tsession  = oReader[\"session\"].ToString();\n\t\t\t\t\t\tipaddress = oReader[\"ipaddress\"].ToString();\n\n\t\t\t\t\t\tif ((System.Web.HttpContext.Current.Session[\"ASPsessionID\"].ToString() != session) && \n\t\t\t\t\t\t(ipaddress != HttpContext.Current.Request.ServerVariables[\"REMOTE_ADDR\"]))\n\t\t\t\t\t\t{   \n\t\t\t\t\t\t\t//We log the multiple users on the system \n\t\t\t\t\t\t\tLog.SetLog(Session[''userID''], \"Multiple users with same session id detected\", date, FAIL, MOD\");\n\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tWe redirect the user to a page which alerts him as well as gives him the option to destroy the \n\t\t\t\t\t\t\tmultiple sessions if he does not trust them\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/Home/multipleUsers\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}    \n\n\t/*\n\tthe only thing left to do now is to update your track_sessions table by inserting\n\tthe ipaddress, sessionID and userID if you want to accept the other sessions as valid.\n\tOtherwise the user just has to terminate his current session in order to lock out the\n\tother sessions.\n\t*/\n\n\n\n", "code_lang": "asp"}, {"id": 13, "title": "Secure Session Cookies", "content": "Secure session cookies\n\n\n Example:\n\n    \n\t/*\n\tWhenever  a cookie is sent over a secured connection, the cookie should be set\n\twith the secure flag, in order to guarantee the integrity of the data it contains.\n\n\tin the <system.web> element, add the following element:\n\n\t<httpCookies requireSSL=\"true\" />\n\n\twhenever you have a <forms> element in your system.web block, this setting will \n\toverride the setting in httpCookies, changing it''s value back to false.\n\n\tIn that case, you need to add the requireSSL=\"true\" attribute to the forms element as well.\n\t*/\n\t\n\t<system.web>\n\t\t<authentication mode=\"Forms\">\n\t\t\t<forms requireSSL=\"true\"> < secure flag\n\t\t\t\t/* forms content */\n\t\t\t</forms>\n\t\t</authentication>\n\t</system.web>\n\t\n\t\n\t//Or programmatically\n\t//C Code:\n\t\n\tHttpCookie myCookie = new HttpCookie(\"AuthToken\", guid);\n\tHttpContext.Current.Response.Cookies.Add(myCookie);\n\tmyCookie.Secure = true;\n\n\n\n\t\n", "code_lang": "asp"}, {"id": 14, "title": "Anti caching header", "content": "Anticaching header\n\n\n Example:\n\n\t    \n\t/*\n\tAdd the following headers to your application head in order to prevent the browser from caching\n\tthe following code could be used in your controller:\n\t*/\n\n\tResponse.AppendHeader(\"CacheControl\", \"nocache, nostore, mustrevalidate\"); // HTTP 1.1.\n\tResponse.AppendHeader(\"Pragma\", \"nocache\"); // HTTP 1.0.\n\tResponse.AppendHeader(\"Expires\", \"0\"); // Proxies.\n\n\t\n\t/*\n\tIn your classes you can use the following code:\n\t*/\n\n\tHttpContext.Current.Response.AppendHeader(\"Expires\", \"0\");\n\tHttpContext.Current.Response.AppendHeader(\"CacheControl\", \"nocache, nostore, mustrevalidate\");\n\tHttpContext.Current.Response.AppendHeader(\"Pragma\", \"nocache\");\n", "code_lang": "asp"}, {"id": 15, "title": "Random Password Token Generation", "content": "Random password/token generation\n\n\n Example:\n\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Security.Cryptography;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class randomizer\n\t\t{\n\t\t\tpublic string generate(int numberOfBytes)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tFor generating the password we want to use a secure cryptographic function\n\t\t\t\t*/\n\t\t\t\tRNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();\n\n\t\t\t\t//Then set the size of the password\n\t\t\t\tbyte[] buffer = new byte[numberOfBytes];\n\t\t\t\trng.GetBytes(buffer);\n\n\t\t\t\t//Then we base64 encode the string in order to prevent null bytes\n\t\t\t\tstring randomString = System.Convert.ToBase64String(buffer);\n\n\t\t\t\treturn randomString;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n", "code_lang": "asp"}, {"id": 16, "title": "Directory Path Traversal", "content": "Path traversal\n\n\n Example:\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Text.RegularExpressions;\n\tusing System.IO;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class rewrite\n\t\t{\n\t\t\tauditLogs Log = new auditLogs();\n\t\t\tinputvalidation validate = new inputvalidation();\n\t\t\twhitelist listme = new whitelist();\n\n\t\t\tpublic void getFiles(string getFile)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tFirst, we want to filter the filenames for expected values. For this example we use only use 09\n\t\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           \n\t\t\t\t*/\n\t\t\t\tbool validated = true;\n\n\t\t\t\t//see the \"input validation\" code example for more detailed information about this function\n\t\t\t\tif (validate.validateInput(getFile, \"numeric\", \"Failed to get file\", \"HIGH\") == false) { validated = false;}\n\n\t\t\t\t/*\n\t\t\t\tsee the \"whitelisting\" code example for more detailed information about this function\n\t\t\t\tLet''s assume there are three files named 1,2,3\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\tif (listme.whitelisting(\"1,2,3\", getFile) == false) { validated = false; }\n\n\t\t\t\t//Only if the pattern was true we allow the variable into the streamreader function\n\t\t\t\tif (validated == true)\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tStreamReader sr = new StreamReader(@\"C:\\Users\\Public\\xml\\\" + getFile + \".txt\", true);\n\t\t\t\t\t\tString FileText = sr.ReadToEnd().ToString();\n\n\t\t\t\t\t\tsr.Close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch(DirectoryNotFoundException e){\n\t\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tHttpContext.Current.Response.Write(\"catching file failed\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tHttpContext.Current.Response.Write(\"invalid userinput was detected!\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\n", "code_lang": "asp"}, {"id": 17, "title": "Enforce secure password", "content": "Enforce secure password\n\n\n Example:\n\n\t\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Text.RegularExpressions;\n\tusing System.IO;\n\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class passwordcheck\n\t\t{\n\t\t\tpublic bool checkPassword(string password)\n\t\t\t{\n\t\t\t\tstring error = \"\";\n\t\t\t\tbool complete = true;\n\n\t\t\t\t/*\n\t\t\t\tHere we define the minimal expected value''s for your password.\n\t\t\t\tThe password must at least contain a Capital letter, a normal letter, a special character\n\t\t\t\ta number and must be at least 8 characters long\n\t\t\t\t*/\n\t\t\t\tstring[] pattern = new string[3] { \"[09]\", \"[AZ]\", \"[az]\" };\n\n\t\t\t\tforeach (string validation in pattern)\n\t\t\t\t{\n\t\t\t\t\t//Now if the regex detects any missing character than we will set complete to false\n\t\t\t\t\tRegex regex = new Regex(validation);\n\t\t\t\t\tMatch match = regex.Match(password);\n\n\t\t\t\t\tif (!match.Success)\n\t\t\t\t\t{\n\t\t\t\t\t\terror = \"You did not enter a valid password\";\n\t\t\t\t\t\tcomplete = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\tAlso very important is the fact that you have to take into consideration that\n\t\t\t\t\tPassword1! is a valid password according to password standards. This however is not the case since\n\t\t\t\t\tthis password is included in almost every dictionary attack system. So we have to prevent \n\t\t\t\t\tthe user from using these weak passwords, this we do by defining these bad passwords in a text \n\t\t\t\t\tfile and compare the user''s password with the bad passwords defined in the text file.\n\t\t\t\t\t*/\n\n\t\t\t\t\tStreamReader sr = new StreamReader(@\"C:\\Users\\Public\\xml\\test.txt\", true);\n\t\t\t\t\tString FileText = sr.ReadToEnd().ToString();\n\n\t\t\t\t\tstring[] strTemp = FileText.Split('','');\n\n\t\t\t\t\tforeach (string value in strTemp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (value == password)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror = \"Your password was a bad password!\";\n\t\t\t\t\t\t\tcomplete = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsr.Close();\n\t\t\t\t}\n\t\t\t\tcatch{\n\t\t\t\t\tHttpContext.Current.Response.Write(\"catching file failed\");\n\t\t\t\t\tthrow;\n\t\t\t\t}\n\n\t\t\t\t//The last step is checking the password length to see if it is 8 characters or bigger\n\t\t\t\tif (password.Length < 8)\n\t\t\t\t{\n\t\t\t\t\terror = \"The password was to short\";\n\t\t\t\t\tcomplete = false;\n\t\t\t\t}\n\n\t\t\t\tif (complete == true)\n\t\t\t\t{\n\t\t\t\t\t//Do further operation\n\t\t\t\t\tHttpContext.Current.Response.Write(\"Good job password was ok!\");\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\n\t\t\t\t\tHttpContext.Current.Response.Write(error);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n", "code_lang": "asp"}, {"id": 18, "title": "Session Cookies (Domain)", "content": "Session cookies (domain)\n\n\n Example:\n\n\n\t/*\n\tSetting the \"Domain\" attribute to a too permissive value, such as \"example.com\" \n\tallows an attacker to launch attacks on the session IDs between different hosts and \n\tweb applications belonging to the same domain, known as crosssubdomain cookies.\n\tFor example, vulnerabilities in www.example.com might allow an attacker to get access \n\tto the session IDs from secure.example.com.\n\t*/\n\t\n\t<system.web>\n\t\t<httpCookies domain=\"demo.mySite.com\" />\n\t</system.web>\n\t\n", "code_lang": "asp"}, {"id": 19, "title": "Enforce sequential step order wizzard", "content": "Enforce sequential step order (Wizzard)\n\n\n Example:\n\t\n\n\t//Example as used in your controller:\n\tbool next = true;\n\n\t//We check for form submit\n\tif (Request.Form[\"submit\"] != null)\n\t{   \n\t\t//If values are empty we return false and destroy session in else\n\t\tif (Request.Form[\"value1\"] == \"\") { next = false; }\n\t\tif (Request.Form[\"value2\"] == \"\") { next = false; }\n\n\t\tif (next == true)\n\t\t{   \n\t\t\t//If all went good the session can be set for step2\n\t\t\tSession[\"stepOrder\"] = \"step2\";\n\t\t}else{\n\t\t   Session[\"stepOrder\"] = \"\";\n\t\t   Session.Abandon();\n\t\t   Response.Redirect(\"/Home/Index\", true);\n\t\t}\n\t}\n\n\t//If the second form was submitted and the session was successfully set to step 2 we proceed\n\tif ((Request.Form[\"submit2\"] != null) && (Session[\"stepOrder\"] == \"step2\"))\n\t{\n\t\tif (Request.Form[\"value3\"] == \"\") { next = false; }\n\n\t\tif (next == true)\n\t\t{\n\t\t\tSession[\"stepOrder\"] = \"final\";\n\t\t}else{\n\t\t\tSession[\"stepOrder\"] = \"\";\n\t\t\tSession.Abandon();\n\t\t\tResponse.Redirect(\"/Home/Index\", true);\n\t\t}\n\t}\n\n\t//Again we check for the new valid session for doing the final operation\n\tif ((Request.Form[\"final\"] != null) && (Session[\"stepOrder\"] == \"final\")) { /* Do final operation! */ }\n\treturn View();\n\n\t/*\n\tIf the user drops his session, he has to start over again, and since we assign different values to the same session\n\twe force the user to follow the sequential order because else he does not get the sessions needed to proceed. \n\t*/\n\n", "code_lang": "asp"}, {"id": 20, "title": "Aggregate User Controls", "content": "Aggregate user controls\n\n\n Example:\n\n   \t\n\t/*\n\tIn order to enforce Aggregate access control protection the best method would be to \n\tdefine your rules by means of a database structure rather than sessions or logs.\n\tThis is due to the fact that if the user drops his session the rating would start\n\tal over again. \n\n\tTABLE users\n\t   \n\t| userID | userName | password | privilegeID |    access    | AggregateControl\t|\n\t  \n\t|   1    | Admin    | Csdar323 |      1      |     TRUE     |\t\t2322\t\t|\n\t   \n\t|   2    | User     | Adf4fsv  |      2      |     FALSE    |\t\t  0\t\t\t|\n\t  \n\t|   3    | Guest    | dff4fKr  |      3      |     TRUE     |\t     125\t\t|\t\n\t\n\n\tTABLE privileges\n\t   \n\t| privilegeID | privilege        | \n\t\n\t|     1       | edit:read:delete |\n\t\n\t|     2       | edit:read        |\n\t\n\t|     3       | read             |\n\t\n\t*/\n\t\t\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.ComponentModel.DataAnnotations.Schema;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Data.SqlClient;\n\n\n\tnamespace MvcApplication1.Models\n\t{\n\t\t[Table(\"users\")]\n\t\tpublic class Aggregate\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\tpublic int userID { get; set; }\n\t\t\tpublic string userName { get; set; }\n\t\t\tpublic string password { get; set; }\n\t\t\tpublic string access { get; set; }\n\t\t\tpublic int aggregate { get; set; }\n\t\t\tpublic int privilege { get; set; }\t\t\n\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = new SqlConnection\n\t\t\t(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\t//The count integer is set every time the user connects to the database to process data\n\t\t\tpublic void aggregateControl(int count)\n\t\t\t{\n\t\t\t\t//First we include the audit log class.\n\t\t\t\tAuditLog Log = new AuditLog();\n\t\t\t\n\t\t\t\tconn.Open();\n\n\t\t\t\tint control = 0;\n\n\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\tLog.SetLog(Session[''userID''], \"Connection to the database was made successfully\", \"SUCCESS\", \"NULL\" \");\n\n\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\tstring query = string.Format(\"SELECT aggregate from users WHERE userID = @userID \");\n\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t{\n\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tcontrol = Convert.ToInt32(oReader[\"aggregate\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tusing (SqlCommand command = conn.CreateCommand())\n\t\t\t\t{\n\t\t\t\t\t//We update the aggregate table in the database in order to \n\t\t\t\t\t//keep track of the number of connections the user made\n\t\t\t\t\tcount += control;\n\t\t\t\t\n\t\t\t\t\tcommand.CommandText = \"UPDATE users SET aggregate = @count WHERE userID = @userID\";\n\t\t\t\t\t//Again we bind the parameters in order to prevent sql injections\n\t\t\t\t\tcommand.Parameters.AddWithValue(\"@count\", count);\n\t\t\t\t\tcommand.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t\tcommand.ExecuteNonQuery();\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\tEach time the user accesses the database we keep track of the number of times he\n\t\t\t\tconnected. Whenever the user passes a reasonable number he should be rejected \n\t\t\t\tsince he could be an attacker scraping your table contents and stealing company information\n\t\t\t\tYou could a CRON job or stored procedure in your system in order to \n\t\t\t\tclean the Aggregate column within certain time frames\n\t\t\t\t*/\n\t\t\t\tHttpContext.Current.Response.Write(control);\n\t\t\t\tif (control > 5000)\n\t\t\t\t{\n\t\t\t\t\tusing (SqlCommand command = conn.CreateCommand())\n\t\t\t\t\t{\n\n\t\t\t\t\t\t//this breach has to be reported into the log files\n\t\t\t\t\t\tLog.SetLog(Session[''userID''], \n\t\t\t\t\t\t\"User account was locked out due to aggregate user control system\", date, FAIL, HIGH\");\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tWhenever te reasonable number of connections the user made was surpassed we destroy all the \n\t\t\t\t\t\tsessions to deny the user any further access to the system\n\t\t\t\t\t\t*\n\t\t\t\t\t\tHttpContext.Current.Session[\"authenticateUser\"] = \"\";\n\t\t\t\t\t\tHttpContext.Current.Session.Abandon();\n\t\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tThan we set his access level on his account to FALSE in order to prevent \n\t\t\t\t\t\thim from logging in again til you did your forensics on the log files\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tstring access = \"FALSE\";\n\t\t\t\t\t\tcommand.CommandText = \"UPDATE users SET access = @access WHERE userID = @userID\";\n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@access\", access);\n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t\t\tcommand.ExecuteNonQuery();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconn.Close();\n\t\t\t}\n\t\t}\n\t}\n    \n\t", "code_lang": "asp"}, {"id": 21, "title": "Password Storage(salting stretching hashing)", "content": "Password storage(salting/stretching/hashing)\n\n\n Example:\n\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Security.Cryptography;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class hashing\n\t\t{\n\t\t\tpublic string createSalt(string password)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tFor generating the random salt we want to use a secure cryptographic function\n\t\t\t\t*/\n\t\t\t\tRNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();\n\n\t\t\t\t//Then we generate a random salt\n\t\t\t\tbyte[] buffer = new byte[128];\n\t\t\t\trng.GetBytes(buffer);\n\n\t\t\t\tRfc2898DeriveBytes hasher = new Rfc2898DeriveBytes(password + \"ALongPepperValue\", buffer, 10000);\n\t\t\t\treturn Convert.ToBase64String(hasher.GetBytes(25));\n\t\t\t}\n\t\t\t\n\t\t\t//The salt in this function is the return value of the createSalt function\n\t\t\tpublic string hashPassword(string Salt, string Password)\n\t\t\t{\n\t\t\t\tRfc2898DeriveBytes Hasher = new Rfc2898DeriveBytes(Password + \"ALongPepperValue\",\n\t\t\t\t\tSystem.Text.Encoding.Default.GetBytes(Salt), 10000);\n\t\t\t\treturn Convert.ToBase64String(Hasher.GetBytes(25));\n\t\t\t}\n\t\t\t\n\t\t\t//With this function we validate the password hash\n\t\t\tpublic bool Validate(string passwordHash, string saltHash, string enteredPassword)\n\t\t\t{\n\t\t\t\tRfc2898DeriveBytes Hasher = new Rfc2898DeriveBytes(enteredPassword + \"ALongPepperValue\",\n\t\t\t\t\t\tSystem.Text.Encoding.Default.GetBytes(saltHash), 10000);\n\t\t\t\treturn Convert.ToBase64String(Hasher.GetBytes(25)) == passwordHash;\n\t\t\t}\n\t\t}\n\t}", "code_lang": "asp"}, {"id": 22, "title": "Identifier Based Authorization", "content": "Identifierbased authorization\n\n\n Example:\n   \n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.ComponentModel.DataAnnotations.Schema;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Data.SqlClient;\n\n\n\tnamespace MvcApplication1.Models\n\t{\n\t\t[Table(\"profile\")]\n\t\tpublic class users\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\tpublic int userID   { get; set; }\n\t\t\tpublic string name  { get; set; }\n\t\t\tpublic string email { get; set; }\n\t\t\tpublic string phone { get; set; }\n\n\t\t\t/*\n\t\t\tFirst we include the audit log class.\n\t\t\tFor more detailed information see the Auditlog code example\n\t\t\t*/\n\t\t\tAuditLog Log = new AuditLog();\n\n\t\t\t/*\n\t\t\tWe then do the same for aggregate user controls.\n\t\t\tFor more detailed information see the Aggregate user control code example\n\t\t\t*/\n\t\t\tAggregate aggregate =  new Aggregate();\n\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = new \n\t\t\tSqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\t//The count integer is set every time the user connects to the database to process data\n\t\t\tpublic void IdentifierBasedAuthentication(int pageID)\n\t\t\t{\n\t\t\t\tconn.Open();\n\t\t\t\tbool doFunction = true;\n\n\t\t\t\t/*\n\t\t\t\tFirst we validate if the incoming value is in fact an integer since we expect a page id number.\n\t\t\t\tIf the incoming value is not a number we lockout the users since he tries to manipulate application operation.\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\t//see the \"input validation\" code example for more detailed information about this function\n\t\t\t\tif (validate.validateInput(pageID, \"numeric\", \"Failed to get file\", \"HIGH\") == false) { doFunction = false; }\n\n\t\t\t\tif (doFunction == false)\n\t\t\t\t{\n\t\t\t\t\t//First we log the fact we detected a tampering in the application operation\n\t\t\t\t\tLog.SetLog(Session[''userID''], \"User tried to manipulate application operation\", date, FAIL, HIGH\");\n\n\t\t\t\t\t/*\n\t\t\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\t\t\tAfter 3 session terminations the user''s account must be blocked. \n\t\t\t\t\tGiven the high threat level, there will be immediate session termination.\n\t\t\t\t\t*/\n\t\t\t\t\tLog.Counter(3);\n\t\t\t\t}\n\n\t\t\t\tif (doFunction == true)\n\t\t\t\t{\n\t\t\t\t\t//the page retrieval has to be reported into the log files\n\t\t\t\t\tLog.SetLog(Session[''userID''], \"Connection to the database was made successfully\", date, SUCCESS, NULL\");\n\n\t\t\t\t\t//We also count the connection to the database.\n\t\t\t\t\taggregate.aggregateControl(1);\n\n\t\t\t\t\t/* \n\t\t\t\t\tWhenever you are checking whether a user is restricted to review certain data,\n\t\t\t\t\tthe access restrictions should be processed server side.\n\t\t\t\t\tThe userID could be stored inside a session variable on login, and should\n\t\t\t\t\tbe used to retrieve user data from the database when requested\n\t\t\t\t\tin order to verify if the user is allowed to look into that data:\n\t\t\t\t\t*/\n\t\t\t\t\tstring query = string.Format(\"SELECT * from profile WHERE userID = @userID \");\n\t\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname  = oReader[\"name\"].ToString();\n\t\t\t\t\t\t\temail = oReader[\"email\"].ToString();\n\t\t\t\t\t\t\tphone = oReader[\"phone\"].ToString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n", "code_lang": "asp"}, {"id": 23, "title": "Charsets", "content": "Charsets\n\n\n Example:\n\n\n\t/*\n    In order to set the \"Charsets\" header you''ll have to add the \n    following code to the head of your application, the following code could be used in your controller \n    for by example, text/html:\n    */\n    \n    Response.AppendHeader(\"ContentType: text/html\", \"charset=utf8\"); \n    \n\t/*\n\tIn your classes you can use the following code:\n\t*/\n\t\n\tHttpContext.Current.Response.AppendHeader(\"ContentType: text/html\", \"charset=utf8\"); \n\t\n\n\t/*\n\tOr directly into your html markup:\n\t*/\n\t\n\t<meta httpequiv=\"ContentType\" content=\"text/html; charset=utf8\">\n\t\n\n\n\t", "code_lang": "asp"}, {"id": 24, "title": "CSRF Tokens", "content": "CSRF tokens\n\n\n Example:\n    \n\t\n    /*\n    For CSRF tokens we used a separate class outside of the normal controller, since\n    it must be reused on several locations throughout the application\n    \n\tFirst after a successful validation of a user login, the application must also start a session\n\twhich contains the \"cross site request forgery\" token.\n    */\n    \n\t/*\n\tFor generating the token we want to use a secure cryptographic function\n\tin order to use RNGCryptoServiceProvider we must first add :\n\tusing System.Security.Cryptography;\n\t*/\n\tRNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();\n\n\t//Then we generate a long value token containing a high entropy\n\tbyte[] buffer = new byte[128];\n\n\trng.GetBytes(buffer);\n\n\t//Then we base64 encode the string\n\tstring csrftoken = System.Convert.ToBase64String(buffer);\n\n\tSystem.Web.HttpContext.Current.Session[\"CSRF\"] = csrftoken; \n\n\t/*\n\tThe next step is implementing this random token in each form field as a hidden input parameter\n\tand send it to a function which checks if the submitted token is equal to the one set after successful validation.\n\t*/\n\n\t<form method=\"post\" action=\"/Home/csrf\">\n    <input type=\"text\" name=\"testValue\" />\n    <input type=\"hidden\" name=\"csrftoken\" value=\"@Session[\"CSRF\"];\" />\n    <input type=\"submit\" value=\"submit the form\" />\n    </form>\n\t\n\t//here we are sending the token towards the function which does the token validation    \n\tpublic void checkCSRF(string token)\n\t{\n\t\tstring Sessiontoken = Convert.ToString(System.Web.HttpContext.Current.Session[\"CSRF\"]);\n\t\n\t\t//We compare the incoming token with the current session Token which was assigned on login\n\t\tif(Sessiontoken != token)\n\t\t{\t\n\t\t\t/*\n\t\t\tIf there was no match the authentication session will be emptied and sessions\n\t\t\tWill be abandoned, we redirect the user towards the login page.\n\t\t\t*/\n\t\t\n\t\t\tHttpContext.Current.Session[\"authenticateUser\"] = \"\";\n\t\t\tHttpContext.Current.Session.Abandon();\n\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);            \n\t\t}           \n\t\n\t}     \n\t\n\n\n\t", "code_lang": "asp"}, {"id": 25, "title": "Login functionality", "content": "Login functionality\n\n\n Example:\n\t\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Data.SqlClient;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Web.SessionState;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class login\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t    [Key]\n\t\t\tpublic int userID { get; set; }\n\t\t\tpublic string username { get; set; }\n\t\t\tpublic string password { get; set; }\n\t\t\tpublic string access { get; set; }\n\t\t\tpublic string salt { get; set; }\n\t\t\tpublic int privilege { get; set; }\n\n\t\t\t//First we include the audit log class.\n\t\t\tauditLogs Log = new auditLogs();\n\n\t\t\t//Second we include the password hash.\n\t\t\thashing hash = new hashing();\n\n\t\t\t//Third we include the random password/token class.\n\t\t\trandomizer CSRF = new randomizer();\n\n\t\t\t//Last we include the random inputvalidation class.\n\t\t\tinputvalidation validate = new inputvalidation();\n\n\t\t\tpublic bool loginUser()\n\t\t\t{\n\t\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\t\tSqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\t\tbool loggedin = false;\n            \tstring passwordHash = \"\";\n            \tstring userId = \"\";\n\t\t\t\tconn.Open();\n\n\t\t\t\t//we also validate the username input, if it was bad we empty the string:\n\t\t\t\tif (validate.validateInput(username, \"alphanumeric\", \"Error in username\", \"LOW\", 0) != true) { username = \"\"; }\n\n\t\t\t\t//Here we select the user from the users table\n\t\t\t\tstring query = string.Format(\"SELECT * from users WHERE username = @name \");\n\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tcmd.Parameters.AddWithValue(\"@name\", username);\n\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t{\n\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tusername = Convert.ToString(oReader[\"username\"]);\n\t\t\t\t\t\tpasswordHash = Convert.ToString(oReader[\"password\"]);\n\t\t\t\t\t\tsalt = Convert.ToString(oReader[\"salt\"]);\n\t\t\t\t\t\tuserId = Convert.ToString(oReader[\"userID\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\tWe validate the password see \"Password storage(salting stretching hashing)\" in the code examples\n\t\t\t\tfor more detailed information:\n\t\t\t\t*/\n\t\t\t\tif (hash.Validate(passwordHash, salt, password) == true)\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\tThis is is to prevent session fixation, after login we create a new cookie which\n\t\t\t\t\twe than use to authenticate. This value can not be fixated since it is set after \n\t\t\t\t\tlogin.\n\t\t\t\t \n\t\t\t\t\tcreate a a new GUID and save into the session:\n\t\t\t\t\t*/\n\n\t\t\t\t\tstring guid = Guid.NewGuid().ToString();\n\t\t\t\t\tHttpContext.Current.Session[\"AuthToken\"] = guid;\n\n\t\t\t\t\t// now create a new cookie with this guid value\n\t\t\t\t\tHttpContext.Current.Response.Cookies.Add(new HttpCookie(\"AuthToken\", guid));\n\n\t\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\t\tLog.SetLog(\"Null\", \"login was OK!\", \"SUCCESS\", \"NULL\");\n\n\t\t\t\t\t/*\n\t\t\t\t\tNow we create a random value for our CSRF tokens. See \"Random password/token generation\" in\n\t\t\t\t\tthe code examples for more detailed information:\n\t\t\t\t\t*/\n\t\t\t\t\tstring CSRftoken = CSRF.generate(25);\n\t\t\t\t\tSystem.Web.HttpContext.Current.Session[\"CSRF\"] = CSRftoken;\n\n\t\t\t\t\t//Set an accessor session.\n\t\t\t\t\tSystem.Web.HttpContext.Current.Session[\"Authenticated\"] = \"access\";\n\n\t\t\t\t\t/*\n\t\t\t\t\tPut id in a session for query identifier based authentication\n\t\t\t\t\tSee \"identifier based authentication\" code example for more information\n\t\t\t\t\t */\n\t\t\t\t\tSystem.Web.HttpContext.Current.Session[\"userID\"] = userId;\n\n\t\t\t\t\tloggedin = true;\n\t\t\t\t}else{\n\t\t\t\t\t//the connection has to be repported into the log files\n\t\t\t\t\tLog.SetLog(\"null\", \"Login failed!\", \"FAIL\", \"NULL\");\n\t\t\t\t\tloggedin = false;\n\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t\t}\n\t\t\t\treturn loggedin;\n\t\t\t}\n\n\t\t\t//In this method we do a check if the sessions are ok\n\t\t\tpublic void checkSession()\n\t\t\t{\n\t\t\t\t//We use this try catch for whenever the cookie is dropped\n\t\t\t\ttry\n\t\t\t\t{   \n\t\t\t\t\t//Check sessions and cookies to see if they match\n\t\t\t\t\tif (!HttpContext.Current.Session[\"AuthToken\"].ToString().Equals(\n\t\t\t\t\t\tHttpContext.Current.Request.Cookies[\"AuthToken\"].Value)\n\t\t\t\t\t\t|| (HttpContext.Current.Session[\"Authenticated\"] != \"access\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (NullReferenceException e){\n\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t{   \n\t\t\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t\t\t\tHttpContext.Current.Session[\"Authenticated\"] = \"\";\n\t\t\t\t\t\tHttpContext.Current.Session.Clear();\n\t\t\t\t\t\tHttpContext.Current.Session.Abandon();\n\t\t\t\t\t\tHttpContext.Current.Session.RemoveAll();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n", "code_lang": "asp"}, {"id": 26, "title": "XML External Entities", "content": "XML External entities\n\n\n Example:\n\n\n\t/*\n\tThe overall prevention method for loading external entities is adding the following line of code:\n\tThis line of code function tells the underlying libxml parsing to not try to interpret the values \n\tof the entities in the incoming XML and leave the entity references intact.\n\t*/\n\n\t/*\n\tIn .NET Framework versions 3.5 and earlier, DTD parsing behavior is controlled by the \n\tBoolean ProhibitDtd property found in the System.Xml.XmlTextReader and System.Xml.XmlReaderSettings\n\tclasses. Set this value to true to disable inline DTDs completely:\n\t*/\n\t\n\tXmlTextReader reader = new XmlTextReader(stream);\n\treader.ProhibitDtd = true;\n\n\t//or\n\n\tXmlReaderSettings settings = new XmlReaderSettings();\n\tsettings.ProhibitDtd = true;\n\tXmlReader reader = XmlReader.Create(stream, settings);\n\n\t/*\n\tThe default value of ProhibitDtd in XmlReaderSettings is true, but the default value \n\tof ProhibitDtd in XmlTextReader is false, which means that you have to explicitly set \n\tit to true to disable inline DTDs (NOT RECOMMENDED).\n\t*/\n\t\n\t/*\n\tIn .NET Framework version 4.0, DTD parsing \n\tbehavior has been changed. The ProhibitDtd property has been deprecated in favor of \n\tthe new DtdProcessing property. You can set this property to Prohibit (the default value) \n\tto cause the runtime to throw an exception if a <!DOCTYPE> element is present in the XML:\n\t\n\tAt this point, we have hardened this code so that it is much less vulnerable to XML bombs, \n\tbut we haven''t yet addressed the dangers posed by malicious external entities. \n\tYou can improve your resilience against these attacks if you customize the behavior \n\tof XmlReader by changing its XmlResolver. XmlResolver objects are used to resolve external \n\treferences, including external entities. XmlTextReader instances, as well as XmlReader \n\tinstances returned from calls to XmlReader.Create, are prepopulated with default \n\tXmlResolvers (actually XmlUrlResolvers). You can prevent XmlReader from resolving \n\texternal entities while still allowing it to resolve inline entities by setting the \n\tXmlResolver property of XmlReaderSettings to null. This is attack surface reduction \n\tat work again; if you don''t need the capability, turn it off:\n\t*/\n\t\n\tXmlReaderSettings settings = new XmlReaderSettings();\n\tsettings.ProhibitDtd = false;\n\tsettings.MaxCharactersFromEntities = 1024;\n\tsettings.XmlResolver = null;\n\tXmlReader reader = XmlReader.Create(stream, settings);\n\n\t/*\n\tAlternatively, you can set the DtdProcessing property to Ignore, which will not throw \n\tan exception on encountering a <!DOCTYPE> element but will simply skip over it and not \n\tprocess it. Finally, you can set DtdProcessing to Parse if you do want to allow and process inline DTDs.\n\t\n\tFor extra detailed information please visit:\n\thttps://msdn.microsoft.com/enus/magazine/ee335713.aspx \n\n\t*/\n\t\n\n\n\n\t", "code_lang": "asp"}, {"id": 27, "title": "Encoding", "content": "Encoding\n\n\n Example:\n\t\n\t\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Text.RegularExpressions;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class encoding\n\t\t{\n\t\t\tpublic string encoder(string input, string allowed)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tWe can specify also special characters which where allowed in order to keep\n\t\t\t\ttrack of any unwanted special characters, even though they will be encoded\n\t\t\t\tviolations of your system must have consequences!\n\t\t\t\t*/\n\t\t\t\tRegex regex = new Regex(\"^[azAZ09\" + allowed + \"]+$\");\n\t\t\t\tMatch match = regex.Match(input);\n\t\t\t\tif (!match.Success)\n\t\t\t\t{\n\t\t\t\t\tLog.SetLog(Session[''userID''], logMessage, date, \"FAIL\", threatLevel);\n\t\t\t\t\tLog.count(1);\n\t\t\t\t\tinput = \"Error\";\n\t\t\t\t}\n\t\t\t\t//We return the userinput encoded\n\t\t\t\treturn HttpUtility.HtmlEncode(input);\n\t\t\t}\n\t\t}\n\t}", "code_lang": "asp"}, {"id": 28, "title": "RFD File Download Injection Prevention", "content": "RFD and file download injections\n\n\n Example:\n\t\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Net;\n\tusing System.Data.SqlClient;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class downloadFiles\n\t\t{\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = new\n\t\t\tSqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"download\"].ConnectionString);\n\n\t\t\tprivate string fileName;\n\t\t\tprivate bool proceed = true;\n\t\t\tprivate string mimeType;\n\n\t\t\tvalidation validate = new validation();\n\t\t\twhitelist whitelist = new whitelist();\n\n\t\t\tpublic void downloadUserFiles(int fileID)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tFor the sake of example we only allow the users to download their own files\n\t\t\t\tby identifier based sql query''s. As you can see we select the filename\n\t\t\t\tby its id. in this case we prevent direct userinput into the disposition header.\n\t\t\t\t*/\n\n\t\t\t\t//Since we only expect an integer back from the user we validate the userinput for integers\n\t\t\t\tif (validate.validateInput(Convert.ToString(fileID), \"numeric\", \"invalid input\", \"HIGH\") == false) { proceed = false; }\n\n\t\t\t\tif (proceed == true)\n\t\t\t\t{\n\t\t\t\t\tconn.Open();\n\t\t\t\t\tstring query = string.Format(\"SELECT * FROM downloads WHERE userID=@userID and fileID=@fileID\");\n\t\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", Session[\"userID\"]);\n\t\t\t\t\tcmd.Parameters.AddWithValue(\"@fileID\", fileID);\n\n\t\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfileName = Convert.ToString(oReader[\"fileName\"]);\n\t\t\t\t\t\t\tmimeType = Convert.ToString(oReader[\"mimeType\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (fileName != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tWe also define the mimetype per download file.\n\t\t\t\t\t\t\tThis is because whenever a user can only download images it is not necessary to set\n\t\t\t\t\t\t\tan uncommon contenttype header for it.\n\t\t\t\t\t\t\tNOTE: These mimetypes should not be stored based upon the mimetype which was send \n\t\t\t\t\t\t\tthe response header when the user uploaded the file. This value can be easily \n\t\t\t\t\t\t\tmanipulated with an intercepting proxy. You should get the mimetype from the file\n\t\t\t\t\t\t\titself after it was stored on the server.\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tSystem.Web.HttpResponse response = System.Web.HttpContext.Current.Response;\n\t\t\t\t\t\t\tresponse.ClearContent();\n\t\t\t\t\t\t\tresponse.Clear();\n\t\t\t\t\t\t\tresponse.ContentType = mimeType;\n\t\t\t\t\t\t\tresponse.AppendHeader(\"CacheControl\", \"nocache\");\n\t\t\t\t\t\t\tresponse.AddHeader(\"ContentDisposition\", \"attachment; filename=\" + fileName + \";\");\n\t\t\t\t\t\t\tresponse.WriteFile(@\"\\\\servername\\folder1\\folder2\\folder3\\\" + fileName + \"\");\n\t\t\t\t\t\t\tresponse.Flush();\n\t\t\t\t\t\t\tresponse.End();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (NullReferenceException e){\n\t\t\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tHttpContext.Current.Response.Write(\"error!\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic void fixedDownloads(string download)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tThe second example is for whenever you are providing users with fixed downloads\n\t\t\t\tsuch as manuals etc. We do not only check if the file just exists, because that would\n\t\t\t\tallow an attacker to also download important other files from your server, so instead\n\t\t\t\twe whitelist them.\n\t\t\t\t*/\n\t\t\t\tif (whitelist.whitelisting(\"file1.txt,file2.txt\", download) != false)\n\t\t\t\t{\n\t\t\t\t\tSystem.Web.HttpResponse response = System.Web.HttpContext.Current.Response;\n\t\t\t\t\tresponse.ClearContent();\n\t\t\t\t\tresponse.Clear();\n\t\t\t\t\tresponse.ContentType = \"text/plain\";\n\t\t\t\t\tresponse.AppendHeader(\"CacheControl\", \"nocache\");\n\t\t\t\t\tresponse.AddHeader(\"ContentDisposition\", \"attachment; filename=\" + download + \";\");\n\t\t\t\t\tresponse.WriteFile(@\"\\\\servername\\folder1\\folder2\\folder3\\\" + download + \"\");\n\t\t\t\t\tresponse.Flush();\n\t\t\t\t\tresponse.End();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "code_lang": "asp"}, {"id": 29, "title": "Single input validation control", "content": "Single input validation control\n\n\n Example:\n\t\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Text.RegularExpressions;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class inputvalidation\n\t\t{\n\n\t\t\tpublic bool validateInput(string input, string type, string logMessage, string threatLevel)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tThan we want to filter the filenames for expected values. For this example we use only az/09\n\t\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           \n\t\t\t\t*/\n\n\t\t\t\tstring validator = \"\";\n\t\t   \n\t\t\t\tswitch (type)\n\t\t\t\t{\n\t\t\t\t\tcase \"alphanumeric\":\n\t\t\t\t\t\tvalidator = \"^[azAZ09]+$\";                  \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"numeric\":\n\t\t\t\t\t\tvalidator = \"^[09]*$\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tRegex regex = new Regex(validator);\n\t\t\t\tbool validate = false;\n\n\t\t\t\tMatch match = regex.Match(input);\n\t\t\t\tif (match.Success)\n\t\t\t\t{\n\t\t\t\t\t//If there was a match this function returns false\n\t\t\t\t\tvalidate = true;\n\n\t\t\t\t\t//this breach has to be reported into the log files\n\t\t\t\t\tLog.SetLog(Session[''userID''], logMessage, date, \"FAIL\", threatLevel);\n\n\t\t\t\t\t/*\n\t\t\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\t\t\tAfter 3 session terminations the user''s account must be blocked.\n\t\t\t\t\tFor detailed information see the \"Audit logs\" in code examples.\n\t\t\t\t\t*/\n\n\t\t\t\t\tLog.count(1);\n\t\t\t\t}else{\n\t\t\t\t\tLog.SetLog(Session[''userID''], logMessage, date(), \"SUCCESS\", \"NULL\");\n\t\t\t\t}\n\t\t\t\treturn validate;\n\t\t\t}\n\t\t}\n\t}\n\n\t//Usage:\n\tif(validate.validateInput(Convert.ToString(employeeID), \"numeric\", \"input validation\", \"HIGH\") == false) \n\t{ \n\t\tcontinueFunction = false; \n\t}\n\t", "code_lang": "asp"}, {"id": 30, "title": "Content Type Headers", "content": "Content type headers\n\n\n Example:\n\n\n    /*\n    In order to set the Contenttype header, you''ll have to add the following \n    code to the head of your application, the following code could be used in your controller:\n    */\n    \n    Response.AppendHeader(\"ContentType:text/html\", \"charset=UTF8\"); \n\n\t/*\n\tIn your classes you can use the following code:\n\t*/\n\t\n\tHttpContext.Current.Response.AppendHeader(\"ContentType:text/html\", \"charset=UTF8\");\n\t\n\n\t\n\n\n\t", "code_lang": "asp"}, {"id": 31, "title": "Sandboxing", "content": "Sandboxing\n\n\n Example:\n    \n\n    <iframe sandbox=\"value\"> \n\t\n\t/*\n\tsandbox=\"\"  Applies all restrictions\n\tallowforms  Reenables form submission\n\tallowpointerlock  Reenables APIs\n\tallowpopups  Reenables popups\n\tallowsameorigin  Allows the iframe content to be treated as being from the same origin\n\tallowscripts  Reenables scripts\n\tallowtopnavigation  Allows the iframe content to navigate its toplevel browsing context\n\t*/\n\n\t", "code_lang": "asp"}, {"id": 32, "title": "HTML Output", "content": "HTML output\n\n\n Example:\n\n\n\t/*\n\tWhenever user input is displayed in the application all user input should be properly escaped \n\tto prevent XSS injections.\n\n\tThe C razor engine encodes userinput by default whenever this is not disabled in the web.config\n\twhen outputted on screen, BUT you should get used to putting your variables in encoding functions\n\tand make this a habit simply \"assuming\" your input will be encoded properly is a jack in the box waiting to\n\tpop out and bite you in the ....as you will find out when you read on\n\t*/\n\n\t/*\n\tThis escaping is used whenever you put the code straight into the html like:\n\t<span>YOUR USERINPUT</span>\n\tThe attack bellow will now be outputted as,\n\t&lt;script&gt;alert(1337);&lt;/script&gt;\n\t*/\n\tViewBag.html = HttpUtility.HtmlEncode(\"<script>alert(1337);</script>\");\n\n\t/*\n\tThis next encoding method is used for whenever you are allowing userinput into \n\thtml attributes.\n\tThe attack below will now be outputted as:\n\tonload=&amp;39;alert(1337)&amp;39;\n\t*/\n\tViewBag.htmlatr = HttpUtility.HtmlAttributeEncode(\"onload=''alert(1337);''\");\n\n\t/*\n\tWhenever parameters are rendered via JavaScript your application will detect normal injections\n\tin the first instant. But your application still remains vulnerable to JavaScript encoding which will not\n\tbe detected by the ASP.NET encoder. You MUST use the JavaScriptStringEncode function, any other \n\tescaping function still leaves your code vulnerable\n\t*/\n\tViewBag.java = HttpUtility.JavaScriptStringEncode(@\"\"\"\\x3Cscript\\x3Ealert(12);\\x3C\\x2Fscript\\x3E\"\"\");\n   \n\t/*\n\tWhenever a user can submit an link/AHREF in your application you must solely depend upon the\n\t\"HttpUtility.UrlEncode\" method since an attacker could otherwise inject the href with an XSS\n\tthat looks like this \"javascript:alert(\"XSS\");\" whenever a victim now clicks the link this XSS\n\twill be executed in his browser.\n\t*/ \n\tViewBag.url = HttpUtility.UrlEncode(\"JavaScript:alert(234);\");\n\n\t/*\n\tSecurity consists of different layers of protection in order to guarantee the integrity\n\tof your application. This means that the value displayed from the database/user should\n\talready be sanitized before being processed in order to prevent XSS.\n\t\n\tAs an example, what do you do when you expect a numeric value from your application?\n\t\n\tEXACTLY you first sanitize the userinput by means of an input validation method like:\n\tSee the \"input validation\" class for the entire example!\n\t*/\n\n\tinputvalidation validate = new inputvalidation();\n\tstring userinput = \"when this string is evil the application will block operation!\";\n\tif(validate.validateInput(userinput, \"numeric\", \"Unexpected userinput\", \"HIGH\", 3)== false)\n\t{ /* Cancel operation of your application */ }\n\n\t/*\n\tIn this example the application cancelled the request by means of simple validation.\n\t*/", "code_lang": "asp"}, {"id": 33, "title": "Timeout a Session", "content": "Timeout a session\n\n\n Example:\n\n\n\t/*\n\tWithin your web.config you can configure your session idle timeout.\n\tThe default time is set to 20 minutes.\n\t*/\n\t\t\n\t<configuration>\n\t   <system.web>\n\t\t  <sessionState mode=\"InProc\"\n\t\t\t\tcookieless=\"true\"\n\t\t\t\ttimeout=\"20\"/> < Here is where we set the timeout by minutes\n\t\t  </sessionState>\n\t   </system.web>\n\t</configuration>", "code_lang": "asp"}, {"id": 34, "title": "Logout", "content": "Logout functionality\n\n\n Example:\n\t\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic class logout\n\t\t{\n\t\t\tpublic void logOut()\n\t\t\t{   \n\t\t\t\t//We clear abandon and remove all sessions before we start\n\t\t\t\tHttpContext.Current.Session.Clear();\n\t\t\t\tHttpContext.Current.Session.Abandon();\n\t\t\t\tHttpContext.Current.Session.RemoveAll();\n\t\t   \n\t\t\t\t//Double check this and empty your session manually\n\t\t\t\tHttpContext.Current.Session[\"Authenticated\"] = \"\";\n\n\t\t\t\t//Clear the aspsessionID\n\t\t\t\tif (HttpContext.Current.Request.Cookies[\"ASP.NET_SessionId\"] != null)\n\t\t\t\t{\n\t\t\t\t\tHttpContext.Current.Response.Cookies[\"ASP.NET_SessionId\"].Value = string.Empty;\n\t\t\t\t\tHttpContext.Current.Response.Cookies[\"ASP.NET_SessionId\"].Expires = DateTime.Now.AddMonths(20);\n\t\t\t\t}\n\n\t\t\t\t//Clear our custom set cookie.\n\t\t\t\tif (HttpContext.Current.Request.Cookies[\"AuthToken\"] != null)\n\t\t\t\t{\n\t\t\t\t\tHttpContext.Current.Response.Cookies[\"AuthToken\"].Value = string.Empty;\n\t\t\t\t\tHttpContext.Current.Response.Cookies[\"AuthToken\"].Expires = DateTime.Now.AddMonths(20);\n\t\t\t\t}\n\t\t\t\tHttpContext.Current.Response.Redirect(\"/login\", true);\n\t\t\t}\n\t\t}\n\t}", "code_lang": "asp"}, {"id": 35, "title": "X Path Query", "content": "Xpath query\n\n\n Example:\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.Diagnostics;\n\tusing System.Xml;\n\tusing System.Xml.XPath;\n\tnamespace MvcApplication1.Controllers\n\t{\n\t\tpublic  class Class1\n\t\t{\n\t\t\tpublic string selectPath(string employeeID)\n\t\t\t{\n\t\t\t    /*\n\t\t\t\tIn order to prevent xpath injections we have to treat these query''s similar as \n\t\t\t\tto the sql query''s. An option would be to use a precompiled XPath query.\n\t\t\t\tBut since this is a third party library I consider it untrustworthy and would\n\t\t\t\trather use our own crafted escaping function.\n\t\t\t \n\t\t\t\tNOTE: if you want to look into the precompiled xpath library you can find more\n\t\t\t\tdetailed information about it on: http://www.tkachenko.com/blog/archives/000385.html\n\t\t\t\t*/\n\n\t\t\t\t/*\n\t\t\t\tAs with every injection prevention we first focus on the expected user values\n\t\t\t\tin this case we expect an integer we use our single input validation method for integers\n\t\t\t\tSee the \"input validation\" code example for more detailed information.\n\t\t\t    */\n\n\t\t\t\tbool continueFunction = true;\n\t\t\t\tstring foo = \"\";\n\n\t\t\t\tinputvalidation validate = new inputvalidation();\n\n\t\t\t\t//Here we put the variable in our inputvalidation method in order to prevent untrustworthy userinput from parsing\n\t\t\t\t//NOTE: logging and countering is also done in your validation method\n\t\t\t\tif (validate.validateInput(Convert.ToString(employeeID), \"numeric\", \"xpath input validation\", \"HIGH\") == false) \n\t\t\t\t{ continueFunction = false; }\n\n\t\t\t\t//Only if our validation function returned true we put the userinput in the function\n\t\t\t\tif (continueFunction == true)\n\t\t\t\t{\n\t\t\t\t\tXmlDocument xmldoc = new XmlDocument();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\txmldoc.Load(@\"C:\\Users\\Public\\xml\\register.xml\");\n\t\t\t\t\t\tfoo = xmldoc.SelectSingleNode(\"/Employees/Employee[ID=\" + employeeID + \"]\").InnerText;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e){\n\t\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(\"Oops something went wrong\");\n\t\t\t\t\t\t\tthrow;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(\"unexpected userinput detected!\");\n\t\t\t\t}\n\t\t\t\t\treturn foo;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* \n\tThe same principle as seen in the example applies for whenever you expect alphanumeric values or even names. \n\tThe only difference is that you take another validation type from the input validation function \n\ti.e whenever you must accept names like O''Reilly you must encode the quotes.See the \"input validation\" code example\n\tfor more detailed information about these escape methods.\n\t*/", "code_lang": "asp"}, {"id": 36, "title": "X XSS Protection Header", "content": "XXSSProtection header\n\n\n Example:\n\n\n    /*\n    In order to set the XXSSProtection header, you''ll have to add the following \n    code to the head of your application, the following code could be used in your controller:\n    */\n    \n    Response.AppendHeader(\"XXSSProtection:1\", \"mode=block\"); \n\n\t/*\n\tIn your classes you can use the following code:\n\t*/\n\t\n\tHttpContext.Current.Response.AppendHeader(\"XXSSProtection:1\", \"mode=block\");\n\t\n\n", "code_lang": "asp"}, {"id": 37, "title": "Disable Directory Listing", "content": "Disable directory listing\n\n\n Example:\n\n\n\t\t<configuration>\n\t\t\t<location path=\"Secured\">\n\t\t\t<system.webServer>\n\t\t\t\t<directoryBrowse enabled=\"false\" />\n\t\t\t</system.webServer>\n\t\t\t</location>\n\t\t</configuration>\n\n\t\tthis example applies to IIS 7+, for IIS 6 you''ll have to do it from IIS Manager\n\n\n\n\n\t\n", "code_lang": "asp"}, {"id": 38, "title": "SQL Query", "content": "SQL query\n\n\n Example:\n\n\n\t/*\n\tIn c MVC there are a lot of different methods in order to process your SQL query''s to \n\tthe database. Most of them are already secure by design and leave little to no room for\n\terror such as SQL to LinQ or doing your database handling by the entity framework.\n\n\tHowever if you want to use the sql command method you must use this functionality by\n\tmeans of prepared statements in order to prevent sql injections.\n\t*/\n\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\tusing System.ComponentModel.DataAnnotations.Schema;\n\tusing System.ComponentModel.DataAnnotations;\n\tusing System.Data.SqlClient;\n\tusing System.Web.SessionState;\n\n\n\tnamespace MvcApplication1.Models\n\t{\n\t\t[Table(\"users\")]\n\t\tpublic class users\n\t\t{\n\t\t\t//Getters and setters for our user method\n\t\t\t[Key]\n\t\t\n\t\t\tpublic int userID      { get; set; }\n\t\t\tpublic string username { get; set; }\n\t\t\tpublic string email    { get; set; }\n\n\t\t\t//First we include the audit log class.\n\t\t\t//AuditLog Log = new AuditLog();\n\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.config\n\t\t\tSqlConnection conn = new \n\t\t\tSqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings[\"users\"].ConnectionString);\n\n\t\t\tpublic void selectStatement()\n\t\t\t{   \n\t\t\t\t//Open the database connection\n\t\t\t\tconn.Open();\n\n\t\t\t\ttry\n\t\t\t\t{   \n\t\t\t\t\tstring query = string.Format(\"SELECT * from users WHERE userId = @userID \");\n\t\t\t\t\tSqlCommand cmd = new SqlCommand(query, conn);\n\n\t\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\t\tcmd.Parameters.AddWithValue(\"@userID\", System.Web.HttpContext.Current.Session[\"userID\"]);\n\n\t\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\t\tusing (SqlDataReader oReader = cmd.ExecuteReader())\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (oReader.Read())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tusername = oReader[\"username\"].ToString();\n\t\t\t\t\t\t\temail    = oReader[\"email\"].ToString();\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//close the connection again\n\t\t\t\t\tconn.Close();\n\t\t\t\t}\n\t\t\t\tcatch(SqlException e){\n\t\t\t\t\tif (e.Source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(\"Invalid select query\");\n\t\t\t\t\t\tthrow;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic void insertStatement()\n\t\t\t{   \n\t\t\t\t//We open the connection towards the database\n\t\t\t\tconn.Open();\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tusing (SqlCommand command = conn.CreateCommand())\n\t\t\t\t\t{ \n\t\t\t\t\t\n\t\t\t\t\t\tcommand.CommandText = \"INSERT INTO users(username,email) VALUES(@param1,@param2)\";  \n\t\t\t\t\t\n\t\t\t\t\t\t//Again we bind the parameters in order to prevent SQL injections\n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@param1\", username);  \n\t\t\t\t\t\tcommand.Parameters.AddWithValue(\"@param2\", email);   \n\n\t\t\t\t\t\tcommand.ExecuteNonQuery(); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch(SqlException e){\n\t\t\t\t\tif(e.Source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.Web.HttpContext.Current.Response.Write(\"SQL insert query error\");\n\t\t\t\t\t\tthrow;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//we close the connection again\n\t\t\t\tconn.Close();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\n\n\t\n", "code_lang": "asp"}, {"id": 39, "title": "Login function", "content": " Login Functionality \n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.io.IOException;\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.util.UUID;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.http.Cookie;\n\timport javax.servlet.http.HttpServlet;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class Login extends HttpServlet{\n\n\t\tfinal static Logger logger = Logger.getLogger(Login.class);\n\t\tprivate String password ;\n\t\tprivate String username;\n\t\tprivate int userID;\n\t\tprivate String salt;\n\t\tprivate String access ;\n\t\tprivate int privilege;\n\n\t\t//First we include the audit log class.\n\t\tAuditlog Log = new Auditlog();\n\t\t\t\n\t\t//Second we include the password hash.\n\t\tHashing hash = new Hashing();\n\n\t\t//Third we include the random password/token class.\n\t\tRandomizer CSRF = new Randomizer();\n\t\t\t\n\t\t//Last we include the random InputValidation class.\n\t\tInputValidation validate = new InputValidation();\n\t\t\t\n\t\t/**\n\t\t* \n\t\t*/\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t@Override\n\t\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n\t\t\tusername = req.getParameter(\"username\");\n\t\t\tthis.checkSession(req, resp);\n\t\t\tString passwordHash = \"\";\n\t\t\tString userId = \"\";\n\n\t\t\t//we also validate the username input, if it was bad we empty the string:\n\t\t\tif (validate.validateInput(username, \"alphanumeric\", \"Error in username\", \"LOW\", \"0\") != true) { username = \"\"; }\n\t\t\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml \n\t\t\tConnection conn = null;\n\t\t\ttry {\n\t\t\t\t\t\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\n\t\t\t\t//Here we select the user from the users table\n\t\t\t\tString query = \"SELECT * from users WHERE username = ?\";\n\t\t\t\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setString(1, username);\n\t\t\t\t\n\t\t\t\t//execute the query, and get a java resultset\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tusername   = rs.getString(\"username\");\n\t\t\t\t\tpasswordHash = rs.getString(\"password\");\n\t\t\t\t\tsalt = rs.getString(\"salt\");\n\t\t\t\t\tuserId = rs.getString(\"userID\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tst.close();\n\t\t\t\tconn.close();\n\t\t\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t}\n\n\t\t\t/*\n\t\t\tWe validate the password see \"Password storage(salting stretching Hashing)\" in the code examples\n\t\t\tfor more detailed information:\n\t\t\t*/\n\t\t\tif (hash.Validate(passwordHash, salt, password) == true)\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\tThis is is to prevent session fixation, after login we create a new cookie which\n\t\t\t\twe then use to authenticate. This value can not be fixated since it is set after \n\t\t\t\tlogin.\n\n\t\t\t\tcreate a new UUID and save into the session:\n\t\t\t\t*/\n\n\t\t\t\tUUID uuid = UUID.randomUUID();\n\t\t\t\tString randomUUIDString = uuid.toString();\n\t\t\t\treq.getSession().setAttribute(\"AuthToken\", randomUUIDString);  \n\t\t\t\t\n\t\t\t\t// now create a new cookie with this UUID value\n\t\t\t\tCookie newCookie = new Cookie(\"AuthToken\", randomUUIDString);        \t \n\t\t\t\tresp.addCookie(newCookie);\n\t\t\t\t\n\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\tLog.SetLog(\"\", \"\", \"login was OK!\", \"SUCCESS\", \"NULL\");\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tNow we create a random value for our CSRF tokens. See \"Random password token generation\" in\n\t\t\t\tthe code examples for more detailed information:\n\t\t\t\t*/\n\t\t\t\tString CSRftoken = CSRF.generate(25);\n\t\t\t\t\n\t\t\t\t//Set an accessor session.\n\t\t\t\treq.getSession().setAttribute(\"CSRF\", CSRftoken);  \n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tPut id in a session for query identifier based authentication\n\t\t\t\tSee \"identifier based authentication\" code example for more information\n\t\t\t\t*/\n\t\t\t\treq.getSession().setAttribute(\"userID\", userId);\n\t\t\t}else{\n\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\tLog.SetLog(\"\", \"null\", \"Login failed!\", \"FAIL\", \"NULL\");\n\t\t\t\n\t\t\t\treq.setAttribute(\"msg\",\"Session terminated!\");\n\t\t\t\treq.getRequestDispatcher(\"/login.jsp\").forward(req, resp);\n\t\t\t\treturn;\n\t\t\t}\t\n\t\t\tsuper.doGet(req, resp);\n\t\t}\n\n\t\t@Override\n\t\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\t\tsuper.doPost(req, resp);\n\t\t}\n\n\t\t//In this method we do a check if the sessions are ok\n\t\tpublic void checkSession(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n\t\t{\n\t\t\tCookie cookie = null;\n\t\t\tCookie[] cookies = null;\n\t\t\t// Get an array of Cookies associated with this domain\n\t\t\tcookies = req.getCookies();\n\t\t\t\n\t\t\tString authtoken = \" \"; \n\t\t\tfor (int i = 0; i < cookies.length; i++){\n\t\t\t\tcookie = cookies[i];\n\t\t\t\t\t\n\t\t\t\tif (cookie.getName().equals(\"AuthToken\"))\n\t\t\t\t{\n\t\t\t\t\tauthtoken = cookie.getName(); \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We use this try catch for whenever the cookie is dropped\n\t\t\t\ttry{\n\t\t\t\t\t//Check sessions and cookies to see if they match\n\t\t\t\t\tif (!req.getSession().getAttribute(\"AuthToken\").equals(authtoken) || req.getSession().getAttribute(\"AuthToken\") != \"access\")\n\t\t\t\t\t{\n\t\t\t\t\t\treq.setAttribute(\"msg\",\"Session terminated!\");\n\t\t\t\t\t\treq.getRequestDispatcher(\"/login.jsp\").forward(req, resp);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}catch (Exception e){\n\t\t\t\t\t\tlogger.error(e.toString());\n\t\t\t\t\t\treq.getSession().removeAttribute(\"Authenticated\");\n\t\t\t\t\t\treq.getSession().invalidate();\n\t\t\t\t\t\treq.getRequestDispatcher(\"/login.jsp\").forward(req, resp);\n\t\t\t\t\t\treturn;       \n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t}\n", "code_lang": "java"}, {"id": 40, "title": "Randomizer function", "content": " Randomizer function\n\n\n Example:\n\n\n    package com.edw;\n\n    import java.security.SecureRandom;\n    import java.util.ArrayList;\n    import java.util.Base64;\n    import java.util.List;\n    import org.apache.log4j.Logger;\n\n    public final class Randomizer {\n        \n        private List<Integer> bytes = new ArrayList<>();\n        private int address = 0;\n        final static Logger logger = Logger.getLogger(Randomizer.class);\n        \n        public String randomize()\n        {\t\t\n            SecureRandom csprng = new SecureRandom();\n            byte[] randomBytes = new byte[128];\n            csprng.nextBytes(randomBytes);\n            String csrftoken = Base64.getEncoder().encodeToString(randomBytes);\n            \n            return csrftoken;\t\t\n        }\n        \n        public String generateToken(int numberOfBytes)\n        {\t\t\n            SecureRandom csprng = new SecureRandom();\n            byte[] randomBytes = new byte[numberOfBytes];\n            csprng.nextBytes(randomBytes);\n            String csrftoken = null;\n            try {\n                csrftoken = this.bin2hex(randomBytes[0]);\n            } catch (Exception e) {\n                logger.error(\"Randomizer error : \" + e.toString());\n            }\n            return csrftoken;\t\t\n        }\n        public String generate(int numberOfBytes)\n        {\t\t\n            SecureRandom csprng = new SecureRandom();\n            byte[] randomBytes = new byte[numberOfBytes];\n            csprng.nextBytes(randomBytes);\n            String csrftoken = Base64.getEncoder().encodeToString(randomBytes);\n            return csrftoken;\t\t\n        }\n        \n        public String secure_password(int numberOfBytes)\n        {\t\t\n            SecureRandom csprng = new SecureRandom();\n            byte[] randomBytes = new byte[numberOfBytes];\n            csprng.nextBytes(randomBytes);\n            String token = randomBytes.toString();\n            return token;\t\t\n        }\n        \n\n        public void setAddress(int address) \n        {\n            this.address = address;\n        }\n\n        public String bin2hex(int byt) throws Exception \n        {\n            if (bytes.size() == 0xFF) \n            {\n                throw new Exception(\"Too many bytes\");        \n            }\n            bytes.add(byt);\n            int sum = 0;\n            StringBuilder sb = new StringBuilder();\n            sb.append('':'');\n            sb.append(toHexString(bytes.size(), 2));\n            sum += bytes.size();\n            sb.append(toHexString(address, 4));\n            sum += (address & 0xFF00) >> 8;\n            sum += address & 0xFF;\n            address += bytes.size();\n            sb.append(\"00\");\n            for (Integer b : bytes) {\n                sum += b;\n                sb.append(toHexString(b, 2));\n            }\n            sb.append(toHexString((~(sum & 0xFF) + 1) & 0xFF, 2));\n            bytes.clear();\n            return sb.toString();\n        }\n\n        private String toHexString(int i, int len) \n        {\n            String hex = Long.toHexString(i).toUpperCase();\n            if (len == 2) \n            {\n                if (hex.length() == 1) \n                {\n                    return \"0\" + hex;\n                }else{\n                    return hex;\n                }\n            }else{\n                if (hex.length() == 1) \n                {\n                    return \"000\" + hex;\n                } else if (hex.length() == 2) \n                {\n                    return \"00\" + hex;\n                } else if (hex.length() == 3) \n                {\n                    return \"0\" + hex;\n                }else{\n                    return hex;\n                }\n            }\n        }\n    }\n\n", "code_lang": "java"}, {"id": 41, "title": "Anti clickjacking", "content": " Anticlickjacking\n\n\n Example:\n\n\n    /*\n    One way to defend against clickjacking is to include a \"framebreaker\" script in each \n    page that should not be framed. The following methodology will prevent a webpage from \n    being framed even in legacy browsers, that do not support the XFrameOptionsHeader.\n\n    In the document HEAD element, add the following:\n\n    First apply an ID to the style element itself:\n    */\n\n    <style id=\"antiClickjack\">body{display:none !important;}</style>\n\n    //And then delete that style by its ID immediately after in the script:\n\n    <script type=\"text/javascript\">\n    if (self === top) {\n        var antiClickjack = document.getElementById(\"antiClickjack\");\n        antiClickjack.parentNode.removeChild(antiClickjack);\n    } else {\n        top.location = self.location;\n    }\n    </script>\n\n\n\n    /*\n    The second option is to use \"security headers\".\n    There are two options for setting the \"anticlickjacking\" headers in your application:\n    */\n\n    //this will completely prevent your page from being displayed in an iframe.\n    response.addHeader(\"XFrameOptions\", \"deny\")\n\n\n    //this will completely prevent your page from being displayed in an iframe on other sites.\n    response.addHeader(\"XFrameOptions\", \"SAMEORIGIN\")\n\n", "code_lang": "java"}, {"id": 42, "title": "XSS Filtering", "content": " XSS filtering\n\n\n Example:\n\n\n\t\tpackage com.edw;\n\n\t\timport org.owasp.esapi.ESAPI;\n\t\timport org.jsoup.Jsoup;\n\t\timport org.jsoup.safety.Whitelist;\n\n\t\tpublic final class XssFilter {\n\n\t\t\t/**\n\t\t\t* Strips any potential XSS threats out of the value\n\t\t\t* @param value\n\t\t\t* @return\n\t\t\t*/\n\t\t\tpublic String filter( String value ) {\n\t\t\t    if( value == null )\n\t\t\t\t\t\t\treturn null;\n\t\t\t\n\t\t\t\t// Use the ESAPI library to avoid encoded attacks.\n\t\t\t\tvalue = ESAPI.encoder().canonicalize( value );\n\t\t\t\n\t\t\t\t// Avoid null characters\n\t\t\t\tvalue = value.replaceAll(\"\\0\", \"\");\n\t\t\t\n\t\t\t\t// Clean out HTML\n\t\t\t\tvalue = Jsoup.clean( value, Whitelist.none() );\n\t\t\t\n\t\t\t\treturn value;\n\t\t\t}\t\n\t\t}\n\n", "code_lang": "java"}, {"id": 43, "title": "XML External Entities", "content": " XML External Entities \n\n\n Example:\n\n    \n    /*\n    The overall prevention method for loading external entities is adding the following line of code:\n    This line of code function tells the underlying libxml parsing to not try to interpret the values \n    of the entities in the incoming XML and leave the entity references intact.\n\n    Both DocumentBuilderFactory and SAXParserFactory XML Parsers can be configured using the same techniques to protect them against XXE.The JAXP DocumentBuilderFactory setFeature method allows a developer to control which implementationspecific XML processor features are enabled or disabled. The features can either be set on the factory or the underlying XMLReader setFeature method. Each XML processor implementation has its own features that govern how DTDs and external entities are processed.\n    */\n\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    String FEATURE = null;\n\n    //or\n\n    SAXParserFactory spf = SAXParserFactory.newInstance();\n    SAXParser saxParser = spf.newSAXParser();\n    XMLReader reader = saxParser.getXMLReader();\n      \n    \n\n    //  DocumentBuilderFactory\n    import javax.xml.parsers.DocumentBuilderFactory;\n    import javax.xml.parsers.ParserConfigurationException; // catching unsupported features\n\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        String FEATURE = null;\n        try {\n            // This is the PRIMARY defense. If DTDs (doctypes) are disallowed, almost all XML entity attacks are prevented\n            // Xerces 2 only  http://xerces.apache.org/xerces2j/features.htmldisallowdoctypedecl\n            FEATURE = \"http://apache.org/xml/features/disallowdoctypedecl\";\n            dbf.setFeature(FEATURE, true);\n\n            // If you can''t completely disable DTDs, then at least do the following:\n            // Xerces 1  http://xerces.apache.org/xercesj/features.htmlexternalgeneralentities\n            // Xerces 2  http://xerces.apache.org/xerces2j/features.htmlexternalgeneralentities\n            // JDK7+  http://xml.org/sax/features/externalgeneralentities    \n            FEATURE = \"http://xml.org/sax/features/externalgeneralentities\";\n            dbf.setFeature(FEATURE, false);\n\n            // Xerces 1  http://xerces.apache.org/xercesj/features.htmlexternalparameterentities\n            // Xerces 2  http://xerces.apache.org/xerces2j/features.htmlexternalparameterentities\n            // JDK7+  http://xml.org/sax/features/externalparameterentities    \n            FEATURE = \"http://xml.org/sax/features/externalparameterentities\";\n            dbf.setFeature(FEATURE, false);\n\n            // Disable external DTDs as well\n            FEATURE = \"http://apache.org/xml/features/nonvalidating/loadexternaldtd\";\n            dbf.setFeature(FEATURE, false);\n\n            // and these as well, per Timothy Morgan''s 2014 paper: \"XML Schema, DTD, and Entity Attacks\" (see reference below)\n            dbf.setXIncludeAware(false);\n            dbf.setExpandEntityReferences(false);\n    \n            // And, per Timothy Morgan: \"If for some reason support for inline DOCTYPEs are a requirement, then \n            // ensure the entity settings are disabled (as shown above) and beware that SSRF attacks\n            // (http://cwe.mitre.org/data/definitions/918.html) and denial \n            // of service attacks (such as billion laughs or decompression bombs via \"jar:\") are a risk.\"\n\n            // remaining parser logic\n            ...\n    \n            } catch (ParserConfigurationException e) {\n                // This should catch a failed setFeature feature\n                logger.info(\"ParserConfigurationException was thrown. The feature ''\" +\n                            FEATURE +\n                            \"'' is probably not supported by your XML processor.\");\n                ...\n            }\n            catch (SAXException e) {\n                // On Apache, this should be thrown when disallowing DOCTYPE\n                logger.warning(\"A DOCTYPE was passed into the XML document\");\n                ...\n            }\n            catch (IOException e) {\n                // XXE that points to a file that doesn''t exist\n                logger.error(\"IOException occurred, XXE may still possible: \" + e.getMessage());\n                ...\n            }\n        \n        \n        \n    \n        \n    // SAXParserFactory\n        \n    import javax.xml.parsers.ParserConfigurationException;  // catching unsupported features\n    import javax.xml.parsers.SAXParser;\n    import javax.xml.parsers.SAXParserFactory;\n    \n    import org.xml.sax.SAXNotRecognizedException;  // catching unknown features\n    import org.xml.sax.SAXNotSupportedException;  // catching known but unsupported features\n    import org.xml.sax.XMLReader;\n    \n    ...\n    \n        SAXParserFactory spf = SAXParserFactory.newInstance();\n        SAXParser saxParser = spf.newSAXParser();\n        XMLReader reader = saxParser.getXMLReader();\n    \n        try {\n            // Xerces 1  http://xerces.apache.org/xercesj/features.htmlexternalgeneralentities\n            // Xerces 2  http://xerces.apache.org/xerces2j/features.htmlexternalgeneralentities\n    \n            // Using the SAXParserFactory''s setFeature\n            spf.setFeature(\"http://xml.org/sax/features/externalgeneralentities\", false);\n            // Using the XMLReader''s setFeature\n            reader.setFeature(\"http://xml.org/sax/features/externalgeneralentities\", false);\n    \n            // Xerces 2 only  http://xerces.apache.org/xercesj/features.htmlexternalgeneralentities\n            spf.setFeature(\"http://apache.org/xml/features/disallowdoctypedecl\", true);\n    \n            // remaining parser logic\n          ...\n    \n        } catch (ParserConfigurationException e) {\n          // Tried an unsupported feature.\n    \n        } catch (SAXNotRecognizedException e) {\n          // Tried an unknown feature.\n    \n        } catch (SAXNotSupportedException e) {\n          // Tried a feature known to the parser but unsupported.\n    \n        } catch ... {\n          \n        }\n    ...\n", "code_lang": "java"}, {"id": 44, "title": "Aggregate user contol", "content": " Aggregate User Control \n\n\n Example:\n\n\n\t/*\n\tIn order to enforce Aggregate access control protection the best method would be to \n\tdefine your rules by means of a database structure rather than sessions or logs.\n\n\tVerify the system can protect against aggregate or continuous access of secured functions, \n\tresources, or data. For example, consider the use of a resource governor to limit the number \n\tof edits per hour or to prevent the entire database from being scraped by an individual user.\n\n\tTABLE users\n\t   \n\t| userID | userName | password | privilegeID |    access    |     aggregate\t    |\n\t  \n\t|   1    | Admin    | Csdar323 |      1      |     TRUE     |       2322        |\n\t   \n\t|   2    | User     | Adf4fsv  |      2      |     FALSE    |         0         |\n\t  \n\t|   3    | Guest    | dff4fKr  |      3      |     TRUE     |        125        |   \n\t\n\n\tTABLE privileges\n\t   \n\t| privilegeID | privilege        | \n\t\n\t|     1       | edit:read:delete |\n\t\n\t|     2       | edit:read        |\n\t\n\t|     3       | read             |\n\t\n\n\tThe following code snippets can be used in relation with this class in order to have a full implemented example \n\t*/\n\n\t// HTML/JSP page index.jsp\n\n\t<%@page contentType=\"text/html\" pageEncoding=\"UTF8\"%>\n\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<meta httpequiv=\"ContentType\" content=\"text/html; charset=UTF8\">\n\t\t\t<title>Insert Value</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<form method=\"post\" action=\"aggregateControl\">\n\t\t\t<table>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Name  : </td>\n\t\t\t\t\t<td><input type=\"text\" id=\"name\" name=\"name\" /></td>\n\t\t\t\t</tr>  \n\t\t\t\t<tr>\n\t\t\t\t\t<td>Surname : </td>\n\t\t\t\t\t<td><input type=\"text\" id=\"surname\" name=\"surname\" /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Password : </td>\n\t\t\t\t\t<td><input type=\"text\" id=\"password\" name=\"password\" /></td>\n\t\t\t\t</tr>               \n\t\t\t\t<tr>\n\t\t\t\t\t<td><input type=\"hidden\" id=\"userID\" value=\"2\" name=\"userID\" /></td>\n\t\t\t\t</tr>         \n\t\t\t\t<tr>\n\t\t\t\t\t<td colspan=\"2\"><input type=\"submit\" /></td>               \n\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</form>     \n\t\t</body>\n\t</html>\n\n\n\t// Servlet \n\n\t//The following code snippet can be used in relation with the following servlet snippet\n\n\n\tpublic final class AggregateControl extends HttpServlet{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tpublic aggregateControl() {\n\t\t\tsuper();\n\t\t}\n\t\t\n\t\tfinal static Logger logger = Logger.getLogger(AggregateControl.class);\n\t\tprivate String userName;\n\t\tprivate String password;\n\t\tprivate String userID;\n\n\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException \n\t\t{\t\n\t\t\tuserName = request.getParameter(\"name\");\n\t\t\tuserID = request.getParameter(\"userID\");\n\t\t\tAggregate ag = new Aggregate();\n\t\t\tag.setUserName(userName);\n\t\t\tag.setUserID(userID);\n\t\t\tboolean invalidate_sessions = ag.aggregateControl(0);\n\t\t\t\n\t\t\tif (invalidate_sessions == true)\n\t\t\t{\n\t\t\t\trequest.getSession().invalidate();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tdoGet(request, response);\n\t\t}\n\n\t/*\t\t\n\tOutput logs indicating that user has been logged out after many database connections  \n\n\t[ .... ] \n\n\t20161124 11:17:55 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:19:20.803\n\t20161124 11:18:07 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:36:09.763\n\t20161124 11:18:15 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:36:52.443\n\t20161124 11:18:23 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:37:28.358\n\t20161124 11:18:32 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:38:03.250\n\t20161124 11:18:39 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:38:36.413\n\t20161124 11:18:49 INFO  Aggregate:240   User account was locked out due to aggregate user control system  User: ddd  Userid ID:  2\n\t20161124 11:18:49 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2\n\n\t[ ..... ]\n\n\tThe following example gives another implementation of Aggregate class\n\t*/\n\n\tpackage com.edw;\n\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpackage prime.com.beans;\n\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.time.LocalDateTime;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class Aggregate {\n\n\t\tprivate String userName;\n\t\tprivate String password;\n\t\tprivate String userID;\n\t\tprivate int control = 0;\t\t\n\t\t\n\t\tfinal static Logger logger = Logger.getLogger(Aggregate.class);\n\n\t\tpublic boolean aggregateControl(int count, String userName, String userID)\n\t\t{\t\t\n\t\t\tboolean invalidate_sessions = false; \n\t\t\t\t\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n\t\t\tConnection conn = null;\n\t\t\ttry {\n\t\t\t\t\t\t\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\n\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\tString query = \"SELECT aggregate from users WHERE userID = ?\";\n\t\t\t\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setString(1, userID);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tcontrol  = rs.getInt(\"aggregate\");\n\t\t\t\t\tuserName  = rs.getString(\"userName\");\n\t\t\t\t}\n\n\t\t\t\t//We update the aggregate table in the database in order to \n\t\t\t\t//keep track of the number of connections the user made\n\t\t\t\tcount = control + 1;\n\t\t\t\t\n\t\t\t\t// create the java mysql update prepared statement\n\t\t\t\tString query2 = \"UPDATE users SET aggregate = ? WHERE userID = ?\";\n\t\t\t\tPreparedStatement preparedStmt2 = conn.prepareStatement(query2);\n\t\t\t\tpreparedStmt2.setInt(1, count);\n\t\t\t\tpreparedStmt2.setString(2, userID);\n\n\t\t\t\t// execute the java prepared statement\n\t\t\t\tpreparedStmt2.executeUpdate();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tEvery time the user accesses the database we keep track of the number of times he\n\t\t\t\tconnected. Whenever the user passes a reasonable number he should be rejected \n\t\t\t\tsince he could be an attacker scraping your table contents and stealing company information\n\t\t\t\tYou could a CRON job or stored procedure in your system in order to \n\t\t\t\tclean the Aggregate column within certain time frames\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\tif ( control > 5000)\n\t\t\t\t{\t\t\n\t\t\t\t\t//this breach has to be reported into the log files\n\t\t\t\t\tlogger.info( \" User account was locked out due to aggregate user control system\" + \"  User: \" + userName + \"  User ID:  \" +  userID + \"Time: \" + LocalDateTime.now());\n\n\t\t\t\t\t/*\n\t\t\t\t\tWhenever the reasonable number of connections the user made was surpassed we destroy all the \n\t\t\t\t\tsessions to deny the user any further access to the system. This session invalidation is controlled from the SERVLET \n\t\t\t\t\t\n\t\t\t\t\t*/\n\t\t\t\t\tinvalidate_sessions = true; \n\t\t\t\t\t\n\t\t\t\t\t/*\n\t\t\t\t\tThan we set his access level on his account to FALSE in order to prevent \n\t\t\t\t\thim from logging in again till you did your Forensics on the log files\n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\t// create the java MySql update prepared statement\n\t\t\n\t\t\t\t\tint access = 0; //0 is considered as FALSE in MySQL\n\t\t\t\t\tString query3 = \"UPDATE users SET access = ? WHERE userID = ?\";\n\t\t\t\t\tPreparedStatement preparedStmt3 = conn.prepareStatement(query3);\n\t\t\t\t\tpreparedStmt3.setInt(1, access);\n\t\t\t\t\tpreparedStmt3.setString(2, userID);\n\n\t\t\t\t\t// execute the java prepared statement\n\t\t\t\t\tpreparedStmt3.executeUpdate();\n\t\t\t\t\tpreparedStmt3.close();\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tst.close();\n\t\t\t\tpreparedStmt2.close();\n\t\t\t\tconn.close();\n\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\t\tlogger.error(\"cannot update database. check query\" + e.toString() );\n\t\t\t}\t      \n\t\t\t\t\n\t\t\t//the connection has to be reported into the log files\n\t\t\tif(logger.isInfoEnabled()){\n\t\t\t\tlogger.info(\"Connection to the database was made successfully \" + \"  User: \" + userName + \"  User ID:  \" +  userID + \"Time: \" + LocalDateTime.now() );\n\t\t\t}else{\n\t\t\t\tlogger.error(\"Couldnt connect to database  \" +  \"  User: \" + userName + \"  User ID:  \" +  userID + \"Time: \" + LocalDateTime.now());\n\t\t\t}\n\t\t\t\n\t\treturn invalidate_sessions;\n\t\t}\n\n\t\tpublic String getUserName() {\n\t\t\treturn userName;\n\t\t}\n\n\t\tpublic void setUserName(String userName) {\n\t\t\tthis.userName = userName;\n\t\t}\n\n\t\tpublic String getPassword() {\n\t\t\treturn password;\n\t\t}\n\n\t\tpublic void setPassword(String password) {\n\t\t\tthis.password = password;\n\t\t}\n\n\t\tpublic String getUserID() {\n\t\t\treturn userID;\n\t\t}\n\n\t\tpublic void setUserID(String userID) {\n\t\t\tthis.userID = userID;\n\t\t}\n\t}\n    \t", "code_lang": "java"}, {"id": 45, "title": "Single input validation control", "content": " Single input validation control \n\n\n Example:\n\n\n\timport java.time.LocalDateTime;\n\timport java.util.regex.Matcher;\n\timport java.util.regex.Pattern;\n\n\tpublic final class InputValidation {\n\t\t\n\t\tprivate AuditLog Log = new AuditLog(); \n\t\tprivate String validate = \"pass\"; \n\t\t\n\t\tpublic String validateInput(String user_id,String input, String type, String logMessage, String remote_address, String threatLevel)\n\t\t{\n\t\t\t/*\n\t\t\twe want to filter the filenames for expected values. For this example we use only az/09\n\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           \n\t\t\t*/\n\t\t\tString validator = \"\";\n\t\t\tif(type.equals(\"symbols\"))\n\t\t\t{\n\t\t\t\t//Characters that may be used to interfere with the XPath query should be blocked, including ( ) = \u2018 [ ] : , * / and all whitespace. \n\t\t\t\t// Any input that does not match the white list should be rejected, not sanitized.\n\t\t\t\t\n\t\t\t\tvalidator = \"(.*)(\\\\W+)(\\\\D+)(\\\\s+)(.*)\";\n\t\t\t}\n\t\t\telse if (type.equals(\"alphanumeric\"))\t\t \n\t\t\t\t\tvalidator = \"^[azAZ09]\";\n\t\t\telse if (type.equals(\"numeric\"))\n\t\t\t\t//\"^[09]*$\";\n\t\t\t\tvalidator = \"(\\\\d+)\";\n\t\t\telse\n\t\t\t\tvalidator = \"\";\n\n\t\t\t// Create a Pattern object\n\t\t\tPattern reg = Pattern.compile(validator);\n\t\t\t// Now create matcher object.\n\t\t\tMatcher match = reg.matcher(input);\n\t\t\tif (!match.find()) \n\t\t\t{\t\n\t\t\t\t//If there was a match this function returns \"pass\"\n\t\t\t\tvalidate = \"validation failed\"; \n\t\t\t\n\t\t\t\t//this breach has to be reported into the log files\n\t\t\t\tLog.SetLog(user_id, logMessage , \"FAIL\", LocalDateTime.now(), remote_address, rLevel);\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\t\tAfter 3 hits the user''s account must be blocked.\n\t\t\t\tFor detailed information see the \"Audit logs\" in code examples.\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\tString result = Log.counter(1,Integer.parseInt(user_id));\n\t\t\t\t\n\t\t\t\tif (result.equals(\"SQL insert query error in update access\" ))\n\t\t\t\t{\n\t\t\t\t\tLog.SetLog(user_id, logMessage , \"SQL insert query error in update access\", LocalDateTime.now(),remote_address,  \"\");\n\t\t\t\t}\n\t\t\t\tif (result.equals(\"block\"))\n\t\t\t\t{\n\t\t\t\t\tLog.SetLog(user_id, logMessage , \"block\", LocalDateTime.now(), remote_address,  \"HIGH\");\n\t\t\t\t\tvalidate = \"block\";\n\t\t\t\t}\n\t\t\t\tif (result.equals(\"terminate\"))\n\t\t\t\t{\n\t\t\t\t\tLog.SetLog(user_id, logMessage , \"terminate\", LocalDateTime.now(), remote_address,  \"HIGH\");\n\t\t\t\t\tvalidate = \"terminate\";\n\t\t\t\t}\n\t\t\t\telse if (validate.equals(\"validation failed\"))\n\t\t\t\t{\n\t\t\t\t\tLog.SetLog(user_id, logMessage , \"validation failed\", LocalDateTime.now(), remote_address,  \"HIGH\");\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn validate;\n\t\t}\t \n\t\t\n\t\tpublic boolean validateInput(String username, String input, String type, String logMessage, String threatLevel)\n\t\t{\n\t\t\t/*\n\t\t\twe want to filter the filenames for expected values. For this example we use only az/09\n\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           \n\t\t\t*/\n\t\t\tString validator = \"\";\n\t\t\t\n\t\t\tif(type.equals(\"symbols\"))\n\t\t\t{\n\t\t\t\t//Characters that may be used to interfere with the XPath query should be blocked, including ( ) = \u2018 [ ] : , * / and all whitespace. \n\t\t\t\t// Any input that does not match the white list should be rejected, not sanitized.\n\t\t\t\t//validator = \"^()=''\\\\[\\\\]:,\\\\*/ $\";\n\t\t\t\tvalidator = \"(.*)(\\\\W+)(\\\\D+)(\\\\s+)(.*)\";\n\t\t\t\t\n\t\t\t}\n\t\t\telse if (type.equals(\"alphanumeric\"))\t\t  \n\t\t\tvalidator = \"^[azAZ09]\";\n\t\t\telse if (type.equals(\"numeric\"))\n\t\t\t\t//\"^[09]*$\";\n\t\t\t\tvalidator = \"(\\\\d+)\";\n\t\t\telse\n\t\t\t\tvalidator = \"\";\n\n\t\t\t// Create a Pattern object\n\t\t\tPattern reg = Pattern.compile(validator);\n\t\t\tboolean validate = false ; \n\t\t\t// Now create matcher object.\n\t\t\tMatcher match = reg.matcher(input);\n\t\t\tif (!match.find()) \n\t\t\t{\t\n\t\t\t\t//If there was a match this function returns false\n\t\t\t\tvalidate = true; \n\t\t\t\n\t\t\t\t//this breach has to be reported into the log files\n\t\t\t\tLog.SetLog(username, logMessage , \"SUCCESS\", LocalDateTime.now(),  threatLevel);   \n\t\t\t}else{\n\t\t\t\t\tLog.SetLog(username, logMessage , \"FAIL\", LocalDateTime.now(), \"NULL\");\n\t\t\t}        \n\t\t\treturn validate;\n\t\t}\t \n\t}\n\n", "code_lang": "java"}, {"id": 46, "title": "X Path query", "content": " XPathQuery\n\n\n Example:\n\n\n\tpackage prime.com.beans;\n\n\timport java.io.File;\n\timport java.io.FileInputStream;\n\timport java.io.IOException;\n\timport java.io.Serializable;\n\timport java.time.LocalDateTime;\n\timport java.util.UUID;\n\n\timport javax.faces.application.FacesMessage;\n\timport javax.faces.bean.ManagedBean;\n\timport javax.faces.bean.SessionScoped;\n\timport javax.faces.context.FacesContext;\n\timport javax.faces.event.ActionEvent;\n\timport javax.servlet.http.Cookie;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\timport javax.xml.parsers.DocumentBuilder;\n\timport javax.xml.parsers.DocumentBuilderFactory;\n\timport javax.xml.xpath.XPath;\n\timport javax.xml.xpath.XPathConstants;\n\timport javax.xml.xpath.XPathExpression;\n\timport javax.xml.xpath.XPathFactory;\n\n\timport org.apache.log4j.Logger;\n\timport org.primefaces.context.RequestContext;\n\timport org.w3c.dom.Document;\n\timport org.xml.sax.InputSource;\n\n\timport com.Lib.AuditLog;\n\timport com.Lib.Hashing;\n\timport com.Lib.InputValidation; \n\n\t@ManagedBean\n\t@SessionScoped\n\tpublic class Xpath  implements Serializable {\n\t\t\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t//First we include the audit log class.\n\t\tAuditLog Log = new AuditLog();\n\t\t\t\n\t\t//Second we include the password hash.\n\t\tHashing hash = new Hashing();\n\t\t\n\t\tfinal static Logger logger = Logger.getLogger(Xpath.class);\n\t\tpublic static String AUTH_KEY = \"User: \";\n\t\tprivate String employeeID;\n\t\tprivate String employeeRole;\n\t\tprivate String username;\n\t\tprivate String password; \n\t\tprivate String userID_result;\n\t\tprivate String userID;\n\n\t\tpublic String getUserID_result() {\n\t\t\treturn userID_result;\n\t\t}\n\n\t\tpublic void setUserID_result(String userID_result) {\n\t\t\tthis.userID_result = userID_result;\n\t\t}\n\n\t\tpublic String getUserID() {\n\t\t\treturn userID;\n\t\t}\n\n\t\tpublic void setUserID(String userID) {\n\t\t\tthis.userID = userID;\n\t\t}\n\n\t\tpublic String getUsername() {\n\t\t\treturn username;\n\t\t}\n\n\t\tpublic void setUsername(String username) {\n\t\t\tthis.username = username;\n\t\t}\n\n\t\tpublic String getPassword() {\n\t\t\treturn password;\n\t\t}\n\n\t\tpublic void setPassword(String password) {\n\t\t\tthis.password = password;\n\t\t}\n\n\t\tpublic String getEmployeeRole() {\n\t\t\treturn employeeRole;\n\t\t}\n\n\t\tpublic void setEmployeeRole(String employeeRole) {\n\t\t\tthis.employeeRole = employeeRole;\n\t\t}\n\n\t\tpublic String getEmployeeID() {\n\t\t\treturn employeeID;\n\t\t}\n\t\n\t\tpublic void setEmployeeID(String employeeID) {\n\t\t\tthis.employeeID = employeeID;\n\t\t}\n\t\t\n\t\tpublic void loginAction(String userId){\n\t\t\t\t\n\t\t\t//we include the random input validation class.\n\t\t\tHttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();\n\t\t\tHttpServletResponse origResponse = (HttpServletResponse)FacesContext.getCurrentInstance().getExternalContext().getResponse();\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(AUTH_KEY, username);\n\t\t\t\n\t\t\tString uname = this.getUsername(); \n\t\n\t\t\t/*\n\t\t\tThis is is to prevent session fixation, after login we create a new cookie which\n\t\t\twe then use to authenticate. This value can not be fixated since it is set after \n\t\t\tlogin.\n\n\t\t\tcreate a new UUID and save into the session:\n\t\t\t*/\n\t\t\tUUID uuid = UUID.randomUUID();\n\t\t\tString randomUUIDString = uuid.toString();\n\t\t\t//initiate a session\n\t\t\torigRequest.getSession(true);\n\t\t\torigRequest.getSession().setAttribute(\"AuthToken\", randomUUIDString);     \t\n\t\t\t// now create a new cookie with this UUID value\n\t\t\tCookie newCookie = new Cookie(\"AuthToken\", randomUUIDString);   \n\t\t\t\n\t\t\torigResponse.addCookie(newCookie);\n\t\t\t\n\t\t\t//the connection has to be reported into the log files\n\t\t\tLog.SetLog(\"\", \"\", \"login was OK!\", null, \"SUCCESS\", \"NULL\");    \n\t\t\t\t\n\t\t\t/*\n\t\t\tPut id in a session for query identifier based authentication\n\t\t\tSee \"identifier based authentication\" code example for more information\n\t\t\t*/\n\n\t\t\torigRequest.getSession().setAttribute(\"userID\", userId);\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(AUTH_KEY, uname);\n\t\t}\n\t\t\n\t\t//the following function used to check if the user exists \n\t\tpublic String checkuser(File fXmlFile,String usrname){\n\t\t\t\n\t\t\tString type_result = null;\n\t\t\t\t\t\t\t\n\t\t\t\ttry { \n\t\t\t\t\t//The evaluate methods in the XPath and XPathExpression interfaces \n\t\t\t\t\t//are used to parse an XML document with XPath expressions.\t\t\t\t\t\n\t\t\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\t\t\t//Create an InputSource for the example XML document.\n\t\t\t\t\t//An InputSource is a input class for an XML entity.\t        \t    \n\t\t\t\t\tDocument document = builder.parse(new InputSource(new FileInputStream(fXmlFile)));\n\t\t\t\t\t//The XPathFactory class is used to create an XPath object.\n\t\t\t\t\t//Create an XPathFactory object with the static newInstance method of the XPathFactory class.\n\t\t\t\t\tXPathFactory xPathfactory = XPathFactory.newInstance();\n\t\t\t\t\t//Create an XPath object from the XPathFactory object with the newXPath method.  \n\t\t\t\t\tXPath xpath = xPathfactory.newXPath();\n\t\t\t\t\t//Create and compile an XPath expression with the compile method of the XPath object. \n\t\t\t\t\t//As an example, select the user ID attribute.\n\t\t\t\t\t//An attribute in an XPath expression is specified with an @ symbol. \n\t\t\t\t\t//For further reference on XPath expressions, \n\t\t\t\t\t//see the XPath specification for examples on creating an XPath expression.\n\t\t\t\t\t\n\t\t\t\t\t//The evaluate method of the XPathExpression interface evaluates\n\t\t\t\t\t//either an InputSource or a node/node list of the types org.w3c.dom.\n\t\t\t\t\t//Node, org.w3c.dom.NodeList, or org.w3c.dom.Document.\n\t\t\t\t\t//Evaluate the XPath expression with the InputSource of the example XML document to evaluate over.\n\t\n\t\t\t\t\tString type= \"/Employees/Employee[UserName=''\" + usrname + \"'']/Type\";\n\t\t\t\t\tXPathExpression salt_expr = xpath.compile(type);\t              \t    \n\t\t\t\t\ttype_result = salt_expr.evaluate(document, XPathConstants.STRING).toString();  \n\t\t\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlogger.error(\" General error in executing xpath query :\" + e.toString()); \n\t\t\t\t\t}  \t\t\n\t\t\t\treturn type_result;\t\n\t\t}\n\t\t\n\t\tpublic String xpathconnect(File fXmlFile,String usrname){\n\t\t\t\n\t\t\tString login_result = null;\n\t\t\t\t\t\t\t\n\t\t\t\ttry { \n\t\t\t\t\t//The evaluate methods in the XPath and XPathExpression interfaces \n\t\t\t\t\t//are used to parse an XML document with XPath expressions.\t\t\t\t\t\n\t\t\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\t\t\t//Create an InputSource for the example XML document.\n\t\t\t\t\t//An InputSource is a input class for an XML entity.\t        \t    \n\t\t\t\t\tDocument document = builder.parse(new InputSource(new FileInputStream(fXmlFile)));\n\t\t\t\t\t//The XPathFactory class is used to create an XPath object.\n\t\t\t\t\t//Create an XPathFactory object with the static newInstance method of the XPathFactory class.\n\t\t\t\t\tXPathFactory xPathfactory = XPathFactory.newInstance();\n\t\t\t\t\t//Create an XPath object from the XPathFactory object with the newXPath method.  \n\t\t\t\t\tXPath xpath = xPathfactory.newXPath();\n\t\t\t\t\t//Create and compile an XPath expression with the compile method of the XPath object. \n\t\t\t\t\t//As an example, select the user ID attribute.\n\t\t\t\t\t//An attribute in an XPath expression is specified with an @ symbol. \n\t\t\t\t\t//For further reference on XPath expressions, \n\t\t\t\t\t//see the XPath specification for examples on creating an XPath expression.\n\t\t\t\t\t\n\t\t\t\t\t//The evaluate method of the XPathExpression interface evaluates\n\t\t\t\t\t//either an InputSource or a node/node list of the types org.w3c.dom.\n\t\t\t\t\t//Node, org.w3c.dom.NodeList, or org.w3c.dom.Document.\n\t\t\t\t\t//Evaluate the XPath expression with the InputSource of the example XML document to evaluate over.\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tString salt= \"/Employees/Employee[UserName=''\" + usrname + \"'']/salt\";\n\t\t\t\t\tXPathExpression salt_expr = xpath.compile(salt);\t              \t    \n\t\t\t\t\tString Salt_result = salt_expr.evaluate(document, XPathConstants.STRING).toString();         \t \n\t\t\t\t\n\t\t\t\t\tString Password = hash.hashPassword(Salt_result, password);\n\t\t\t\t\t\n\t\t\t\t\tuserID= \"/Employees/Employee[UserName=''\" + username + \"'' and  Password=''\" + Password + \"'']/id\";\n\t\t\t\t\tXPathExpression userID_expr = xpath.compile(userID);\n\t\t\t\t\tuserID_result = userID_expr.evaluate(document, XPathConstants.STRING).toString();\n\t\t\t\t\t\n\t\t\t\t\tString login = \"/Employees/Employee[UserName=''\" + username + \"'' and  Password=''\" + Password + \"'']/Type\";   \t    \t        \t    \t        \t \n\t\t\t\t\tXPathExpression login_expr = xpath.compile(login);\n\t\t\t\t\tlogin_result = login_expr.evaluate(document, XPathConstants.STRING).toString(); \n\t\t\t\t\t\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\" General error in executing xpath query :\" + e.toString());\n\t\t\t\t}  \n\t\t\treturn login_result;\t\n\t\t}\n\n\t\tpublic void xpathLogin(ActionEvent event) throws IOException \n\t\t{\n\t\t\t/*\n\t\t\tIn order to prevent xpath injections we have to treat these query''s similar as \n\t\t\tto the SQL query''s. An option would be to use a precompiled XPath query.\n\t\t\tBut since this is a third party library i consider it untrusted and would\n\t\t\trather use our own crafted escaping function.\n\n\t\t\tNOTE: if you want to look into the precompiled xpath library you can find more\n\t\t\tdetailed information about it on: http://www.onjava.com/pub/a/onjava/2005/01/12/xpath.html\n\t\t\t*/\n\n\t\t\t/*\n\t\t\tAs with every injection prevention we first focus on the expected user values\n\t\t\tin this case we expect an integer we use our single input validation method for integers\n\t\t\tSee the \"input validation\" code example for more detailed information.\n\n\t\t\tFor the purpose of this example we use the following XML snippet \n\t\t\t\n\t\t\t<?xml version=\"1.0\" encoding=\"utf8\"?>\n\t\t\t\t\t<Employees>\n\t\t\t\t\t<Employee ID=\"1\">\n\t\t\t\t\t\t<FirstName>Arnold</FirstName>\n\t\t\t\t\t\t<LastName>Baker</LastName>\n\t\t\t\t\t\t<UserName>ABaker</UserName>\n\t\t\t\t\t\t<id>1</id>\n\t\t\t\t\t\t<Password>Hv3KPG906xBBhE1z3k5QRD9SArIYLeiSFA==</Password>  <! SoSecure >\n\t\t\t\t\t\t<salt>+yoY1sPd+V6SC+0aEiA9lHjV9EC8zOCw+A==</salt>\n\t\t\t\t\t\t<Type>Admin</Type>\n\t\t\t\t\t</Employee>\n\t\t\t\t\t<Employee ID=\"2\">\n\t\t\t\t\t\t<FirstName>Peter</FirstName>\n\t\t\t\t\t\t<LastName>Pan</LastName>\n\t\t\t\t\t\t<UserName>PPan</UserName>\n\t\t\t\t\t\t<id>2</id>\n\t\t\t\t\t\t<Password>Cftv1ip25PJdmf8DdfU5NM/K/cjEqEAthw==</Password>  <! NoTelling >\n\t\t\t\t\t\t<salt>/KAMdM09RVNZ8nOWHAsqKzrfyY6VEZgRQA==</salt>\n\t\t\t\t\t\t<Type>User</Type>\n\t\t\t\t\t</Employee>\n\t\t\t\t\t</Employees>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\tHow to exploit : \n\t\t\t\n\t\t\tWith a normal username and password this XPath would work, but an attacker may send a bad username and password and get an XML node selected without knowing the username or password, like this:\n\t\t\t\n\t\t\tUsername: blah'' or 1=1 or ''a''=''a\n\t\t\tPassword: blah\n\n\t\t\tor if the following exploit used, it matches the first letter of the username which is A. In such case it just ignores the password and permits login. \n\t\t\t\n\t\t\tusername : '' or substring((//Employee[position()=1]/child::node()[position()=2]),1,1)=\"A\" or ''''=''\n\t\t\tpassword : blah\n\t\t\t\n\t\t\tanother exploitation example is using the following query which will be true if the second string (password) of the first node (user ''Arnold'') \n\t\t\tconsists of 36 characters (hash).\n\t\t\t\n\t\t\tstringlength(//user[position()=1]/child::node()[position()=2])=36 or ''''=''\n\t\t\t\n\t\t\tin order to test any of the above exploit cases just comment out the input validation lines 207 and 210 below.\n\t\t\t\n\t\t\t*/\n\t\t\tRequestContext context = RequestContext.getCurrentInstance();\n\t\t\tFacesMessage message = null;\n\t\t\tboolean loggedIn = false;\n\t\t\tboolean continueFunction = true;         \n\t\t\tInputValidation validate = new InputValidation();\n\t\n\t\t\t//Here we put the variable in our input validation method in order to prevent untrusted user input from parsing\n\t\t\t//NOTE: logging and countering is also done in your validation method\n\t\t\t\n\t\t\t//Input used into an XPATH expression must not contains any of the characters below:\n\n\t\t\t//\t ( ) = '' [ ] : , * / WHITESPACE\n\t\t\t\n\t\t\t//Another method of avoiding XPath injections is by using variable into XPATH expression with a variable resolver enabled evaluator. \n\t\t\t//See XPath parameterization example\n\t\t\t\n\t\t\tif (validate.validateInput(username,username,\"symbols\", \"xpath input validation for username\", \"HIGH\") == false) \n\t\t\t{ continueFunction = false; }\n\t\t\t\n\t\t\tif (validate.validateInput(username,password,\"symbols\", \"xpath input validation for password\", \"HIGH\") == false) \n\t\t\t{ continueFunction = false; }\n\t\t\n\t\t\t//Only if our validation function returned true we put the user input in the function\n\t\t\t//fXmlFile is the java.io.File object of the example XML document.\n\t\t\t\n\t\t\tFile fXmlFile = new File(\"C:\\\\xmldb\\\\users.xml\");\n\t\t\t\n\t\t\tif (continueFunction == true)\n\t\t\t{     \t     \t \n\t\t\t\tString login_result = this.xpathconnect(fXmlFile,username);\n\t\t\t\tif (login_result.equals(\"\"))\n\t\t\t\t{\n\t\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\t\tLog.SetLog(username, \"\", \"Login failed!\", LocalDateTime.now(), \"FAIL\", \"NULL\");\n\t\t\t\t\tmessage = new FacesMessage(FacesMessage.SEVERITY_WARN, \"Logging Error\", \"Invalid credentials\"); \n\t\t\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"xpath.xhtml\");\n\t\t\t\t}\n\t\t\t\telse if (login_result.equals(\"Admin\"))\n\t\t\t\t{\n\t\t\t\t\tthis.loginAction(userID_result);\n\t\t\t\t\t//the connection has to be reported into the log files\n\t\t\t\t\tLog.SetLog(username, \"\", \"Login successfully!\", LocalDateTime.now(), \"SUCCESS\", \"\");\n\t\t\t\t\tloggedIn = true;\n\t\t\t\t\tmessage = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Welcome\", username);\n\t\t\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"admin_page.xhtml\");\n\t\t\t\t}\n\t\t\t\telse if (login_result.equals(\"User\"))\n\t\t\t\t{\n\t\t\t\t\tthis.loginAction(userID_result);\n\t\t\t\t\tLog.SetLog(username, \"\", \"Login successfully!\", LocalDateTime.now(), \"SUCCESS\", \"\");\n\t\t\t\t\tloggedIn = true;\n\t\t\t\t\tmessage = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Welcome\", username);\n\t\t\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"user_page.xhtml\");\n\t\t\t\t}\t\n\t\t\t\tFacesContext.getCurrentInstance().addMessage(null, message);\n\t\t\t\tcontext.addCallbackParam(\"loggedIn\", loggedIn);\n\t\t\t}         \n\t\t}\n\t}\n\n", "code_lang": "java"}, {"id": 47, "title": "Enforce secure password", "content": " Enforce Secure Password\n\n\n Example:\n\n\n    package com.edw;\n\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    import java.util.regex.Matcher;\n    import java.util.regex.Pattern;\n\n    import org.apache.log4j.Logger;\n\n    public final class PasswordCheck {\n        \n        final static Logger logger = Logger.getLogger(PasswordCheck.class);\n        \n        public boolean checkPassword(String password)\n        {\n            \n            String error = \"\";\n            boolean complete = true;\n            \n            /*\n            for example here we define the expected value''s for your password.\n            \n            ^                  startofstring\n            (?=.*[09])        a digit must occur at least once\n            (?=.*[az])        a lower case letter must occur at least once\n            (?=.*[AZ])        an upper case letter must occur at least once\n            (?=.*[@$%^&+=])   a special character must occur at least once\n            (?=\\S+$)           no whitespace allowed in the entire string\n            .{8,}              anything, at least eight places though\n            $                  endofstring\n            */\n            \n            String validation = \"^(?=.*[09])(?=.*[az])(?=.*[AZ])(?=.*[@$%^&+=])(?=\\S+$).{8,}$\";    \n\n            // Create a Pattern object\n            Pattern reg = Pattern.compile(validation);\n            // Now create matcher object.\n            Matcher match = reg.matcher(password);\n            if (!match.find()) {\t\n                error = \"You did not enter a valid password\";\n                complete = false;  \n            }\n\n            /*\n            Also we have to take into consideration that Password1! is a valid password according to password standards. This however is not the case since this password is included in almost every dictionary attack mechanisms. So we have to prevent the user from using these weak passwords. In such case we will define these bad passwords in a text \n            file in order to compare the user''s password with the list of bad passwords inside that file.\n            */\n            \n            try {\n                BufferedReader in = new BufferedReader(new FileReader(\"C:\\\\Users\\\\Public\\\\xml\\\\test.txt\"));\n                String[] strTemp = null ;\n                String line;\n                \n                while((line = in.readLine()) != null)\n                {                \n                    strTemp = line.split(\",\");\n                }\n                \n                for (String value : strTemp)\n                {\t \n                    if (value.equals(password))\n                    {\n                        error = \"Your password was a bad password!\";\n                        complete = false;\n                    }          \n                }\n                in.close();\n            }\n            catch(IOException e) {\n                logger.error(e.toString());\n            }\n        \n            //The last step is checking the password length to see if it is 8 characters or bigger\n            if (password.length() < 8)\n            {\n                error = \"The password was to short\";\n                complete = false;\n            }\n\n            if (complete)\n            {\n                //Do further operation\n                return true;\n            }else{\n                return false;\n            }\n        }\n    }\n\n", "code_lang": "java"}, {"id": 48, "title": "Identifier based authorization", "content": " Identifierbased authorization\n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.time.LocalDateTime;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class IdentifierBased {\n\n\t\tprivate int userID;\n\t\tprivate String name;\n\t\tprivate String email;\n\t\tprivate String phone;\n\t\tfinal static Logger logger = Logger.getLogger(IdentifierBased.class);\n\t\t/*\n\t\tFirst we include the audit log class.\n\t\tFor more detailed information see the Auditlog code example\n\t\t*/\n\t\tAuditLog Log = new AuditLog();\n\t\t\n\t\t/*\n\t\tWe then do the same for aggregate user controls.\n\t\tFor more detailed information see the Aggregate user control code example\n\t\t*/\n\t\tAggregate aggregate =  new Aggregate();\n\t\t\n\t\tInputValidation validate = new InputValidation();\n\t\t\n\t\t/* \n\t\tthe following function return a String value that informs the appropriate \n\t\tSERVLET to take actions such as terminate the session or take logs about \n\t\ta certain action such as user blocking\n\t\tThe following SERVLET is an example of such behavior\n\t\t\n\t\t* protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException \n\t\t{\n\t\t\tuserID = request.getParameter(\"userID\");\n\t\t\tname = request.getParameter(\"User\");\n\t\t\t\n\t\t\tIdentifierBased au = new IdentifierBased() ;\n\t\t\tString auth = au.IdentifierBasedAuthentication(pageID, userID, name);\n\t\t\t\n\t\t\tif (auth.equals(\"terminate\"))\n\t\t\t{\n\t\t\t\trequest.getSession().invalidate();\n\t\t\t\trequest.setAttribute(\"msg\",\"FAIL! Session terminated!\");\n\t\t\t\trequest.getRequestDispatcher(\"/login.jsp\").forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\telse if (auth.equals(\"block\"))\n\t\t\t{\n\t\t\t\trequest.getSession().invalidate();\n\t\t\t\trequest.setAttribute(\"msg\",\"FAIL! User Blocked!\");\n\t\t\t\trequest.getRequestDispatcher(\"/login.jsp\").forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\t\n\t\t* \n\t\t* \n\t\t*/\n\t\t\n\t\tpublic String IdentifierBasedAuthentication(int pageID, String user_id, String username)\n\t\t{\t\n\t\t\tString page  = new Integer(pageID).toString();\n\t\t\tString identifier = \"null\" ; \n\t\t\t/*\n\t\t\tFirst we validate if the incoming value is in fact an integer since we expect a page id number.\n\t\t\tIf the incoming value is not a number we lockout the users since he tries to manipulate application operation.\n\t\t\t*/\n\n\t\t\tboolean doFunction = true;\n\t\t\t//see the \"input validation\" code example for more detailed information about this function\n\t\t\tif (validate.validateInput(\"\", page, \"numeric\", \"Failed to get file\", \"HIGH\") == false) { doFunction = false; }\n\t\t\t\n\t\t\tif (doFunction == false)\n\t\t\t{\n\t\t\t\t//First we log the fact we detected a tampering in the application operation\n\t\t\t\tLog.SetLog(user_id, \"User tried to manipulate application operation\", \"FAIL\", LocalDateTime.now(),\"\",\"HIGH\");\n\n\t\t\t\t/*\n\t\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\t\tAfter 3 session terminations the user''s account must be blocked. \n\t\t\t\tGiven the high threat level, there will be immediate session termination.\n\t\t\t\t*/\n\t\t\t\tString validation = Log.counter(3);\t\n\t\t\t\t\n\t\t\t\t//the following values will be used from the SERVLET in order to handle session terminations or user blocking \n\t\t\t\tif (validation.equals(\"SQL insert query error in update access\" )){\n\t\t\t\t\t\tLog.SetLog(user_id, \"\" , \"SQL insert query error in update access\", LocalDateTime.now(),\"\",  \"\");\n\t\t\t\t}\n\t\t\t\tif (validation.equals(\"block\")){\n\t\t\t\t\tLog.SetLog(user_id, \"\" , \"block\", LocalDateTime.now(), \"\",  \"HIGH\");\n\t\t\t\t\tidentifier = \"block\";\n\t\t\t\t}\n\t\t\t\tif (validation.equals(\"terminate\")){\n\t\t\t\t\tLog.SetLog(user_id, \"\" , \"terminate\", LocalDateTime.now(), \"\",  \"HIGH\");\n\t\t\t\t\tidentifier = \"terminate\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (doFunction == true)\n\t\t\t{\n\t\t\t\t//the page retrieval has to be reported into the log files\n\t\t\t\tLog.SetLog(user_id, \"Connection to the database was made successfully\", \"SUCCESS\", LocalDateTime.now(),\"\",\"\");\n\n\t\t\t\t//We also count the connection to the database.\n\t\t\t\taggregate.aggregateControl(1,username , user_id);\n\n\t\t\t\t/* \n\t\t\t\tWhenever you are checking whether a user is restricted to review certain data,\n\t\t\t\tthe access restrictions should be processed from the server.\n\t\t\t\t\n\t\t\t\tThe userID could be stored inside a session variable on login, and should\n\t\t\t\tbe used to retrieve user data from the database when requested\n\t\t\t\t\n\t\t\t\tin order to verify if the user is allowed to look into that data:\n\t\t\t\t*/\n\n\t\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n\t\t\t\tConnection conn = null;\n\t\t\t\t\ttry {\n\t\t\n\t\t\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\t\t\tconn = ds.getConnection();\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t//We also count the connection to the database.\n\t\t\t\t\t\taggregate.aggregateControl(1,username , user_id);\n\t\t\t\t\t\n\t\t\t\t\t\t/* Here we select the users privilege level from the users table */\n\t\t\t\t\t\tString query = \"SELECT * from profile WHERE userID = ? \";\n\t\t\t\t\t\n\t\t\t\t\t\t//execute the query, and get a java result set\n\t\t\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\t\t\tst.setInt(1, userID);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (rs.next())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname  = rs.getString(\"name\");\n\t\t\t\t\t\t\temail = rs.getString(\"email\");\n\t\t\t\t\t\t\tphone = rs.getString(\"phone\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tst.close();\n\t\t\t\t\t\tconn.close();\n\t\t\t\t\n\t\t\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\tthis.setEmail(email);\n\t\t\t\tthis.setName(name);\n\t\t\t\tthis.setPhone(phone);\n\t\t\t}\n\t\t\treturn identifier;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic String getEmail() {\n\t\t\treturn email;\n\t\t}\n\n\t\tpublic void setEmail(String email) {\n\t\t\tthis.email = email;\n\t\t}\n\n\t\tpublic String getPhone() {\n\t\t\treturn phone;\n\t\t}\n\n\t\tpublic void setPhone(String phone) {\n\t\t\tthis.phone = phone;\n\t\t}\n\t}\n    ", "code_lang": "java"}, {"id": 49, "title": "session hijacking and fixation", "content": " Session hijacking and fixation \n\n\n Example:\n\n\n\t/*\n\tAs soon as a user logs into your application you must store his session id as wel as his\n\tIP address along with his userID. This information will be used later on in your application in order to\n\tidentify possible session hijacking.\n\n\tTABLE track_sessions\n\t\n\t| TrackID | userID |               session                  |     ipaddress     | \n\t\n\t|   1     | 1      |    79dcd529c0f5e01a9bfb2425c52036c6    |   123.45.67.89    |   \n\t\n\t|   2     | 1      |    79dcd529c0f5e01a9bfb2425c52036c6    |   123.45.67.81    |\n\t\n\t|   3     | 2      |    c80959d3ea4c166413774e45375ac2a1    |   987.65.43.21    |\n\t\n\n\tIn order to prevent session hijacking there are a couple of defense strategies\n\twhich combined are a hardened defense.  \n\t*/\n\n\t/*\n\tFirst we implement the strict transport security header, this is in order to prevent\n\tusers from accessing your application over an unprotected connection.\n\t*/\n\n\t//Example of the strict transport security header:\n\t// response.setHeader(\"StrictTransportSecurity\", \"maxage=31536000\");\n\n\n\t//If all present and future subdomains will be HTTPS:\n\t//response.setHeader(\"StrictTransportSecurity\", \"maxage=31536000; includeSubdomains;\");\n\n\n\t/*\n\tRecommended: If the site owner would like their domain to be included in the HSTS preload \n\tlist maintained by Chrome (and used by Firefox and Safari), then use:\n\t*/\n\n\t// response.setHeader(\"StrictTransportSecurity\", \"maxage=31536000; includeSubdomains; preload\");\n\n\n\t/*\n\tThe `preload` flag indicates the site owner''s consent to have their domain preloaded. The preload list\n\tenforces the browser to always present your application on HTTPS even on the first time\n\tthe user hits your application\n\t*/\n\n\t/*\n\tThen we set the httpOnly flag\n\t(see \"HttpOnly\" in the code examples for more details about implementation)\n\t*/\n\n\t/*\n\tThen we set the flag for session timeout\n\t(see \"Timeout\" in the code examples for more details about implementation)\n\t*/\n\n\t/*\n\tThen we set the session secure flag \n\t(see \"Secure flag\" in the code examples for more details about implementation)\n\t*/\n\n\t/*\n\tOn login we also add another cookie with a random value to the application in order to\n\tprevent an attacker to fixate an JSSESSION id on your users and hijack their sessions\n\t(This code example can be found in the \"Login functionality\" for more detailed information)\n\t*/\n\n\t/*\n\tNOTE: On applications that require high level security, there should never be a\n\tremember me functionality implemented.\n\t*/\n\n\t/*\n\tNow imagine the scenario after the login of the user (see the \"login functionality\" in\n\tthe code examples for more details). Whenever the user is logged in, the users ip address \n\tand session id are also stored in the database these values are used in order to verify \n\tif there are multiple users active on the same session. \n\tIf so, we can let the user decide to terminate the session and terminate the\n\tother assigned sessions.\n\t*/\n\n\tpackage com.edw;\n\n\timport java.io.IOException;\n\timport java.sql.*;\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.servlet.RequestDispatcher;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.http.HttpServlet;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\timport javax.servlet.http.HttpSession;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class SessionHijack extends HttpServlet{\n\t\t\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tpublic SessionHijack() {\n\t\t\tsuper();\n\t\t}\n\t\t\n\t\t//First we include the audit log class.\n\t\tfinal static Logger logger = Logger.getLogger(SessionHijack.class);\n\t\t\t\n\t\tprivate int userID;\n\t\tprivate String ipaddress;\n\t\tprivate String sess ;\n\t\tprivate String user_ID ;\n\t\tprivate String trackID ;\n\n\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException \n\t\t{\n\t\t\tuser_ID = request.getSession().getId(); \t\n\t\t\t//Here we connect to the database\n\t\t\tConnection conn = null;\n\t\t\t\n\t\t\tif ((request.getSession().getAttribute(\"authenticateUser\") != \"isLoggedin\") || \n\t\t\t\t(request.getSession().getAttribute(\"authenticateUser\") == \"\"))\n\t\t\t\t{\t\t\t\n\t\t\t\t\tRequestDispatcher rd =\n\t\t\t\t\trequest.getRequestDispatcher(\"/login\");\n\t\t\t\t\trd.forward(request, response);\t\t\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\t\t\t\t\n\t\t\t\tString query = \"SELECT * from tracking WHERE userId = ?\";\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setString(1, user_ID);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java resultset\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tsess  = rs.getString(\"session\");\n\t\t\t\t\tipaddress = rs.getString(\"ipaddress\");\n\t\t\t\t\ttrackID =  rs.getString(\"TrackID\");\n\t\t\t\t\t\n\t\t\t\t\tif ((request.getSession().getAttribute(\"JSSESSIONID\").toString() != sess) && \n\t\t\t\t\t\t(ipaddress != request.getRemoteAddr()))\n\t\t\t\t\t\t{   \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t//We log the multiple users on the system \n\t\t\t\t\t\t\tlogger.info(\"Multiple users with same session id detected\" + \"  User ID:  \" +  userID);\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tWe redirect the user to a page which alerts him as well as gives him the option to destroy the \n\t\t\t\t\t\t\tmultiple sessions if he does not trust them\n\t\t\t\t\t\t\t*/\n\n\t\t\t\t\t\t\tRequestDispatcher rd =\n\t\t\t\t\t\t\trequest.getRequestDispatcher(\"/Home/multipleUsers\");\n\t\t\t\t\t\t\trd.forward(request, response);\n\t\t\t\t\t\t}\t\t        \n\t\t\t\t}\t\t      \n\t\t\t\tst.close();\n\t\t\t\tconn.close();\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t}\n\t\t\tdoGet(request, response);\n\t\t}\t\n\t\t\n\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\tresponse.getWriter().append(\"Served at: \").append(request.getContextPath()).append(\"  OWASP Knowledge Base Code Examples\");\n\t\t}\n\n\t}\n\t/*\n\tthe only thing left to do now is to update your track_sessions table by inserting\n\tthe ipaddress, sessionID and userID if you want to accept the other sessions as valid.\n\tOtherwise the user just has to terminate the current session in order to lock out the\n\tother sessions.\n\t*/\n\t\t", "code_lang": "java"}, {"id": 50, "title": "Sandboxing", "content": " Sandboxing\n\n\n Example:\n\n\n    <iframe sandbox=\"value\">\n\n    /*\n    sandbox=\"\"  Applies all restrictions\n    allowforms  Reenables form submission\n    allowpointerlock  Reenables APIs\n    allowpopups  Reenables popups\n    allowsameorigin  Allows the iframe content to be treated as being from the same origin\n    allowscripts  Reenables scripts\n    allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context\n    */\n", "code_lang": "java"}, {"id": 51, "title": "Secure Database Configuration", "content": " Secure Database Configuration\n\n\n Example:\n\n    \n    // in order for the connection to be secure, it is best practice the credentials and all the relevant sensitive information about the database to be kept at the server configuration files. For this reason the following changes have been made at tomcat''s server.xml configuration file. \n\n    <Resource auth=\"Container\" driverClassName=\"com.mysql.cj.jdbc.Driver\" maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\" name=\"jdbc/myJdbc\" password=\"javadude\" type=\"javax.sql.DataSource\" url=\"jdbc:mysql://localhost:3306/aggregate_control\" username=\"user\"/>\n\n    <Resource auth=\"Container\" driverClassName=\"com.mysql.cj.jdbc.Driver\" maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\" name=\"jdbc/auditlogs_Jdbc\" password=\"javadude\" type=\"javax.sql.DataSource\" url=\"jdbc:mysql://localhost:3306/auditlogs\" username=\"user\"/>\n\n    the above configuration example indicates that there are two different mysql connections to the database. One refers to the auditlog database and the other refers to the aggregate_control database using the jdbc mysql connector. As you can see the mysql username and password are residing in the web application server configuration file.\n\n    As for the server side code, in order to be informed of the existence of the databases, the following code must be located in the file /METAINF/context.xml\n\n    <?xml version=\"1.0\" encoding=\"UTF8\"?>\n\n    <Context path=\"/JServletSide\" docBase=\"/JServletSide\"\n      crossContext=\"true\" reloadable=\"true\" debug=\"1\">\n\n\n    <Resource name=\"jdbc/myJdbc\" auth=\"Container\" type=\"javax.sql.DataSource\"\n              maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\"\n              username=\"user\" password=\"javadude\" \n              driverClassName=\"com.mysql.cj.jdbc.Driver\"\n              url=\"jdbc:mysql://localhost:3306/aggregate_control\"/>\n\n    <Resource name=\"jdbc/auditlogs_Jdbc\" auth=\"Container\" type=\"javax.sql.DataSource\"\n              maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\"\n              username=\"user\" password=\"javadude\" \n              driverClassName=\"com.mysql.cj.jdbc.Driver\"\n              url=\"jdbc:mysql://localhost:3306/auditlogs\"/>\n              </Context>\n\n    The above snippet indicates the database  resource that will be use in the servlet in order to perform a successful connection to the database\n\n    Afterwards the following servlet snippet will be used for the database connection. \n\n    Context initContext = new InitialContext();\n    Context webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n    DataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n    Connection conn = ds.getConnection();\n\n    the init context line refers to the database resource inside the context.xml file\n\n    Also in order for the application to map the database reference we have to include the following lines inside the /WEBINF/web.xml \n    \n    <resourceref>\n        <description>DB Connection</description>\n        <resrefname>jdbc/myJdbc</resrefname>\n        <restype>javax.sql.DataSource</restype>\n        <resauth>Container</resauth>\n      </resourceref>\n      <resourceref>\n        <description>DB Connection</description>\n        <resrefname>jdbc/auditlogs_Jdbc</resrefname>\n        <restype>javax.sql.DataSource</restype>\n        <resauth>Container</resauth>\n      </resourceref>\n\n      ", "code_lang": "java"}, {"id": 52, "title": "XMLPrevention", "content": " XML Injection Prevention \n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.io.FileOutputStream;\n\timport java.io.IOException;\n\timport java.util.ArrayList;\n\timport javax.xml.parsers.DocumentBuilder;\n\timport javax.xml.parsers.DocumentBuilderFactory;\n\timport javax.xml.parsers.ParserConfigurationException;\n\timport javax.xml.transform.OutputKeys;\n\timport javax.xml.transform.Transformer;\n\timport javax.xml.transform.TransformerException;\n\timport javax.xml.transform.TransformerFactory;\n\timport javax.xml.transform.dom.DOMSource;\n\timport javax.xml.transform.stream.StreamResult;\n\timport com.edw.InputValidation; \n\n\timport org.w3c.dom.Document;\n\timport org.w3c.dom.Element;\n\n\tpublic final class XMLPrevention {\n\n\t\tpublic void storeFunction(String name, String lastName, String gender)\n\t\t{\n\t\t\t/*\n\t\t\tFirst we import our InputValidation class. for more detailed information about \n\t\t\tinput validation check the code examples for \"Input validation\" & \"Single input validation\".\n\t\t\t*/\n\t\t\tInputValidation validate = new InputValidation();\n\t\t\tboolean  doFunction = true;\n\t\t\t//If the function returns false, we do not execute the function\n\t\t\t//see the \"input validation\" code example for more detailed information about this function\n\t\t\tif (validate.validateInput(name, \"alphanumeric\", \"Invalid userinput name\", \"HIGH\") == false)     { doFunction = false; }\n\t\t\tif (validate.validateInput(lastName, \"alphanumeric\", \"Invalid userinput name\", \"HIGH\") == false) { doFunction = false; }\n\t\t\tif (validate.validateInput(gender, \"alphanumeric\", \"Invalid userinput name\", \"HIGH\") == false)    { doFunction = false; }\n\n\t\t\tif (doFunction == true)\n\t\t\t{\n\t\t\t\tDocument dom;\n\t\t\t\tElement e = null;\n\t\t\t\tString xml = null;\n\n\t\t\t\t// instance of a DocumentBuilderFactory\n\t\t\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\t\t\ttry {\n\t\t\t\t\t// use factory to get an instance of document builder\n\t\t\t\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\t\t\t\t// create instance of DOM\n\t\t\t\t\tdom = db.newDocument();\n\n\t\t\t\t\t// create the root element\n\t\t\t\t\tElement rootEle = dom.createElement(\"roles\");\n\n\t\t\t\t\t// create data elements and place them under root\n\t\t\t\t\te = dom.createElement(\"name\");\n\t\t\t\t\te.appendChild(dom.createTextNode(name));\n\t\t\t\t\trootEle.appendChild(e);\n\n\t\t\t\t\te = dom.createElement(\"lastName\");\n\t\t\t\t\te.appendChild(dom.createTextNode(lastName));\n\t\t\t\t\trootEle.appendChild(e);\n\n\t\t\t\t\te = dom.createElement(\"gender\");\n\t\t\t\t\te.appendChild(dom.createTextNode(gender));\n\t\t\t\t\trootEle.appendChild(e);\n\n\t\t\t\t\tdom.appendChild(rootEle);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tTransformer tr = TransformerFactory.newInstance().newTransformer();\n\t\t\t\t\t\ttr.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\t\t\t\t\t\ttr.setOutputProperty(OutputKeys.METHOD, \"xml\");\n\t\t\t\t\t\ttr.setOutputProperty(OutputKeys.ENCODING, \"UTF8\");\n\t\t\t\t\t\ttr.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, \"roles.dtd\");\n\t\t\t\t\t\ttr.setOutputProperty(\"{http://xml.apache.org/xslt}indentamount\", \"4\");\n\n\t\t\t\t\t\t// send DOM to file\n\t\t\t\t\t\ttr.transform(new DOMSource(dom),new StreamResult(new FileOutputStream(xml)));\n\n\t\t\t\t\t} catch (TransformerException te) {\n\t\t\t\t\t\tSystem.out.println(te.getMessage());\n\t\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t\tSystem.out.println(ioe.getMessage());\n\t\t\t\t\t}\n\t\t\t\t} catch (ParserConfigurationException pce) {\n\t\t\t\t\tSystem.out.println(\"UsersXML: Error trying to instantiate DocumentBuilder \" + pce);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\tNow we prevented malicious user input from coming into your XML file.\n\tNOTE: Do not forget to also properly encode your input as a last line of defense, \n\t \t  also In this example the XmlReader disables external entities by default.\n\t\t  If you should choose another parser make sure your parser disables these entities \n\t\t  in order to prevent XXE injections.\n\t*/\n\n", "code_lang": "java"}, {"id": 53, "title": "Open Forwards and redirects", "content": " Open Forwards and Redirects \n\n\n Example:\n\n\n    /*\n    When using forwards & redirects you should make sure the URL is being explicitly \n    declared in the code and cannot be manipulated by an attacker like:\n    */\n\n    //response.Redirect(\"/login\");\n\n    /*\n    Generally you should avoid getting input into the redirect which could contain\n    userinput by any means. if for any reason this may not be feasible than you \n    should make a WhiteList input validation for the redirect like so:\n    */\n\n    package com.edw;\n\n    public class OpenForwards {\n\n        public boolean openForwards(String redirect)\n        {\n            WhiteList listMe = new WhiteList();\n            boolean validated = true;\n\n            //For more information about whitelisting see the \"WhiteListing\" code example:\n            if (listMe.WhiteListing(\"page1,page2,page3\", redirect) == false) { validated = false; }\n\n            //return the value back to the servlet in order to handle redirection. \n            //if the variable validate is true then it will redirect\n            \n            return validated; \n        }  \n    }\n", "code_lang": "java"}, {"id": 54, "title": "Whitelisting function", "content": " Whitelisting function\n\n\n Example:\n\n\n    package com.edw;\n    import org.apache.log4j.Logger;\n\n    public final class WhiteList\n    {   \n        final static Logger logger = Logger.getLogger(WhiteList.class);\n        public boolean WhiteListing(String allowed, String input)\n        {\n            /*\n            Here we define a white list of pages we want the user to be allowed to be redirected to, all \n            patterns are terminated whenever they not comply with the predefined white list\n            */\n            \n            String[] pattern = allowed.split(\",\");\n            //For validation if the file returned true\n            boolean validated = false;\n            //To catch the user submitting evil requests we count the number of times the for loop hits false\n            int count = 0;\n            int countArray = 0;\n                    \n            for( int i = 0; i < pattern.length; i++)\n            {\n                String item = pattern[i];\n                \n                //If filename is equal to the predefined items\n                if ( input == item)\n                {\n                    validated = true ; \n                    count = 1;\n                }\n                \n                //Here we increase the counts, if they are equal we know the function did not hit a valid filename\n                count++;\n                countArray++;\n            }\n            \n            if (countArray == count)\n            { \n                //this breach has to be reported into the log files\n                validated = false;\n                logger.info(\"Audit log message!\" + \"FAIL\" + \"HIGH\");   \n            }\n            return validated;   \n        } \n    }\n    \n\n", "code_lang": "java"}, {"id": 55, "title": "RFD and file download injections", "content": " RFD and file download injections\n\n\n Example:\n\n\n    /*\n    the following code snippet represents the jsf page used to download a file \n\n    <html xmlns=\"http://www.w3.org/1999/xhtml\"\n        xmlns:h=\"http://java.sun.com/jsf/html\"\n        xmlns:f=\"http://java.sun.com/jsf/core\"\n        xmlns:p=\"http://primefaces.org/ui\"\n        xmlns:cu=\"http://localhost:8080/custom\"\n        xmlns:ui=\"http://java.sun.com/jsf/facelets\">\n\n    <f:view contentType=\"text/html\">\n    <h:head>\n        <h:outputStylesheet name=\"commonstyle.css\" library=\"css\" />\n    </h:head>   \n    <h:body>\n        <div id=\"page\">    \n                <div id=\"header\">\n                <ui:insert name=\"header\" >\n                    <ui:include src=\"commonHeader.xhtml\" />\n                </ui:insert>\n                    <img src=\"resources/images/skf.png\"></img>\n                </div>\n                <p:separator style=\"border: 0px;\"></p:separator>\n        </div>\n        \n        <div id=\"content\">      \n            <ui:insert name=\"content\" >\n            <ui:include src=\"commonDownloadRFD.xhtml\" />\n            </ui:insert>      \n            <p:dialog modal=\"true\" widgetVar=\"statusDialog\" header=\"Status\" draggable=\"false\" closable=\"false\" resizable=\"false\">\n                <p:graphicImage name=\"/images/ajaxloadingbar.gif\" />\n            </p:dialog>\n            \n            <h:form>\n                <p:commandButton value=\"Download\" ajax=\"false\" actionListener=\"{fileDownloadController.filedownload}\" onclick=\"PrimeFaces.monitorDownload(start, stop);\" icon=\"uiiconarrowthick1s\">\n                </p:commandButton>\n                <p:spacer width=\"20\" height=\"40\" />\n                <p:commandButton action=\"{navigationController.moveToMainMenu}\" ajax=\"false\" value=\"Main Menu\" />    \n            </h:form>\n            \n            <script type=\"text/javascript\">\n                    function start() {\n                        PF(''statusDialog'').show();\n                    }\n                    \n                    function stop() {\n                        PF(''statusDialog'').hide();\n                    }\n            </script>\n        </div>\n    </h:body>\n    </f:view>\n    </html>\n\n    */\n\n\n    // The following bean represents the managed bean to perform the file download action   \n\n    package prime.com.beans;\n\n    import java.io.File;\n    import java.io.FileInputStream;\n    import java.io.IOException;\n    import java.io.OutputStream;\n    import java.sql.Connection;\n    import java.sql.PreparedStatement;\n    import java.sql.ResultSet;\n    import java.sql.SQLException;\n    import java.time.LocalDateTime;\n    import org.apache.log4j.Logger;\n    import java.util.regex.Pattern;\n\n    import javax.faces.application.FacesMessage;\n    import javax.faces.bean.ManagedBean;\n    import javax.faces.component.UIComponent;\n    import javax.faces.context.ExternalContext;\n    import javax.faces.context.FacesContext;\n    import javax.naming.Context;\n    import javax.naming.InitialContext;\n    import javax.naming.NamingException;\n    import javax.servlet.annotation.MultipartConfig;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    import javax.sql.DataSource;\n\n    import com.Lib.AuditLog;\n    import com.Lib.InputValidation;\n    import com.Lib.WhiteList;\n    \n\n    @ManagedBean(name=\"fileDownloadController\")\n    @MultipartConfig\n    public final class FileDownloader {\n        \n        // Applications are rarely tested for Unicode exploits, and yet many are vulnerable due to the same sort of issues which allows HTTP Request Smuggling to work \u2013 every browser, \n        // web server, web application firewall or HTTP inspection agent, and other device treats user locale handling in different (and usually confusing) manner.\n        // Canonicalization deals with the way in which systems convert data from one form to another. \n        // Canonical means the simplest or most standard form of something. Canonicalization is the process of converting something from one representation to the simplest form.\n        // Web applications have to deal with lots of canonicalization issues from URL encoding to IP address translation. \n        // When security decisions are made based on less than perfectly canonicalized data, the application itself must be able to deal with unexpected input safely. \n        \n        final static Logger logger = Logger.getLogger(FileUploader.class);\n        private AuditLog Log = new AuditLog(); \n        private WhiteList wl = new WhiteList();\n        InputValidation validate = new InputValidation();\n        private UIComponent component;\n        private String file;\n        private File fileplace;\n        \n        public FileDownloader() {        \n            \n            FacesContext context = FacesContext.getCurrentInstance();\n            HttpServletRequest request = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();\n            HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();  \n            \n            // Unicode Encoding is a method for storing characters with multiple bytes. Wherever input data is allowed, \n            // data can be entered using Unicode to disguise malicious code and permit a variety of attacks. RFC 2279 references many ways that text can be encoded. \n            \n            FacesContext.getCurrentInstance().getExternalContext().setResponseContentType(\"text/html;charset=UTF8\");\n            \n            String action = \"\"; \n            boolean proceed = false ;\n            String mimetype = \"\";\n            \n            // Create path components to save the file\n            // The location of stored files should always be outside of your root\n            file = \"C:\\\\tsec.jpg\";\n            fileplace = new File(file); \n            \n            String fileNameformat = fileplace.getName();\n            \n            String filenameparts[] = fileNameformat.split(Pattern.quote(\".\"));\n            String fileName = filenameparts[0];\n            String afterdot = filenameparts[1];\n            \n            /*\n            First we check if the value is alphanumeric only to prevent uploading out of intended directory, \n            as well as other injections\n            */\n            \n            /* in normal situations the userID should be retrieved from session or from the web page made the request. \n            * For demonstration purposes we assume that the usedID is always 2, which indicated the Administration ID number. \n            */\n            \n            if (validate.validateInput(\"2\", fileName, \"alphanumeric\", \"validation failed\",request.getRemoteAddr(),\"HIGH\") == \"validation failed\")\n            {\n            proceed = false;\n            action = \"validation failed\";\n            }\n            \n            else if (validate.validateInput(\"2\", fileName, \"alphanumeric\", \"Session Termination\",request.getRemoteAddr(),\"HIGH\") == \"terminate\")\n            {\n                proceed = false;\n                action = \"terminate\";\n            }   \n            \n            else if (validate.validateInput(\"2\", fileName, \"alphanumeric\", \"Block access\",request.getRemoteAddr(),\"HIGH\") == \"block\")\n            {\n                proceed = false;\n                action = \"block\";\n            }else{\n                Log.SetLog(\"2\", \"Validated Successfully\" , \"SUCCESS\", LocalDateTime.now(),request.getRemoteAddr(),  \"\");\n                action = \"Validated Successfully\";\n                proceed = true;\n            }\n            \n            if (proceed == true)\n            {\n                //Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n                Connection conn = null;\n                try {\n                            \n                    Context initContext = new InitialContext();\n                    Context webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n                    DataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n                    conn = ds.getConnection();  \n\n                    //Here we select the number of counts from aggregate column in order to verify the number of connections:\n                    String query = \"SELECT * FROM privileges WHERE privilegeID=?\";\n                \n                    PreparedStatement st = conn.prepareStatement(query);\n                    \n                    /* in normal situations the privilegeID should be retrieved from database based on UserID retrieved from the active session \n                    * or from the web page made the request. \n                    * For demonstration purposes we assume that the privilegeID is always 1, which indicated the Administration privilege ID number. \n                    */\n                    st.setString(1, \"1\");\n\n                    // execute the query, and get a java result set\n                    //We bind the parameter in order to prevent SQL injections\n                    ResultSet rs = st.executeQuery();\n                    \n                    while (rs.next())\n                    {\n                        mimetype   = rs.getString(\"mimeType\");\n                    }\n                    st.close();\n                    conn.close();\n                } catch (SQLException | NamingException e) {\n                    logger.error(\"cannot read from database. check query :\" e.toString());\n                }     \n\n                /*\n                We also define the mimetype per download file.\n                This is because whenever a user can only download images it is not necessary to set\n                an uncommon contenttype header for it.\n                NOTE: These mimetypes should not be stored based upon the mimetype which was send \n                the response header when the user uploaded the file. This value can be easily \n                manipulated with an intercepting PROXY. You should get the mimetype from the file\n                itself after it was stored on the server.\n                */\n                response.reset();\n                response.setContentType(mimetype);\n                response.addHeader(\"CacheControl\", \"nocache\");\n                response.addHeader(\"ContentDisposition\", \"attachment; filename=\" + fileName + \".\" + afterdot + \";\");\n                \n                OutputStream out;\n                try {\n                    out = response.getOutputStream();\n                    \n                    FileInputStream in = new FileInputStream(fileplace);\n                    byte[] buffer = new byte[4096];\n                    int length;\n                    while ((length = in.read(buffer)) > 0){\n                        out.write(buffer, 0, length);\n                    }\n                    in.close();\n                    out.flush();   \n                } catch (IOException e) {\n                    logger.error(\"Cannot download file  \" e.toString());\n                }\n            }\n            else if (file == null)\n            {\n                action = \"empty\";\n            }\n            \n            if (action.equals(\"terminate\"))\n            {\n                request.getSession().invalidate();\n                request.setAttribute(\"msg\",\"Session terminated! file has not been downloaded\");             \n                ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();\n                try {\n                    ec.redirect(ec.getRequestContextPath() + \"/Menu.xhtml\");\n                } catch (IOException e) {\n                    logger.error(\"Cannot redirect  \" e.toString());\n                }\n            }\n            if (action.equals(\"validation failed\"))\n            {\n                request.getSession().invalidate();\n                context.addMessage(component.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, \"FAIL!\", \"Session terminated! file has not been downloaded\"));\n            }\n            if (action.equals(\"block\"))\n            { \n                request.getSession().invalidate();          \n                context.addMessage(component.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, \"FAIL!\", \"Session terminated with Blocked Access! file has not been downloaded\"));\n            }\n            if (action.equals(\"Validated Successfully\"))\n            {\n                context.addMessage(component.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, \"SUCCESS!\", \"file downloaded\"));   \n            }\n        }\n        \n        public String getFile() {\n            return file;\n        }\n\n        public void setFile(String file) {\n            this.file = file;\n        }\n\n        public void fixedDownloads(String file, String download, HttpServletResponse response)\n        {\n            /*\n            The second example is for whenever you are providing users with fixed downloads\n            such as manuals etc. We do not only check if the file just exists, because that would\n            allow an attacker to also download important other files from your server, so instead\n            we whitelist them.\n            */\n            if (wl.WhiteListing(file, download) != false)\n            {\n                response.reset();\n                response.setContentType(\"text/plain\");\n                response.addHeader(\"CacheControl\", \"nocache\");\n                response.addHeader(\"ContentDisposition\", \"attachment; filename=\" + file + \";\");\n                \n                OutputStream out;\n                try {          \n                    out = response.getOutputStream();\n                    FileInputStream in = new FileInputStream(file);\n                    byte[] buffer = new byte[4096];\n                    int length;\n                    while ((length = in.read(buffer)) > 0){\n                        out.write(buffer, 0, length);\n                    }\n                    in.close();\n                    out.flush();\n                } catch (IOException e) {\n                    logger.error(\"Cannot download file  \" e.toString());\n                }   \n            }   \n        }\n    }\n\n", "code_lang": "java"}, {"id": 56, "title": "Timeout Sessions", "content": " Timeout Sessions \n\n\n Example:\n\n\n    /*\n    Within your web.xml you can configure your session idle timeout.\n    The default time is set to 20 minutes.\n    */\n\n    <webapp>\n    ...\n      <sessionconfig>\n        <sessiontimeout>20</sessiontimeout> <! in minutes >\n      </sessionconfig>\n    </webapp>\n\n", "code_lang": "java"}, {"id": 57, "title": "Directory path traversal attack", "content": " Directory Path traversal\n\n\n Example:\n\n\n    package com.edw;\n    import java.io.File;\n    import java.io.FileInputStream;\n    import java.io.IOException;\n    import javax.servlet.ServletException;\n    import javax.servlet.http.HttpServlet;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    import com.edw.InputValidation;\n    import com.edw.WhiteList;\n    import org.apache.log4j.Logger;\n\n    public class Rewrite extends HttpServlet\n    {\n\n        private static final long serialVersionUID = 1L;\n        private File getFile;\n        /**\n        * @see HttpServletHttpServlet()\n        */\n        public Rewrite() {\n            super();\n        }\n        \n        final static Logger logger = Logger.getLogger(Rewrite.class);\n        \n        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException \n        {\n            InputValidation validate = new InputValidation();\n            WhiteList listme = new WhiteList();\n\n            /*\n            First, we want to filter the filenames for expected values. For this example we use only use 09\n            Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           \n            */\n            boolean validated = true;\n\n            //see the \"input validation\" code example for more detailed information about this function\n            \n            final boolean validInput = validate.validateInput(getFile.toString(), \"numeric\", \"Failed to get file\", \"HIGH\");\n            \n            if (!validInput) { \n                validated = false; \n            }\n            /*\n            see the \"WhiteListing\" code example for more detailed information about this function\n            Let''s assume there are three files named 1,2,3\n            */\n\n            if (listme.WhiteListing(\"1,2,3\", getFile.toString()) == false) { validated = false; }\n\n            //Only if the pattern was true we allow the variable into the streamreader function\n            if (validated)\n            {\n                String canonicalPath = getFile.getCanonicalPath();\n                if (!canonicalPath.equals(\"C:\\\\....\\\\WEBINF\" + getFile)) \n                {\n                    // Invalid file; handle error\n                }            \t \n                FileInputStream fis = new FileInputStream(canonicalPath);            \t\n            }else{\n                logger.error(\"invalid user input was detected!\");              \n            }\n            doGet(request,response);\n        }\n        \n        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n            response.getWriter().append(\"Served at: \").append(request.getContextPath()).append(\"  OWASP Knowledge Base Code Examples\");\n        }\n    }\n", "code_lang": "java"}, {"id": 58, "title": "Reauthentication", "content": " Reauthentication \n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.io.IOException;\n\timport java.net.HttpCookie;\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.time.LocalDateTime;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.annotation.WebServlet;\n\timport javax.servlet.http.Cookie;\n\timport javax.servlet.http.HttpServlet;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\timport javax.sql.DataSource;\n\timport java.util.UUID;\n\n\timport org.apache.log4j.Logger;\n\n\timport com.ning.http.client.Request;\n\n\t/**\n\t* Servlet implementation class Reauth\n\t*/\n\t@WebServlet(\"/Reauth\")\n\tpublic final class Reauth extends HttpServlet {\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tprivate int userID; \n\t\tprivate String username; \n\t\tprivate String password; \n\t\tprivate String access; \n\t\tprivate String salt; \n\t\tprivate int privilege; \n\t\tprivate boolean loggedin = false;\n\t\tfinal static Logger logger = Logger.getLogger(Reauth.class);\n\t\t\n\t\tAuditLog Log = new AuditLog();\n\n\t\t//Second we include the password hash.\n\t\tHashing hash = new Hashing();\n\n\t\t//Third we include the random password/token class.\n\t\tRandomizer CSRF = new Randomizer();\n\t\t\n\t\t/**\n\t\t* @see HttpServletHttpServlet()\n\t\t*/\n\t\tpublic Reauth() {\n\t\t\tsuper();\n\t\t}\n\n\t\t/**\n\t\t* @see HttpServletdoGet(HttpServletRequest request, HttpServletResponse response)\n\t\t*/\n\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\tresponse.getWriter().append(\"Served at: \").append(request.getContextPath());\n\t\t}\n\n\t\t/**\n\t\t* @see HttpServletdoPost(HttpServletRequest request, HttpServletResponse response)\n\t\t*/\n\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\n\t\t\tloggedin = reAuthentication(request,response);\n\t\t\t\n\t\t\tif (loggedin == false)\n\t\t\t{\n\t\t\t\trequest.getSession().invalidate();\n\t\t\t\trequest.getSession().setAttribute(\"Authenticated\", \"\");\n\t\t\t\t\n\t\t\t\tCookie cookie = null;\n\t\t\t\tCookie[] cookies = null;\n\t\t\t\t// Get an array of Cookies associated with this domain\n\t\t\t\tcookies = request.getCookies();\n\t\t\t\t\t\n\t\t\t\tfor (Cookie cookie2 : cookies) {\n\t\t\t\t\tcookie = cookie2;\n\t\t\t\t\t\t\n\t\t\t\t\tif (cookie.getName().equals(\"JSESSIONID\"))\n\t\t\t\t\t{        \t \n\t\t\t\t\t\tcookie.setValue(\"\");\n\t\t\t\t\t}         \n\t\t\t\t\tresponse.addCookie(null);\n\t\t\t\t\trequest.setAttribute(\"msg\",\"Session terminated!\");\n\t\t\t\t\trequest.getRequestDispatcher(\"/login.jsp\").forward(request, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdoGet(request, response);\n\t\t}\n\t\t\n\t\tpublic boolean reAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\t{\n\t\t\tString passwordHash = \"\";\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n\t\t\tConnection conn = null;\n\t\t\ttry {\t\t\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\n\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\tString query = \"SELECT * from users WHERE userID = ?\";\n\t\t\t\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setInt(1, userID);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tpasswordHash  = rs.getString(\"password\");\n\t\t\t\t\tsalt = rs.getString(\"password\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tst.close();\n\t\t\t\tconn.close();\n\t\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\tWe validate the password see \"Password storage(salting stretching Hashing)\" in the code examples\n\t\t\tfor more detailed information:\n\t\t\t*/\n\t\t\tif (hash.Validate(passwordHash, salt, password) == true)\n\t\t\t{\n\t\t\t\t//the connection has to be reported into the log files\t\n\t\t\t\tLog.SetLog(\"Null\", \"login was OK!\", \"SUCCESS\", LocalDateTime.now(), \"NULL\");\n\n\t\t\t\t/*\n\t\t\t\tThis is is to prevent session fixation, after login we create a new cookie which\n\t\t\t\twe than use to authenticate. This value can not be fixated since it is set after \n\t\t\t\tlogin.\n\n\t\t\t\tcreate a new UUID and save into the session:\n\t\t\t\t*/\n\t\t\n\t\t\t\t//All the random tokens will now be changed\n\t\t\t\tUUID uid = UUID.randomUUID();          \n\t\t\t\tString AuthToken = uid.toString();\n\t\t\t\trequest.getSession().setAttribute(\"AuthToken\", AuthToken);\n\t\t\t\t\n\t\t\t\t// now create a new cookie with this UUID value\n\t\t\t\tCookie cookie = new Cookie(\"AuthToken\",AuthToken);\n\t\t\t\tresponse.addCookie(cookie);\n\n\t\t\t\t/*\n\t\t\t\tNow we create a random value for our CSRF tokens. See \"Random password/token generation\" in\n\t\t\t\tthe code examples for more detailed information:\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\tString CSRftoken = CSRF.generate(25);\n\t\t\t\trequest.getSession().setAttribute(\"CSRF\", CSRftoken);\n\t\t\t\trequest.getSession().setAttribute(\"access\", \"Authenticated\");\n\n\t\t\t\tloggedin = true;\n\t\t\t}else{\n\t\t\t\t//If things went wrong we destroy the entire session. see \"logout\" code example for more info:\n\t\t\t\tloggedin = false ;\n\t\t\t}\n\t\t\treturn loggedin;\n\t\t}\n\t}\n", "code_lang": "java"}, {"id": 59, "title": "Rfc2898 DeriveBytes", "content": " RFC 2898 password derivation compatible with .NET Rfc2898DeriveBytes\n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.io.UnsupportedEncodingException;\n\timport java.security.InvalidKeyException;\n\timport java.security.NoSuchAlgorithmException;\n\n\timport javax.crypto.Mac;\n\timport javax.crypto.spec.SecretKeySpec;\n\n\t/*\n\t RFC 2898 password derivation compatible with .NET Rfc2898DeriveBytes class.\n\t*/\n\n\tpublic final class Rfc2898DeriveBytes\n\t{\n\t\tpublic static void main(String[] args) throws Exception\n\t\t{\n\t\t\tRfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes(\"*^@KK@!        \", \"*^@KK@!\".getBytes());\n\n\t\t}\n\n\t\tprivate Mac _hmacSha1;\n\t\tprivate byte[] _salt;\n\t\tprivate int _iterationCount;\n\n\t\tprivate byte[] _buffer = new byte[20];\n\t\tprivate int _bufferStartIndex = 0;\n\t\tprivate int _bufferEndIndex = 0;\n\t\tprivate int _block = 1;\n\n\t\t/**\n\t\t* Creates new instance.\n\t\t* \n\t\t* @param password\n\t\t*            The password used to derive the key.\n\t\t* @param salt\n\t\t*            The key salt used to derive the key.\n\t\t* @param iterations\n\t\t*            The number of iterations for the operation.\n\t\t* @throws NoSuchAlgorithmException\n\t\t*             HmacSHA1 algorithm cannot be found.\n\t\t* @throws InvalidKeyException\n\t\t*             Salt must be 8 bytes or more. or Password cannot be null.\n\t\t*/\n\t\tpublic Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) throws NoSuchAlgorithmException, InvalidKeyException\n\t\t{\n\t\t\tif ((salt == null) || (salt.length < 8))\n\t\t\t{\n\t\t\t\tthrow new InvalidKeyException(\"Salt must be 8 bytes or more.\");\n\t\t\t}\n\t\t\tif (password == null)\n\t\t\t{\n\t\t\t\tthrow new InvalidKeyException(\"Password cannot be null.\");\n\t\t\t}\n\t\t\tthis._salt = salt;\n\t\t\tthis._iterationCount = iterations;\n\t\t\tthis._hmacSha1 = Mac.getInstance(\"HmacSHA1\");\n\t\t\tthis._hmacSha1.init(new SecretKeySpec(password, \"HmacSHA1\"));\n\t\t}\n\n\t\t/**\n\t\t* Creates new instance.\n\t\t* \n\t\t* @param password\n\t\t*            The password used to derive the key.\n\t\t* @param salt\n\t\t*            The key salt used to derive the key.\n\t\t* @param iterations\n\t\t*            The number of iterations for the operation.\n\t\t* @throws NoSuchAlgorithmException\n\t\t*             HmacSHA1 algorithm cannot be found.\n\t\t* @throws InvalidKeyException\n\t\t*             Salt must be 8 bytes or more. or Password cannot be null.\n\t\t* @throws UnsupportedEncodingException\n\t\t*             UTF8 encoding is not supported.\n\t\t*/\n\t\tpublic Rfc2898DeriveBytes(String password, byte[] salt, int iterations) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException\n\t\t{\n\t\t\tthis(password.getBytes(\"UTF8\"), salt, iterations);\n\t\t}\n\n\t\t/**\n\t\t* Creates new instance.\n\t\t* \n\t\t* @param password\n\t\t*            The password used to derive the key.\n\t\t* @param salt\n\t\t*            The key salt used to derive the key.\n\t\t* @throws NoSuchAlgorithmException\n\t\t*             HmacSHA1 algorithm cannot be found.\n\t\t* @throws InvalidKeyException\n\t\t*             Salt must be 8 bytes or more. or Password cannot be null.\n\t\t* @throws UnsupportedEncodingException\n\t\t*             UTF8 encoding is not supported.\n\t\t*/\n\t\tpublic Rfc2898DeriveBytes(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException\n\t\t{\n\t\t\tthis(password, salt, 0x3e8);\n\t\t}\n\n\t\t/**\n\t\t* Returns a pseudorandom key from a password, salt and iteration count.\n\t\t* \n\t\t* @param count\n\t\t*            Number of bytes to return.\n\t\t* @return Byte array.\n\t\t*/\n\t\tpublic byte[] GetBytes(int count)\n\t\t{\n\t\t\tbyte[] result = new byte[count];\n\t\t\tint resultOffset = 0;\n\t\t\tint bufferCount = this._bufferEndIndex  this._bufferStartIndex;\n\n\t\t\tif (bufferCount > 0)\n\t\t\t{ // if there is some data in buffer\n\t\t\t\tif (count < bufferCount)\n\t\t\t\t{ // if there is enough data in buffer\n\t\t\t\t\tSystem.arraycopy(this._buffer, this._bufferStartIndex, result, 0, count);\n\t\t\t\t\tthis._bufferStartIndex += count;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tSystem.arraycopy(this._buffer, this._bufferStartIndex, result, 0, bufferCount);\n\t\t\t\tthis._bufferStartIndex = this._bufferEndIndex = 0;\n\t\t\t\tresultOffset += bufferCount;\n\t\t\t}\n\n\t\t\twhile (resultOffset < count)\n\t\t\t{\n\t\t\t\tint needCount = count  resultOffset;\n\t\t\t\tthis._buffer = this.func();\n\t\t\t\tif (needCount > 20)\n\t\t\t\t{ // we one (or more) additional passes\n\t\t\t\t\tSystem.arraycopy(this._buffer, 0, result, resultOffset, 20);\n\t\t\t\t\tresultOffset += 20;\n\t\t\t\t}else{\n\t\t\t\t\tSystem.arraycopy(this._buffer, 0, result, resultOffset, needCount);\n\t\t\t\t\tthis._bufferStartIndex = needCount;\n\t\t\t\t\tthis._bufferEndIndex = 20;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate byte[] func()\n\t\t{\n\t\t\tthis._hmacSha1.update(this._salt, 0, this._salt.length);\n\t\t\tbyte[] tempHash = this._hmacSha1.doFinal(getBytesFromInt(this._block));\n\n\t\t\tthis._hmacSha1.reset();\n\t\t\tbyte[] finalHash = tempHash;\n\t\t\tfor (int i = 2; i <= this._iterationCount; i++)\n\t\t\t{\n\t\t\t\ttempHash = this._hmacSha1.doFinal(tempHash);\n\t\t\t\tfor (int j = 0; j < 20; j++)\n\t\t\t\t{\n\t\t\t\t\tfinalHash[j] = (byte) (finalHash[j] ^ tempHash[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._block == 2147483647)\n\t\t\t{\n\t\t\t\tthis._block = 2147483648;\n\t\t\t}else{\n\t\t\t\tthis._block += 1;\n\t\t\t}\n\t\t\treturn finalHash;\n\t\t}\n\n\t\tprivate static byte[] getBytesFromInt(int i)\n\t\t{\n\t\t\treturn new byte[] { (byte) (i >>> 24), (byte) (i >>> 16), (byte) (i >>> 8), (byte) i };\n\t\t}\n\t}\n\n", "code_lang": "java"}, {"id": 60, "title": "CSRF Token", "content": " CSRF Token \n\n\n Example:\n\n\n\t/*\n\tFor CSRF tokens we used a separate class outside of the normal controller, since\n\tit must be reused on several locations throughout the application\n\n\tFirst after a successful validation of a user login, the application must also start a session\n\twhich contains the \"cross site request forgery\" token.\n\t*/\n\n\t//For generating the token we want to use a secure cryptographic function\n\tSecureRandom random = new SecureRandom();\n\n\t//Then we generate a long value token containing a high entropy\n\tbyte[] randomBytes  = new byte[128];\n\n\trandom.nextBytes(randomBytes);\n\n\t//Then we base64 encode the string\n\tString csrftoken = Base64.getEncoder().encodeToString(randomBytes);\n\n\tHttpSession session \n\tsession.setAttribute( \"CSRF\", csrftoken);\n\n\t/*\n\tThe next step is implementing this random token in each form field as a hidden input parameter\n\tand send it to a function which checks if the submitted token is equal to the one set after successful validation.\n\t*/\n\n\t<%\n\t\tObject token = request.getSession().getAttribute(\"CSRF\");\n\t\tString tokenStr = \"\";\n\t\tif (token != null)\n\t\t{\n\t\t\ttokenStr = (String) token;\n\t\t}\t\t \n\t%>\n\n\t<html>\n\t<head>\n\t<meta httpequiv=\"ContentType\" content=\"text/html; charset=ISO88591\">\n\t<title>Insert title here</title>\n\t</head>\n\t<body>\n\t\tWelcome to the OWASP CSRFGuard Test Application! Where would you like to go?\n\t<br/>\n\n\t<form action=\"/Home/csrf\" method=\"post\">\n\t\t<input type=\"text\" name=\"testValue\" /> \n\t\t<br/> \n\t\t<input type=\"hidden\" value=\"<%=tokenStr%>\" name=\"token\"/>\n\t\t<input type=\"submit\" value=\"login\">\n\t</form>\n\n\t*/\n\n\tpackage com.edw;\n\timport java.io.IOException;\n\timport javax.servlet.RequestDispatcher;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.annotation.WebServlet;\n\timport javax.servlet.http.HttpServlet;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\t@WebServlet(\"/CheckCSRF\")\n\n\tpublic final class CheckCSRF extends HttpServlet\n\t{\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tpublic CheckCSRF() {\n\t\t\tsuper();\n\t\t}\n\n\t\t//here we are sending the token towards the function which does the token validation    \n\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n\t\t\tString token = request.getParameter(\"token\");\n\t\t\tString sessionToken = (String) request.getSession().getAttribute(\"CSRF\")\n\n\t\t\tif(!sessionToken.equals(token))\n\t\t\t{ \n\n\t\t\t\t/*\n\t\t\t\tIf there was no match, the authentication session will be emptied and sessions will be abandoned. Then, the user must be redirected towards the login page.\n\t\t\t\t*/\t\t\n\t\t\t\tif (\"\".equalsIgnoreCase(request.getSession().getAttribute(\"authenticateUser\")))\n\t\t\t\t{\n\t\t\t\t\trequest.getSession().invalidate();\n\t\t\t\t\trequest.setAttribute(\"msg\", \"Served at: \" + request.getContextPath());\n\t\t\t\t\tRequestDispatcher rd =  request.getRequestDispatcher(\"/login\");\n\t\t\t\t\trd.forward(request, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\n\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\tsuper.doGet(request, response);\n\t\t}\n    }\n\n", "code_lang": "java"}, {"id": 61, "title": "HTML Output", "content": " HTML Output\n\n\n Example:\n\n\t      \n\t/*\n\tWhenever user input is displayed in the application all user input should be properly escaped \n\tto prevent XSS injections.\n\t*/\n\n\t/*\n\tThis escaping is used whenever you put the code straight into the html like:\n\t<span>YOUR USER INPUT</span>\n\tThe attack bellow will now be outputted as,\n\t&lt;script&gt;alert(1337);&lt;/script&gt;\n\t*/\n\n\timport org.owasp.esapi.ESAPI;\n\timport org.owasp.esapi.errors.EncodingException;\n\n\tString htmlbug = ESAPI.encoder().encodeForHTML(\"<script>alert(1337);</script>\");\n\n\t/*\n\tThis next encoding method is used for whenever you are allowing userinput into \n\thtml attributes.\n\tThe attack below will now be outputted as:\n\tonload=&amp;39;alert(1337)&amp;39;\n\t*/\n\t\t\t\n\tString htmlatr = ESAPI.encoder().encodeForHTMLAttribute(\"onload=''alert(1337);''\");\n\t\t\t\n\t/*\n\tWhenever parameters are rendered via javascript your application will detect normal injections\n\tin the first instant. in order for the application not to be vulnerable to javascript encoding you MUST use the encodeForJavaScript function, any other escaping function still leaves your code vulnerable\n\t*/\t      \n\n\tESAPI.encoder().encodeForJavaScript(\"\\\\x3Cscript\\\\x3Ealert(12);\\\\x3C\\\\x2Fscript\\\\x3E\");\n\t\t\t\n\t/*\n\tWhenever a user can submit an link/A HREF in your application you must solely depend upon the\n\t\"ESAPI.encoder().encodeForURL\" method since an attacker could otherwise inject the href with an XSS\n\tthat looks like this \"javascript:alert(\"XSS\");\" whenever a victim now clicks the link this XSS\n\twill be executed in his browser.\n\t*/ \n\n\ttry {\n\t\tESAPI.encoder().encodeForURL(\"javascript:alert(234);\");\n\t} catch (EncodingException e) {\n\t\tlogger.error(\"Error encoding characters : \" + e.toString() + \" Time : \" + LocalDateTime.now());\n\t}\n\n\t/*\n\tSecurity consists of different layers of protection in order to guarantee the integrity\n\tof your application. This means that the value displayed from the database/user should\n\talready be sanitized before being processed in order to prevent XSS.\n\n\tAs an example, what do you do when you expect a numeric value from your application?\n\n\tYou first sanitize the user input by means of an input validation method like:\n\tSee the \"input validation\" class for the entire example!\n\t*/\n\tInputValidation validate = new InputValidation();\n\tString userinput = \"when this string is evil the application will block operation!\";\n\tif(validate.validateInput(userinput, \"numeric\", \"Unexpected user input\", \"HIGH\", 3)== false)\n\t{ /* Cancel operation of your application */ }\n\t\t\t\n\t/*\n\tIn this example the application cancelled the request by means of simple validation.\n\t*/\n    \n\n\n", "code_lang": "java"}, {"id": 62, "title": "WinRegistry", "content": " Reading from Windows Registry \n\n\n Example:\n\n\n    package com.edw;\n\n    import java.lang.reflect.InvocationTargetException;\n    import java.lang.reflect.Method;\n    import java.util.HashMap;\n    import java.util.Map;\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.prefs.Preferences;\n\n    public final class WinRegistry {\n\n      public static final int HKEY_CURRENT_USER = 0x80000001;\n      public static final int HKEY_LOCAL_MACHINE = 0x80000002;\n      public static final int HKEY_CLASSES_ROOT = 0x80000003;  \n      public static final int REG_SUCCESS = 0;\n      public static final int REG_NOTFOUND = 2;\n      public static final int REG_ACCESSDENIED = 5;\n\n      private static final int KEY_ALL_ACCESS = 0xf003f;\n      private static final int KEY_READ = 0x20019;\n      private static final Preferences userRoot = Preferences.userRoot();\n      private static final Preferences systemRoot = Preferences.systemRoot();\n      private static final Class<? extends Preferences> userClass = userRoot.getClass();\n      private static final Method regOpenKey;\n      private static final Method regCloseKey;\n      private static final Method regQueryValueEx;\n      private static final Method regEnumValue;\n      private static final Method regQueryInfoKey;\n      private static final Method regEnumKeyEx;\n      private static final Method regCreateKeyEx;\n      private static final Method regSetValueEx;\n      private static final Method regDeleteKey;\n      private static final Method regDeleteValue;\n\n      static {\n          try {\n              regOpenKey = userClass.getDeclaredMethod(\"WindowsRegOpenKey\",\n                  new Class[] { int.class, byte[].class, int.class });\n              regOpenKey.setAccessible(true);\n              regCloseKey = userClass.getDeclaredMethod(\"WindowsRegCloseKey\",\n                  new Class[] { int.class });\n              regCloseKey.setAccessible(true);\n              regQueryValueEx = userClass.getDeclaredMethod(\"WindowsRegQueryValueEx\",\n                  new Class[] { int.class, byte[].class });\n              regQueryValueEx.setAccessible(true);\n              regEnumValue = userClass.getDeclaredMethod(\"WindowsRegEnumValue\",\n                  new Class[] { int.class, int.class, int.class });\n              regEnumValue.setAccessible(true);\n              regQueryInfoKey = userClass.getDeclaredMethod(\"WindowsRegQueryInfoKey1\",\n                  new Class[] { int.class });\n              regQueryInfoKey.setAccessible(true);\n              regEnumKeyEx = userClass.getDeclaredMethod(  \n                  \"WindowsRegEnumKeyEx\", new Class[] { int.class, int.class, int.class });  \n              regEnumKeyEx.setAccessible(true);\n              regCreateKeyEx = userClass.getDeclaredMethod(  \n                  \"WindowsRegCreateKeyEx\", new Class[] { int.class, byte[].class });  \n              regCreateKeyEx.setAccessible(true);  \n              regSetValueEx = userClass.getDeclaredMethod(  \n                  \"WindowsRegSetValueEx\", new Class[] { int.class, byte[].class, byte[].class });  \n              regSetValueEx.setAccessible(true); \n              regDeleteValue = userClass.getDeclaredMethod(  \n                  \"WindowsRegDeleteValue\", new Class[] { int.class, byte[].class });  \n              regDeleteValue.setAccessible(true); \n              regDeleteKey = userClass.getDeclaredMethod(  \n                  \"WindowsRegDeleteKey\", new Class[] { int.class, byte[].class });  \n              regDeleteKey.setAccessible(true); \n          }\n          catch (Exception e) {\n              throw new RuntimeException(e);\n          }\n      }\n\n      private WinRegistry() {  }\n\n      /**\n      * Read a value from key and value name\n      * @param hkey   HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE\n      * @param key\n      * @param valueName\n      * @return the value\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static String readString(int hkey, String key, String valueName) \n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n              return readString(systemRoot, hkey, key, valueName);\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n              return readString(userRoot, hkey, key, valueName);\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n              return readString(userRoot, hkey, key, valueName);\n          }else{\n              throw new IllegalArgumentException(\"hkey=\" + hkey);\n          }\n      }\n\n      /**\n      * Read value(s) and value name(s) form given key \n      * @param hkey  HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE\n      * @param key\n      * @return the value name(s) plus the value(s)\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static Map<String, String> readStringValues(int hkey, String key) \n        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n              return readStringValues(systemRoot, hkey, key);\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n              return readStringValues(userRoot, hkey, key);\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n              return readStringValues(userRoot, hkey, key);\n          }else{\n              throw new IllegalArgumentException(\"hkey=\" + hkey);\n          }\n      }\n\n      /**\n      * Read the value name(s) from a given key\n      * @param hkey  HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE/HKEY_CLASSES_ROOT\n      * @param key\n      * @return the value name(s)\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static List<String> readStringSubKeys(int hkey, String key) \n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n              return readStringSubKeys(systemRoot, hkey, key);\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n              return readStringSubKeys(userRoot, hkey, key);\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n              return readStringSubKeys(userRoot, hkey, key);\n          }else{\n              throw new IllegalArgumentException(\"hkey=\" + hkey);\n          }\n      }\n\n      /**\n      * Create a key\n      * @param hkey  HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE\n      * @param key\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static void createKey(int hkey, String key) \n        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int [] ret;\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n              ret = createKey(systemRoot, hkey, key);\n              regCloseKey.invoke(systemRoot, new Object[] { new Integer(ret[0]) });\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n              ret = createKey(userRoot, hkey, key);\n              regCloseKey.invoke(userRoot, new Object[] { new Integer(ret[0]) });\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n              ret = createKey(userRoot, hkey, key);\n              regCloseKey.invoke(userRoot, new Object[] { new Integer(ret[0]) });\n          }else{\n              throw new IllegalArgumentException(\"hkey=\" + hkey);\n          }\n          if (ret[1] != REG_SUCCESS) \n          {\n              throw new IllegalArgumentException(\"rc=\" + ret[1] + \"  key=\" + key);\n          }\n      }\n\n      /**\n      * Write a value in a given key/value name\n      * @param hkey\n      * @param key\n      * @param valueName\n      * @param value\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static void writeStringValue\n        (int hkey, String key, String valueName, String value) \n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n               writeStringValue(systemRoot, hkey, key, valueName, value);\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n               writeStringValue(userRoot, hkey, key, valueName, value);\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n                writeStringValue(userRoot, hkey, key, valueName, value);\n          }else{\n                throw new IllegalArgumentException(\"hkey=\" + hkey);\n          }\n      }\n\n      /**\n      * Delete a given key\n      * @param hkey\n      * @param key\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static void deleteKey(int hkey, String key) \n        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int rc = 1;\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n              rc = deleteKey(systemRoot, hkey, key);\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n              rc = deleteKey(userRoot, hkey, key);\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n              rc = deleteKey(userRoot, hkey, key);\n          }\n          if (rc != REG_SUCCESS) \n          {\n              throw new IllegalArgumentException(\"rc=\" + rc + \"  key=\" + key);\n          }\n      }\n\n      /**\n      * delete a value from a given key/value name\n      * @param hkey\n      * @param key\n      * @param value\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      * @throws InvocationTargetException\n      */\n      public static void deleteValue(int hkey, String key, String value) \n        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int rc = 1;\n          if (hkey == HKEY_LOCAL_MACHINE) \n          {\n              rc = deleteValue(systemRoot, hkey, key, value);\n          }\n          else if (hkey == HKEY_CURRENT_USER) \n          {\n              rc = deleteValue(userRoot, hkey, key, value);\n          }\n          else if (hkey == HKEY_CLASSES_ROOT) \n          {\n              rc = deleteValue(userRoot, hkey, key, value);\n          }\n          if (rc != REG_SUCCESS) \n          {\n              throw new IllegalArgumentException(\"rc=\" + rc + \"  key=\" + key + \"  value=\" + value);\n          }\n      }\n\n      private static int deleteValue\n        (Preferences root, int hkey, String key, String value)\n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {\n              new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) });\n          if (handles[1] != REG_SUCCESS) \n          {\n              return handles[1];  // can be REG_NOTFOUND, REG_ACCESSDENIED\n          }\n          int rc =((Integer) regDeleteValue.invoke(root,  \n              new Object[] { \n                  new Integer(handles[0]), toCstr(value) \n              })).intValue();\n          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });\n          return rc;\n      }\n\n      private static int deleteKey(Preferences root, int hkey, String key) \n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int rc =((Integer) regDeleteKey.invoke(root,  \n              new Object[] { new Integer(hkey), toCstr(key) })).intValue();\n          return rc;  // can REG_NOTFOUND, REG_ACCESSDENIED, REG_SUCCESS\n      }\n\n      private static String readString(Preferences root, int hkey, String key, String value)\n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {\n              new Integer(hkey), toCstr(key), new Integer(KEY_READ) });\n          if (handles[1] != REG_SUCCESS) \n          {\n              return null; \n          }\n          byte[] valb = (byte[]) regQueryValueEx.invoke(root, new Object[] {\n              new Integer(handles[0]), toCstr(value) });\n          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });\n          return (valb != null ? new String(valb).trim() : null);\n      }\n\n      private static Map<String,String> readStringValues\n        (Preferences root, int hkey, String key)\n        throws IllegalArgumentException, IllegalAccessException,\n        InvocationTargetException \n      {\n        HashMap<String, String> results = new HashMap<String,String>();\n        int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {\n            new Integer(hkey), toCstr(key), new Integer(KEY_READ) });\n        if (handles[1] != REG_SUCCESS) \n        {\n            return null;\n        }\n        int[] info = (int[]) regQueryInfoKey.invoke(root,\n            new Object[] { new Integer(handles[0]) });\n\n        int count = info[0]; // count  \n        int maxlen = info[3]; // value length max\n        for(int index=0; index<count; index++)  {\n            byte[] name = (byte[]) regEnumValue.invoke(root, new Object[] {\n                new Integer\n                (handles[0]), new Integer(index), new Integer(maxlen + 1)});\n            String value = readString(hkey, key, new String(name));\n            results.put(new String(name).trim(), value);\n        }\n        regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });\n        return results;\n      }\n\n      private static List<String> readStringSubKeys\n        (Preferences root, int hkey, String key)\n        throws IllegalArgumentException, IllegalAccessException,\n        InvocationTargetException \n      {\n          List<String> results = new ArrayList<String>();\n          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {\n              new Integer(hkey), toCstr(key), new Integer(KEY_READ) \n          });\n          if (handles[1] != REG_SUCCESS) \n          {\n              return null;\n          }\n          int[] info = (int[]) regQueryInfoKey.invoke(root,\n              new Object[] { new Integer(handles[0]) });\n\n          int count  = info[0]; // Fix: info[2] was being used here with wrong results. Suggested by davenpcj, confirmed by Petrucio\n          int maxlen = info[3]; // value length max\n          for(int index=0; index<count; index++)  {\n              byte[] name = (byte[]) regEnumKeyEx.invoke(root, new Object[] {\n                  new Integer\n                    (handles[0]), new Integer(index), new Integer(maxlen + 1)\n              });\n              results.add(new String(name).trim());\n          }\n          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });\n          return results;\n      }\n\n      private static int [] createKey(Preferences root, int hkey, String key)\n        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          return  (int[]) regCreateKeyEx.invoke(root,\n              new Object[] { new Integer(hkey), toCstr(key) });\n      }\n\n      private static void writeStringValue \n        (Preferences root, int hkey, String key, String valueName, String value) \n          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException \n      {\n          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {\n              new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) });\n\n          regSetValueEx.invoke(root,  \n              new Object[] { \n                  new Integer(handles[0]), toCstr(valueName), toCstr(value) \n              }); \n          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });\n      }\n\n      // utility\n      private static byte[] toCstr(String str) {\n          byte[] result = new byte[str.length() + 1];\n          for (int i = 0; i < str.length(); i++) {\n              result[i] = (byte) str.charAt(i);\n          }\n          result[str.length()] = 0;\n          return result;\n      }\n    }\n    \n", "code_lang": "java"}, {"id": 63, "title": "Logout", "content": " Logout \n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.io.IOException;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.annotation.WebServlet;\n\timport javax.servlet.http.Cookie;\n\timport javax.servlet.http.HttpServlet;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\n\t/*\n\t Servlet implementation class Logout\n\t*/\n\t@WebServlet(\"/Logout\")\n\tpublic final class Logout extends HttpServlet {\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\t/**\n\t\t* @see HttpServletHttpServlet()\n\t\t*/\n\t\tpublic Logout() {\n\t\t\tsuper();\n\t\t}\n\n\t\t/**\n\t\t* @see HttpServletdoGet(HttpServletRequest request, HttpServletResponse response)\n\t\t*/\n\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\tresponse.getWriter().append(\"Served at: \").append(request.getContextPath());\n\t\t}\n\n\t\t/**\n\t\t* @see HttpServletdoPost(HttpServletRequest request, HttpServletResponse response)\n\t\t*/\n\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\n\t\t\trequest.getSession().invalidate();\n\t\t\trequest.getSession().setAttribute(\"Authenticated\", \"\");\n\t\t\t\n\t\t\tCookie cookie = null;\n\t\t\tCookie[] cookies = null;\n\t\t\t// Get an array of Cookies associated with this domain\n\t\t\tcookies = request.getCookies();\n\t\t\t\t\n\t\t\tfor (Cookie cookie2 : cookies) {\n\t\t\t\tcookie = cookie2;\n\t\t\t\t\n\t\t\t\tif (cookie.getName().equals(\"JSESSIONID\"))\n\t\t\t\t{        \t \n\t\t\t\t\tcookie.setValue(\"\");\n\t\t\t\t}\n\t\t\t\n\t\t\t\tresponse.addCookie(null);\n\t\t\t\trequest.setAttribute(\"msg\",\"Session terminated!\");\n\t\t\t\trequest.getRequestDispatcher(\"/login.jsp\").forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n", "code_lang": "java"}, {"id": 64, "title": "File uploading", "content": " File Uploading \n\n\n Example:\n\n\n    /*\n    In this example we show the steps that must be taken in order to upload a file securely. The main steps are input validation ,file extension checks and mime type checks. \n    the following code snipet shows the jsp page that performs the post action to upload a certain file to destination \n    */\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=ISO88591\" pageEncoding=\"ISO88591\"%>\n    <!DOCTYPE html PUBLIC \"//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n        <head>\n            <title>File Upload</title>\n            <meta httpequiv=\"ContentType\" content=\"text/html; charset=UTF8\">\n        </head>\n        <body>\n            <form method=\"post\" action=\"FileUpload\" enctype=\"multipart/formdata\" >\n                File:\n                <input type=\"file\" name=\"file\" id=\"file\" /> <br/>\n                Destination:\n                <input type=\"text\" value=\"C:\\Users\\someuser\\Desktop\\test\" name=\"destination\"/>\n                </br>\n                <input type=\"submit\" value=\"Upload\" name=\"upload\" id=\"upload\" />\n            </form>\n            <%\n            String message =  \" \"; \n            message = (String) request.getAttribute(\"msg\");\n            if (message == null)\n            {\n                message = \" \";\n            }\n            out.println(\" \" + message);\n            %> \n        </body>\n    </html>\n\n\n    // The following code snippet performs the file uploading functionality from the post action performed at the jsp page showed above\n\n\n    package com.edw;\n    import java.io.File;\n    import java.io.FileNotFoundException;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n    import java.io.InputStream;\n    import java.io.OutputStream;\n    import java.io.PrintWriter;\n    import java.lang.reflect.InvocationTargetException;\n    import java.time.LocalDateTime;\n    import java.util.List;\n    import org.apache.log4j.Logger;\n\n    import javax.servlet.RequestDispatcher;\n    import javax.servlet.ServletException;\n    import javax.servlet.annotation.MultipartConfig;\n    import javax.servlet.http.HttpServlet;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    import javax.servlet.http.Part;\n    import com.Lib.AuditLog;\n    import com.Lib.WinRegistry;\n    import com.Lib.InputValidation;\n\n    import org.apache.commons.io.FilenameUtils;\n\n    @MultipartConfig\n    public final class FileUpload extends HttpServlet {\n        \n        /**\n        * \n        */\n        private static final long serialVersionUID = 1L;\n        final static Logger logger = Logger.getLogger(FileUpload.class);\n        private AuditLog Log = new AuditLog(); \n        InputValidation validate = new InputValidation();\n\n        //We check for form submit\n    \n        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n        {\n            response.setContentType(\"text/html;charset=UTF8\");\n            String userID = request.getSession().getAttribute(\"userID\");\n            boolean continueFunction = true;\n            boolean sessionTermination = false;\n            boolean blockAccess = false ;\n            \n            // Create path components to save the file\n            // The location of stored files should always be outside of your root\n            \n            // the destination path used to store the file gotten from the POST parameter\n            \n            final String path = request.getParameter(\"destination\");\n            final File f = new File(path);\n            final Part filePart = request.getPart(\"file\");\n            //We get the filename for doing different types of tests on it\n            final String fileName = getFileName(filePart);\n        \n            /*\n            First we check if the value is alphanumeric only to prevent uploading out of intended directory, \n            as wel as other injections\n            */\n            \n            if (validate.validateInput(userID, fileName, \"alphanumeric\", \"validation failed\",request.getRemoteAddr(),\"HIGH\").equals(\"validation failed\"))\n            {\n                continueFunction = false;\n            }\n            \n            else if (validate.validateInput(userID, fileName, \"alphanumeric\", \"Session Termination\",request.getRemoteAddr(),\"HIGH\").equals(\"terminate\"))\n            {\n                request.getSession().invalidate();\n                continueFunction = false;\n                sessionTermination=true;\n            }   \n            \n            else if (validate.validateInput(userID, fileName, \"alphanumeric\", \"Block access\",request.getRemoteAddr(),\"HIGH\").equals(\"block\"))\n            {\n                continueFunction = false;\n                blockAccess=true;\n            }else{\n                Log.SetLog(userID, \"Validated Successfully\" , \"SUCCESS\", LocalDateTime.now(),request.getRemoteAddr(),  \"\");           \n            }\n            \n            /*\n            The next step would be checking if the file contains the right extension in order to prevent\n            a user from uploading files which could be used to harm your system. in this example \n            we check if the last extension found in the file name is a jpg or a png. whenever\n            an application just regexes for the extension an attacker could\n            bypass the check by uploading an file like: \"filename.jpg.php\".\n            */       \n            \n            String  fileExtension = FilenameUtils.getExtension(fileName);\n\n            if (!fileExtension.equals(\"jpg\") && !fileExtension.equals(\"png\") )\n            {\n                continueFunction = false;\n            }\n\n            /*\n            If the file came through all the different checks, it is time to upload the file to your system. \n            */\n            if (continueFunction == true)\n            {       \n                OutputStream out = null;\n                InputStream filecontent = null;\n\n                //start uploading the file\n                try {\n                    out = new FileOutputStream(new File(path + File.separator + fileName));\n                    filecontent = filePart.getInputStream();\n\n                    int read = 0;\n                    final byte[] bytes = new byte[1024];\n\n                    while ((read = filecontent.read(bytes)) != 1) {\n                        out.write(bytes, 0, read);\n                    }\n                            \n                    logger.info(\"File\" + fileName + \"has been uploaded to\" + path); \n                    \n                } catch (FileNotFoundException fne) {\n\n                    logger.error(\"Problems during file upload. Error:\" + fne.toString());\n                \n                } finally {\n                    if (out != null) {\n                        out.close();\n                    }\n                    if (filecontent != null) {\n                        filecontent.close();\n                    }\n                }\n            }\n            \n            /*\n            Now we check the uploaded file for the right mimetype\n            We do this after the upload instead of checking the content type header since that header \n            can easily manipulated by an attacker. \n            */\n                    \n            List<String> ls = null;\n            String key = null;\n            try {\n                ls = WinRegistry.readStringSubKeys(WinRegistry.HKEY_LOCAL_MACHINE,\"SOFTWARE\\\\Classes\\\\\");\n                key = ls.stream().filter(st > st.matches(\".\"+StrSpli)).findAny().orElse(null);\n                \n            } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\n                logger.error(\"Problems during file upload. Error: \" + e.toString());\n            }\n            \n            \n            String mimeType = \"application/unknown\";\n            try {\n                mimeType = WinRegistry.readString(WinRegistry.HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\Classes\\\\\"+key, \"Content Type\");\n            } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\n                logger.error(\"Problems reading the extension value on Windows registry. Error: \" + e.toString());\n            }\n\n            if (mimeType == null || !mimeType.equals(\"image/jpeg\"))\n            {\n                //If the mimetype is not valid we delete the file from the system.\n                f.delete();\n                continueFunction = false;                \n            }  \n\n            if (continueFunction == false && sessionTermination == false && blockAccess == false)\n            {    \n                request.setAttribute(\"msg\",\"FAIL! file has not been uploaded\");\t\n                RequestDispatcher dd = request.getRequestDispatcher(\"/FileUpload.jsp\");\n                dd.forward(request, response);\t\t\t    \n                return;\t\t   \n            }\n            \n            if (continueFunction == true && sessionTermination == false && blockAccess == false)\n            {\n                request.setAttribute(\"msg\",\"SUCCESS! file uploaded\");\n                request.getRequestDispatcher(\"/FileUpload.jsp\").forward(request, response);\n                return;\n            }      \n                    \n            if (continueFunction == false && sessionTermination == false && blockAccess == true)\n            {  \n                request.setAttribute(\"msg\",\"Access Blocked!\");\n                request.getRequestDispatcher(\"/error.jsp\").forward(request, response);\n                return;\n            }\n            \n            if (continueFunction == false && sessionTermination == true && blockAccess == false)\n            {  \n                request.getSession().invalidate();\n                request.setAttribute(\"msg\",\"Session terminated!\");\n                request.getRequestDispatcher(\"/error.jsp\").forward(request, response);\n                return;\n            }       \n        }\n\n    @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n            super.doGet(req, resp);\n        }\n\n        /*\n        reading from headers \n        ...\n        POST /fileupload/upload HTTP/1.1\n        Host: localhost:8080\n        ContentType: multipart/formdata; \n        boundary=263081694432439\n        ContentLength: 441\n        263081694432439\n        ContentDisposition: formdata; name=\"file\"; filename=\"sample.txt\"\n        ContentType: text/plain\n        [ ..... ]\n        */\n\n        private String getFileName(final Part part)\n        {\n            final String partHeader = part.getHeader(\"contentdisposition\");\n            logger.info(\"Part Header = \" + partHeader)\n            \n            for (String content : part.getHeader(\"contentdisposition\").split(\";\"))\n            {\n                if (content.trim().startsWith(\"filename\"))\n                {\n                    return content.substring(content.indexOf(''='') + 1).trim().replace(\"\\\"\", \"\");\n                }\n            }\n            return null;\n        }   \n    }\n\n\n", "code_lang": "java"}, {"id": 65, "title": "Password forget and disallow old passwords", "content": " Password forget and disallow old passwords\n\n\n Example:\n\n\n\t/*\n\tWhenever you are developing a password forget function, these are the steps to follow\n\tin order to create hardened defenses.\n\n\tTABLE users\n\t\n\t| userID | userName | password |   EmailAddress   |    access    |\n\t   \n\t|   1    | Admin    | Csdar323 | info@admin.com  |     TRUE     |\n\t       \n\t|   2    | User     | Adf4fsv  | info@user.com   |     FALSE    |\n\t    \n\t|   3    | Guest    | dff4fKr  | info@guest.com  |     TRUE     |\n\t\n\n\n\tTABLE passwordForget\n\t   \n\t| forgotPasswordID |        Token            |  UserID |   Active   |     olPasswords   |\n\t\n\t|        1         |    c3ab8ff13720e....    |    1    |    YES     |      Csdar323     |\n\t\n\t|        2         |    7dd39466b3c89....    |    1    |    NO      |       ef0c4f2     |\n\t\n\t|        3         |    83d4a3960714c....    |    3    |    NO      |       dff4fKr     |\n\t\n\n\n\tAs you can see we also store the old passwords into the password forget table, this\n\twe do in order to prevent the user from using old passwords later on in the process.\n\n\tAlso use a CRON job to make sure the generated tokens for the password reset are\n\texpire after a certain amount of time like 20 minutes.\n\t*/\n\n\n\tpackage com.edw;\n\n\timport java.io.UnsupportedEncodingException;\n\timport java.security.InvalidKeyException;\n\timport java.security.NoSuchAlgorithmException;\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class PasswordForget {\n\n\t\tfinal static Logger logger = Logger.getLogger(PasswordForget.class);\n\t\tprivate String password = \"\" ; \n\t\tpublic int userID; \n\t\tprivate Randomizer rand = new Randomizer();\n\t\tprivate String active = \"\";\n\t\tpublic String token = \"\"; \n\t\t\n\t\t\n\t\tpublic String checkValidity(String email)\n\t\t{\n\t\t\tboolean emptyrows = false;\n\t\t\tString message = \"\"; \n\t\t\t\n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n\t\t\tConnection conn = null;\n\t\t\ttry {\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\n\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\tString query = \"SELECT * FROM members WHERE email = ?\";\n\t\t\t\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setString(1, email);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java result set\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tpassword  = rs.getString(\"password\");\n\t\t\t\t\tuserID \t= rs.getInt(\"userID\");\n\t\t\t\t\temail \t= rs.getString(\"email\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If the select was not empty we will be sending an email to the user as well as\n\t\t\t\t//preparing the password forget function\n\t\t\t\tif (rs.next() == false)\n\t\t\t\t{\n\t\t\t\t\temptyrows = true; \t    \t  \n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t\t\n\t\t\t\tif (emptyrows == true)\n\t\t\t\t{ \t  \n\t\t\t\t\tmessage = \"An email was sent to reset your password\";\n\t\t\t\t\t/*\n\t\t\t\t\tBefore we do anything we first set all other possible active statuses to NO\n\t\t\t\t\tin order to prevent an attacker creating a whole lot of tokens than FUZZING \n\t\t\t\t\tthe password reset token. \n\t\t\t\t\t*/\n\t\t\t\t\tactive  = \"NO\";   \n\t\t\t\t\tString query2 = \"UPDATE forgetPassword SET active= ? WHERE userID= ?\";\n\t\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\t\tPreparedStatement st2 = conn.prepareStatement(query2);    \n\t\t\t\t\tst2.setString(1, active);\n\t\t\t\t\tst2.setInt(2, userID);\n\t\t\t\t\t\n\t\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t\tst2.executeQuery();\n\t\t\t\t\tst2.close();\n\t\t\t\t\t\n\t\t\t\t\tString query3 = \"INSERT INTO forgetPassword\"\n\t\t\t\t\t\t\t+ \" (token, userID, active, oldPasswords)\"\n\t\t\t\t\t\t\t+ \" VALUES\"\n\t\t\t\t\t\t\t+ \" (?, ?, ?, ?)\";\n\n\t\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\t\tPreparedStatement st3 = conn.prepareStatement(query3);  \n\t\t\t\t\t//Here we generate the password forget token\n\t\t\t\t\tString token = rand.generateToken(30);\n\t\t\t\t\tst3.setInt(1, userID);\n\t\t\t\t\tst3.setString(2, token);\n\t\t\t\t\tst3.setInt(3, 1);\n\t\t\t\t\tst3.setString(4, password);\n\t\t\t\t\t\n\t\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t\tst3.executeQuery();\n\t\t\t\t\tst3.close();\n\t\t\t\t\t//Here we send an email to the user with the needed reset function\n\t\t\t\t\tString msg = \"follow this link to reset your password http://example.com/index.jsp?resetLink=$token\";\n\t\t\t\t\tSendEmail mail = new SendEmail();\n\t\t\t\t\tmail.sendmail(email, \"Password reset\", msg);   \n\t\t\t\t}else{\n\t\t\t\t\t/*\n\t\t\t\t\tWe show the user the same message in order to prevent the enumeration of\n\t\t\t\t\tvalid email addresses.\n\t\t\t\t\t*/\n\t\t\t\t\tmessage = \"An email was sent to reset your password\";  \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trs.close();\n\t\t\t\tst.close();\n\t\t\t\tconn.close();\n\t\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t}\n\t\t\treturn message; \n\t\t\t//this return value can be used from SERVLETs in order to manipulate HTTP responses to send messages back to JSP pages  \n\t\t}\n\n\t\tpublic String resetPassword(String resetlink, String Password) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException{\n\t\t\tHashing hasher = new Hashing();\n\t\t\tString message = \"\"; \t\t\n\t\t\t/*\n\t\t\tImagine the user clicked on his link with the token included and is redirected towards\n\t\t\tthe page where he can enter his new password.\n\t\t\t\n\t\t\tNow we select the information from the forgot password function where the\n\t\t\tforgot tokens matches the token in the database.\n\t\t\t*/\n\t\t\tactive = \"YES\"; \n\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n\t\t\tConnection conn = null;\n\t\t\ttry {\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\n\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\tString query = \"SELECT  a.userID, a.token, b.id\"\n\t\t\t\t\t\t+ \" FROM forgetPassword as a \"\n\t\t\t\t\t\t+ \"JOIN members as b\"\n\t\t\t\t\t\t+ \" ON a.userID = b.id WHERE token=? and Active=? \";\n\t\t\t\n\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setString(1, resetlink);\n\t\t\t\tst.setString(2, active);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java result set\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\ttoken     = rs.getString(\"token\");\n\t\t\t\t\tuserID \t= rs.getInt(\"userID\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (resetlink.equals(token))\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\tFirst we pull the password through createSalt function which enforces the input of\n\t\t\t\t\tsecure passwords.\n\t\t\t\t\t*/\n\t\t\t\t\tString oldpassword = \"\"; \t\n\t\t\t\t\tString salt = hasher.createSalt(Password);    \t\n\t\t\t\t\t/*\n\t\t\t\t\tThen we encrypt the password \n\t\t\t\t\t*/\t    \t\n\t\t\t\t\tString newpassword = hasher.hashPassword(salt, Password);\n\t\t\t\t\t\n\t\t\t\t\t/*\n\t\t\t\t\tFinally we compare the password against other old passwords from the \n\t\t\t\t\tpassword reset database in order to prevent the user from using old passwords \n\t\t\t\t\twhich could already be compromised by any means.\n\t\t\t\t\t*/\n\n\t\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\t\tString query2 = \"SELECT oldPasswords FROM forgetPassword where userID = ?\";\n\t\t\t\t\n\t\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\t\tPreparedStatement st2 = conn.prepareStatement(query2);\n\t\t\t\t\tst2.setInt(1, userID);\n\t\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t\tResultSet rs2 = st2.executeQuery(); \n\t\t\t\t\twhile (rs2.next())\n\t\t\t\t\t{\n\t\t\t\t\t\toldpassword = rs2.getString(\"oldPasswords\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newpassword.equals(oldpassword))\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage = \"This was an old password please do not use this password\";\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tactive = \"NO\";\n\t\t\t\t\t\t\n\t\t\t\t\t\t//First we update the new password for the user\n\t\t\t\t\t\tString query3 =\"UPDATE members SET password=? WHERE userID=?\";\n\t\t\t\t\t\t\n\t\t\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\t\t\tPreparedStatement st3 = conn.prepareStatement(query3);\t\n\t\t\t\t\t\tst3.setInt(1, userID);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t\t\tst3.executeQuery();\n\t\t\t\t\t\t\n\t\t\t\t\t\t//First we update the new password for the user\n\t\t\t\t\t\tString query4 =\"UPDATE forgetPassword SET active=? WHERE userID=?\";\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Then we destroy the reset token by setting it''s value to NO\n\t\t\t\t\t\tPreparedStatement st4 = conn.prepareStatement(query4);\n\t\t\t\t\t\tst4.setString(1, active);\n\t\t\t\t\t\tst4.setInt(2, userID); \n\t\t\t\t\t\t\n\t\t\t\t\t\t// execute the query, and get a java result set\n\t\t\t\t\t\tst4.executeQuery();  \n\t\t\t\t\t\t\n\t\t\t\t\t\trs2.close();\n\t\t\t\t\t\tst2.close();\n\t\t\t\t\t\tst3.close();\n\t\t\t\t\t\tst4.close();\n\t\t\t\t\t\tconn.close();\n\t\t\t\t\t}\n\t\t\t\t\tst2.close();    \n\t\t\t\t}\n\t\t\t\tst.close();\n\t\t\t\tconn.close();   \n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t}\n\t\t\treturn message; //this return value can be used from SERVLETs in order to manipulate HTTP responses to send messages back to JSP pages \n\t\t}\t\n\t}\n\n", "code_lang": "java"}, {"id": 66, "title": "Charsets", "content": " Charsets \n\n\n Example:\n\n\n\t/*\n\tIn order to set the \"Charsets\" header you''ll have to add the \n\tfollowing code to the head of your application, the following code could be used in your controller \n\tfor by example, text/html:\n\t*/\n\n\tresponse.addHeader(\"ContentType: text/html\", \"charset=utf8\");\n\n\t/*\n\tOr directly into your html markup:\n\t*/\n\n\t<meta httpequiv=\"ContentType\" content=\"text/html; charset=utf8\">\n    \t\t", "code_lang": "java"}, {"id": 67, "title": "Anti caching headers", "content": " Anticashing headers \n\n\n Example:\n\n\n    /*\n    Add the following headers to your application head in order to prevent the browser from caching\n    the following code could be used in your controller:\n    */\n\n    response.appendHeader(\"CacheControl\", \"nocache, nostore, mustrevalidate\"); // HTTP 1.1.\n    response.appendHeader(\"Pragma\", \"nocache\"); // HTTP 1.0.\n    response.appendHeader(\"Expires\", \"0\"); // Proxies.\n    \n", "code_lang": "java"}, {"id": 68, "title": "HttpOnly flag", "content": " HttpOnly flag\n\n\n Example:\n\n\n    //If you''re using Servlets 3.0, you can actually instruct the app server to ensure that all session cookies are HttpOnly and Secure //with the following fragments:\n\n    <sessionconfig>\n      <cookieconfig>\n        <secure>true</secure>\n        <httponly>true</httponly>\n      </cookieconfig>\n    </sessionconfig>\n\n\n    //httpOnly is supported as of Tomcat 6.0.19 and Tomcat 5.5.28.\n\n    //See the changelog entry for bug 44382.\n\n    //The last comment for bug 44382 states, \"this has been applied to 5.5.x and will be included in 5.5.28 onwards.\" However, it does //not appear that 5.5.28 has been released.\n\n    //The httpOnly functionality can be enabled for all webapps in conf/context.xml:\n\n    <Context useHttpOnly=\"true\">\n    ...\n    </Context>\n\n    //  My interpretation is that it also works for an individual context by setting it on the desired Context entry in conf/server.xml // (in the same manner as above).\n\n", "code_lang": "java"}, {"id": 69, "title": "X Content Type Options header", "content": " XContentTypeOptions header\n\n\n Example:\n\n\n    /*\n    In order to set the \"XContentTypeOptions\" header you''ll have to add the \n    following code to the head of your application, the following code could be used in your controller:\n    */\n\n    response.appendHeader(\"XContentTypeOptions\", \"nosniff\");\n", "code_lang": "java"}, {"id": 70, "title": "Secure Session Cookies", "content": " Secure Session Cookies \n\n\n Example:\n\n\n    //Secure Flag\n\n    //Benefit: Instructs the browser to never send the cookie over a HTTP request. The cookie can only be sent over HTTPS. This works //even if the user manually types in a request for HTTP. The HTTP request will be sent, but the browser will not send any cookies //marked as \u201cSECURE\u201d\n\n    //Limitations: The HTTP Request is still sent and this could be manipulated by a man in the middle to perform convincing phishing //attacks (See Strict Transport Security for solution).\n\n    //Example within HTTP Response:\n    //Cookie: JSESSIONID=kljahsdf123; SECURE;\n\n    //web.xml\n\n    //Servlet 3.0 (Java EE 6) introduced a standard way to configure secure attribute for the session cookie, this can be done by //applying the following configuration in web.xml\n\n    <sessionconfig>\n    <cookieconfig>\n    <secure>true</secure>\n    </cookieconfig>\n    </sessionconfig>\n\n    //Tomcat\n\n    //In Tomcat 6 if the first request for session is using https then it automatically sets secure attribute on session cookie. \n\n    //or programmatically \n\n    String sessionid = request.getSession().getId();\n    response.setHeader(\"SETCOOKIE\", \"JSESSIONID=\" + sessionid + \"; secure\");\n    ", "code_lang": "java"}, {"id": 71, "title": "CSRF Token JSF", "content": " CSRF Tokens  JSF\n\n\n Example:\n\n\n\t/*\n\n\tFor CSRF tokens we used a separate class outside of the normal controller, since\n\tit must be reused on several locations throughout the application\n\n\tAfter a successful validation of a user login, the application must also start a session\n\twhich contains the \"cross site request forgery\" token.\n\n\tFrom the Randomizer class we are generating the token we want by using a secure cryptographic function\n\tSecureRandom csprng = new SecureRandom();\n\n\tThen we generate a long value token containing a high entropy\n\tbyte[] randomBytes  = new byte[128];\n\n\tprng.nextBytes(randombytes);\n\n\tThen we base64 encode the string\n\tString csrfToken = Base64.getEncoder().encodeToString(randomBytes);\n\n\tThen we set the session attribute.\n\n\torigRequest.getSession(false);\n\torigRequest.getSession().setAttribute(\"CSRF\", csrfToken);\n\n\tThe next step is to implement this random token in each form field as a hidden input parameter\n\tand send it to a function which checks if the submitted token is equal to the one set after successful validation.\n\n\tThe following .xhtml snippet shows the code used to place the antiCSRF token inside the page.\n\tWhen the page renders, the <cu:antiCSRF/> is created as a viewstate encoded html input tag\n\twhich then carries the antiCSRF token.\n\tWhile in process of rendering the page, a new token is generated\n\tand added into the existing session.\n\tWhen the user press the commandButton\n\tthen CSRF token parameter is compared with the CSRF session parameter. \n\n\t*/\n\n\n\t/*\n\t<f:view contentType=\"text/html\">    \n\t<f:event listener=\"{userLoginView.isAuthenticated}\" type=\"preRenderView\" />\n\t[ .... ]\n\n\t<p:commandButton action=\"password?facesredirect=true\" value=\"Add User\" ajax=\"false\">\n\t<cu:antiCSRF/>\n\t</p:commandButton>\n\t</h:form>\n\n\t[ .... ]\n\n\t/* \n\n\tthe following function used to generate the new Session which then is added to the already existing session. \n\n\t*/\n\n\n\tpublic void generateToken(){\n\t\t\t\n\t\t\tHttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();\n\n\t\t\t//we include the random password/token class.\n\t\t\tRandomizer CSRF = new Randomizer();\n\t\t\t/*\n\t\t\tNow we create a random value for our CSRF tokens. See \"Random password token generation\" in\n\t\t\tthe code examples for more detailed information:\n\t\t\t*/\n\t\t\tString CSRftoken = CSRF.generate(25);\n\t\t\t\t\t\n\t\t\t//Set an accessor session.\n\t\t\torigRequest.getSession(false);\n\t\t\torigRequest.getSession().setAttribute(\"CSRF\", CSRftoken);\n\t\t}\n\n\t/* \n\tthe following function used to destroy the cookie and invalidate the session when the CSRF tokens dont match \n\t*/\n\n\t\tpublic void antiCSRF() throws IOException\n\t\t{\t\n\n\t\t\tExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();\n\t\t\tHttpServletRequest origRequest = (HttpServletRequest)externalContext.getRequest();\n\t\t\tHttpServletResponse origResponse = (HttpServletResponse)externalContext.getResponse();\n\t\t\tString AUTH_KEY =  (String) externalContext.getSessionMap().get(\"AUTH_KEY\");\n\t\t\texternalContext.getSessionMap().remove(AUTH_KEY);\n\t\t\texternalContext.invalidateSession();\n\t\t\t\n\t\t\t// Get an array of Cookies associated with this domain\n\t\t\tCookie[] cookies = origRequest.getCookies();\t\t         \n\t\t\tfor (Cookie cookie : cookies) \n\t\t\t{\t         \n\t\t\t\t\tif (\"JSSESIONID\".equalsIgnoreCase(cookie.getName()))\n\t\t\t\t\t{        \t \n\t\t\t\t\t\tcookie.setValue(null);\t       \t\t\n\t\t\t\t\t\torigResponse.addCookie(cookie);\n\t\t\t\t\t\n\t\t\t\t\t\tLog.SetLog(\"\", \"\", \"Cookie has been destroyed!\", LocalDateTime.now(), \"\", \"\");    \n\t\t\t\t\t} \n\t\t\t}\t\t     \n\t\t}\n\n\t/* \n\tThis function used to decode the viewstate and get the token value from the html input tag. Also it performs token comparison between the antiCSRF token values of the html component and the session attribute. If the comparison fails then the session must be invalid.\n\n\t*/ \n\t\t\tpublic void decode(FacesContext context) {\n\t\t\t\tFacesContext fc = FacesContext.getCurrentInstance();\n\n\t\t\t\t// access the hidden input field value\n\t\t\t\tExternalContext external = context.getExternalContext();\n\t\t\t\tMap<?, ?> requestMap = external.getRequestParameterMap();\n\t\t\t\tString value = String.valueOf(requestMap.get(\"_CSRFToken\"));\n\n\t\t\t\t// access the session and get the token\n\t\t\t\tHttpSession session = (HttpSession) external.getSession(false);\n\t\t\t\tString token = (String) session.getAttribute(\"CSRF\");\n\n\t\t\t\t// check if the token exists\n\t\t\t\tif (value == null || \"\".equals(value)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.antiCSRF();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tlogger.error(e.toString());\n\t\t\t\t\t}\n\t\t\t\t\tLog.SetLog(\"\", \"\", \"antiCSRF token doesn''t match! Failed attempt\", \"\", \"NULL\"); \n\t\t\t\t\tlogger.info(\"antiCSRF token doesn''t match! Failed attempt\");\n\t\t\t\t\tConfigurableNavigationHandler nav = (ConfigurableNavigationHandler) fc.getApplication().getNavigationHandler(); \n\t\t\t\t\tnav.performNavigation(\"csrf\");\n\t\t\t\t}\n\n\t\t\t\t// check the values for equality\n\t\t\t\tif (!value.equalsIgnoreCase(token)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.antiCSRF();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tlogger.error(e.toString());\n\t\t\t\t\t}\n\t\t\t\t\tLog.SetLog(\"\", \"\", \"antiCSRF token doesn''t match! Failed attempt\", \"\", \"NULL\"); \n\t\t\t\t\tlogger.info(\"antiCSRF token doesn''t match! Failed attempt\");\n\t\t\t\t\tConfigurableNavigationHandler nav = (ConfigurableNavigationHandler) fc.getApplication().getNavigationHandler(); \n\t\t\t\t\tnav.performNavigation(\"UserLogin\");\n\t\t\t\t}\n\t\t\t}\n\n\t/*\n\tthe following function used to encode the viewstate with the html tag into a jsf component \n\t*/ \n\n\t@Override public void encodeEnd(FacesContext context) throws IOException \n\t{\n\t\t//generate new token in every request\n\t\tthis.generateToken();\n\t\t// get the session (don''t create a new one!)\n\t\tHttpSession session = (HttpSession) context.getExternalContext().getSession(false);\n\t\t// get the token from the session\n\t\tString token = (String) session.getAttribute(\"CSRF\");\n\t\t// write the component HTML to the response\n\t\tResponseWriter responseWriter = context.getResponseWriter();\n\t\tresponseWriter.startElement(\"input\", null);\n\t\tresponseWriter.writeAttribute(\"type\", \"hidden\", null);\n\t\tresponseWriter.writeAttribute(\"name\", \"_CSRFToken\", \"\");\n\t\tresponseWriter.writeAttribute(\"value\", token, \"CSRF\");\n\t\tresponseWriter.endElement(\"input\");\n\t}\n\n\t*/\n    \n", "code_lang": "java"}, {"id": 72, "title": "HTML encoding", "content": " HTML encoding\n\n\n Example:\n\n\t\t\t\t\n\t/*\n\tWhenever user input is displayed in the application all user input should be properly escaped \n\tto prevent XSS injections.\n\t*/\n\n\t/*\n\tThis escaping is used whenever you put the code straight into the html like:\n\t<span>YOUR USER INPUT</span>\n\tThe attack bellow will now be outputted as,\n\t&lt;script&gt;alert(1337);&lt;/script&gt;\n\t*/\n\n\timport org.owasp.esapi.ESAPI;\n\timport org.owasp.esapi.errors.EncodingException;\n\n\tString htmlbug = ESAPI.encoder().encodeForHTML(\"<script>alert(1337);</script>\");\n\n\t/*\n\tThis next encoding method is used whenever you are allowing user input into \n\thtml attributes.\n\tThe attack below will now be outputted as:\n\tonload=&amp;39;alert(1337)&amp;39;\n\t*/\n\t\t\t\n\tString htmlatr = ESAPI.encoder().encodeForHTMLAttribute(\"onload=''alert(1337);''\");\n\t\t\t\n\t/*\n\tWhenever parameters are rendered via javascript your application will detect normal injections\n\tin the first instant. in order for the application not to be vulnerable to javascrpt encoding you MUST use the encodeForJavaScript function, any other escaping function still leaves your code vulnerable\n\t*/\t      \n\n\tESAPI.encoder().encodeForJavaScript(\"\\\\x3Cscript\\\\x3Ealert(12);\\\\x3C\\\\x2Fscript\\\\x3E\");\n\t\t\t\n\t/*\n\tWhenever a user can submit an link/AHREF in your application you must solely depend upon the\n\t\"ESAPI.encoder().encodeForURL\" method since an attacker could otherwise inject the href with an XSS\n\tthat looks like this \"javacript:alert(\"XSS\");\" whenever a victim now clicks the link this XSS\n\twill be executed in his browser.\n\t*/ \n\n\ttry {\n\t\tESAPI.encoder().encodeForURL(\"javascript:alert(234);\");\n\t} catch (EncodingException e) {\n\t\tlogger.error(\"Error encoding characters : \" + e.toString() + \" Time : \" + LocalDateTime.now());\n\t}\n\n\t/*\n\tSecurity consists of different layers of protection in order to guarantee the integrity\n\tof your application. This means that the value displayed from the database/user should\n\talready be sanitized before being processed in order to prevent XSS.\n\n\tAs an example, what do you do when you expect a numeric value from your application?\n\n\tyou first sanitize the user input by means of an input validation method like:\n\tSee the \"input validation\" class for the entire example!\n\t*/\n\tInputValidation validate = new InputValidation();\n\tString userinput = \"when this string is evil the application will block operation!\";\n\tif(validate.validateInput(userinput, \"numeric\", \"Unexpected user input\", \"HIGH\", 3)== false)\n\t{ /* Cancel operation of your application */ }\n\t\t\t\n\t/*\n\tIn this example the application cancelled the request by means of simple validation.\n\t*/\n    \n", "code_lang": "java"}, {"id": 73, "title": "Hashing", "content": " Hashing\n\n\n Example:\n\n\n\tpackage com.Lib;\n\n\timport java.io.UnsupportedEncodingException;\n\timport java.security.InvalidKeyException;\n\timport java.security.NoSuchAlgorithmException;\n\timport java.security.SecureRandom;\n\timport org.apache.commons.codec.binary.Base64;\n\timport org.apache.log4j.Logger;\n\n\tpublic class Hashing {\n\n\t\tfinal static Logger logger = Logger.getLogger(Hashing.class);\n\t\t\n\t\tpublic String createSalt(String password) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException\n\t\t{\n\t\t\t/*\n\t\t\tFor generating the random salt we want to use a secure cryptographic function\n\t\t\t*/\n\t\t\t\n\t\t\tSecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\t\t\t//Create array for salt\n\t\t\tbyte[] salt = new byte[128];\n\t\t\t//Get a random salt\n\t\t\tsr.nextBytes(salt);\n\t\t\t//return salt\t\t\n\t\t\t\n\t\t\t/**\n\t\t\t* RFC 2898 password derivation compatible with .NET Rfc2898DeriveBytes class.\n\t\t\t*/\n\t\t\tRfc2898DeriveBytes hasher = new Rfc2898DeriveBytes(password, salt, 10000);\n\t\t\tString bencoded = new String(Base64.encodeBase64(hasher.GetBytes(25)));\n\t\t\treturn bencoded;\t\n\t\t}\n\t\t\n\t\t//The salt in this function is the return value of the createSalt function\n\t\tpublic String hashPassword(String Salt, String Password)\n\t\t{\n\t\t\tRfc2898DeriveBytes Hasher = null;\n\t\t\ttry {\n\t\t\t\tHasher = new Rfc2898DeriveBytes(Password + \"ALongPepperValue\",Salt.getBytes(), 10000);\n\t\t\t} catch (InvalidKeyException | NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\t\t\t\tlogger.error(\"error in hashing password!\" + e.toString());\n\t\t\t}\n\t\t\tString bencoded = new String(Base64.encodeBase64(Hasher.GetBytes(25)));\n\t\t\treturn bencoded;\n\t\t}\n\n\t\t//With this function we validate the password hash\n\t\tpublic boolean Validate(String passwordHash, String saltHash, String enteredPassword)\n\t\t{\n\t\t\tRfc2898DeriveBytes Hasher = null;\n\t\t\ttry {\n\t\t\t\tHasher = new Rfc2898DeriveBytes(enteredPassword + \"ALongPepperValue\",saltHash.getBytes(), 10000);\n\t\t\t} catch (InvalidKeyException | NoSuchAlgorithmException | UnsupportedEncodingException e) \n\t\t\t\tlogger.error(\"Validation error in hashing password!\" + e.toString());\n\t\t\t}\n\t\t\tString bencoded = new String(Base64.encodeBase64(Hasher.GetBytes(25)));\n\t\t\tif (bencoded.equals(passwordHash))\n\t\t\t\treturn true;\n\t\t\treturn false;\n\t\t}\n\t}\n\n", "code_lang": "java"}, {"id": 74, "title": "XSL Injection Prevention", "content": " XSL Injection Prevention \n\n\n Example:\n\n\n    /*\n    In order to prevent XSL injections you must enforce strict policy''s whenever the\n    files are loaded from a source controlled by a possible attacker.\n\n    Let''s say for example that the user can choose from several XSL files on your application.\n\n    ABC.xsl arranges your employee names on alphabetical order\n    CBA.xsl just shows the input by order of your XML file.\n\n    Before attaching the XSL files to the style sheet we first want to \n    do validation on the request to make sure the included file was one of our own predefined files\n    */\n\n    package com.edw;\n\n    import java.io.File;\n    import java.io.IOException;\n\n    import javax.xml.parsers.DocumentBuilder;\n    import javax.xml.parsers.DocumentBuilderFactory;\n    import javax.xml.parsers.FactoryConfigurationError;\n    import javax.xml.parsers.ParserConfigurationException;\n    import javax.xml.transform.OutputKeys;\n    import javax.xml.transform.Source;\n    import javax.xml.transform.Transformer;\n    import javax.xml.transform.TransformerException;\n    import javax.xml.transform.TransformerFactory;\n    import javax.xml.transform.dom.DOMResult;\n    import javax.xml.transform.dom.DOMSource;\n    import org.w3c.dom.ls.LSSerializer;\n    import org.w3c.dom.Document;\n    import org.xml.sax.SAXException;\n    import org.w3c.dom.ls.DOMImplementationLS;\n\n    public class IncludeXSL {\n\n        private WhiteList wt = new WhiteList();\n        \n        public String includeXSL(String WhiteListing, String input)\n        {\n            LSSerializer serializer = null ;\n            boolean continue_ = true;\n            Document result = null;\n            \n            /*\n            We want to WhiteList the paged for expected values, in this example they are,\n            page1,page2 etc.. for more information about WhiteListing see \"whitelisting\" in the code examples:\n            */\n            \n            if (wt.WhiteListing(WhiteListing, input) == false) { continue_ = false; }\n            \n            //If all went good we do the function\n            if(continue_)\n            {\n                //LOAD XML FILE\n                //Load the XML source\n                Document xslt = null; \n                Document xml = null; \n                try {\n                    File fXmlFile = new File(input);\n                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n                    DocumentBuilder db = dbFactory.newDocumentBuilder();      \n                    xml  = db.newDocument();\n                    xslt = db.parse(fXmlFile);\n                } catch (SAXException | IOException | ParserConfigurationException e) {\n                    \n                }\n                \n                xml.appendChild(xml.createElementNS(null, \"root\"));\n                try {\n                    result = transformXML(xml, xslt);\n                } catch (TransformerException | ParserConfigurationException | FactoryConfigurationError e) {\n                    \n                }\n                serializer = ((DOMImplementationLS) xml.getImplementation()).createLSSerializer();\n            }\n            return serializer.writeToString(result); \n        }\n        \n        //Configure the transformer\n        public static Document transformXML(Document xml, Document xslt) throws TransformerException, ParserConfigurationException, FactoryConfigurationError {\n\n            Source xmlSource = new DOMSource(xml);\n            Source xsltSource = new DOMSource(xslt);\n            DOMResult result = new DOMResult();\n\n            // the factory pattern supports different XSLT processors\n            TransformerFactory transFact = TransformerFactory.newInstance();\n            Transformer trans = transFact.newTransformer(xsltSource);\n            trans.setOutputProperty(OutputKeys.ENCODING, \"UTF8\");\n            trans.transform(xmlSource, result);\n            Document resultDoc = (Document) result.getNode();\n\n            return resultDoc;\n        }\n    }\n\n", "code_lang": "java"}, {"id": 75, "title": "Disable Directory Listing", "content": " Disable Directory Listing \n\n\n Example:\n\n\n    // Directory Listing configuration in web.xml \n\n    <servlet>\n        <servletname>default</servletname>\n        <servletclass>\n        org.apache.catalina.servlets.DefaultServlet\n        </servletclass>\n        <initparam>\n            <paramname>debug</paramname>\n            <paramvalue>0</paramvalue>\n        </initparam>\n        <initparam>\n            <paramname>listings</paramname>\n            <paramvalue>false</paramvalue>    <! This setting enables/disables directory listings >\n        </initparam>\n        <loadonstartup>1</loadonstartup>\n    </servlet>\n\n    ", "code_lang": "java"}, {"id": 76, "title": "Crossdomain XML", "content": " Crossdomain XML\n\n\n Example:\n\n\n    A bad example of a crossdomain.xml would be:\n\n    <?xml version=\"1.0\" ?>\n    <crossdomainpolicy>\n      <sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n      <allowaccessfrom domain=\"*\"/>\n      <allowhttprequestheadersfrom domain=\"*\" headers=\"*\"/>\n    </crossdomainpolicy>\n\n    Because it allows access from all other domains.\n\n    Instead of this approach you might want to use the following restrictions. \n    Example by twitter''s crossdomain.xml:\n\n    <?xml version=\"1.0\" encoding=\"UTF8\"?>\n    <crossdomainpolicy xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" \n    xsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n      <allowaccessfrom domain=\"twitter.com\" />\n        <allowaccessfrom domain=\"api.twitter.com\" />\n        <allowaccessfrom domain=\"search.twitter.com\" />\n        <allowaccessfrom domain=\"static.twitter.com\" />\n        <sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n      <allowhttprequestheadersfrom domain=\"*.twitter.com\" headers=\"*\" secure=\"true\"/>\n    </crossdomainpolicy>\n", "code_lang": "java"}, {"id": 77, "title": "Encoder SQL ESAPI", "content": " Encoder (SQL  ESAPI)\n\n\n Example:\n\n\n\tpackage com.edw;\n\n\timport java.time.LocalDateTime;\n\timport java.util.regex.Matcher;\n\timport java.util.regex.Pattern;\n\timport org.owasp.esapi.ESAPI;\n\timport org.owasp.esapi.codecs.MySQLCodec;\n\n\tpublic final class Encoding {\n\t\t\n\t\tAuditLog Log = new AuditLog(); \n\t\t\n\t\tpublic String encoder(String input , String allowed, String user_id)\n\t\t{\t\n\t\t    /*\n\t\t\tWe can specify also special characters which allowed in order to keep\n\t\t\ttrack of any unwanted special characters\n\t\t\t\n\t\t\tExample :\n\t\t\t\n\t\t\tTo keep malicious inputs contained, any inputs written to the database need to be encoded.\n\t\t\tSQL encoding: '' OR 1=1 '' is encoded to \\'' OR 1\\=1 \\\\\\''\n\t\t\t\n\t\t\t*/\n\t\t\tString pattern = \"^[azAZ09\" + allowed + \"]+$\";\n\t\t\t// Create a Pattern object\n\t\t\tPattern reg = Pattern.compile(pattern);\n\t\t\t// Now create matcher object.\n\t\t\tMatcher match = reg.matcher(input);\n\t\t\tif (!match.find()) {\t\n\t\t\t    Log.SetLog(user_id, \"Illegal characters\", \"FAIL\", LocalDateTime.now(),  \"HIGH\");\n\t\t\t}\t\t\n\t\t\t//We return the user input encoded\t      \n\t\t\treturn ESAPI.encoder().encodeForSQL(new MySQLCodec(MySQLCodec.MYSQL_MODE), input);\n\t\t}\n\t}\n", "code_lang": "java"}, {"id": 78, "title": "Session cookies domain", "content": " Session Cookies \n\n\n Example:\n\n\n    /*\n    Setting the \"Domain\" attribute to a too permissive value, such as \"example.com\" \n    allows an attacker to launch attacks on the session IDs between different hosts and \n    web applications belonging to the same domain, known as crosssubdomain cookies.\n    For example, vulnerabilities in www.example.com might allow an attacker to get access \n    to the session IDs from secure.example.com.\n    */\n\n    //This is apparently supported via a configuration setting in 6.0.27 and onwards:\n\n    Configuration is done by editing METAINF/context.xml\n\n    <Context sessionCookiePath=\"/something\" sessionCookieDomain=\".domain.tld\" />\n", "code_lang": "java"}, {"id": 79, "title": "SQL query JDBC", "content": " SQL Query JDBC\n\n\n Example:\n\n\n    /*\n     The JDBC library provides an API for building SQL commands that sanitize untrusted data. Use the java.sql.PreparedStatement class properly to escape input strings and prevent SQL injection.\n     This example uses a parametric query with a ? character as a placeholder for the argument, and also validates the length of the username argument, preventing an attacker from submitting an arbitrarily long user name.\n    */\n\n    public void doPrivilegedAction(\n        String username, char[] password\n    ) throws SQLException {\n        Connection connection = getConnection();\n        if (connection == null) {\n            // Handle error\n        }\n        try {\n            String pwd = hashPassword(password);\n            // Validate username length\n            if (username.length() > 8) {\n                // Handle error\n            }\n        \n            String sqlString = \"select * from db_user where username=? and password=?\";\n            PreparedStatement stmt = connection.prepareStatement(sqlString);\n            stmt.setString(1, username);\n            stmt.setString(2, pwd);\n            ResultSet rs = stmt.executeQuery();\n            if (!rs.next()) {\n                throw new SecurityException(\"User name or password incorrect\");\n            }\n            // Authenticated; proceed\n        } finally {\n            try {\n                connection.close();\n            } catch (SQLException x) {\n                // Forward to handler\n            }\n        }\n    }\n\n\n", "code_lang": "java"}, {"id": 80, "title": "SQL Query", "content": " SQL Query prepared statement and binding\n\n\n Example: \n\n\n    /*\n    This example uses a prepared statement in order to insert data into the database.\n    Because this method enforces the user to prepare all user input  passed into the query, it always escapes SQL injections so none could be accidentally forgotten.\n\n    For detecting a possible attack on your application simply escaping the user input is obviously not enough.\n    Therefore, you''ll want to verify the input as submitted by the user does not contain malicious code.\n    In this example the expected input is az/09:\n    */\n\n    :::java \n    String employeeId = request.getParameter(''userId'');\n    String salary = request.getParameter(''salary'');\n    Pattern numeric = Pattern.compile(\".*[^09].*\");\n    if(!numeric.matcher(employeeId).find() && !numeric.matcher(salary).find()){\n\n        /*\n        Always log an action first and then perform the action:\n        Set a log for whenever there is unexpected userinput with a threat level\n        */\n        log(userId, \"Invalid expected input\", \"FAIL\", Calendar.getInstance(), \"privilege\", \"HIGH\" );\n\n        /*\n        Set counter; if counter hits 3 the user''s session must terminated.\n        After 3 session terminations, the user''s account must be blocked\n        */\n        counter++;\n        if(counter > 2 ){\n                blockUser(userId);\n        }\n\n        String updateQuery = \"UPDATE EMPLOYEES SET SALARY = ? WHERE ID = ?\";\n        PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);\n        preparedStatement.setInt(1, salary);\n        preparedStatement.setInt(2, employeeId);\n    }\n\n    // Always use parameterized queries with prepared statements.\n    // For example, with Hibernate (HQL) named parameters\n\n    :::java\n    Query query = session.createQuery(\"UPDATE EMPLOYEES SET SALARY = :salary WHERE ID = :employeeId\");\n    query.setParameter(\"salary\", salary);\n    query.setParameter(\"employeeId\", employeeId);\n\n    // Or with JPA:\n\n    :::java\n    Query query = entityManager.createQuery(\"UPDATE EMPLOYEES SET SALARY = :salary WHERE ID = :employeeId\");\n    query.setParameter(\"salary\", salary);\n    query.setParameter(\"employeeId\", employeeId);\n\n", "code_lang": "java"}, {"id": 81, "title": "AuditLog", "content": " AuditLogs\n\n\n Example:\n\n\n\tpackage com.edw;\n\timport java.io.BufferedWriter;\n\timport java.io.FileWriter;\n\timport java.io.IOException;\n\timport java.io.PrintWriter;\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.time.LocalDateTime;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class AuditLog {\n\t\n\t\tprivate int countID;\n\t\tprivate int userID; \n\t\tprivate int count; \n\t\tprivate int blocker; \n\t\tpublic static String validation = \"pass\"; \n\t\t\n\t\tfinal static Logger logger = Logger.getLogger(AuditLog.class);\n\t\t\n\t\t\n\t\tpublic void SetLog(String userid, String message, String state, LocalDateTime localDateTime, String ThreatLevel, String remote_address)\n\t\t{\n\n\t\t\ttry(FileWriter fw = new FileWriter(\"C:\\\\log.txt\", true);\n\t\t\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\t\t\tPrintWriter out = new PrintWriter(bw))\n\t\t\t\t{\n\t\t\t\t\tout.println(userid + \"  \" + message + \"  \" + remote_address /*REMOTE_ADDR from servlet*/ + \"  \" + state + \"  \" + LocalDateTime.now()\n\t\t\t\t\t+ \"  \" +  localDateTime);\n\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlogger.error(\"cannot write to file : \"  + e.toString());\n\t\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tpublic void SetLog(String userid, String message, String state, LocalDateTime localDateTime, String ThreatLevel)\n\t\t{\n\t\t\t\n\t\t\ttry(FileWriter fw = new FileWriter(\"C:\\\\log.txt\", true);\n\t\t\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\t\t\tPrintWriter out = new PrintWriter(bw))\n\t\t\t\t{\n\t\t\t\t\tout.println(userid + \"  \" + message + \"  \" + state + \"  \" + LocalDateTime.now()\n\t\t\t\t\t+ \"  \" +  localDateTime);\n\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlogger.error(\"cannot write to file : \"  + e.toString());\n\t\t\t\t}\t\t\n\t\t}\n\t\t\n\t\tpublic String counter(int counting)\n\t\t{\n\n\t\t\tConnection connect = null;\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconnect = ds.getConnection();\t\t\t\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tFirst we select the counts from the count table in order to verify if the user session should be terminated\n\t\t\t\tor that the user should be locked out.\n\t\t\t\t*/\n\t\t\t\tString sqlquery = \"SELECT * from counter\";\n\t\t\t\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tPreparedStatement state = connect.prepareStatement(sqlquery);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java resultset\n\t\t\t\tResultSet res = state.executeQuery();\n\t\t\t\t\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\twhile (res.next())\n\t\t\t\t{\n\t\t\t\t\tuserID = res.getInt(\"userID\");\n\t\t\t\t\tcount  = res.getInt(\"count\");\n\t\t\t\t\tblocker = res.getInt(\"blocker\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstate.close();\n\t\t\t\tconnect.close();\n\t\t\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t\t\treturn \"cannot search database. check query\"; \n\t\t\t}\n\t\t\t\n\t\t\tConnection conn = null;\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\t\t\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\tFirst we select the counts from the count table in order to verify if the user session should be terminated\n\t\t\t\tor that the user should be locked out.\n\t\t\t\t*/\n\t\t\t\tString query = \"SELECT * from counter WHERE userID = ?\";\n\t\t\t\n\t\t\t\t//We bind the parameter in order to prevent sql injections\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setInt(1, userID);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java resultset\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\t//Next we read the value from the database and put it into a variable\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tcount  = rs.getInt(\"count\");\n\t\t\t\t\tblocker = rs.getInt(\"blocker\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tst.close();\n\t\t\t\tconn.close();\n\t\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t\treturn \"cannot search database. check query\"; \n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//We add the counting to the database results for the final value\n\t\t\tcount  = count + counting; \n\t\t\tint finalCount = count;\n\t\t\tblocker = blocker + counting;\n\t\t\tint finalBlock = blocker;\n\t\t\t\n\t\t\t//Here we connect to the database  \n\t\t\tConnection conn2 = null;\n\t\t\ttry {\n\t\t\tContext initContext2 = new InitialContext();\n\t\t\tContext webContext2  = (Context)initContext2.lookup(\"java:/comp/env\");\n\t\t\tDataSource ds2 = (DataSource)webContext2.lookup(\"jdbc/myJdbc\");\n\t\t\tconn2 = ds2.getConnection();\t\n\t\t\t\n\t\t\t// create the java mysql update preparedstatement\n\t\t\tString query2 = \"UPDATE counter SET count = ?, blocker = ? WHERE userID = ?\";\n\t\t\tPreparedStatement preparedStmt2 = conn2.prepareStatement(query2);\n\t\t\tpreparedStmt2.setInt(1, count);\n\t\t\tpreparedStmt2.setInt(2, blocker);\n\t\t\tpreparedStmt2.setInt(3, userID);\n\n\t\t\t// execute the java preparedstatement\n\t\t\tpreparedStmt2.executeUpdate();\n\t\t\t\n\t\t\t\n\t\t\tconn2.close();\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"SQL insert query error in update counter\" + e.toString() );\n\t\t\t\treturn \"SQL insert query error in update counter\";  // this can be used to dispatch the response back to the client showing a corresponding message\n\t\t\t\t} \n\t\t\t\n\t\t\t\n\t\t\tif (finalCount == 3)\n\t\t\t{\n\t\t\t\tvalidation = \"terminate\";        \t\n\t\t\t}\n\n\t\t\tif (finalBlock > 3)\n\t\t\t{        \t\n\t\t\t\tint access = 0; //0 is considered as FALSE in MySQL\n\t\t\t\t\n\t\t\t\t//Here we connect to the database  \n\t\t\t\tConnection conn3 = null;\n\t\t\t\ttry {\n\t\t\t\t\tContext initContext3 = new InitialContext();\n\t\t\t\t\tContext webContext3  = (Context)initContext3.lookup(\"java:/comp/env\");\n\t\t\t\t\tDataSource ds3 = (DataSource)webContext3.lookup(\"jdbc/myJdbc\");\n\t\t\t\t\tconn3 = ds3.getConnection();\t\n\t\t\t\t\t\n\t\t\t\t\t// create the java mysql update prepared statement\n\t\t\t\t\tString query3 = \"UPDATE users set access = ? WHERE userID = ?\";\n\t\t\t\t\tPreparedStatement preparedStmt3 = conn3.prepareStatement(query3);\n\t\t\t\t\tpreparedStmt3.setInt(1, access);\n\t\t\t\t\tpreparedStmt3.setInt(3, userID);\n\n\t\t\t\t\t// execute the java preparedstatement\n\t\t\t\t\tpreparedStmt3.executeUpdate();\n\t\t\t\t\t\n\t\t\t\t\tvalidation = \"block\";\n\t\t\t\t\t\n\t\t\t\t\tconn3.close();\n\t\t\t\t} catch (SQLException | NamingException e) {    \t\t\t\t\t    \t\t\t\n\t\t\t\t\tlogger.error(\"SQL insert query error in update access\" + e.toString() );\n\t\t\t\t\treturn \"SQL insert query error in update access\" ;  // this can be used to dispatch the response back to the client showing a corresponding message   \t\t    \t\t\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\treturn validation;    \t\t\n\t\t}\t\t\n\t}\n\n", "code_lang": "java"}, {"id": 82, "title": "User Registration SQL truncation prevention", "content": " User registration SQL truncation prevention\n\n\n Example:\n\n\n\t/*\n\tIn order to prevent Column truncation SQL injection Solution we have to make sure the\n\tapplications structural logic does not mismatches with the database structural logic.\n\tTo achieve this imagine the follow example of a database structure of a users table\n\n\tTABLE users\n\t\n\t|        *Name*        |    *Type*        |    *Extra*     |\n\t\n\t|        userID        |    Int(11)       | AUTO_INCREMENT |\n\t\n\t|       Username       |    char(21)      |                |\n\t\n\t|       Password       |  Varchar(255)    |                |\n\t\n\t|      PrivilegeID     |    Int(11)       |                |\n\t\n\t*/\n\n\n\tpackage com.edw;\n\n\timport java.io.UnsupportedEncodingException;\n\timport java.security.InvalidKeyException;\n\timport java.security.NoSuchAlgorithmException;\n\timport java.sql.Connection;\n\timport java.sql.PreparedStatement;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.time.LocalDateTime;\n\n\timport javax.naming.Context;\n\timport javax.naming.InitialContext;\n\timport javax.naming.NamingException;\n\timport javax.sql.DataSource;\n\n\timport org.apache.log4j.Logger;\n\n\tpublic final class RegisterUser {\n\t\t\n\t\tprivate AuditLog Log = new AuditLog();\n\t\tprivate Hashing hash = new Hashing();\n\t\tfinal static Logger logger = Logger.getLogger(RegisterUser.class);\n\t\t\n\t\tpublic boolean userCheck(String username){\n\t\t\t\n\t\t\tboolean isTrue = false; \n\t\t\t//Here we connect to the database by means of a connection configured in the web.xml and /METAINF/context.xml \n\t\t\tConnection conn = null;\n\t\t\ttry {\n\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\tconn = ds.getConnection();\t\n\n\t\t\t\t//Here we select the number of counts from aggregate column in order to verify the number of connections:\n\t\t\t\tString query = \"SELECT * FROM members WHERE username = ?\";\n\t\t\t\n\t\t\t\t//We bind the parameter in order to prevent SQL injections\n\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\tst.setString(1, username);\n\t\t\t\t\n\t\t\t\t// execute the query, and get a java result set\n\n\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\n\t\t\t\tif (!rs.isBeforeFirst() && !rs.next())\n\t\t\t\t{\n\t\t\t\t\tisTrue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tst.close();\n\t\t\t\tconn.close();\n\t\t\t\t\n\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t}\n\t\t\treturn isTrue;\n\t\t}\n\t\t\n\t\tpublic boolean userRegister(String username, String password, int privID){\n\n\t\t\tboolean isTrue = false;\n\t\t\t\n\t\t\t/*\n\t\t\tWhenever the user gains the ability to register himself or change his user\n\t\t\tcredentials you must always enforce the application to compare the length of the\n\t\t\tsubmitted string against the length of the allowed string length in your database\n\t\t\tstructure in order to prevent SQL column truncation.\n\t\t\t*/\n\t\t\t\n\t\t\tint length = username.length(); \n\t\t\t/*\n\t\t\tWe now compare the length of the username against the allowed string length in\n\t\t\tThe database structure\n\t\t\t*/\n\t\t\tif(length >= 21){\n\t\t\t\t//If length is to large the function must return false and the result must be logged.\n\t\t\t\tLog.SetLog(username, \"Username was to long!\", \"FAIL!\", LocalDateTime.now(), null);\n\t\t\t}\n\t\t\t\n\t\t\t//If true then register the user!       \n\t\t\tif(this.userCheck(username) == true){\n\t\t\t\tisTrue = true;\n\t\t\t\t\n\t\t\t\t//Then we encrypt the password\n\t\t\t\tString salt = \"\";\n\t\t\t\tString passhash = \"\";\n\t\t\t\ttry {\n\t\t\t\t\tsalt = hash.createSalt(password);\t    \t \n\t\t\t\t\tpasshash = hash.hashPassword(salt, password);\n\t\t\t\t} catch (InvalidKeyException | NoSuchAlgorithmException | UnsupportedEncodingException e) {\n\t\t\t\t\tlogger.error(\"Error in hashing algorithm \" + e.toString();\n\t\t\t\t}   \n\t\t\t\t\n\t\t\t\t//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml \n\t\t\t\tConnection conn = null;\n\t\t\t\ttry {\t\n\t\t\t\t\tContext initContext = new InitialContext();\n\t\t\t\t\tContext webContext  = (Context)initContext.lookup(\"java:/comp/env\");\n\t\t\t\t\tDataSource ds = (DataSource)webContext.lookup(\"jdbc/myJdbc\");\n\t\t\t\t\tconn = ds.getConnection();\t\n\t\t\t\t\t\n\t\t\t\t\t//After successful validation we enter the new user into the database\n\t\t\t\t\tString query = \"INSERT INTO users\"\n\t\t\t\t\t\t\t+ \" (Username, Password, PrivilegeID)\"\n\t\t\t\t\t\t\t+ \" VALUES\"\n\t\t\t\t\t\t\t+ \" (?, ?, ?)\";\n\t\t\t\t\t\t\n\t\t\t\t\tPreparedStatement st = conn.prepareStatement(query);\n\t\t\t\t\t\n\t\t\t\t\tst.setString(1, username);\n\t\t\t\t\tst.setString(2, passhash);\n\t\t\t\t\tst.setInt(3, privID);\n\n\t\t\t\t\tResultSet rs = st.executeQuery();\n\t\t\t\t\t\t\t\n\t\t\t\t\trs.close();\n\t\t\t\t\tst.close();\n\t\t\t\t\tconn.close();\n\t\t\t\t\t\n\t\t\t\t} catch (SQLException | NamingException e) {\n\t\t\t\t\t\tlogger.error(\"cannot search database. check query\" + e.toString() );\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tLog.SetLog(\"\", \"Username\" + username + \" already exists!\", \"FAIL!\", LocalDateTime.now(), null);\n\t\t\t\tisTrue = false ;\n\t\t\t}\n\t\t\treturn isTrue;\n\t\t}\t\n\t}\n    ", "code_lang": "java"}, {"id": 83, "title": "System commands", "content": " System commands\n\n\n Example:\n\n\n    <?php\n\n\tclass systemCommands{ \t\n\n\t\t/*\n\t\tDefine the whitelist pattern and validation type and input parameter like:\n\t\tgetFiles(\"value1,value2,etc\", \"alphanumeric\", $_GET[''filename''], \"3\")\n\t\t*/\n\t\tpublic function command($whiteListPattern, $validationType, $inputParameter){\n\n\t\t\t//Here we include al the necessary classes like audit logs, whitelisting and validation:\n\t\t\tinclude(\"classes.php\");\n\n\t\t\t$validate  = new validation();\n\t\t\t$whitelist = new whitelisting();\n\n\t\t\t$continue = true;\n\n\t\t\t/*\n\t\t\tWhenever a system command is finished, you should properly sanitize and escape this user input.\n\t\t\tSystem command functions examples are: system(), eval(), exec()\n\n\t\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\t*/\n\n\t\t\tif($validate>inputValidation($inputParameter, $validationType,\n\t\t\t\"Invalid user input for system commands\", \"HIGH\", $countLevel) == false) {$continue = false;}\n\n\t\t\t/*\n\t\t\tSecond, we want to whitelist the filenames for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t*/\n\n\t\t\tif($whitelist>checkpattern($whiteListPattern, $inputParameter, $countLevel) == false)\n\t\t\t{$continue = false;}\n\n\t\t\t//If all went good we include the filename\n\t\t\tif($continue == true){\n\n\t\t\t\t//Even though there is a match we still escape the shellcommand:\n\t\t\t\t$command = ''./configure ''.$inputParameter;\n\t\t\t\t$escaped_command = escapeshellcmd($command);\n\t\t\t\t//Only after validation do we put the shellcommand into the system() function:\n\t\t\t\tsystem($escaped_command);\n\t\t\t}\n\t\t}\n\t}\n    ?>\n", "code_lang": "php"}, {"id": 84, "title": "Enforce sequential step order shopping", "content": " Enforce sequential step order (Shopping)\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever an functionality consists out of following several steps to achieve some goal i.e,\n\t\"User adds items to chart\", \"User enters shipping information\", \"User pays for goods\",\n\t\"Items will be shipped.\" You want to make sure the user can not skip the payment step in\n\torder to receive his goods.\n\n\n\t\t    \n\t| Items  |\t|  Cart\t |\t|checkout |\t | CostumerInfo\t|\n\t\t  \t \n\t|itemID  |\t|cartID  |\t|PaymentID|  |ConsumerID    |\n\t|price\t |\t|itemID  |\t|itemID   |\t |name          |\n\t|name  \t |\t|sessionID|\t|Token    |\t |address\t    |\n\t\t  |sessionID|  |sessionID   \t|\n\t\t\t\t\t\t\t|Verified |  |consumerToken |\n\t\t\t\t\t\t\t \t \t\t\n\n\tAs you can see above we have a very simplified database structure for your average\n\tweb shop. now we can walk through the different steps needed to enforce the user to take\n\tall steps before payment.\n\n\tWe wont cover the entire shopping cart functions since that would become a rather big\n\texample so let''s cover the basics of enforcing the sequential steps.\n\n\tStep1: would be, the user adding items to his cart.\n\n\tStep2: would be, the user adding his items to checkout. Whenever he is done shopping\n\t\t\t\"add to checkout\" generates a random token for the added items which\n\t\t\tare inserted into the payment table in the database\n\n\n\t*/\n\n\t//First we build the checktokens function because we want to check the checkout tokens\n\t//multiple times throughout the steps\n\tfunction checkTokens(){\n\t\t$stmt = $db>prepare(\"SELECT * from checkout where sessionID=? \");\n\t\t$stmt>execute(array(session_id()));\n\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\tforeach($rows as $row){\n\n\t\t\t//Here we check for a different token or new session token\n\t\t\tif(($row[''token''] != $row[''token'']) && ($row[''token''] != $_SESSION[''token''])){\n\n\t\t\t\t$stmt = $db>prepare(\"DELETE FROM customerinfo WHERE sessionID=:id\");\n\t\t\t\t$stmt>execute(array(session_id()));\n\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t\t$stmt = $db>prepare(\"DELETE FROM checkout WHERE sessionID=:id\");\n\t\t\t\t$stmt>execute(array(session_id()));\n\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t\theader(''location:checkout.php'');\n\t\t\t}\n\t\t}\n\t}\n\n\t//note: As soon as the user visits your website you start sessions in order to assign phpsessionID\n\n\t//A random token for every time the form loads\n\t$token = base64_encode(openssl_random_pseudo_bytes(128));\n\n\t/*\n\tWe create a session with the token, if someone adds new items to the checkout this\n\ttoken will change and will intercept attackers tampering the system.\n\t*/\n\n\n\t?>\n\n\t<form methods=\"post\">\n\t<input type=\"hidden\" name=\"token\"  value=\"<?php echo $token; ?>\"/>\n\t<input type=\"submit\" name=\"submit\" value=\"add to checkout\"/>\n\t</form>\n\n\n\t<?php\n\n\t//On submit we create a new session for the token\n\tif(isset($_POST[''submit'']){\n\t\t$_SESSION[''token''] = $token;\n\t}\n\n\t/*\n\tOn submit we send al the shopping cart data to another table in the database, but\n\tthis time al the items also contain the same random token. Now an attacker cannot sneak\n\tin new items since these tokens will be evaluated on the payment page.\n\n\tnext, the user lands on a page where he has to fill in his customer info:\n\n\tNOTE: do not forget the CSRF token in order to prevent attackers from changing his\n\tshipping info.\n\t*/\n\n\t//First we check the checkout tokens to see if no new items where added.\n\tcheckTokens();\n\n\t?>\n\n\t<form methods=\"post\">\n\t<input type=\"text\"   name=\"customerName\" />\n\t<input type=\"text\"   name=\"CustomerAddress\" />\n\t<input type=\"submit\" name=\"submit\" value=\"to payment\"/>\n\t<input type=\"hidden\" name=\"token\"  value=\"<?php echo $_SESSION[''csrf'']; ?>\"/>\n\t</form>\n\n\t<?php\n\n\t//After submit we first of course check the CSRF token for validity\n\n\tcheckCsrf($_POST[''token'']);\n\n\t//Check the checkout tokens to see if no new items where added\n\tcheckTokens();  \n\n\t//than we proceed to check if the post values where not empty\n\t$errors = array();\n\t$check = true;\n\n\tif(empty($_POST[''customerName''])){\n\t\t\t$check = false;\n\t\t\tarray_push($errors, \"Customer name is required\");\n\t\t}\n\n\t\tif(empty($_POST[''customerAddress''])){\n\t\t\t$check = false;\n\t\t\tarray_push($errors, \"Customer address is required\");\n\t\t}\n\n\t\tif(!$check){\n\t\t\techo $errors;\n\t\t}\n\t\telse{\n\n\t\t\theader(''location:summary.php'');\n\t\t\t//In this step we also insert al the customer data into the database.\n\t\t}\n\n\t/*\n\tThen we select al the customer info and shopping items on sessionID from the\n\tdatabase and display it on screen in order for the user to verify if all the\n\tinformation displayed is correct.\n\t*/\n\n\t//when the user has verified we again check the checkout tokens to see if no new items where added\n\tcheckTokens();    \n\n\t/*\n\tAfter that the user verifies this information then he will be redirected to the payment\n\tpage like ideal, Paypal etc.\n\n\tWhenever the payment returns true you set the \"verified\" column on the checkout\n\ttable to TRUE and you send the customer the invoice and send him his items.\n\t*/\n\n\n\t$verified = \"true\";\n\t$stmt = $db>prepare(\"UPDATE checkout SET verified=? WHERE sessionID=? and token=?\");\n\t$stmt>execute(array($verified, session_id(), $_SESSION[''token'']));\n\t$affected_rows = $stmt>rowCount();\n\n\t//also in this step we clear al the db items matching to the phpsessionid\n\t$stmt = $db>prepare(\"DELETE FROM customerinfo WHERE sessionID=:id\");\n\t$stmt>execute(array(session_id()));\n\t$affected_rows = $stmt>rowCount();\n\n\t$stmt = $db>prepare(\"DELETE FROM checkout WHERE sessionID=:id\");\n\t$stmt>execute(array(session_id()));\n\t$affected_rows = $stmt>rowCount();\n\n\t$stmt = $db>prepare(\"DELETE FROM cart WHERE sessionID=:id\");\n\t$stmt>execute(array(session_id()));\n\t$affected_rows = $stmt>rowCount();\n\n\t*/\n\n    ?>\n", "code_lang": "php"}, {"id": 85, "title": "Password forget and disallow old passwords", "content": " Password forget & Disallow old passwords\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever you are developing a password forget function, these are the steps to follow\n\tin order to create hardened defenses.\n\n\tTABLE users\n\t\n\t| userID | userName | password |   EmailAddress\t |    access    |\n\t   \n\t|   1    | Admin    | Csdar323 | info@admin.com\t | \t   TRUE\t    |\n\t    \t\n\t|   2    | User\t    | Adf4fsv  | info@user.com   |\t   FALSE    |\n\t    \n\t|   3    | Guest    | dff4fKr  | info@guest.com\t |\t   TRUE\t    |\n\t    \n\n\n\tTABLE passwordForget\n\t   \n\t| forgotPasswordID | \t\tToken \t         | \tUserID |   Active\t|\t  olPasswords   |\n\t\n\t|      1           | \tc3ab8ff13720e....\t |\t  1\t   | \tYES\t    |\t   Csdar323\t    |\n\t\n\t|\t   2  \t       | \t7dd39466b3c89....\t |\t  1\t   | \tNO\t    |\t\tef0c4f2\t    |\n\t\n\t|\t   3 \t       | \t83d4a3960714c....\t |\t  3\t   | \tNO\t    |\t\tdff4fKr\t    |\n\t\n\n\n\tAs you can see we also store the old passwords into the password forget table, this\n\twe do in order to prevent the user from using old passwords later on in the process.\n\n\tAlso use a cron job to make sure the generated tokens for the password reset are\n\texpire after a certain amount of time like 20 minutes.\n\t*/\n\n\tclass passwordForget{\n\t\tpublic function checkValidity(){\n\n\t\t\t//init a DB connection\n\t\t\tinclude(\"classes.php\");\n\t\t\t$con = new database();\n\t\t\t$db = $con >connection()\n\n\t\t\t$stmt = $db>prepare(\"SELECT * FROM members WHERE email=?\");\n\t\t\t$stmt>execute(array($_POST[''email'']));\n\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tforeach($rows as $row){\n\t\t\t\t//Here we select the old password as well as the userid from the members table\n\t\t\t\t$password = $row[''password''];\n\t\t\t\t$userID   = $row[''id''];\n\t\t\t\t$email \t  = $row[''email''];\n\t\t\t}\n\n\t\t\t//If the select was not empty we will be sending an email to the user as well as\n\t\t\t//preparing the password forget function\n\t\t\tif(!empty($rows)){\n\n\t\t\t\techo \"An email was sent to your email for password reset\";\n\n\t\t\t\t/*\n\t\t\t\tBefore we do anything we first set all other possible active statuses to NO\n\t\t\t\tin order to prevent an attacker creating a whole lot of tokens and than fuzz\n\t\t\t\tthe password reset token.\n\t\t\t\t*/\n\n\t\t\t\t$active = \"NO\";\n\t\t\t\t$stmt = $db>prepare(\"UPDATE forgetPassword SET active=? WHERE userID=?\");\n\t\t\t\t$stmt>execute(array($active, $userID));\n\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t\t//Here we generate the password forget token\n\t\t\t\t$bytes = openssl_random_pseudo_bytes(30);\n\t\t\t\t$token = bin2hex($bytes);\n\n\t\t\t\t$stmt = $db>prepare(\"\n\t\t\t\tINSERT INTO forgetPassword\n\t\t\t\t\t(token, userID, active, oldPasswords)\n\t\t\t\t\t\tVALUES\n\t\t\t\t\t\t\t(?, ?, ?, ?)\");\n\n\t\t\t\t$stmt>execute(array(\n\t\t\t\t$token,\n\t\t\t\t$userID,\n\t\t\t\t''YES'',\n\t\t\t\t$password\n\t\t\t\t));\n\n\t\t\t\t//Here we send an email to the user with the needed reset function\n\t\t\t\t$msg = \"follow this link to reset your password http://example.com/index.php?resetLink=$token\";\n\t\t\t\tmail($email,\"Password reset\",$msg);\n\t\t\t}else{\n\n\t\t\t\t/*\n\t\t\t\tWe show the user the same message in order to prevent the enumeration of\n\t\t\t\tvalid email addresses.\n\t\t\t\t*/\n\n\t\t\t\techo \"An email was sent to your email for password reset\";\t\t\t\n\t\t\t}\n\t\t}\n\n\t\tpublic function resetPassword(){\n\n\t\t\t//init a DB connection and make objects for hashing and secure password enforcing\n\t\t\tinclude(\"classes.php\");\n\n\t\t\t$con  = new database();\n\t\t\t$hash = new passwordHash();\n\t\t\t$pwd  = new passwordPolicy();\n\n\t\t\t$db = $con>connection()\t\t\n\n\t\t\t/*\n\t\t\tImagine the user clicked on his link with the token included and is redirected towards\n\t\t\tthe page where he can enter his new password.\n\n\t\t\tNow we select the information from the forgot password function where the\n\t\t\tforgot tokens matches the token in the database.\n\t\t\t*/\n\n\t\t\t$active = \"YES\";\n\n\t\t\t$stmt = $db>prepare(\"\n\t\t\tSELECT  a.userID, a.token, b.id\n\t\t\t\t\tFROM forgetPassword as a\n\t\t\t\t\t\tJOIN members as b\n\t\t\t\t\t\t\tON a.userID = b.id WHERE token=? and Active=? \");\n\n\t\t\t$stmt>execute(array($_GET[''resetLink''], $active));\n\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tforeach($rows as $row){\n\n\t\t\t\t//Here we select token and users id:\n\t\t\t\t$token  = $row[''token''];\n\t\t\t\t$userID = $row[''userID''];\n\n\t\t\t}\n\n\t\t\tif($token === $_GET[''resetLink'']){\n\n\t\t\t\t/*\n\t\t\t\tFirst we pull the password through our function which enforces the input of\n\t\t\t\tsecure passwords.(see \"Enforce secure passwords\" in code examples for more\n\t\t\t\tdetailed information)\n\t\t\t\t*/\n\n\t\t\t\tif($pwd>createPassword($_POST[''password'']) === true);\n\n\t\t\t\t/*\n\t\t\t\tThan we encrypt our password\n\t\t\t\t(see \"Password storage\" in code examples for more\n\t\t\t\tdetailed information)\n\t\t\t\t*/\n\n\t\t\t\t$hash>createHash($_POST[''password'']);\n\n\t\t\t\t/*\n\t\t\t\tFinally we compare the password against other old passwords from the\n\t\t\t\tpassword reset database in order to prevent the user from using old passwords\n\t\t\t\twhich could already be compromised by any means.\n\t\t\t\t*/\n\n\t\t\t\t$stmt = $db>prepare(\"SELECT oldPasswords FROM forgetPassword where userID=?\");\n\t\t\t\t$stmt>execute(array($userID));\n\t\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tforeach($rows as $row){\n\n\t\t\t\t\tif($newpassword === $row[''oldPasswords'']){\n\t\t\t\t\t\techo \"This was an old password please do not use this password\";\n\t\t\t\t\t}else{\n\n\t\t\t\t\t\t//First we update the new password for the user\n\t\t\t\t\t\t$active = \"NO\";\n\t\t\t\t\t\t$stmt = $db>prepare(\"UPDATE members SET password=? WHERE userID=?\");\n\t\t\t\t\t\t$stmt>execute(array($newPassword, $userID));\n\t\t\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t\t\t\t//Then we destroy the reset token by setting it''s value to NO\n\t\t\t\t\t\t$stmt = $db>prepare(\"UPDATE forgetPassword SET active=? WHERE userID=?\");\n\t\t\t\t\t\t$stmt>execute(array($active, $userID));\n\t\t\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 86, "title": "Open forwards & redirects", "content": " Open forwards & redirects\n\n\n Example:\n\n\n   \t<?php\n\n\t/*\n\tWhen using forwards & redirects you should make sure the URL is being explicitly\n\tdeclared in the code and cannot be manipulated by an attacker like:\n\t*/\n\n\theader(\"location:redirectpage.php\");\n\n\t/*\n\tGenerally you should avoid getting input into the redirect which could contain\n\tuserinput by any means. if for any reason this may not be feasible than you\n\tshould make a whitelist input validation for the redirect like so:\n\tsend(\"value1,value2,etc\", $_GET[''redirectParam''], \"3\")\n\t*/\n\n\tclass redirecting{\n\t\tpublic function send($whiteListing, $inputParam, $countLevel){\n\n\t\t\t//Include the classes of which you want to use objects from\n\t\t\tinclude_once(\"classes.php\");\n\n\t\t\t$whitelist = new whitelisting();\n\n\t\t\t/*\n\t\t\tWe want to whitelist the paged for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t*/\n\t\t\tif($whitelist>checkpattern($whiteListing, $inputParameter, $countLevel) == true){\n\t\t\t\theader(\"location:\".$inputParam.\"\");\n\t\t\t}\t\t\t\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 87, "title": "Secure session cookies", "content": " Secure session cookies\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever  a cookie is sent over a secured connection, the cookie should be set\n\twith the secure flag, in order to guarantee the integrity of the data it contains.\n\tThe secure flag is set by giving it the \"true\" or \"1\" value:\n\t*/\n\n\tpublic function sessionStart(){\n\n\t\t$lifetime = 3600;\n\t\t$path     = \"/\";\n\t\t$domain   = \"www.example.com\";\n\t\t$secure   = true; // < the secure flag\n\t\t$httponly = true;\n\n\t\tsession_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);\n\t}\n\n\t/*\n\tYou could also set the session cookie its secure function with a ini_set\n\tThis ini_set has to be included in the header of al your pages in order to work\n\t*/\n\n\tini_set(''session.cookie_secure'', 1);\n\n  \t?>\n", "code_lang": "php"}, {"id": 88, "title": "Directory path traversal", "content": " Directory/path traversal\n\n\n Example:\n\n\n\t<?php\n\n\tclass fileGetContents{ \t\n\t\t/*\n\t\tDefine the whitelist pattern and validation type and input parameter, countLevel like:\n\t\tgetFiles(\"page1,page2,etc\", \"alphanumeric\", $_GET[''filename''], \"3\")\n\t\t*/\n\t\tpublic getFiles($whiteListPattern, $validationType, $inputParameter, $countLevel){\n\n\t\t\t//Include the classes of which you want to use objects from\n\t\t\tinclude_once(\"classes.php\");\n\n\t\t\t$validate  = new validation();\n\t\t\t$whitelist = new whitelisting();\n\n\t\t\t$continue = true;\n\n\t\t\t/*\n\t\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\t*/\n\t\t\tif($validate>inputValidation($inputParameter, $validationType,\n\t\t\t\"Invalid user input\", \"HIGH\", $countLevel) == false) {$continue = false;}\n\n\t\t\t/*\n\t\t\tSecond, we want to whitelist the filenames for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t*/\n\t\t\tif($whitelist>checkpattern($whiteListPattern, $inputParameter, $countLevel) == false)\n\t\t\t{$continue = false;}\n\n\t\t\t//If all went good we include the filename\n\t\t\tif($continue == true){\n\t\t\t\tinclude($inputParameter);\n\t\t\t}\n\t\t}\n\t}\n\t?>\n", "code_lang": "php"}, {"id": 89, "title": "", "content": " Secure use of mail function\n\n\n Example:\n\n    /*\n    PHP comes with the builtin function mail() for sending emails from a PHP application. The mail delivery can be configured by using the following five parameters.\n\n    http://php.net/manual/en/function.mail.php\n\n    bool mail(\t\n        string $to, \n        string $subject,\n        string $message [, \n        string $additional_headers [, \n        string $additional_parameters ]]\n    )\n    In order to use the mail() function in PHP, an email program or server has to be configured. The following two options can be used in the php.ini configuration file:\n\n    1)Configure an SMTP server\u2019s hostname and port to which PHP connects\n    2)Configure the file path of a mail program that PHP uses as a Mail Transfer Agent (MTA)\n\n    When PHP is configured with the second option, calls to the mail() function will result in the execution of the configured MTA program. Although PHP internally applies escapeshellcmd() to the program call which prevents an injection of new shell commands, the 5th argument $additional_parameters in mail() allows the addition of new program arguments to the MTA. Thus, an attacker can append program flags which in some MTA\u2019s enables the creation of a file with usercontrolled content.\n    */\n\n   \t<?php\n\n        /* \n        It is important that user input should not be passed into the fifth parameter of the mail() function.\n\n        Since first 4 parameters can get added to logs, it is important that they should not contain  any php code\n\n        !preg_match( \"/[\\r\\n]/\", $additional_parameters ) is used to mitigate any header injection attack\n\n        Below code is implemented considering all 5 parameters are user controllable\n        */\n\n       if(!strpos($to, ''<?'') && !strpos($subject, ''<?'') && !strpos($message, ''<?'') && !strpos($additional_headers, ''<?'') && !strpos($additional_parameters, ''<?'') && !preg_match( \"/[\\r\\n]/\", $additional_parameters )){\n\n           /*\n           A PHP function is used to escape commandline arguments, which replaces escapeshellarg with more robust methods for both Windows and nonWindows platforms. \n           Install it from https://packagist.org/packages/winbox/args\n           */\n\n           mail(Winbox\\Args::escape($to), Winbox\\Args::escape($subject), Winbox\\Args::escape($message), Winbox\\Args::escape($additional_headers), Winbox\\Args::escape($additional_options));\n\n       }\n\n       /*\n        If fifth parameter is user controllable this implementation does not stop an attacker to append program flags which in some MTA\u2019s enables the read and creation of a file.\n        \n        Hence additional checks should be implemented for the type of input expected in fifth parameter\n        */\n\n    ?>", "code_lang": "php"}, {"id": 90, "title": "X XSS Protection header", "content": " XXSSProtection header\n\n\n Example:\n\n\n    <?php\n\n    //In order to set the XXSSProtection header, you''ll have to add the following code to the head of your application:\n    header(\"XXSSProtection:1; mode=block\");\n\n    ?>\n", "code_lang": "php"}, {"id": 91, "title": "Directory listing", "content": " Directory listing\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tTo disable or prevent directory access, add following line in your .htaccess file. If\n\tuser points the browsers to a directory that does not have an index file, then a\n\t\"403 Forbidden\" error will be displayed:\n\n\tAdd this line of code to your .htaccess file:\n\t*/\n\n\tOptions Indexes\n\n\t?>\n", "code_lang": "php"}, {"id": 92, "title": "Crossdomain.xml ", "content": " Crossdomain.xml\n\n\n Example:\n\n    \t\t\t\n\t\t// A bad example of a crossdomain.xml would be:\n\t\t\n\t\t<?xml version=\"1.0\" ?>\n\t\t<crossdomainpolicy>\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowaccessfrom domain=\"*\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*\" headers=\"*\"/>\n\t\t</crossdomainpolicy>\n\n\t\t// Because it allows access from all other domains.\n\t\t// Instead of this approach you might want to use the following restrictions.\n\t\t// Example by twitter''s crossdomain.xml:\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF8\"?>\n\t\t<crossdomainpolicy xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" xsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t\t\t<allowaccessfrom domain=\"twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"api.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"search.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"static.twitter.com\" />\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*.twitter.com\" headers=\"*\" secure=\"true\"/>\n\t\t</crossdomainpolicy>\n", "code_lang": "php"}, {"id": 93, "title": "XML injection prevention", "content": " XML injection prevention\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever you are using XML parsers you must sanitize or encode al userinput before\n\tincluding this input into your XML file.\n\n\tSome methods like below, the Dom document already encodes the input before storing it\n\tinto the XML. But beware, since this encoded input is still a threat whenever you are\n\tdisplaying the this data on screen as HTML output. This encoded data should be escaped\n\tat all times before displaying.\n\n\tWhenever your XML function does not encode your data on the fly, you may want to write\n\tyour own function for achieving this. See the code examples and search for \"Input encoding\"\n\tfor more detailed information.\n\t*/\n\n\n\t//Let us take an easy example where we store your favorite number name into a XML file.\n\t$doc = new DOMDocument();\n\t$doc>formatOutput = true;\n\n\t$r = $doc>createElement( \"employees\" );\n\t$doc>appendChild( $r );\n\n\t$b = $doc>createElement( \"employee\" );\n\n\t$name = $doc>createElement( \"name\" );\n\t$name>appendChild(\n\t$doc>createTextNode( $_POST[''name''] )\n\t);\n\t$b>appendChild( $name );\n\n\t$r>appendChild( $b );\n\n\t$doc>save(\"test.xml\");\n\n\t/*\n\tWe will try to insert <script>alert(123);</script> into the XML file,\n\tNow after inserting the employee name into the XML file it will look like:\n\n\n\t<?xml version=\"1.0\"?>\n\t<employees>\n\t\t<employee>\n\t\t<name>&lt;script&gt;alert(123);&lt;/script&gt;</name>\n\t\t</employee>\n\t</employees>\n\n\tAs you can see de input has been encoded but still can trigger an XSS whenever we\n\textract the data as shown in the example below:\n\n\tNOTE: if you ever want to include the xml files by means of userselected sources,\n\tbe aware of the fact that an attacker could also include sources from external websites\n\tand even execute External entity injections on your applications. See the \"XSLT injection prevention\"\n\tcode example for more detailed information on how to implement this type of functionality since\n\tthe same principle''s apply to both functions.\n\t*/\n\n\n\t$doc = new DOMDocument();\n\t$doc>load( ''test.xml'' );\n\t$doc > validateOnParse = true;\n\t$employees = $doc>getElementsByTagName( \"employee\" );\n\n\tforeach( $employees as $employee )\n\t{\n\n\t\t$names = $employee>getElementsByTagName( \"name\" );\n\t\t$name = $names>item(0)>nodeValue;\n\n\t\t//This example is vulnerable to XSS\n\t\techo $name;\n\n\t\t//This example is escaped\n\t\t$esc = htmlspecialchars($name);\n\n\t\techo $esc;\n\n\t}\n\n\t/*\n\tWe recommend to not rely solely on the encoding of the input by the Dom document.\n\tSo before you insert userinput into the XML file you want to have it sanitized.\n\tSee the \"Encoding\" and \"input validation\" code examples for more detailed information\n\t*/\n\n    ?>\n", "code_lang": "php"}, {"id": 94, "title": "Session hijacking and fixation", "content": " Session hijacking and fixation\n\n\n Example:\n\n\n   \t<?php\n\n\t/*\n\tAs soon as a user logs into your application you must store his session id as well as his\n\tIP address along with his userID. This information will be used later on in your application in order to\n\tidentify possible session hijacking.\n\n\tTABLE track_sessions\n\t\n\t| TrackID | userID |\t\t   \t   SESSION \t                |   Ip address\t    |\n\t\n\t|   1     | 1      | \t79dcd529c0f5e01a9bfb2425c52036c6    |\t123.45.67.89    |   \n\t\n\t|   2     | 1      | \t79dcd529c0f5e01a9bfb2425c52036c6    |\t123.45.67.81    |\n\t\n\t|   3     | 2      | \tc80959d3ea4c166413774e45375ac2a1    |\t987.65.43.21    |\n\t\n\n\tIn order to prevent session hijacking there are a couple of defense strategies\n\twhich combined are a hardened defense.  \n\t*/\n\n\t/*\n\tFirst we implement the strict transport security header, this is in order to prevent\n\tusers from accessing your application over an unprotected connection.\n\t*/\n\n\t//Example of the strict transport security header:\n\theader(''StrictTransportSecurity: maxage=31536000'');\n\n\n\t//If all present and future subdomains will be HTTPS:\n\theader(''StrictTransportSecurity: maxage=31536000; includeSubDomains'');\n\n\t/*\n\tRecommended: If the site owner would like their domain to be included in the HSTS preload\n\tlist maintained by Chrome (and used by Firefox and Safari), then use:\n\t*/\n\n\theader(''StrictTransportSecurity: maxage=31536000; includeSubDomains; preload'');\n\n\t/*\n\tThe `preload` flag indicates the site owner''s consent to have their domain preloaded.\n\tThe site owner still needs to then go and submit the domain to the list. the preload list\n\tenforces the browser to always present your application on HTTPS even on the first time\n\tthe user hits your application\n\t*/\n\n\t/*\n\tThen we set the httpOnly flag\n\t(see \"HttpOnly\" in the code examples for more details about implementation)\n\t*/\n\tini_set(''session.cookie_httponly'', 1);\n\n\t/*\n\tThen we set the flag for session timeout\n\t(see \"Timeout\" in the code examples for more details about implementation)\n\t*/\n\tini_set(''session.cookie_lifetime'', 3600);\n\n\t/*\n\tThen we set the session secure flag\n\t(see \"Secure flag\" in the code examples for more details about implementation)\n\t*/\n\tini_set(''session.cookie_secure'', 1);\n\n\t/*\n\tOn login we change the session id in order to prevent session fixation\n\t(see \"Login functionality\" in the code examples for more details about implementation)\n\t*/\n\tsession_regenerate_id(true);\n\n\t/*\n\tNOTE: On applications that require high level security, there should never be an\n\tremember me functionality implemented.\n\t*/\n\n\n\t/*\n\tNow imagine the scenario after the login of the user (see the \"login functionality\" in\n\tthe code examples for more details). Whenever the user is logged in, the users IP address\n\tand session id are also stored in the database these values are used in order to verify\n\tif there are multiple users active on the same session.\n\tIf so, we can let the user decide to terminate the session and terminate the\n\tother assigned sessions.\n\t*/\n\tclass sessionCheck{\n\t\t\t//We implement this logic into our checksession functionality\n\t\t\tpublic function _checkSession(){\n\n\t\t\t//init a DB connection\n\t\t\tinclude(\"classes.php\");\n\t\t\t$con = new database();\n\t\t\t$db = $con >connection()\n\n\t\t\t//Here we check for a valid session to see if the user is authenticated\n\t\t\tsession_start();\n\t\t\tif(($_SESSION[''access''] != \"active\") || $_SESSION[''access''] == \"\"){\n\t\t\t\theader(\"Location: /login\");\n\n\t\t\t\t/*\n\t\t\t\tthis statement ABSOLUTELY MUST DIE or else an attacker could gain knowledge and abuse\n\t\t\t\tall your pages and functionality simply by intercepting the response\n\t\t\t\tfrom the server when connection to your pages.\n\t\t\t\t*/\n\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\t/*\n\t\t\tThen we start the rest of the function where we will check if there are multiple\n\t\t\tusers/IP addresses using the same session id\n\t\t\t*/\n\n\t\t\t//store current session id\n\t\t\t$session  = session_id();\n\n\t\t\t//get users ip address\n\t\t\t$ipaddress = $_SERVER[''REMOTE_ADDR''];\n\n\t\t\t$stmt = $db>prepare(\"SELECT * FROM track_sessions WHERE userID=:id\");\n\t\t\t$stmt>execute(array('':id'' => $_SESSION[''userID'']));\n\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tforeach($rows as $row){\n\n\t\t\t\t\t//check to see if the current ip address matches the one stored in login if not warn user!\n\t\t\t\t\tif(($ipaddress != $row[''ipaddress'']) && $row[''SESSION''] != $session){\n\n\t\t\t\t\t\techo \"\n\t\t\t\t\t\t<div style=''borderstyle:solid; bordercolor:black; color:white; backgroundcolor:red; float:left;''>\n\t\t\t\t\t\t<p>There are other active sessions on other IPaddresses.<br/>\n\t\t\t\t\t\tYour session could be hijacked press logout in order to authenticate again\n\t\t\t\t\t\tfor security reasons!\n\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t<a href=''/logout''>Terminate sessions</a>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<a href=''/Proceed''>Proceed anyway</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\";\t\t\t\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t}\n\n\t/*\n\tthe only thing left to do now is to update your track_sessions table by inserting\n\tthe IP address, sessionID and userID if you want to accept the other sessions as valid.\n\tOtherwise the user just has to terminate his current session in order to lock out the\n\tother sessions.\n\t*/\n\n    ?>\n", "code_lang": "php"}, {"id": 95, "title": "White listing", "content": " Whitelisting\n\n\n Example:\n\n\n    <?php\n\n\tclass whitelisting{\n\n\t\t/*\n\t\tFirst we create a function which checks the allowed patterns:\n\t\tcheckpattern(\"value1,value2,value3\" , $input, \"3\")\n\t\t*/\n\t\t\tfunction checkpattern($allowed, $input, $countLevel){\n\n\t\t\t$logging = new logging();\n\t\t\t$result  = explode(\",\" , $allowed);\n\n\t\t\t$results = false;\n\n\t\t\tforeach($result as $pattern){\n\t\t\t\twhile(preg_match(\"/^\".$pattern.\"$/\", $input)){\t\t\n\t\t\t\t\t//If the value is valid we send a log to the logging file.        \n\t\t\t\t\t$logging>setLog($_SESSION[''userID''],\"Good whitelist validation\",\n\t\t\t\t\t\"SUCCESS\", date(\"dmy\"),\"null\", \"HIGH\");\n\n\t\t\t\t\t$results = true;\n\n\t\t\t\t\t//Whenever there was a valid match we return true      \t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Check for a false in order to send error to log and counter the user.\n\t\t\tif($results == false){\n\t\t\t\t//If the value is invalid we send a log to the logging file.        \n\t\t\t\t$logging>setLog($_SESSION[''userID''],\"Bad whitelist validation\",\n\t\t\t\t\"FAIL\", date(\"dmy\"), $_SESSION[\"privilege\"], \"HIGH\");\n\n\t\t\t\t$logging>setCounter($countLevel);\n\t\t\t\treturn false;\t\t\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 96, "title": "Content type headers", "content": " Content type headers\n\n\n Example:\n\n\n    <?php\n\n\t//Content type header in php\n\theader(\"ContentType:text/html; charset=UTF8\");\n\n\t?>\n", "code_lang": "php"}, {"id": 97, "title": "Session cookies (domain)", "content": " Session cookies (domain)\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever a session is started, and you want to share it over different domains,\n\tthe domain value should be set to the specific domain:\n\t*/\n\n\tpublic function sessionStart(){\n\n\t\t$lifetime = 3600;\n\t\t$path     = \"/\";\n\t\t$domain   = \"demo.yourdomain.com\";  // <  the Configure domains, do not use .yourdomain.com (wildcard) this increases the attack surface!\n\n\t\t$secure   = 0;\n\t\t$httponly = true;\n\n\t\tsession_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);\n\t}\n\n\t?>\n", "code_lang": "php"}, {"id": 98, "title": "Login functionality", "content": " Login functionality\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tFor privilege based authentication we need an extra table in your database in order to write the users privileges to.\n\n\tTABLE users\n\t    \n\t| userID | userName | password | privilegeID |    access\t| AggregateControl\t|\n\t   \n\t| 1\t     | Admin    | Csdar323 |      1\t     | \t TRUE       |       2336        |\n\t   \t\n\t| 2      | User\t    | Adf4fsv  |      2\t     |   FALSE\t    |         0\t        |\n\t   \n\t|\t3\t     | Guest\t  | dff4fKr  |\t  3\t\t     |\t   TRUE\t\t|\t\t135\t\t\t          |\n\t   \n\n\tTABLE privileges\n\t   \n\t| privilegeID | privilege        |\n\t\n\t|     1       | edit:read:delete |\n\t\n\t|     2\t      | edit:read        |\n\t\n\t|     3       | read             |\n\t\n\n\tNow instead of using roles in sessions we rather want to assign privileges to users\n\tby means of a DatabaseBased Authentication system.\n\tNow we can easily assign a user certain privileges for him to access.\n\tSee \"Privilege based authentication\" code example for more information:\n\t*/\n\n\tclass login{\n\t\tpublic function loginUser($username,$password)\n\t\t{\n\n\t\t\t//init DB connection\n\t\t\tinclude(\"classes.php\");\n\t\t\t$conn = new database();\n\t\t\t$db = $con>connection();\n\n\t\t\t/*\n\t\t\tYou must log invalid user input in order to detect a possible attack on your login form\n\t\t\tIn this example the expected input is \"aZ/09  _\"\n\t\t\t*/\n\n\t\t\tif(preg_match(\"/[^azAZ09]/\", $username))\n\t\t\t{       \n\t\t\t\t//Set a log for whenever there is unexpected user input with a threat level\n\t\t\t\tsetLog(\"null\",\"invalid expected input\", \"FAIL\", date(\"dmy\"), \"null\", \"HIGH\");\n\t\t\t\theader(\"location:login.php\");\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\t/*\n\t\t\tWe also want to make sure the user access is TRUE, if not, it means the user was blocked\n\t\t\tfor attempting to hack the application\n\t\t\t*/\n\n\t\t\t//After successful validation we want to log that username was validated successfully:\n\t\t\tsetLog($_SESSION[''userID''],\"Username return true\", \"SUCCESS\", date(ddmmyyyy), $privilege, \"NULL\");\n\n\t\t\t//PDO prepared statement in order to prevent SQL injections\n\t\t\t$stmt = $db>prepare(\"\n\t\t\t\tSELECT a.username, a.password, a.privilegeID, b.privilegeID, b.privilege   \n\t\t\t\t\tFROM users as a\n\t\t\t\t\t\tJOIN privileges as b\n\t\t\t\t\t\t\tON a.projectID = b.projectID\n\t\t\t\t\t\t\t\tWHERE a.username = :username and b.access=''TRUE''\");\n\n\t\t\t$this>_setSql($sql);\n\n\t\t\t$stmt>execute(array('':page'' => $_GET[''page''], '':username'' => $username));\n\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tforeach($rows as $loginUser){\n\n\t\t\t\t/*\n\t\t\t\tThan we validate the password, if the validation is true than we set the sessions\n\t\t\t\tFor more detailed information on password validation check please look into the\n\t\t\t\tPassword storage(salting/stretching/hashing) in the knowledgebase for more information.\n\t\t\t\t*/\n\t\t\t\tif($this>ValidatePassword($loginUser[''password''], $password) === true)\n\t\t\t\t{\n\t\t\t\t\t//After successful validation we want to log that Password was validated successfully:\n\t\t\t\t\tsetLog($_SESSION[''userID''],\"Password return true\", \"SUCCESS\", date(\"dmy\"), $privilege, \"NULL\");\n\n\t\t\t\t\tsession_start();\n\n\t\t\t\t\t//Change the session id on login\n\t\t\t\t\tsession_regenerate_id(true);\n\n\t\t\t\t\t//Here we set a session to see if the user is authenticated throughout the system\n\t\t\t\t\t$_SESSION[''access'']   = \"active\";\n\n\t\t\t\t\t/*\n\t\t\t\t\tThe userID in a session variable to use as an identifier to prevent a user reading\n\t\t\t\t\tinto unauthorized data, See Identifierbased authorization for more information and\n\t\t\t\t\tcode examples.\n\t\t\t\t\t*/\n\t\t\t\t\t$_SESSION[''userID'']   = $loginUser[''id''];\n\n\t\t\t\t\t//The CSRF token is set here by an approved random number generator\n\t\t\t\t\t$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));\n\n\t\t\t\t\t//if all is ok we return loginUser values\n\t\t\t\t\treturn $loginUser;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 99, "title": "Identifier based authorization", "content": " Identifierbased authorization\n\n\n Example:\n\n\n    <?php\n\n\tclass identifierBasedAuth{ \t\n\n\t\t/*\n\t\tDefine the whitelist pattern and validation type and input parameter like:\n\t\tidentity(\"page1,page2,etc\", \"alphanumeric\", $_GET[''page''], \"3\")\n\t\t*/\n\t\tpublic function identity($whiteListPattern, $validationType, $inputParameter, $countLevel){\n\n\t\t\t//Include the classes of which you want to use objects from\n\t\t\tinclude_once(\"classes.php\");\n\n\t\t\t$validate  = new validation();\n\t\t\t$whitelist = new whitelisting();\n\t\t\t$aggregate = new aggregateControl();\n\t\t\t$conn  \t   = new database();\n\n\t\t\t//init DB connection\n\t\t\t$db = $con>connection();\n\n\t\t\t$continue = true;\n\n\t\t\t/*\n\t\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n\t\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\t*/\n\t\t\tif($validate>inputValidation($inputParameter, $validationType,\n\t\t\t\"Invalid user input\", \"HIGH\", $countLevel) == false) {$continue = false;}\n\n\t\t\t/*\n\t\t\tSecond, we want to whitelist the filenames for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t*/\n\t\t\tif($whitelist>checkpattern($whiteListPattern, $inputParameter, $countLevel) == false)\n\t\t\t{$continue = false;}\n\n\t\t\t/*\n\t\t\tWhenever you are checking whether a user is restricted to review certain data,\n\t\t\tthe access restrictions should be processed server side.\n\t\t\tThe userID could be stored inside a session variable on login, and should be used to\n\t\t\tretrieve user data from the database:\n\t\t\t*/\n\t\t\tif($continue == true){\n\n\t\t\t\t/*\n\t\t\t\tWe count the number of connections towards the database,\n\t\t\t\tSee \"aggregate user controls\" code example for more information:\n\t\t\t\t*/\n\t\t\t\t$aggregate > countConnections(1);\n\n\t\t\t\t$stmt = $db>prepare(\"SELECT * FROM table WHERE id=:userID AND page=:page\");\n\t\t\t\t$stmt>execute(array('':page'' => $_GET[''page''], '':id'' => $_SESSION[''userID'']));\n\t\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 100, "title": "Timeout a session", "content": " Timeout a session\n\n\n Example:\n\n\n    <?php\n\n\tpublic function sessionStart(){\n\n\t\t$lifetime = 3600; // < lifetime of a session\n\t\t$path     = \"/\";\n\t\t$domain   = \"www.example.com\";\n\t\t$secure   = 0;\n\t\t$httponly = true;\n\n\t\tsession_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);\n\n\t}\n\n\t/*\n\tYou could also set the session cookie its secure function with a ini_set\n\tThis ini_set has to be included in the header of al your pages in order to work\n\t*/\n\n\tini_set(''session.cookie_lifetime'', 3600);\n\n    ?>\n", "code_lang": "php"}, {"id": 101, "title": "RFD and file download injection prevention", "content": " Reflective file download and file download injection prevention\n\n\n Example:\n\n\n\t<?php\n\n\t//include all necessary classes\n\tinclude_once(\"class/classCollect.php\");\n\n\tclass fileDownload{\n\t\t/*\n\t\tThe first example we cover how to download files which users can upload\n\t\tthemselves on the web application\n\t\t*/\n\n\t\tpublic function downloadUserFiles($fileID){\t\t\n\n\t\t\t$conn = new NewDatabase();\n\t\t\t$db   = $conn > connection();\n\t\t\t$validation = new validation();\n\t\t\t$proceed = true;\n\n\t\t\t/*\n\t\t\tFor the sake of example we only allow the users to download their own files\n\t\t\tby identifier based sql query''s. As you can see we select the filename\n\t\t\tby its id. in this case we prevent direct user input into the disposition header.\n\t\t\t*/\n\n\t\t\tif($validation>inputValidation($fileID, \"numeric\", \"validate was false\", \"HIGH\", 3) == false){\n\t\t\t\t$proceed = false;\n\t\t\t}\n\n\t\t\tif($proceed == true){\n\t\t\t\t$stmt = $db>prepare(\"SELECT * FROM download WHERE fileID=? AND userID=?\");\n\t\t\t\t$stmt>execute(array($fileID, $_SESSION[''userID'']));\n\t\t\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t\tforeach($rows as $row){\n\t\t\t\t\t$filename = $row[''fileName''];\n\t\t\t\t\t$mimeType = $row[''mimeType''];\n\t\t\t\t}\n\n\t\t\t\tif($filename){\n\t\t\t\t/*\n\t\t\t\tWe also define the mimetype per download file.\n\t\t\t\tThis is because whenever a user can only download images it is not necessary to set\n\t\t\t\tan uncommon contenttype header for it.\n\t\t\t\tNOTE: These mimetypes should not be stored based upon the mimetype which was send\n\t\t\t\tthe response header when the user uploaded the file. This value can be easily\n\t\t\t\tmanipulated with an intercepting proxy. You should get the mimetype from the file\n\t\t\t\titself after it was stored on the server.\n\t\t\t\t*/\n\t\t\t\theader(''ContentDescription: File Transfer'');\n    \t\t\theader(\"contenttype:\".$mimeType.\"\");\n    \t\t\theader(''ContentDisposition: attachment; filename=''.$filename);\n    \t\t\theader(''Expires: 0'');\n\t\t\t\theader(\"CacheControl: nostore, nocache, mustrevalidate, maxage=0\");\n\t\t\t\theader(\"CacheControl: postcheck=0, precheck=0\", false);\n\t\t\t\theader(\"Pragma: nocache\");    \n\t\t\t\theader(''ContentLength: '' . filesize($filename));\n\t\t\t\t//Last check to see if it really does exist.\n\t\t\t\tif(file_exists($filename)){\n\t\t\t\t\treadfile($filename);\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\tExit is very important, if other mechanims fail this makes sure the rest\n\t\t\t\tof the page plus attack string does not get downloaded anyways.\n\t\t\t\t*/\n\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tThe second example is for whenever you are providing users with fixed downloads\n\t\tsuch as manuals etc. We do not only check if the file just exists, because that would\n\t\tallow an attacker to also download important other files from your server, so instead\n\t\twe whitelist them.\n\t\t*/\n\t\tpublic function downloadStored($filename){\n\n\t\t\t$white = new whitelisting();\n\n\t\t\tif($white > checkpattern(\"file1.txt,file2.txt\", $filename, 3) != false){\n\t\t\t\theader(''ContentDescription: File Transfer'');\n    \t\t\theader(''ContentType: text/plain'');\n    \t\t\theader(''ContentDisposition: attachment; filename=''.$filename);\n    \t\t\theader(''Expires: 0'');\n\t\t\t\theader(\"CacheControl: nostore, nocache, mustrevalidate, maxage=0\");\n\t\t\t\theader(\"CacheControl: postcheck=0, precheck=0\", false);\n\t\t\t\theader(\"Pragma: nocache\");    \n\t\t\t\theader(''ContentLength: '' . filesize($filename));\n\t\t\t\tif(file_exists($filename)){\n\t\t\t\t\treadfile($filename);\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\tExit is very important, if other mechanims fail this makes sure the rest\n\t\t\t\tof the page plus attack string does not get downloaded anyways.\n\t\t\t\t*/\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t?>\n", "code_lang": "php"}, {"id": 102, "title": "PHP Object Injection", "content": " PHP Object Injection\n\n\n Example:\n\n    \n\t/*\n\tVulnerability occur when unsanitized input is passed into the unserialize function\n\n\t<?php\n\n\t\tclass foo{\n\t\t\tpublic $cmd;\n\n\t\t\tfunction __destruct()\n\t\t\t{\n\t\t\t\tsystem($cmd);\n\t\t\t}\n\n\t\t}\n\n\t\t$data = $_GET[''data''];\n\n\t\t$obj = unserialize($data);\n\n\t?>\n\n\tIn the above example user can control the input to the unserialize function, which can lead to change in the $cmd variable which can even result in taking over the server.\n\n\tDo not use unserialize() function with usersupplied input, use JSON functions instead.\n\tWe can use json_decode instead of unserialize.\n\tOtherwise userinput should not be able to control the unserialize function\n\t\n\t*/\n\n\t// Secure approach for preventing the PHP object injection\n\t\n\t<?php\n\n\t\tclass foo{\n\t\t\tpublic $cmd;\n\n\t\t\tfunction __destruct()\n\t\t\t{\n\t\t\t\tsystem($cmd);\n\t\t\t}\n\n\t\t}\n\n\t\t$data = $_GET[''data''];\n\t\t$obj = json_decode($data);\n\n\t?>\t\n", "code_lang": "php"}, {"id": 103, "title": "Privilege based authentication", "content": " Privilege based authentication\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tFor privilege based authentication we need an extra table in your database in order to write the users privileges to.\n\n\tTABLE users\n\t    \n\t| userID | userName | password | privilegeID |    access\t| AggregateControl\t|\n\t   \n\t|   1    | Admin    | Csdar323 |\t  1      | \t   TRUE\t\t|\t\t2336        |\n\t   \t\n\t|\t2    | User\t    | Adf4fsv  |\t  2      |\t   FALSE\t|\t\t 0         \t|\n\t   \n\t|\t3    | Guest    | dff4fKr  |\t  3\t     |\t   TRUE\t\t|\t\t135\t       \t|\n\t   \n\n\tTABLE privileges\n\t   \n\t| privilegeID | privilege        |\n\t\n\t|     1\t      | edit:read:delete |\n\t\n\t|\t  2\t      | edit:read        |\n\t\n\t|\t  3\t      | read             |\n\t\n\n\tNow instead of using roles in sessions we rather want to assign privileges to users\n\tby means of a DatabaseBased Authentication system.\n\tNow we can easily assign a user certain privileges for him to access.\n\t*/\n\n\tclass privilege{\n\n\t//Here is the isAuthorized function in which we check whether the user is permitted to do the action\n\tpublic function isAuthorized($ispermitted){\n\n\t\t//we make object of logging class for our logging methods also for db connection\n\t\tinclude(\"classes.php\");\n\n\t\t$logging = new logging();\n\t\t$con \t = new database();\n\n\t\t$db = $con>connection();\n\n\t\t//We select the privilege from the database\n\t\t$stmt = $db>prepare(\"\n\t\t\tSELECT a.username, a.password, a.privilegeID, b.privilegeID, b.privilege   \n\t\t\t\tFROM users as a\n\t\t\t\t\tJOIN privileges as b\n\t\t\t\t\t\tON a.projectID = b.projectID\n\t\t\t\t\t\t\tWHERE a.userID = :id and b.access=''TRUE''\");\n\n\t\t$stmt>execute(array('':id'' => $_SESSION[''userID'']));\n\t\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\tforeach($rows as value){\n\t\t\t$privilege = $value[''privilege''];\n\t\t}\n\n\t\t//We first explode the value''s to see how much parts the arrays consists of\n\t\t$permission    = explode(\":\", $privilege);\n\t\t$authorization = explode(\":\", $ispermitted); // $ispermitted\n\n\t\t//Then we count the authorization array\n\t\t$count     = count($authorization);\n\t\t$counthits = 0;\n\n\t\t/*\n\t\tWe check the permissions against the ispermitted value to see how many times\n\t\tthey match. whenever they match we count the hits\n\t\t*/\n\t\tforeach($permission as $value){\n\t\t\tif(preg_match(''/''.$value.''/'', $ispermitted)){\n\t\t\t\t$counthits++;\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tWhenever the counts hits are greater or equal to the needed permissions\n\t\twe now know we deserved access to the part of the system.\n\t\t*/\n\t\tif($counthits >= $count){\n\n\t\t\t//Log that the user had sufficient privileges:\n\t\t\t$logging>setLog($_SESSION[''userID''],\"User was privileged!\", \"SUCCESS\",\n\t\t\tdate(\"dmy\"), $privilege, \"NULL\");\n\n\t\t\treturn true;\n\t\t}else{\n\n\t\t\t//Log that the user had insufficient privileges:\n\t\t\t$logging>setLog($_SESSION[''userID''],\"User was not privileged!\", \"FAIL\",\n\t\t\tdate(ddmmyyyy), $privilege, \"HIGH\");\n\n\t\t\t/*\n\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\tAfter 3 session terminations the user''s account must be blocked.\n\t\t\tGiven the high threat level, there will be immediate session termination.\n\t\t\tin this case the user tried to manipulate the application operation in order to do things he is not\n\t\t\tprivileged to, immediate session termination will follow!\n\t\t\t*/\n\n\t\t\t$logging>setCounter(3);\n\n\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\tThis is how you enforce the permissions in your application\n\tWe define the roles we want the user to suffice\n\t*/\n\n\tif(isAuthorized(\"edit:read:delete\") === true){\n\t\t//Do your operation\n\t}\n\n\t/*\n\tif ever there are new ''roles'' added to the system you can easily assign them the needed privileges without\n\thaving to add new roles throughout your entire system. This system takes a little more planning up ahead but\n\tit enforces higher level of security.\n\t*/\n\n    ?>\n", "code_lang": "php"}, {"id": 104, "title": "Aggregate user controls", "content": " Aggregate user controls\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tIn order to enforce Aggregate access control protection the best method would be to\n\tdefine your rules by means of a database structure rather than sessions or log''s.\n\tThis is due to the fact that if the user drops his session the rating would start\n\tal over again.\n\n\tTABLE users\n\t   \n\t| userID | userName | password | privilegeID |    access    | AggregateControl\t|\n\t  \n\t|   1    | Admin    | Csdar323 |      1      |     TRUE     |     2322         \t|\n\t   \n\t|   2    | User     | Adf4fsv  |      2      |     FALSE    |     0             |\n\t  \n\t|   3    | Guest    | dff4fKr  |      3      |     TRUE     |     125           |\n\t\n\n\tTABLE privileges\n\t   \n\t| privilegeID | privilege        |\n\t\n\t|     1       | edit:read:delete |\n\t\n\t|     2       | edit:read        |\n\t\n\t|     3       | read             |\n\t\n\t*/\n\n\tclass aggregateUserControl{\n\t\tpublic function countAccess($count){\n\t\t\t//init DB\n\t\t\tinclude(\"classes.php\");\n\t\t\t$con     = new database();\n\t\t\t$logging = new logging();\n\t\t\t$db  = $con>connection();\n\n\t\t\t/*\n\t\t\tEach time the user accesses the database we keep track of the number of times he\n\t\t\tconnected. Whenever the user passes a reasonable number he should be rejected\n\t\t\tsince he could be an attacker scraping your table contents and stealing company information\n\t\t\tYou could a CRON job in your mysql system in order to clean the Aggregate column within certain timeframes\n\t\t\t*/\n\n\t\t\t//First we log the access\n\t\t\t$logging>setLog($_SESSION[''userID''],\"User access database \", \"SUCCESS\", date(\"dmy\"), $privilege, \"NULL\");\n\n\t\t\t//After that we select\n\t\t\t$stmt = $db>prepare(\"SELECT AggregateControl FROM members WHERE userID=:id \");\n\t\t\t$stmt>execute(array('':id'' => $_SESSION[''userID'']));\n\t\t\t$row = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t$aggregate = 0;\n\n\t\t\tforeach($row as $rows){\n\n\t\t\t\t$control = $rows[''AggregateControl''];\n\t\t\t}\n\n\t\t\t//We add the count to control variable for the update\n\t\t\t$control += $count;\n\n\t\t\tif($control >= 5000){\n\n\t\t\t\t//First we log the surpassing of the user control count\n\t\t\t\t//setLog($_SESSION[''userID''],\"Aggregate control breach\", \"FAIL\", date(\"dmy\"), $privilege, \"HIGH\");\n\n\t\t\t\t/*\n\t\t\t\tThen we lock out the users account assuming it has been compromised by\n\t\t\t\tan attacker.\n\t\t\t\t*/\n\t\t\t\t$access = \"FAIL\";\n\t\t\t\t$stmt = $db>prepare(\"UPDATE members SET access=? WHERE userID=?\");\n\t\t\t\t$stmt>execute(array($access, $_SESSION[''userID'']));\n\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t}\t\t\t\n\n\t\t\t//Then we update the users table and count +1 tot the AggregateControl column\n\t\t\t$stmt = $db>prepare(\"UPDATE members SET AggregateControl=? WHERE userID=?\");\n\t\t\t$stmt>execute(array($control, $_SESSION[''userID'']));\n\t\t\t$affected_rows = $stmt>rowCount();\n\t\t}\n\t}\n\n\t//We use the function as follows:\n\tcountAccess(1);\n\n    ?>\n", "code_lang": "php"}, {"id": 105, "title": "User registration SQL truncation", "content": " User registration / Sql truncation prevention\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tIn order to prevent Column truncation sql injection Solution we have to make sure the\n\tapplications structural logic does not mismatches with the database structural logic.\n\tTo achieve this imagine the follow example of a database structure of a users table\n\n\tTABLE users\n\t\n\t|\t     *Name*        |     *Type*       |    *Extra*     |\n\t\n\t|        userID\t       |    Int(11)       | AUTO_INCREMENT |\n\t\n\t|       Username  \t   |    char(21)      |  \t           |\n\t\n\t|       Password       |  Varchar(255)    |\t               |\n\t\n\t|      PrivilegeID     |    Int(11)       |                |\n\t\n\t*/\n\n\tclass registerUser{\n\t\t//First we create a function in order to select all usernames in order to see of they already exists\n\t\tpublic function userCheck($username){\n\n\t\t\t//init DB\n\t\t\t$con = new database();\n\t\t\t$db = $con>connection();\n\n\t\t\t$stmt = $db>prepare(\"SELECT * FROM members WHERE username = :input\");\n\t\t\t$stmt>bindParam('':input'', $username, PDO::PARAM_STR);\n\t\t\t$stmt>execute();\n\n\t\t\tif($stmt>fetch(PDO::FETCH_OBJ) == False){\n\t\t\t\t//Return true in order to complete registration\n\t\t\t\treturn true;\n\n\t\t\t}else{\n\t\t\t\t//The username already exists:\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic function userRegister($username, $password, $privID){\n\n\t\t\t//init DB\n\t\t\t$con  = new database();\n\t\t\t$user = new registerUser();\n\t\t\t$db = $con>connection();\n\n\t\t\t/*\n\t\t\tWhenever the user gains the ability to register himself or change his user\n\t\t\tcredentials you must always enforce the application to compare the length of the\n\t\t\tsubmitted string against the length of the allowed string length in your database\n\t\t\tstructure in order to prevent sql column truncation.\n\t\t\t*/\n\t\t\t$length = strlen($username);\n\n\t\t\t/*\n\t\t\tWe now compare the length of the username against the allowed string length in\n\t\t\tThe database structure\n\t\t\t*/\n\n\t\t\tif($length >= 21){\n\t\t\t\t//If length is to large the application must die.\n\t\t\t\tdie(\"Username was to long!\");\n\t\t\t}\n\n\t\t\t//If true than register the user!\t\t\n\t\t\tif($user>Usercheck($username) === true){\n\n\t\t\t\t$hash = new passwordHash();\n\n\t\t\t\t//Than we encrypt the password with the Bcrypt encryption function of PHP\n\t\t\t\t$hash>createHash($password);\n\n\t\t\t\t//After successful validation we enter the new user into the database\n\t\t\t\t$stmt = $db>prepare(\n\n\t\t\t\t\"INSERT INTO users\n\t\t\t\t\t\t\t(Username, Password, PrivilegeID)\n\t\t\t\t\t\tVALUES\n\t\t\t\t\t\t\t(?, ?, ?)\");\n\n\t\t\t\t$stmt>execute(array($username, $hash, $privilegeID));\n\t\t\t\t$affected_rows = $stmt>rowCount();\t\t\t\n\t\t\t}else{\n\t\t\t\techo \"Username already existed\";\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 106, "title": "Anti clickjacking headers", "content": " Anti clickjacking headers\n\n\n Example:\n\n            \n    /*\n  \tOne way to defend against clickjacking is to include a \"framebreaker\" script in each\n  \tpage that should not be framed. The following methodology will prevent a webpage from\n  \tbeing framed even in legacy browsers, that do not support the XFrameOptionsHeader.\n  \tIn the document HEAD element, add the following:\n  \tFirst apply an ID to the style element itself:\n  \t*/\n\n  \t<style id=\"antiClickjack\">body{display:none !important;}</style>\n  \t//And then delete that style by its ID immediately after in the script:\n\n\t<script type=\"text/javascript\">\n\tif (self === top) {\n\t\tvar antiClickjack = document.getElementById(\"antiClickjack\");\n\t\tantiClickjack.parentNode.removeChild(antiClickjack);\n\t} else {\n\t\ttop.location = self.location;\n\t}\n\t</script>\n\n\n  \t<?php\n    \n  \t/*\n  \tThe second option is to use \"security headers\".\n  \tThere are two options for setting the \"anticlickjacking\" headers in your application:\n  \t*/\n\n  \t//this will completely prevent your page from being displayed in an iframe.\n  \theader(''XFrameOptions: DENY'');\n\n\n  \t//this will completely prevent your page from being displayed in an iframe on other sites.\n  \theader(''XFrameOptions: SAMEORIGIN'');\n\n  \t?>\n", "code_lang": "php"}, {"id": 107, "title": "Re authentication", "content": " Reauthentication\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever a user wants to change his credentials or do other important data exchanges such as\n\ttransferring money he should always be challenged to reauthenticate himself before\n\tallowing them to perform these actions.\n\t*/\n\n\tclass challengeUser{\n\t\t\tpublic function reauthenticate($password){\n\n\t\t\t//init DB connection\n\t\t\tinclude(\"classes.php\");\n\t\t\t$con     = new database();\n\t\t\t$logging = new logging();\n\n\t\t\t$db = con>connection();\n\n\t\t\t//PDO prepared statement in order to prevent SQL injections        \n\t\t\t$stmt = $db>query(\"SELECT * FROM members WHERE id = :userID \");\n\n\t\t\t//We than bind the parameters in order to prevent SQL injection;\n\t\t\t$stmt>execute(array('':userID''=>$_SESSION[''userID''] ));\n\n\n\t\t\t$loginUser = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\t/*\n\t\t\tThan we validate the password, if the validation is true than we set the sessions\n\t\t\tFor more detailed information on password validation check please look into the\n\t\t\tPassword storage(salting/stretching/hashing) in the knowledgebase for more information.\n\t\t\t*/\n\t\t\tif($this>ValidatePassword($loginUser[''password''], $password) === true){\n\n\t\t\t\t//After successful validation we want to log that Password was validated successfully:\n\t\t\t\tsetLog($_SESSION[''userID''],\"Password return true\", \"SUCCESS\", date(ddmmyyyy), $privilege, \"NULL\");\n\n\t\t\t\tsession_start();\n\n\t\t\t\t//Change the session id on login\n\t\t\t\tsession_regenerate_id(true);\n\n\t\t\t\t//Here we set a session to see if the user is authenticated throughout the system\n\t\t\t\t$_SESSION[''access'']   = \"active\";\n\n\t\t\t\t/*\n\t\t\t\tThe userID in a session variable to use as an identifier to prevent a user reading\n\t\t\t\tinto unauthorized data, See Identifierbased authorization for more information and\n\t\t\t\tcode examples.\n\t\t\t\t*/\n\n\t\t\t\t$_SESSION[''userID'']   = $loginUser[''id''];\n\n\t\t\t\t//The CSRF token is set here by an approved random number generator\n\t\t\t\t$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));\n\n\t\t\t\t//if all is ok we return loginUser values\n\t\t\t\treturn true;\n\n\t\t\t}else{\n\n\t\t\t\t//The user failed reauthenticating himself\n\t\t\t\t$logging>setLog($_SESSION[''userID''],\"Reauthentication failed\", \"FAIL\", date(\"dmy\"), \"null\", \"MOD\");\n\n\t\t\t\t//If the authentication fails we destroy the session\n\t\t\t\tsession_start();\n\t\t\t\tsession_destroy();\n\n\t\t\t\t//Regenerate the session ID to lock out an attacker!\n\t\t\t\tsession_regenerate_id(true);\n\t\t\t\t$_SESSION[''active''] = \"\";\n\n\t\t\t\theader(\"location:login.php\");\n\n\t\t\t\tdie();           \t\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\tBefore we let a user perform certain actions he should first be challenged to authenticate\n\thimself. imagine the following scenario, the user wants to change his email address.\n\t*/\n\n\t$challenge =  new challengeUser()\n\tif($challenge>reauthenticate() !== true){\n\n\t\techo \"please reauthenticate yourself\";\n\t\techo\n\t\t\"\n\t\t<form method=''post''>\n\t\t<input type=''password'' name=''password''/>\n\t\t<input type=''submit'' name=''authenticate''/>\n\t\t</form>\t\t\n\t\t\";\n\n\t}else{\n\n\t\t//Do operation for changing the email address\n\t\techo \"You can now change your email address!\";\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 108, "title": "Debug enabling", "content": " Debug Enabling\n\n\n Example:\n\n\n    <?php\n\n    /*\n    Turn off all error reporting, this method should be included on all your pages.\n    We recommend putting it in a main method which is used throughout your entire application.\n    */\n    error_reporting(0);\n\n    //or\n    ini_set(''display_errors'',''Off'');\n\n    ?>\n", "code_lang": "php"}, {"id": 109, "title": "Charsets", "content": " Charsets\n\n\n Example:\n\n\n    <?php\n\n\t//Add the following line of code inside the application header:\n\t//<meta httpequiv=\"ContentType\" content=\"text/html; charset=utf8\">\n\n\t//or:\n\theader(''ContentType: text/html; charset=utf8'');\n\n\t?>\n", "code_lang": "php"}, {"id": 110, "title": "Session cookies HttpOnly", "content": " Session cookies HttpOnly\n\n\n Example:\n\n\n    <?php\n\n\t//Whenever a session is started, the \"httpOnly\" option should always be set to \"true\" or \"1\":\n\n\tpublic function sessionStart(){\n\n\t\t$lifetime = 3600;\n\t\t$path     = \"/\";\n\t\t$domain   = \"www.example.com\";\n\t\t$secure   = 0;\n\t\t$httponly = true; // <  the httponly flag\n\n\t\tsession_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);\n\t}\n\n\t/*\n\tYou could also set the session cookie its httpOnly function with a ini_set\n\tThis ini_set has to be included in the header of al your pages in order to work\n\t*/\n\n\tini_set(''session.cookie_httponly'', 1);\n\n\t?>\n", "code_lang": "php"}, {"id": 111, "title": "Audit logs", "content": " Audit logs\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tThe log function does not have to be complicated as long as you log at least these 6 values\n\n\tWhenever a user is registered or added to your system, the application must also\n\tautomatically generate a table for this user which contains his userID, counter and blocker\n\tvariable in order to keep track of his behavior.\n\t*/\n\n\tclass logging{\n\t\tpublic function setLog($userID, $errorMessage, $value, $date, $privilege, $threat){\n\n\t\t\t//Save log file in a directory which has restrictions in place so no one can access it easily\n\t\t\t$myFile = \"restrictedfolder/logfile.txt\";\n\n\t\t\t$fh = fopen($myFile, ''a+'') or die(\"can''t open file\");\n\n\t\t\t//Notice how we user the userID instead of the actual username in order to prevent the integrity of these usernames\n\t\t\t//should an attacker ever gain access to these log files\n\t\t\t$stringData = $date.\" \".$userID.\" \".$errorMessage.\" \".$value.\" \".$privilege.\" \".$threat.\" \\n\" ;\n\n\t\t\tfwrite($fh, $stringData);\n\t\t\tfclose($fh);\n\t\t}\n\n\t\tpublic function setCounter($count){\n\n\t\t\tinclude(\"classes.php\");\n\n\t\t\t//init DB connection\n\t\t\t$con  = new database();\n\t\t\t$db = $con>connection();\n\n\n\t\t\t//Here we select all data to verify if the users session should be terminated or his account should be lockedout\n\t\t\t$stmt = $db>prepare(\"SELECT count, blocker FROM counter WHERE userID=:id\");\n\t\t\t$stmt>execute(array($_SESSION[''userID'']));\n\t\t\t$row = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t\t\tforeach($row as $rows){\n\n\t\t\t\t//First we update the count/blocker variable with the old values for the update\n\t\t\t\t$dbCount   = $rows[''count''];\n\t\t\t\t$dbBlocker = $rows[''blocker''];\n\n\t\t\t}\n\n\t\t\t$countUpdate   = $count + $dbCount;\n\t\t\t$blockerUpdate = $count + $dbBlocker;\n\n\t\t\t//Here we want to set a counter for whenever a user attacks the application so we can lockout his account\n\t\t\t//when there are to many violations registered.\n\t\t\t$stmt = $db>prepare(\"UPDATE counter SET count=?, blocker=? WHERE userID=?\");\n\t\t\t$stmt>execute(array($countUpdate, $blockerUpdate, $_SESSION[''userID'']));\n\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t//If the users counter was bigger than three his session should be terminated\n\t\t\tif($countUpdate >= 3){\n\n\t\t\t\t//Log that the users sessions have been terminated:\n\t\t\t\tsetLog($_SESSION[''userID''],\"The users session was terminated\", \"SUCCESS\", date(ddmmyyyy), $privilege, \"NULL\");\n\n\t\t\t\t//Clear the session variable to deny access\n\t\t\t\t$_SESSION[''accessor''] = \"\";\n\t\t\t\tsession_start();\n\t\t\t\tsession_destroy();\n\n\t\t\t\t$countUpdate = 0;\n\t\t\t}\n\n\n\t\t\t//If the users counter was bigger than three his session should be terminated\n\t\t\tif($blockerUpdate >= 12){\n\n\t\t\t\t//Log that the users has been denied access to system:\n\t\t\t\tsetLog($_SESSION[''userID''],\"The users is denied access to system\", \"SUCCESS\", date(ddmmyyyy), $privilege, \"NULL\");\n\n\t\t\t\t//If the blocker was bigger than 12 it means the user has made three strikes and his account should blocked\n\t\t\t\t$status = \"blocked\";\n\t\t\t\t$stmt = $db>prepare(\"UPDATE users SET status=? WHERE userID=?\");\n\t\t\t\t$stmt>execute(array($status, $_SESSION[''userID'']));\n\t\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t\t\t//Clear the session variable to deny further access\n\t\t\t\t$_SESSION[''accessor''] = \"\";\n\t\t\t\tsession_start();\n\t\t\t\tsession_destroy();\n\t\t\t}\n\n\t\t\t//After the counter has terminated a session he should be set to zero again\n\t\t\t$stmt = $db>prepare(\"UPDATE counter SET count=? WHERE userID=?\");\n\t\t\t$stmt>execute(array($countUpdate, $_SESSION[''userID'']));\n\t\t\t$affected_rows = $stmt>rowCount();\n\n\t\t}\n\t}\n\t\n  \t?>\n", "code_lang": "php"}, {"id": 112, "title": "CSRF tokens", "content": " CSRF tokens\n\n\n Example:\n\n\n\t<?php\n\n\tclass CSRF{\n\n\t\tpublic function generateToken(){\n\t\t\t/*\n\t\t\tAfter successful user authentication, the application must start a session\n\t\t\t\t\twhich contains the \"Cross Site Request Forgery(CSRF)\" token.\n\t\t\t*/\n\n\t\t\t$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));\n\t\t}\n\n\t\t/*\n\n\t\tThe random CSRF token generated need to be send to the server with every form submission.\n\t\tThis token is included in a form as a HTML hidden form field parameter. When the form is\n\t\tsubmitted the token value is also submitted along with it.\n\n\t\tThe token is then validated against the csrf token which was generated during user authentication.\n\t\tBelow code demonstrate the validation of csrf token at the server side:\n\n\t\t*/\n\n\t\tprotected function _checkCsrf($token){        \n\t\t\tsession_start();                    \n\n\t\t\tif($_SESSION[''csrf''] != $token){        \n\n\t\t\t\t//Log the invalid token verification\n\t\t\t\tsetLog($_SESSION[''userID''],\"invalid CSRF token send!\", \"FAIL\", date(\"dmy\"), $_SESSION[''privilege''], \"HIGH\");\n\n\t\t\t\t//If the token was not valid we terminate the users session\n\t\t\t\tsession_start();\n\t\t\t\tsession_destroy();                   \n\n\t\t\t\t//The die function is to make sure the rest of the php code is not executed beyond this point\n\t\t\t\tdie();        \n\t\t\t}    \n\t\t}  \n\t}   \n\t?>\n", "code_lang": "php"}, {"id": 113, "title": "Random password token generation", "content": " Random password/token generation\n\n\n Example:\n\n\n    <?php\n\n\t//A good random token example for tokens would be:\n\t$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));\n\n\t//A good random password would be:\n\t$bytes = openssl_random_pseudo_bytes(15);\n\t$pwd = bin2hex($bytes);\n\n\t/*\n\tWhen needing to generate random numbers, always use proven methods\n\tinstead of writing your own.\n\t*/\n\n\t  ?>\n", "code_lang": "php"}, {"id": 114, "title": "Password storage(salting stretching hashing)", "content": " Password storage(salting/stretching/hashing)\n\n\n Example:\n\n\n    <?php\n\n\tclass passwordHash{\n\t\t\n\t\tpublic function createHash($pwd){\n\n\t\t\t/*\n\t\t\tFor the encryption of passwords we use PHP''s BCRYPT encryption method.\n\t\t\t*/\n\n\t\t\t//Here we generate a hash with a random salt\n\t\t\tpublic function HashPassword($password){\n\t\t\t\t$options = [\n\t\t\t\t''cost'' => 11,\n\t\t\t\t''salt'' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),\n\t\t\t\t];\n\n\t\t\t\t$hash =\tpassword_hash($password, PASSWORD_BCRYPT, $options).\"\\n\";\n\n\t\t\t\treturn $hash;\n\t\t\t}\n\n\t\t\t//Validate your password\n\t\t\tpublic function ValidatePassword($correctHash, $password)\n\t\t\t{\n\t\t\tif(password_verify($password, $correctHash))\n\t\t\t\t{\n\t\t\t\t\t//After successful validation we want to log that password was validated successfully:\n\t\t\t\t\tsetLog($_SESSION[''userID''],\"Password return true\", \"SUCCESS\", date(ddmmyyyy), $privilege, \"NULL\");\n\t\t\t\t\treturn true;\n\t\t\t\t}else{\t\t\n\t\t\t\t\t//We log invalid password use\n\t\t\t\t\tsetLog($_SESSION[''userID''],\"Password return false\", \"FAIL\", date(ddmmyyyy), $privilege, \"LOW\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\t\t\n\t?>\n", "code_lang": "php"}, {"id": 115, "title": "HTML output", "content": " HTML output\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tWhenever user input is displayed in the application, whether, as content or a parameter value\n\tsubmitted towards the url, all user input should be properly escaped to prevent XSS injections.\n\t*/\n\n\t//For normal output this escaping will do the trick\n\t$escaped = htmlspecialchars($_POST[''value''], ENT_QUOTES, ''UTF8'');\n\techo $escaped;\n\n\t//This also applies, for instance, when retrieving content from a database:\n\twhile($row = $stmt>fetch(PDO::FETCH_ASSOC)) {\n\t\techo htmlspecialchars($row[''value''], ENT_QUOTES, ''UTF8'');\n\t}\n\n\t/*\n\tSecurity consists of different layers of protection, in order to guarantee the integrity\n\tof your application. This means that the value submitted from the user should\n\talready be sanitized before being submitted towards the database in order to prevent XSS.\n\tAs an example, you are expecting only alphanumerical value here:\n\t*/\n\n\tif(!preg_match(\"/^[azAZ09]+$/\", $escaped)){\n\t\tdie();\n\t}\n\n\t/*\n\tThis type of approach should be used whenever you are allowing user input in\n\tyour DOM like for example, let''s say a user was allowed to upload an image and\n\tset an alt text. when you do not sanitize his input a possible attack string could be:\n\t*/\n\n\tthis is an image\" onload=\"alert(''XSS'');\"\n\n\t/*\n\twhenever this string now is added to the users image this will be the outcome, leading\n\tto xss:\n\t*/\n\n\t<img src=\"http://image.com/image.jpg\" alt=\"this is an image\" onload=\"alert(''XSS'')\"\" />\n\n\t/*\n\tAfter this sanitation malicious code can no longer exist in the $_POST[''value''] variable.\n\n\tAnother possibility for attackers to execute an XSS injection, is to pass malicious code directly\n\tinto the URL by means of a \"href\", e.g.:\n\tjavascript:alert(document.cookie);\n\tor\n\tdata:text/html;base64,base64xssinjection\n\n\tIn the following scenario escaping with htmlspecialchars() is not sufficient to block the injection.\n\tBy checking the URL to see if it starts with either http:// or https:// whenever a link has\n\tbeen submitted to the web application by a user.\n\n\t?>\n", "code_lang": "php"}, {"id": 116, "title": "Sandboxing", "content": " Sandboxing\n\n\n Example:\n\n\n    <?php\n\n\t<iframe sandbox=\"value\">\n\n\t\t/*\n\t\tsandbox=\"\"  Applies all restrictions\n\t\tallowforms  Reenables form submission\n\t\tallowpointerlock  Reenables APIs\n\t\tallowpopups  Reenables popups\n\t\tallowsameorigin  Allows the iframe content to be treated as being from the same origin\n\t\tallowscripts  Reenables scripts\n\t\tallowtopnavigation  Allows the iframe content to navigate its toplevel browsing context\n\t\t*/\n\n\t\t?>\n", "code_lang": "php"}, {"id": 117, "title": "SQL query", "content": " SQL query\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tThis example uses a prepared statement in order to insert data into the database.\n\tBecause this method enforces the user to prepare all user input  passed into the query, it always escapes SQL\n\tinjections so none could be accidentally forgotten as with the normal mysqli_real_escape_string() methods.\n\t*/\n\n\t$stmt = $db>prepare(\"SELECT * FROM table WHERE id=? AND name=?\");\n\t$stmt>execute(array($id, $name));\n\t$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);\n\n\t//or\t\t\n\n\t$stmt = $db>prepare(\"UPDATE table SET name=? WHERE id=?\");\n\t$stmt>execute(array($name, $id));\n\t$affected_rows = $stmt>rowCount();\n\n\t//or\n\n\t$stmt = $db>prepare(\"DELETE FROM table WHERE id=:id\");\n\t$stmt>bindValue('':id'', $id, PDO::PARAM_STR);\n\t$stmt>execute();\n\t$affected_rows = $stmt>rowCount();\n\n\t//or\n\n\t$stmt = $db>prepare(\"INSERT INTO table(field1,field2) VALUES(:field1,:field2)\");\n\t$stmt>execute(array('':field1'' => $field1, '':field2'' => $field2));\n\t$affected_rows = $stmt>rowCount();\n\n\t/*\n\tAll methods will prevent SQL injections.\n\tThe less recommended option for preventing sql injections is to use the mysqli_real_escape_string() function.\n\t*/\n\n\t$username = mysqli_real_escape_string($connectionString, $_POST[''username'']);\n\t$email    = mysqli_real_escape_string($connectionString, $_POST[''email'']);\n\n\tmysqli_query($connectionString, \"INSERT INTO users (username, email) VALUES (\"''.$username.''\", \"''.$email.''\")\");\n\n\t/*\n\tNOTE: mysqli_real_escape_string() will _not_ work when escaping integers since the function only\n\tescapes strings. In order to prevent all SQL injection vulnerabilities, we strongly recommend\n\tusing prepared statements\n\t*/\n\n    ?>\n", "code_lang": "php"}, {"id": 118, "title": "X path query", "content": " Xpath query\n\n\n Example:\n\n\t\n    <?php\n\n\tclass xPathControl{ \t\n\n\t\t/*\n\t\tDefine the allowed characters and input parameter and count level for the\n\t\tuser lockout like:\n\t\tcontroller(\"<''>&\", $_GET[''filename''], \"3\")\n\t\t*/\n\t\tpublic function controller($allowedCharacters, $inputParameter, $countLevel){\n\n\t\t\t//Include the classes where you want to make objects of:\t\t\n\t\t\tinclude(\"classes.php\");\n\t\t\t$encode = new encodeInput();\n\n\t\t\t/*\n\t\t\tFirst we build our encoding method, see \"input validation\" code example for\n\t\t\tmore detailed information about encoding and escaping.\n\t\t\t*/\n\n\t\t\t$return = $encode>encoder($allowedCharacters, $inputParameter, $countLevel);\n\n\t\t\t//If the encoder came back false we do not process the function!\n\t\t\tif($return !== false){\n\t\t\t\t//start a new domdocument\n\n\t\t\t\t$xmldoc = new DOMDocument();\n\t\t\t\t$xmldoc>load(''test.xml'');\n\n\t\t\t\t$xpathvar = new Domxpath($xmldoc);\n\n\t\t\t\t/*\n\t\t\t\tAssuming that you used the encoder function also for adding users, it will now retrieve the\n\t\t\t\tuser O''Reilly from the query\n\t\t\t\t*/\n\n\t\t\t\t$queryResult = $xpathvar>query(''//lemonade[@supplier=\"''.$return.''\"]/price'');\n\n\t\t\t\tforeach($queryResult as $result){\n\t\t\t\t\t\techo $result>textContent;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n    ?>\n", "code_lang": "php"}, {"id": 119, "title": "Encoder", "content": " Character encoding\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tThis is the encoder class for whenever you have to allow certain\n\tpossibly dangerous characters into your code for i.e names such as O''Reilly\n\t*/\n\n\tclass encodeInput {\n\t\t//As you can see you can specify allowed characters in your function\n\t\tpublic function encoder($allowed, $input, $countLevel){\n\n\t\t\t//create object for logging class\n\t\t\t$logging = new logging();\n\n\t\t\t$return = true;\n\n\t\t\tif(!preg_match(\"/^[azAZ09 \".$allowed.\"]+$/\", $input)){\t\t\n\n\t\t\t\t/*\n\t\t\t\tSet a log for whenever there is unexpected user input with a threat level\n\t\t\t\tSee \"audit logs\" code example for more information:\n\t\t\t\t*/\n\t\t\t\t$logging>setLog($_SESSION[''userID''],\"Bad user inputs\", \"FAIL\",\n\t\t\t\tdate(\"dmy\"), $_SESSION[\"privilege\"], \"HIGH\");\n\n\t\t\t\t/*\n\t\t\t\tSet counter if counter hits 3 the users session must terminated\n\t\t\t\tAfter 3 session terminations the user account must be blocked\n\t\t\t\tSee \"audit logs\" code example for more information:\n\t\t\t\t*/\t\t\t\n\t\t\t\t$logging>setCounter($countLevel);\n\t\t\t\t$input = false;\n\t\t\t}\n\n\t\t\t//We also check for the single quote since htmlspecialchar does not encode it\n\t\t\tif(preg_match(\"/''/\", $input)){\n\t\t\t\t$input = preg_replace(\"/''/\", \"&39;\", $input);\n\t\t\t}\n\n\t\t\t//We return the input by means of htmlspecialcharacters so it becomes encoded\n\t\t\treturn htmlspecialchars($input);\n\t\t}\n\t}//end class\n\n    ?>\n", "code_lang": "php"}, {"id": 120, "title": "Logout function", "content": " Logout function\n\n\n Example:\n\n\n\t<?php\n\n\t/*\n\tThis way, the logout functionality will revoke the complete session:\n\t*/\n\n\tpublic function deleteLogin(){\n\n\t\t//We first want to log the user logging out.\n\t\tsetLog($_SESSION[''userID''],\"User logout\", \"SUCCESS\", date(\"dmy\"), $_SESSION[''privilege''], \"NULL\");\n\n\t\t//We empty his authentication session\n\t\t$_SESSION[''Authenticated''] = \"\";\n\n\t\t//Than we destroy the entire session\n\t\tsession_start();\n\t\t\tsession_regenerate_id(true);\n\t\tsession_destroy();\n\t}\n\n\t?>\n", "code_lang": "php"}, {"id": 121, "title": "Anti caching headers", "content": " Anticaching headers\n\n\n Example:\n\n\n\t<?php\n\n\t/*\n\tAdd the following headers to your application head in order to prevent the browser from caching\n\t*/\n\n\theader(\"CacheControl: nostore, nocache, mustrevalidate\"); // HTTP/1.1\n\theader(\"CacheControl: postcheck=0, precheck=0\", false);\n\theader(\"Pragma: nocache\"); // HTTP/1.0\n\n\t?>\n", "code_lang": "php"}, {"id": 122, "title": "Input validation", "content": " input validation\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tThis function is where you store al your input validation controls.\n\tIt makes it easy to maintain whenever you want to apply changes for\n\tcertain input validation roles and reduces the chance of mistakes in your regexes.\n\t*/\n\n\tclass validation{\n\n\t\t//Our input validation function\n\t\tpublic function inputValidation($input, $type, $logMessage, $threatLevel, $countLevel){\n\n\t\t\t//Audit log and user lockdown\n\t\t\t$logging = new logging();\n\n\t\t\tswitch ($type) {\n\t\t\t\tcase \"numeric\":\n\t\t\t\t\t$pattern = \"/^[09]+$/\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"alphanumeric\":\n\t\t\t\t\t$pattern = \"/^[azAZ09]+$/\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(!preg_match($pattern, $input)){\n\n\t\t\t\t/*\n\t\t\t\tSet a log for whenever there is unexpected user input with a threat level\n\t\t\t\tSee \"audit logs\" code example for more information:\n\t\t\t\t*/\n\t\t\t\t$logging > setLog($_SESSION[''userID''], $logMessage, \"FAIL\", date(\"dmy\"),\n\t\t\t\t$_SESSION[\"privilege\"], $threatLevel);\n\n\t\t\t\t/*\n\t\t\t\tSet counter if counter hits 3 the users session must terminated\n\t\t\t\tAfter 3 session terminations the user account must be blocked\n\t\t\t\tSee \"audit logs\" code example for more information:\n\t\t\t\t*/\t\t\t\n\t\t\t\t$logging>setCounter($countLevel);\n\n\t\t\t\treturn false;\n\t\t\t\t}else{\n\n\t\t\t\t//Set a log for whenever there is unexpected userinput with a threat level\n\t\t\t\t$logging>setLog($_SESSION[''userID''],\"Valid input validation for regex from \".$type.\" \",\n\t\t\t\t\"SUCCESS\", date(\"dmy\"), $_SESSION[\"privilege\"], \"NONE\");\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 123, "title": "XML External entities", "content": " XML External entities\n\n\n Example:\n\n    \n\t<?php\n\n\t/*\n\tThe overall prevention method for loading external entities is adding the following line of code:\n\tThis line of code function tells the underlying libxml parsing to not try to interpret the values\n\tof the entities in the incoming XML and leave the entity references intact.\n\t*/\n\n\tlibxml_disable_entity_loader(true);\n\n\t?>\n", "code_lang": "php"}, {"id": 124, "title": "Enforce secure passwords", "content": " Enforce secure passwords\n\n\n Example:\n\n\n    <?php\n\n\tclass passwordPolicy{\n\t\tpublic function createPassword($pwd){\n\t\t\t$proceed = true;\n\n\t\t\t//Recommended to use a small phrase instead of a password:\n\t\t\tif(strlen($pwd) < 8 ){\n\t\t\t\t$error .= \"Password too short!\";\n\t\t\t\t$proceed = false;\n\t\t\t}\n\n\t\t\t$pattern = array(\"/[09]+/\",\"/[az]+/\",\"/[AZ]+/\",\"/\\W+/\");\t\t\n\n\t\t\t/*\n\t\t\tThe password should include at least one number, a small letter, a CAPS,\n\t\t\tand a special character as defined in the patterns array:\n\t\t\t*/\n\t\t\tforeach($pattern as $value){\n\t\t\t\tif(!preg_match($value, $pwd)){\n\t\t\t\t\t$error .= \"Password incomplete\";\n\t\t\t\t\t$proceed = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\tEven though your password is sufficient according to all your standards, the password could still be weak.\n\t\t\tJust imagine the password \"Password!\"; this could easily be guessed by an attacker. To prevent the use of weak passwords we\n\t\t\tcompare the password with a list of top 500 bad passwords and if matched, the password wil be rejected:\n\t\t\t*/\n\t\t\t$file = file_get_contents(''badpasswords.txt'');\n\n\t\t\t$pattern = explode('','', $file);\n\n\t\t\tforeach($pattern as $password){\n\t\t\t\tif(preg_match($password, $pwd)){\n\t\t\t\t\t$error .= \"Your password was matched with the bad password list, please try again.\";\n\t\t\t\t\t$proceed = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($proceed == true){\n\t\t\t\techo \"Your password is allowed!\";\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\techo \"Password validation failure(your choice is weak): $error\";\n\t\t\t\treturn false\n\t\t\t}\t\t\t\t\n\t\t}\n\t}\n\t\t\t\n    ?>\n", "code_lang": "php"}, {"id": 125, "title": "File upload", "content": " File upload\n\n\n Example:\n\n\n\t<?php\n\n\tclass fileUpload{\n\t\t\n\t\tpublic function Image(){\n\n\t\t\tinclude(''classes.php'');\n\t\t\t$validated = new validate();\n\t\t\t$log = new logging();\n\n\n\t\t\t$image = $_FILES[''fileToUpload''];\n\t\t\t//File location outside of the root\n\t\t\t$uploaddir = ''assets/uploads/'';\n\n\t\t\t//check extensions\n\t\t\t$filetype = explode(\".\", $image[''name'']);\n\n\t\t\t/*\n\t\t\tFor uploading out of intended directory we check the filename and verify that it only contains alphanumeric values.\n\t\t\t*/\n\t\t\tif($validated > inputValidation($filetype[0], \"alphanumeric\", \"invalid filename\", \"MOD\", 2){\n\t\t\t\theader(''location:/page'');\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\t/*\n\t\t\tWe take the last array value to make sure it is the last extension to prevent validating\n\t\t\t.jpg.php in a file name.\n\t\t\t*/\n\t\t\t$takeLastValue = count($filetype)  1;\n\n\t\t\twhile(($filetype[$takeLastValue] != \"png\") && ($filetype[$takeLastValue] != \"jpg\")){\n\n\t\t\t\t//Set a log for whenever there is an unexpected user input with a threat level\n\t\t\t\t$log > setLog($_SESSION[''userID''],\"Unrestricted image extension upload\",\n\t\t\t\t\"FAIL\", date(ddmmyyyy), $privilege, \"HIGH\");\n\n\t\t\t\t/*\n\t\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\t\tAfter 3 session terminations the user account should be blocked\n\t\t\t\tSince the high threat level will lead to immediate session termination\n\t\t\t\t*/\n\t\t\t\t$log > setCounter(3);\n\n\t\t\t\t//The die function is to make sure the rest of the php code is not executed beyond this point\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\t // Check file size\n\t\t\tif($image[\"size\"] > 500000) {\n\t\t\t\t header(''location:/page'');\n\t\t\t\t die();\n\t\t\t }\n\n\t\t\t// Check if file already exists to prevent overwriting\n\t\t\tif(file_exists(''assets/uploads/''.$image[''name''])) {\n\t\t\t\theader(''location:/page'');\n\t\t\t\tdie();\n\t\t\t}  \n\n\t\t\t//if all goes well upload your file, first we want to log the event.\n\t\t\t$log > setLog($_SESSION[''userID''],\"File upload\", \"SUCCESS\", date(ddmmyyyy),\n\t\t\t$privilege, \"NULL\");\n\n\t\t\t$uploadfile = $uploaddir . basename($image[''name'']);\n\t\t\tmove_uploaded_file($image[''tmp_name''], $uploadfile);\n\n\t\t\t//Last mime type check after upload if not correct than delete!\n\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n\t\t\techo $theType = finfo_file($finfo, $uploaddir.$image[''name'']);\n\n\t\t\tif($theType != \"image/jpeg\" && $theType != \"image/png\"){    \n\t\t\t\tunlink($uploaddir.$image[''name'']);\n\n\t\t\t\t//Set a log for whenever there is unexpected user input with a threat level\n\t\t\t\t$log > setLog($_SESSION[''userID''],\"invalid image mime type\",\n\t\t\t\t\"FAIL\", date(ddmmyyyy), $privilege, \"HIGH\");\n\n\t\t\t\t/* ^^\n\t\t\t\tSet counter; if counter hits 3, the user''s session must be terminated.\n\t\t\t\tAfter 3 session terminations the user account should be blocked\n\t\t\t\tsince the high threat level can lead to immediate session termination.\n\t\t\t\t*/\n\t\t\t\t$log > setCounter(3);\n\n\t\t\t\t//The die function is to make sure the rest of the php code is not executed beyond this point\n\t\t\t\tdie();              \n\t\t\t}\n\t\t}\n\t}\n\t?>\n", "code_lang": "php"}, {"id": 126, "title": "X Content Type Options header", "content": " XContentTypeOptions header\n\n\n Example:\n\n\n    <?php\n\n    //In order to set the \"XContentTypeOptions\" header you''ll have to add the following code to the head of your application:\n    header(''XContentTypeOptions: nosniff'');\n\n    ?>\n", "code_lang": "php"}, {"id": 127, "title": "XSL injection prevention", "content": " XSL injection prevention\n\n\n Example:\n\n\n    <?php\n\n\t/*\n\tIn order to prevent XSL injections you must enforce strict policy''s whenever the\n\tfiles are loaded from a source controlled by an possible attacker.\n\n\tLet''s say for example that the user can choose from several XSL files on your application.\n\n\tABC.xsl arranges your employee names on alphabetical order\n\tCBA.xsl does not care and just shows the input by order of your XML file.\n\n\tBefore we want to attach the XSL files to the style sheet we first want to\n\tdo validation on the request to make sure the included file was one of our own pre\n\tdefined files, example:\n\tincluding(\"file1.xsl,file2.xsl,etc\", $_GET[''xslfile''], \"3\")\n\t*/\n\n\tclass includeXSL{\n\t\tpublic function including($whiteListing, $inputParam, $countLevel){\n\n\t\t\t//Include the classes of which you want to use objects from\n\t\t\tinclude_once(\"classes.php\");\n\n\t\t\t$whitelist = new whitelisting();\n\n\t\t\t$continue = true;\n\n\t\t\t/*\n\t\t\tWe want to whitelist the paged for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t*/\n\t\t\tif($whitelist>checkpattern($whiteListing, $inputParam, $countLevel) == false)\n\t\t\t{$continue = false;}\n\n\t\t\t//If all went good we do the function\n\t\t\tif($continue == true){\n\t\t\t\t LOAD XML FILE\n\t\t\t\t// Load the XML source\n\t\t\t\t$xml = new DOMDocument;\n\t\t\t\t$xml>load(''test.xml'');\n\n\t\t\t\t$xsl = new DOMDocument(''1.0'',''UTF8'');\n\t\t\t\t$xsl>load($inputParam);\n\n\t\t\t\t// Configure the transformer\n\t\t\t\t$proc = new XSLTProcessor;\n\t\t\t\t$proc>importStyleSheet($xsl); // attach the xsl rules\n\n\t\t\t\techo $proc>transformToXML($xml);\n\t\t\t}\n\t\t}\n\t}\n\n    ?>\n", "code_lang": "php"}, {"id": 128, "title": "System commands", "content": " System commands\n\n\n Example:\n\n\n\t\"\"\"\n\tDefine the whitelist pattern and validation type and input parameter like:\n\tcommand(\"data.txt,users.txt\", \"filename\", filename)\n\t\"\"\"\n\n\tdef command(whiteListPattern, validationType, inputParameter){\n\n\t\tcontinue = True\n\n\t\t\"\"\"\n\t\tWhenever a system command is finished, you should properly sanitize and escape this user input.\n\t\tSystem command functions examples are: system(), eval(), exec()\n\n\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\"\"\"\n\n\t\tif inputValidation(inputParameter, validationType) == False:\n\t\t\tcontinue = False\n\n\t\t\t\"\"\"\n\t\t\tSecond, we want to whitelist the filenames for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t\"\"\"\n\n\t\tif whitelisting(whiteListPattern, inputParameter) == False:\n\t\t\tcontinue = False\n\n\t\t//If all went good we include the filename\n\t\tif continue == True:\n\n\t\t\t//Even though there is match we still escape the shelx.quote():\n\t\t\tcommand = ''./configure {}'' .format(quote(inputParameter))\n\t\t\tos.system(command)\n\n\t\telse:\n\n\t\t\treturn False", "code_lang": "flask"}, {"id": 129, "title": "Enforce sequential step order shopping", "content": " Enforce sequential step order (Shopping)\n\n\n Example:\n\n\n    \"\"\"\n    Whenever an functionality consists out of following several steps to achieve some goal i.e,\n    \"User adds items to chart\", \"User enters shipping information\", \"User pays for goods\",\n    \"Items will be shipped.\" You want to make sure the user can not skip the payment step in\n    order to receive his goods.\n\n\n    \t    \n    | Items  |\t|  Cart\t |\t|checkout |\t | CostumerInfo\t|\n    \t  \t \n    |itemID  |\t|cartID  |\t|PaymentID|  |ConsumerID    |\n    |price\t |\t|itemID  |\t|itemID   |\t |name          |\n    |name  \t |\t|sessionID|\t|Token    |\t |address\t    |\n    \t  |sessionID|  |sessionID   \t|\n                            |Verified |  |consumerToken |\n                            \t \t\t\n\n    As you can see above we have a very simplified database structure for your average\n    web shop. Now we can walk through the different steps needed to enforce the user to take\n    all steps before payment.\n\n    We wont cover the entire shopping cart functions since that would become a rather big\n    example so let''s cover the basics of enforcing the sequential steps.\n\n    Step1: would be, the user adding items to his cart.\n\n    Step2: would be, the user adding his items to checkout. Whenever he is done shopping\n            \"add to checkout\" generates a random token for the added items which\n            are inserted into the payment table in the database\n\n    \"\"\"\n\n    def checkTokens():\n\n        //First we build the checktokens function because we want to check the checkout tokens\n        //Multiple times throughout the steps\n    \n        rows = checkout.query.filter_by(sessionID=session[''id'']).all()\n        for x in rows:\n\n            //Here we check for a different token or new session token\n            if x.token == session[''token'']:\n\n                customerinfo.query.filter_by(sessionID=session[''id'']).delete()\n                db.session.commit()\n\n                checkout.query.filter_by(sessionID=session[''id'']).delete()\n                db.session.commit()\n\n                return redirect(url_for(''checkout''))\n\n    //As soon as the user visits your website you start sessions in order to assign sessionId\n\n    \"\"\"\n    On submit we send al the shopping cart data to another table in the database, but\n    this time al the items also contain the same random token. Now an attacker cannot sneak\n    in new items since these tokens will be evaluated on the payment page.\n\n    next, the user lands on a page where he has to fill in his customer info:\n\n    NOTE: do not forget the CSRF token in order to prevent attackers from changing his\n    shipping info.\n    \"\"\"\n\n    //Then we proceed to check if the post values where not empty\n    \t\n    check = True\n    error = \"\"\n\n    if request.method == ''POST'':\n        if request.form[''customerName''] == \"\" : \n            check = False\n            error += \"Customer name is required\"\n\n        if request.form[''customerAddress''] == \"\":\n            check = False\n            error += \"Customer address is required\"\n\n        if check != True:\n            return error\n        else:\n            return redirect(url_for(''summary''))\n            //In this step we also insert at the customer data into the database\n\n    \"\"\"        \n    Then we select al the customer info and shopping items on sessionID from the\n    database and display it on screen in order for the user to verify if all the\n    information displayed is correct.\n    \"\"\"\n\n    //When the user has verified we again check the checkout tokens to see if no new items where added\n    checkTokens()    \n\n    \"\"\"\n    After that the user verifies this information then he will be redirected to the payment\n    page like ideal, Paypal etc.\n\n    Whenever the payment returns true you set the \"verified\" column on the checkout\n    table to TRUE and you send the customer the invoice and send him his items.\n    \"\"\"\n\n    verified = True\n\n    data = checkout.query.filter_by(sessionID=session[''id'']).first()\n    data.verified = verified\n    db.session.commit()\n\n    customer = customer.query.filter_by(sessionID=session[''id'']).delete()\n    db.session.commit()\n\n    checkout = checkout.query.filter_by(sessionID=session[''id'']).delete()\n    db.session.commit()\n\n    cart = cart.query.filter_by(sessionID=session[''id'']).delete()\n    db.session.commit()\n\n    ", "code_lang": "flask"}, {"id": 130, "title": "Password forget and disallow old passwords", "content": " Password forget & Disallow old passwords\n\n\n Example:\n\n\n    \"\"\"\n    Whenever you are developing a password forget function, these are the steps to follow\n    in order to create hardened defenses.\n\n    TABLE users\n    \n    | userID   | userName | password |   EmailAddress\t |  access  |\n       \n    |     1\t   | Admin\t  | Csdar323 | info@admin.com\t | \t True   |\n        \t\n    |\t  2\t   | User\t  | Adf4fsv  | info@user.com     |   False  |\n        \n    |\t  3\t   | Guest\t  | dff4fKr  | info@guest.com\t |\t True   |\n        \n\n\n    TABLE passwordForget\n       \n    | forgotPasswordID | \t\tToken \t    | \tUserID |   Active\t|\t  olPasswords\t    |\n    \n    |      1  \t \t   | c3ab8ff13720e....  |\t  1\t   | \tTrue\t|\t   Csdar323\t      \t|\n    \n    |\t   2\t \t   | 7dd39466b3c89....  |\t  1\t   | \tFalse   |\t\tef0c4f2         |\n    \n    |\t   3\t \t   | 83d4a3960714c....\t|\t  3\t   | \tTrue\t|\t\tdff4fKr\t        |\n    \n\n\n    As you can see we also store the old passwords into the password forget table, this\n    we do in order to prevent the user from using old passwords later on in the process.\n\n    Also use a cron job to make sure the generated tokens for the password reset are\n    expire after a certain amount of time like 20 minutes.\n\n    \"\"\"\n\n    def checkValidity(email):\n\n        user = Members.query.filter_by(email=email).first()\n\n        //Here we select the old password as well as the userid from the members table\n        password = user.password\n        userID = user.id\n        email = user.email\n\n        //If the select was not empty we will be sending an email to the user as well as \n        //Preparing the password forget function\n\n        if user is None:\n            \"\"\"\n            We show the user the same message in order to prevent the enumeration of\n            valid email addresses.\n            \"\"\"\n            return \"An email was sent to your email for password reset\"\n\n        else:\n\n            \"\"\"\n            Before we do anything we first set all other possible active statuses to NO\n            in order to prevent an attacker creating a whole lot of tokens and than fuzz\n            the password reset token.\n            \"\"\"\n\n            active = False\n\n            user.active = active\n            db.session.commit()\n\n            //Here we generate the password forget token\n            token = base64.b64encode(rand.bytes(128))\n\n            passwordChange = forgetPassword(token=token, userID=userID, active=active, oldPasswords=password)\n            db.session.add(passwordChange)\n            db.session.commit()            \n\n\n    \t\t//Here we send an email to the user with the needed reset function\n    \t\tmsg = \"follow this link to reset your password http://example.com/reset/\"\" + \"token\"\n    \t\tmail(email,\"Password reset\", msg)\n\n\n    def resetPassword(resetLink, password):\t\t\n\n    \t\"\"\"\n    \tImagine the user clicked on his link with the token included and is redirected towards\n    \tthe page where he can enter his new password.\n\n    \tNow we select the information from the forgot password function where the\n    \tforgot tokens matches the token in the database.\n    \t\"\"\"\n\n    \tactive = True\n\n        data = forgetPassword.query.join(members, forgetPassword.userID==members.userID).filter_by(token=resetLink,Active=active).all()\n\n        //We select token and users id\n        token = data.token\n        userID = data.userID\n\n        if token == resetLink:\n            \n            \"\"\"\n            First we pull the password through our function which enforces the input of\n            secure passwords.(see \"Enforce secure passwords\" in code examples for more\n            detailed information)\n            \"\"\"\n\n            if checkPassword(password) == True:\n\n                \"\"\"\n                Than we encrypt our password\n                (see \"Password storage\" in code examples for more\n                detailed information)    \n                \"\"\"\n\n                newPassword = createHash(password)\n    \t\n                \"\"\"\n                Finally we compare the password against other old passwords from the\n                password reset database in order to prevent the user from using old passwords\n                which could already be compromised by any means.\n                \"\"\"\n    \t\t\t\n                user = forgetPassword.query.filter_by(userID=userID).first()\n\n                if newPassword == user.oldPasswords:\n\n                    return \"This was an old password please do not use this password\"\n\n                else:\n                    \n                    //First we update the new password for the user\n                    active = False\n\n                    //Update the details\n                    newUser = members.query.filter_by(userID=userID).first()\n                    newUser.password = newPassword\n                    db.session.commit()\n                    user.active = active\n                    user.userID = userID\n    \t\t\t\tdb.session.commit()\n", "code_lang": "flask"}, {"id": 131, "title": "Open forwards & redirects", "content": " Open forwards & redirects\n\n\n Example:\n\n    \n    \"\"\"\n    When using forwards & redirects you should make sure the URL is being explicitly\n    declared in the code and cannot be manipulated by an attacker like example.com?page=dashboard :\n    \"\"\"\n\n    redirect(url_for(''dashboard''))\n\n    \"\"\"\n    Generally you should avoid getting input into the redirect which could contain\n    userinput by any means. if for any reason this may not be feasible than you\n    should make a whitelist input validation for the redirect like so:\n\n    Example : \n    If the whitelisting list is home, upload and redirectParam is home \n\n    redirectParam = home\n    redirecting(\"home,upload\", redirectParam, \"3\")\n    \"\"\"\n\n\n    def redirecting(whitelisting, input, count):\n        \n        \"\"\"\n        We want to whitelist the paged for expected values, in this example they are,\n        page1,page2 etc.. for more information about whitelisting see \"whitelisting\" \n        in the code examples:\n        \"\"\"\n\n        if whitelisting(whitelisting, input, count) == True:\n            //Redirect the Input if whitelisting is correct\n            redirect(url_for(input))\n\n\n", "code_lang": "flask"}, {"id": 132, "title": "Secure session cookies", "content": " Secure session cookies\n\n\n Example:\n\n\n    \"\"\"\n    If you use SLL you can also make your cookies secure (encrypted) to \n    avoid \"maninthemiddle\" cookies reading\n\t\"\"\"\n\n\tfrom flask import Flask, session\n\n\t//Initialize the flask application\n\tapp = Flask(__name__)\n\n\t//Set the secret key.  keep this really secret:\n\tapp.secret_key = open(\"/dev/random\",\"rb\").read(32) \n\n\t//Name of the session cookie\n\tapp.config[''SESSION_COOKIE_NAME''] = ''hrj''\n\t\n\t//Path for the session cookie\n\tapp.config[''SESSION_COOKIE_PATH''] = ''/''\n\t\n\t//Domain for the session cookie\n\t//Configure domains, do not use .yourdomain.com (wildcard)\n\t//This increases the attack surface!\n\tapp.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''\n\t\n\t//Controls if the cookie should be set with the secure flag\n\tapp.config[''SESSION_COOKIE_SECURE''] = True\n\t\n\t//Controls if the cookie should be set with the httponly flag\n\tapp.config[''SESSION_COOKIE_HTTPONLY''] = True\n\t\n\t//Lifetime of a permanent session\n\tapp.config[''PERMANENT_SESSION_LIFETIME''] = 3600\n\n\t//Store Value in session\n\tsession[''type''] = \"value\"\n", "code_lang": "flask"}, {"id": 133, "title": "Directory path traversal", "content": " Directory/path traversal\n\n\n Example:\n\n\n\t//Define the whitelist pattern and validation type and input parameter like:\n\t//getFiles(\"images,css,js\", ''alphanumeric'', foldername)\n\n\tdef getFiles(whiteListPattern, validationType, inputParameter):\n\t\t\n\t\tcontinue = True\n\n\t\t//First, we want to filter the filenames for expected values. For this example we use only az/09 and .\n\t\t//Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\t//For more information about validation see \"input validations\" in the code examples:\n\n\t\tif inputValidation(inputParameter, validationType, \"Invalid userinput\", \"HIGH\") == False:\n\t\t\tcontinue = False\n\n\t\t//Second, we want to whitelist the filenames for expected values, in this example they are,\n\t\t//page1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\n\t\t//Check for filename Whitelisting\n\t\tif whitelisting(whiteListPattern, inputParameter):\n\t\t\tcontinue = False\n\n\t\tif continue == True:\n\t\t\t//Create Path\n\t\t\tpath = os.path.join(app.config[''UPLOAD_FOLDER''], inputParameter)   \n\t\t\timages = []\n\t\t\t\n\t\t\t//List all the URL\n\t\t\tfor f in os.listdir(path):\n\t\t\t    if f.endswith(\"jpg\") or f.endswith(\"png\"):\n\t\t\t        images.append(\"%s%s/%s\" % (app.config[''UPLOAD_FOLDER''], inputParameter, f))\n\n\t\t\treturn render_to_response(''gallery.html'', {''images'': images})\n\n\t\telse:\n\n\t\t \treturn render_to_response(''gallery.html'', {''images'' : ''''})\n\n\t//gallery.html\n\n    {% for image in images %}\n    <img src=''{{image}}'' />\n    {% endfor %}\n", "code_lang": "flask"}, {"id": 134, "title": "X XSS Protection header", "content": " XXSSProtection header\n\n\n Example:\n\n\n    \"\"\"\n    In order to set the XXSSProtection header, you''ll have to add the following code to the head of your application\n    \"\"\"\n\n    @app.after_request\n    def anti_XSS(response):\n        response.headers[\"XXSSProtection\"] = \"1; mode=block\"\n        return response\n", "code_lang": "flask"}, {"id": 135, "title": "Directory listing", "content": " Directory listing\n\n\n Example:\n\n\n    \"\"\"\n    To disable or prevent directory access, add following line in your .htaccess file. If\n    user points the browsers to a directory that does not have an index file, then a\n    \"403 Forbidden\" error will be displayed:\n    Add this line of code to your .htaccess file:\n    \"\"\"\n\n    Options Indexes\n\n\t//Python code to display the files from the uploads folder\n\n\t@app.route(''/uploads/<filename>'')\n\tdef uploaded_file(filename):\n    \ttry:\n        \treturn send_from_directory(app.config[''UPLOAD_FOLDER''], filename)\n    \texcept Exception as e:\n        \treturn redirect(url_for(''upload'')) \n\n", "code_lang": "flask"}, {"id": 136, "title": "Crossdomain.xml ", "content": " Crossdomain.xml\n\n\n Example:\n\n\n\t\tA bad example of a crossdomain.xml would be:\n\n\t\t<?xml version=\"1.0\" ?>\n\t\t<crossdomainpolicy>\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowaccessfrom domain=\"*\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*\" headers=\"*\"/>\n\t\t</crossdomainpolicy>\n\n\t\t//Because it allows access from all other domains.\n\t\t//Instead of this approach you might want to use the following restrictions.\n\t\t//Example by twitter''s crossdomain.xml:\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF8\"?>\n\t\t<crossdomainpolicy xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" xsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t\t\t<allowaccessfrom domain=\"twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"api.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"search.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"static.twitter.com\" />\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*.twitter.com\" headers=\"*\" secure=\"true\"/>\n\t\t</crossdomainpolicy>\n", "code_lang": "flask"}, {"id": 137, "title": "Absolute timeout of a session", "content": " Absolute time out of a session\n\n\n Example:\n\t\n\t\n\t\"\"\"\n\tWhenever a session is started, absolute time out (lifetime) of a session should be set in seconds\n\t\"\"\"\n\n\tfrom flask import Flask, session\n\n\t//Initialize the flask application\n\tapp = Flask(__name__)\n\n\t//Set the secret key.  keep this really secret:\n\tapp.secret_key = open(\"/dev/random\",\"rb\").read(32) \n\n\tName of the session cookie\n\tapp.config[''SESSION_COOKIE_NAME''] = ''hrj''\n\n\tPath for the session cookie\n\tapp.config[''SESSION_COOKIE_PATH''] = ''/''\n\t\n\t//Domain for the session cookie\n\t//Configure domains, do not use .yourdomain.com (wildcard)\n\t//This increases the attack surface!\n\tapp.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''\n\t\n\t//Controls if the cookie should be set with the secure flag\n\tapp.config[''SESSION_COOKIE_SECURE''] = True\n\t\n\t//Controls if the cookie should be set with the httponly flag\n\tapp.config[''SESSION_COOKIE_HTTPONLY''] = True\n\t\n\t//Lifetime of a permanent session\n\tapp.config[''PERMANENT_SESSION_LIFETIME''] = 3600\n\n\t//Store Value in session\n\tsession[''type''] = \"value\"\n", "code_lang": "flask"}, {"id": 138, "title": "XML injection prevention", "content": " XML injection prevention\n\n\n Example:\n\n\n    \"\"\"\n\tWhenever you are using XML parsers you must sanitize or encode al userinput before\n\tincluding this input into your XML file.\n\n\tSome methods like below, the Dom document already encodes the input before storing it\n\tinto the XML. But beware, since this encoded input is still a threat whenever you are\n\tdisplaying the this data on screen as HTML output. This encoded data should be escaped\n\tat all times before displaying.\n\n\tWhenever your XML function does not encode your data on the fly, you may want to write\n\tyour own function for achieving this. See the code examples and search for \"Input encoding\"\n\tfor more detailed information.\n\t\"\"\"\n\n\n\t//Let us take an easy example where we store your favorite number name into a XML file.\n\tfrom lxml import etree\n\n\t//Create Root Element employees\n\n\troot = etree.Element(\"employees\")\n\t\n\t//Create child Element for employees\n\temployee = etree.SubElement(root, \"employee\")\n\tname = etree.SubElement(employee, \"name\")\n\t\n\t//Insert the text in name tag\n\tname.text = request.form[''name'']\n\n\t//Save it in xml file\n\twith open(\"test.xml\", \"w\") as f:\n\t\tf.write(etree.tostring(root, pretty_print=True))\n\n\t\"\"\"\n\tWe will try to insert <script>alert(123);</script> into the XML file,\n\tNow after inserting the employee name into the XML file it will look like:\n\n\t<?xml version=\"1.0\"?>\n\t<employees>\n\t\t<employee>\n\t\t\t<name>&lt;script&gt;alert(123);&lt;/script&gt;</name>\n\t\t</employee>\n\t</employees>\n\n\tAs you can see de input has been encoded but still can trigger an XSS whenever we\n\textract the data as shown in the example below:\n\n\tNOTE: if you ever want to include the xml files by means of userselected sources,\n\tbe aware of the fact that an attacker could also include sources from external websites\n\tand even execute External entity injections on your applications. See the \"XSLT injection prevention\"\n\tcode example for more detailed information on how to implement this type of functionality since\n\tthe same principle''s apply to both functions.\n\t\"\"\"\n\t\n\t\t//Read from a XML file\n\t\tx = etree.parse(\"test.xml\")\n\n\n\t\tfor element in x.iter(\"name\"):\n   \t \t\t//This example is vulnerable to XSS\n   \t \t\tprint element.text\n\n   \t \t\t//This example is escaped\n   \t \t\tprint escape(element.text)\n\n\t\"\"\"\n\tWe recommend to not rely solely on the encoding of the input by the Dom document.\n\tSo before you insert userinput into the XML file you want to have it sanitized.\n\tSee the \"Encoding\" and \"input validation\" code examples for more detailed information\n\t\"\"\"\n\n \n", "code_lang": "flask"}, {"id": 139, "title": "Session hijacking and fixation", "content": " Session hijacking and fixation\n\n\n Example:\n\n\n    \"\"\"\n    As soon as a user logs into your application you must store his session id as well as his\n    IP address along with his userID. This information will be used later on in your application in order to identify possible session hijacking.\n\n    TABLE track_sessions\n    \n    | TrackID | userID |\t\t   \t   SESSION \t\t            |     Ip address\t    |\n    \n    |   1     | 1      | \t79dcd529c0f5e01a9bfb2425c52036c6    |\t123.45.67.89\t|   \n    \n    |   2     | 1      | \t79dcd529c0f5e01a9bfb2425c52036c6    |\t123.45.67.81\t|\n    \n    |   3     | 2      | \tc80959d3ea4c166413774e45375ac2a1    |\t987.65.43.21\t|\n    \n\n    In order to prevent session hijacking there are a couple of defense strategies\n    which combined are a hardened defense.  \n    \"\"\"\n\n    \"\"\"\n    First we implement the strict transport security header, this is in order to prevent\n    users from accessing your application over an unprotected connection.\n    \"\"\"\n\n    //Example of the strict transport security header:\n    response.headers[\"StrictTransportSecurity\"] = \"maxage=31536000\"\n\n    //If all present and future subdomains will be HTTPS:\n    response.headers[\"StrictTransportSecurity\"] = \"maxage=31536000; includeSubDomains\"    \n\n    \"\"\"\n    Recommended: If the site owner would like their domain to be included in the HSTS preload\n    list maintained by Chrome (and used by Firefox and Safari), then use:\n    \"\"\"\n\n    response.headers[\"StrictTransportSecurity\"] = \"maxage=31536000; includeSubDomains; preload\"    \n\n    \"\"\"\n    The `preload` flag indicates the site owner''s consent to have their domain preloaded.\n    The site owner still needs to then go and submit the domain to the list. the preload list\n    enforces the browser to always present your application on HTTPS even on the first time\n    the user hits your application\n    \"\"\"\n\n    \"\"\"\n    Then we set the httpOnly flag\n    (see \"HttpOnly\" in the code examples for more details about implementation)\n    \"\"\"\n    \t\n    app.config[''SESSION_COOKIE_HTTPONLY''] = True\n\n    \"\"\"\n    Then we set the flag for session timeout\n    (see \"Timeout\" in the code examples for more details about implementation)\n    \"\"\"\n    \t\n    app.config[''PERMANENT_SESSION_LIFETIME''] = 3600\n\n    \"\"\"\n    Then we set the session secure flag\n    (see \"Secure flag\" in the code examples for more details about implementation)\n    \"\"\"\n    app.config[''SESSION_COOKIE_SECURE''] = True\n\n    \"\"\"\n    On login we change the session id in order to prevent session fixation\n    (see \"Login functionality\" in the code examples for more details about implementation)\n    \"\"\"\n    \n    //In header we should include this\n    from flask_kvsession import KVSessionExtension\n    \n    //Call for session regenerate to prevent session fixation\n    session.regenerate()\n\n    \"\"\"\n    NOTE: On applications that require high level security, there should never be an\n    remember me functionality implemented.\n    \"\"\"\n\n\n    \"\"\"\n    Now imagine the scenario after the login of the user (see the \"login functionality\" in\n    the code examples for more details). Whenever the user is logged in, the users IP address\n    and session id are also stored in the database these values are used in order to verify\n    if there are multiple users active on the same session.\n    If so, we can let the user decide to terminate the session and terminate the\n    other assigned sessions.\n    \"\"\"\n\n    def checkSession():\n        //To check whether the user is active\n        if session[''status''] != \"active\" or session[''status''] == \"\":\n            return redirect(url_for(''login''))\n\n        \"\"\"\n        Then we start the rest of the function where we will check if there are multiple\n        users/IP addresses using the same session id\n        \"\"\"\n    \n        //Store the current session\n        session = request.cookies.get(''session'')\n\n        //Get user ip address\n        ipaddress = request.remote_addr\n\n        trackSession = track_sessions.query.filter_by(ipaddress = ipaddress).first()\n        if trackSession.session == ipaddress:\n            return \"\"\"<div style=''borderstyle:solid; bordercolor:black; color:white; backgroundcolor:red; float:left;''>\n                <p>There are other active sessions on other IPaddresses.<br/>\n                Your session could be hijacked press logout in order to authenticate again\n                for security reasons!\n                <br/><br/>\n                <a href=''/logout''>Terminate sessions</a>\n                <br/>\n                <a href=''/Proceed''>Proceed anyway</a>\n                </p>\n                </div>\"\"\"\n\n    \"\"\"\n    The only thing left to do now is to update your track_sessions table by inserting\n    the IP address, sessionID and userID if you want to accept the other sessions as valid.\n    Otherwise the user just has to terminate his current session in order to lock out the\n    other sessions.\n    \"\"\"", "code_lang": "flask"}, {"id": 140, "title": "White listing", "content": " Whitelisting\n\n\n Example:\n\n\n    \"\"\"\n    First we create a function which checks the allowed patterns:\n    whitelisting(\"value1,value2,value3\" , input)\n    Whitelisting is checking if a value is identically the same as the whitelist we created. Please rewrite the below part to reflect this.\n    \"\"\"\n\n    def whitelisting(allowed, input):\n        result = allowed.split('','')\n        flag = False\n        for x in result:\n            if x == match:\n            \n            //If the value is valid we send a log to the logging file\n            setLog(session[\"id\"], \"Good whitelist validation\", \"SUCCESS\", datetime.utcnow(),\"HIGH\")\n            flag = True\n            //Whenever there was a valid match we return true\n            return True\n            \n        //Check for a false in order to send error to log and counter the user\n        if flag == False:\n                \n            //If the whitelist is bad log the validation \n            setLog(session[\"id\"], \"Bad whitelist validation\", \"FAIL\", datetime.utcnow(), \"HIGH\")            \n            counter.increment()\n            return False    \n", "code_lang": "flask"}, {"id": 141, "title": "Content type headers", "content": " Content type headers\n\n\n Example:\n\n\n\t//Content Type Header for HTML pages\n\tresponse.headers[\"ContentType\"] = \"text/html; charset=UTF8\"\n    return response\n\n    //Content Type Header for JSON objects\n\tresponse.headers[\"ContentType\"] = \"application/json\"\n    return response    \n", "code_lang": "flask"}, {"id": 142, "title": "Session cookies (domain)", "content": " Session cookies (domain)\n\n\n Example:\n\n\n\t\"\"\"\n\tWhenever a session is started, and you want to share it over different domains,\n\tthe domain value should be set to the specific domain\n\t\"\"\"\n\n\tfrom flask import Flask, session\n\n\t//Initialize the flask application\n\tapp = Flask(__name__)\n\n\t//Set the secret key.  keep this really secret:\n\tapp.secret_key = open(\"/dev/random\",\"rb\").read(32) \n\n\t//Name of the session cookie\n\tapp.config[''SESSION_COOKIE_NAME''] = ''hrj''\n\t//Path for the session cookie\n\tapp.config[''SESSION_COOKIE_PATH''] = ''/''\n\t//Domain for the session cookie\n\t//Configure domains, do not use .yourdomain.com (wildcard)\n\t//This increases the attack surface!\n\tapp.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''\n\t//Controls if the cookie should be set with the secure flag\n\tapp.config[''SESSION_COOKIE_SECURE''] = True\n\t//Controls if the cookie should be set with the httponly flag\n\tapp.config[''SESSION_COOKIE_HTTPONLY''] = True\n\t//Lifetime of a permanent session\n\tapp.config[''PERMANENT_SESSION_LIFETIME''] = 3600\n\n\t//Store Value in session\n\tsession[''type''] = \"value\"", "code_lang": "flask"}, {"id": 143, "title": "Login functionality", "content": " Login functionality\n\n\n Example:\n\n\n    \"\"\"\n    For privilege based authentication we need an extra table in your database in order to write the users privileges to.\n\n    TABLE users\n    \n    | userID     | userName   | password | privilegeID   |    access\t| \n       \n    |   1        | Admin\t  | Csdar323 |\t  1\t\t     | \t   TRUE\t\t|\n       \t\n    |\t2\t     | User\t\t  | Adf4fsv  |\t  2\t\t     |\t   FALSE\t|\n       \n    |\t3\t     | Guest\t  | dff4fKr  |\t  3\t\t     |\t   TRUE\t\t|\n       \n\n    TABLE privileges\n     \n    | privilegeID     | privilege        |\n    \n    |     1           | edit:read:delete |\n    \n    |\t  2\t          | edit:read\t\t |\n    \n    |\t  3\t          | read\t         |\n    \n\n    Now instead of using roles in sessions we rather want to assign privileges to users\n    by means of a DatabaseBased Authentication system.\n    Now we can easily assign a user certain privileges for him to access.\n    See \"Privilege based authentication\" code example for more information:\n    We will be using flask_login module for login\n    \"\"\"\n\n    from flask_login import login_user, LoginManager, UserMixin, logout_user, login_required\n\n    //Instantiating Flask Login\n    login_manager = LoginManager()\n    login_manager.init_app(app)\n\n\n    //Database model for User\n    class User(db.Model):\n        __tablename__ = \"users\"\n        id = db.Column(''user_id'',db.Integer , primary_key=True)\n        username = db.Column(''username'', db.String(20), unique=True , index=True)\n        password = db.Column(''password'' , db.String(10))\n        email = db.Column(''email'',db.String(50),unique=True , index=True)\n        status = db.Column(''status'', db.String(50), index=True)\n        registered_on = db.Column(''registered_on'' , db.DateTime)\n        privilegeID = db.Column(''privilegeID'', db.Integer, db.ForeignKey(''privileges.id''))\n\n        def __init__(self , username ,password , email, privilegeID, status):\n            self.username = username\n            self.password = password\n            self.email = email\n            self.registered_on = datetime.utcnow()\n            self.privilegeID = privilegeID\n            self.status = status\n\n\n    //Login a user\n    @app.route(''/login'', methods=[''GET'', ''POST''])\n    def login():\n        //Redirect to login page in GET request\n        if request.method == ''GET'':\n            return render_template(''login.html'')\n        \n        //Initializing username and password\n        username = request.form[''inputName'']\n        password = request.form[''inputPassword'']\n\n        //Check whether the username is alphanumeric\n        if inputValidation(''alphanumeric'', username) != True:\n            setLog(0, \"invalid expected input\", \"FAIL\", str(datetime.utcnow()), \"HIGH\")\n            return redirect(url_for(''login''))\n\n        //Username and password check   \n        registered_user = User.query.filter_by(username=username).first()\n        if registered_user is None:\n            flash(''Username or Password is invalid'' , ''error'')\n            return redirect(url_for(''login''))\n\n        //Validate the password hash on bycrypt\n        elif ValidatePassword(registered_user.password, password):\n            //Logged In successfully\n            login_user(registered_user)\n            flash(''Logged in successfully'')\n        \n        return render_template(''home.html'', user=request.form[''inputName''])\n", "code_lang": "flask"}, {"id": 144, "title": "Identifier based authorization", "content": " Identifierbased authorization\n\n\n Example:\n\n\n    \"\"\"\n    Define the whitelist pattern and validation type and input parameter like:\n    identity(\"page1,page2\", \"alphanumeric\", page)\n    \"\"\"\n\n    def identity(whiteListPattern, validationType, inputParameter):\n\n    \tcontinue = True\n\n    \t\"\"\"\n    \tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n    \tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n    \tfor more information about validation see \"input validations\" in the code examples:\n    \t\"\"\"\n\n    \tif inputValidation(inputParameter, validationType, \"Invalid userinput\", \"HIGH\", countLevel) == False:\n            continue = False\n\n    \t\"\"\"\n    \tSecond, we want to whitelist the filenames for expected values, in this example they are,\n    \tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n    \t\"\"\"\n\n    \tif whitelisting(whiteListPattern, inputParameter) == False:\n            continue = False\n\n    \t\"\"\"\n    \tWhenever you are checking whether a user is restricted to review certain data,\n    \tthe access restrictions should be processed server side.\n    \tThe userID could be stored inside a session variable on login, and should be used to\n    \tretrieve user data from the database:\n    \t\"\"\"\n    \t\n        if continue == True : \n\n    \t\t\"\"\"\n    \t\tWe count the number of connections towards the database,\n    \t\tSee \"aggregate user controls\" code example for more information:\n    \t\t\"\"\"\n\n            countAccess(1)\n            data = Table.query.filter_by(id=session[''id''], page=inputParameter).first()\n\n            return data\n\n        else:\n\n            return False", "code_lang": "flask"}, {"id": 145, "title": "RFD and file download injection prevention", "content": " Reflective file download and file download injection prevention\n\n\n Example:\n\n    \n\tdef downloadUserFiles(fileId):\n\t\t\n\t\tproceed = True\n\n\t\t\"\"\"\n\t\tFor the sake of example we only allow the users to download their own files\n\t\tby identifier based sql query''s. As you can see we select the filename\n\t\tby its id. in this case we prevent direct user input into the disposition header.\n\t\t\"\"\"\n\n\t\tif inputValidation(fileId, \"numeric\", \"validate was false\", \"HIGH\", 3) == False:\n\t\t\tproceed = False\n\n\t\tif proceed = True:\n\t\t\tfile = Download.query.filter_by(fileId=fileId, userId=session[''id'']).first()\n\n\t\t\tfilename = file.fileName\n\t\t\tmimeType = file.mimeType\n\n\t\t\tif filename:\n\n\t\t\t\t\"\"\"\n\t\t\t\tWe also define the mimetype per download file.\n\t\t\t\tThis is because whenever a user can only download images it is not necessary to set\n\t\t\t\tan uncommon contenttype header for it.\n\t\t\t\tNOTE: These mimetypes should not be stored based upon the mimetype which was send\n\t\t\t\tthe response header when the user uploaded the file. This value can be easily\n\t\t\t\tmanipulated with an intercepting proxy. You should get the mimetype from the file\n\t\t\t\titself after it was stored on the server.\n\t\t\t\t\"\"\"\n\n\t\t\t\tresponse = Response(open(app.config[''UPLOAD_FOLDER''] + filename).read())\n\t\t\t\tresponse.headers[\"ContentDescription\"] = \"File Transfer\"\n\t\t\t\tresponse.headers[\"Contenttype\"] = mimeType\n\t\t\t\tresponse.headers[\"ContentDisposition\"] = \"attachment; filename=\" + filename\n\t\t\t\tresponse.headers[\"Expires\"] = 0\n\t\t\t\tresponse.headers[\"CacheControl\"] = \"nostore, nocache, mustrevalidate, maxage=0\"\n\t\t\t\tresponse.headers[\"CacheControl\"] = \"postcheck=0, precheck=0\", false\n\n\t\t\t\tif os.path.exists(app.config[''UPLOAD_FOLDER''] + filename):\n        \t\t\treturn response\n\n\t\"\"\"\n\tThe second example is for whenever you are providing users with fixed downloads\n\tsuch as manuals etc. We do not only check if the file just exists, because that would\n\tallow an attacker to also download important other files from your server, so instead\n\twe whitelist them.\n\t\"\"\"\n\t\n\tdef downloadStored(filename):\n\n\t\tresponse = Response(open(app.config[''UPLOAD_FOLDER''] + filename).read())\n\n\t\tif whitelisting(\"file1.txt,file2.txt\", $filename) != False:\n\t\t\tresponse.headers[\"ContentDescription\"] = \"File Transfer\"\n\t\t\tresponse.headers[\"Contenttype\"] = ''text/plain''\n\t\t\tresponse.headers[\"ContentDisposition\"] = \"attachment; filename=\" + filename\n\t\t\tresponse.headers[\"Expires\"] = 0\n\t\t\tresponse.headers[\"CacheControl\"] = \"nostore, nocache, mustrevalidate, maxage=0\"\n\t\t\tresponse.headers[\"CacheControl\"] = \"postcheck=0, precheck=0\", false\n\t\t\tresponse.headers[\"ContentLength\"] = os.path.getsize(filename)\n\n\t\t\tif os.path.exists(app.config[''UPLOAD_FOLDER''] + filename):\n        \t\t\treturn response\n\t\t\t", "code_lang": "flask"}, {"id": 146, "title": "Privilege based authentication", "content": " Privilege based authentication\n\n\n Example:\n\n        \n    \"\"\"\n    For privilege based authentication we need an extra table in your database in order to write the users privileges to.\n\n    TABLE users\n        \n    | userID | userName | password | privilegeID |    access\t| AggregateControl\t  |\n       \n    | 1\t     | Admin\t  | Csdar323 |\t  1\t\t     | \t   TRUE\t\t|\t\t2336\t\t          |\n       \t\n    |\t2\t     | User\t\t  | Adf4fsv  |\t  2\t\t     |\t   FALSE\t|\t\t 0\t\t        \t  |\n       \n    |\t3\t     | Guest\t  | dff4fKr  |\t  3\t\t     |\t   TRUE\t\t|\t\t135\t\t        \t  |\n       \n\n    TABLE privileges\n       \n    | privilegeID | privilege \t\t   |\n    \n    |   1\t \t      | edit:read:delete |\n    \n    |\t  2\t \t      | edit:read\t\t     |\n    \n    |\t  3\t \t      | read\t\t\t       |\n    \n\n    Now instead of using roles in sessions we rather want to assign privileges to users\n    by means of a DatabaseBased Authentication system.\n    Now we can easily assign a user certain privileges for him to access.\n\n    Here is the isAuthorized function in which we check whether the user is permitted to do the action\n    \"\"\"\n\n    def isAuthorized(ispermitted):\n\n      //Select Privilege from the database\n      data = Users.query.join(privileges, Users.projectID==privileges.projectID).filter_by(Users.userId==session[''id''], privileges.access=''TRUE'').all()\n\n      privilege = data.privilege\n\n      //We first explode the value''s to see how much parts the arrays consists of\n      permission = privilege.split('':'')\n      authorization = ispermitted.split('':'')\n\n      //Then we count the authorization array\n      count = len(authorization)\n      counthits = 0\n\n      \"\"\"\n      We check the permissions against the ispermitted value to see how many times\n      they match. whenever they match we count the hits\n      \"\"\"\n\n      for value in permission:\n        if value == ispermitted:\n          counthits = countshits + 1\n\n      \"\"\"\n      Whenever the counts hits are greater or equal to the needed permissions\n      we now know we deserved access to the part of the system.\n      \"\"\"\n\n      if counthits > count:\n        //Log that the user had sufficient privileges:\n        setLog(session[''id''], \"User was privileged!\", \"SUCCESS\", str(datetime.utcnow()), privilege, \"NULL\")\n        return True\n      else:\n        //Log that the user had sufficient privileges:\n        setLog(session[''id''], \"User was not privileged!\", \"FAIL\", str(datetime.utcnow()), privilege, \"HIGH\")\n\n        \"\"\"\n        Set counter; if counter hits 3, the user''s session must be terminated.\n        After 3 session terminations the user''s account must be blocked.\n        Given the high threat level, there will be immediate session termination.\n        in this case the user tried to manipulate the application operation in order to do things he is not\n        privileged to, immediate session termination will follow!\n        \"\"\"\n\n        Counter.increment(3)\n        return False\n        ", "code_lang": "flask"}, {"id": 147, "title": "Aggregate user controls", "content": " Aggregate user controls\n\n\n Example:\n\n \n    \"\"\"\n    In order to enforce Aggregate access control protection the best method would be to\n    define your rules by means of a database structure rather than sessions or log''s.\n    This is due to the fact that if the user drops his session the rating would start\n    al over again.\n\n    TABLE users\n       \n    | userID | userName | password | privilegeID |    access    | AggregateControl\t|\n      \n    |   1    | Admin    | Csdar323 |      1      |     TRUE     |\t  2322    \t    |\n       \n    |   2    | User     | Adf4fsv  |      2      |     FALSE    |\t  0             |\n      \n    |   3    | Guest    | dff4fKr  |      3      |     TRUE     |\t  125           |\n    \n\n    TABLE privileges\n       \n    | privilegeID | privilege        |\n    \n    |     1       | edit:read:delete |\n    \n    |     2       | edit:read        |\n    \n    |     3       | read             |\n    \n    \"\"\"\n\n    def countAccess(count):\n        \n        \"\"\"\n        Each time the user accesses the database we keep track of the number of times he\n        connected. Whenever the user passes a reasonable number he should be rejected\n        since he could be an attacker scraping your table contents and stealing company information\n        You could a CRON job in your mysql system in order to clean the Aggregate column within certain timeframes\n        \"\"\"\n            \n        setLog(session[''id''], \"User access database \", \"SUCCESS\", datetime.utcnow(), \"NULL\")\n        registered_user = User.query.filter_by(id=session[''id'']).first()\n            \n        //We add the count to control variable for the update\n        control = registered_user.AggregateControl + count\n            \n        //Check the aggregate\n        if control > 5000:\n            setLog(session[''id''], \"Aggregate control breach\", \"FAIL\", date(\"dmy\"), \"HIGH\")\n                \n            \"\"\"\n            Then we lock out the users account assuming it has been compromised by\n            an attacker\n            \"\"\"\n                \n            access = \"Fail\"\n            registered_user.status = access\n            \n            //we update the users table and count +1 tot the AggregateControl column\n            registered_user.AggregateControl = control\n\n            db.session.commit()", "code_lang": "flask"}, {"id": 148, "title": "User registration SQL truncation", "content": " User registration / Sql truncation prevention\n\n\n Example:\n\n\n    \"\"\"\n    In order to prevent Column truncation sql injection Solution we have to make sure the\n    applications structural logic does not mismatches with the database structural logic.\n    To achieve this imagine the follow example of a database structure of a users table\n\n    TABLE users\n    \n    |\t     *Name* \t   |\t*Type* \t\t  |    *Extra*     |\n    \n    |        userID\t       |    Int(11)       | AUTO_INCREMENT |\n    \n    |       Username  \t   |    char(21)      |  \t\t       |\n    \n    |       Password       |  Varchar(255)    |\t\t\t       |\n    \n    |      PrivilegeID     |    Int(11)       | \t     \t   |\n       \n    |      Status          |    Varchar(200)  |                |\n    \n    \"\"\"\n\n    class User(db.Model):\n        __tablename__ = \"users\"\n        id = db.Column(''user_id'',db.Integer , primary_key=True)\n        username = db.Column(''username'', db.String(20), unique=True , index=True)\n        password = db.Column(''password'' , db.String(10))\n        email = db.Column(''email'',db.String(50),unique=True , index=True)\n        status = db.Column(''status'', db.String(50), index=True)\n        registered_on = db.Column(''registered_on'' , db.DateTime)\n        privilegeID = db.Column(''privilegeID'', db.Integer, db.ForeignKey(''privileges.id''))\n \n        def __init__(self , username ,password , email, privilegeID, status):\n            self.username = username\n            self.password = password\n            self.email = email\n            self.registered_on = datetime.utcnow()\n            self.privilegeID = privilegeID\n            self.status = status\n\n    //Function to add the details to database\n    def userRegister(username, password, email, privilegeID, status):\n        user = User(username, password, email, privilegeID, status)\n        db.session.add(user)\n        db.session.commit()\n\n    //Register user \n    @app.route(''/register'' , methods=[''GET'',''POST''])\n    def register():\n        if request.method == ''GET'':\n            return render_template(''signup.html'')\n        //Ensure the username is not long\n        if len(request.form[''inputName''] >= 21):\n            raise Exception(\"Long username\")\n        //Create password hash\n        password = passwordHash(request.form[''inputPassword''])\n        userRegister(request.form[''inputName''], password, request.form[''inputEmail''], 3, \"Active\")\n        flash(''User successfully registered'')\n        return redirect(url_for(''login''))        \n        ", "code_lang": "flask"}, {"id": 149, "title": "Anti clickjacking headers", "content": " Anti clickjacking headers\n\n\n Example:\n\n    \n    \"\"\"\n    One way to defend against clickjacking is to include a ''framebreaker'' script in each\n    page that should not be framed. The following methodology will prevent a webpage from\n    being framed even in legacy browsers, that do not support the XFrameOptionsHeader.\n    In the document HEAD element, add the following:\n    First apply an ID to the style element itself:\n    \"\"\"\n\n    <style id=\"antiClickjack\">body{display:none !important;}</style>\n    <! And then delete that style by its ID immediately after in the script >\n    <script type=\"text/javascript\">\n      if (self === top) {\n        var antiClickjack = document.getElementById(\"antiClickjack\");\n        antiClickjack.parentNode.removeChild(antiClickjack);\n      } else {\n        top.location = self.location;\n      }\n    </script>\n\n    @app.after_request\n    def clickjacking_Protection(response):\n        \"\"\"\n        The second option is to use ''security headers''.\n        There are two options for setting the ''anticlickjacking'' headers in\n        your application:\n        \"\"\"\n\n        //This will completely prevent your page from being displayed in an iframe \n        response.headers[\"XFrameOptions\"] = \"DENY\"\n\n        //This will completely prevent your page from being displayed in an iframe on other sites \n        response.headers[\"XFrameOptions\"] = \"SAMEORIGIN\"\n        return response\n", "code_lang": "flask"}, {"id": 150, "title": "Server side template Injection prevention", "content": " Server Side Template Injection prevention\n\n\n Example:\n\n    \n\t\"\"\"\n\tServer Side Template Injection, a frequent critical vulnerability that has high chance of \n\tmistaken as Cross Site Scripting and miss it entirely. But inline XSS, it can lead attack in \n\tWeb server and may even obtain a RCE. Template Injection occurs when user input is embedded in a template in an unsafe manner. \n\t\"\"\"\n\n\t//Vulnerable piece of Code which can lead to SSTI\n\t@app.errorhandler(404)\n\tdef page_not_found(e):\n    \ttemplate = ''''''{%% extends \"layout.html\" %%}\n\t\t{%% block body %%}\n    \t<div class=\"centercontent error\">\n        <h1>Oops! That page doesn''t exist.</h1>\n    \t<h3>%s</h3>\n    \t</div>\n\t\t{%% endblock %%}\n\t\t'''''' % (request.url)\n    \treturn render_template_string(template), 404\n\n    \"\"\"\n    The above code is vulnerable to SSTI,\n    If we give http://www.example.com/ss/<script>alert(1)</script>\n    This will show an alert box, which means its vulnerable to XSS\n    If we give http://www.example.com/ss/{{3*3}}\n    This will show an output 9, which further tells us that it is vulnerable to code injection or SSTI\n    \"\"\"\n\n    //Sanitization of user input can fix the issue\n    @app.errorhandler(404)\n\tdef page_not_found(e):\n\n\t\t//Initialize\n\t\tcontinue = True\n\n\t\t//Escape function would fix the issue\n    \turl = request.url\n    \turl = escape(url)\n    \t\n    \t//Checking the url\n    \tp = re.compile(r''(http://www.example.com/(.*))(\\?.*)?'')\n\n    \tif inputValidation(url, \"alphanumeric\") or len(url>20) or inputValidation(url, \"alpha\"):\n    \t\tcontinue = False\n    \t\n    \tif p.match(url) and continue==True:\n\n    \t\ttemplate = ''''''{%% extends \"layout.html\" %%}\n\t\t\t{%% block body %%}\n    \t\t<div class=\"centercontent error\">\n        \t<h1>Oops! That page doesn''t exist.</h1>\n    \t\t<h3>%s</h3>\n    \t\t</div>\n\t\t\t{%% endblock %%}\n\t\t\t'''''' % (url)\n    \t\t\n    \t\treturn render_template_string(template), 404\n\n", "code_lang": "flask"}, {"id": 151, "title": "Re authentication", "content": " Reauthentication\n\n\n Example:\n    \n\n    \"\"\"\n    Whenever a user wants to change his credentials or do other important data exchanges such as\n    transferring money he should always be challenged to reauthenticate himself before\n    allowing them to perform these actions.\n    \"\"\"\n    \n    def reauthenticate(password):\n        user = User.query.filter_by(id=session[''id'']).first()\n\n        //Validation of password in bcrypt encryption\n        if ValidatePassword(user.password, password):\n        \n            //After successful validation we will log that password was validated successfully\n            setLog(session[''id''], \"Password return true\", \"SUCCESS\", str(datetime.utcnow()), session[''privilege''], \"NULL\")\n\n            //Here we set a session to see if the user is authenticated throughout the system\n            session[''access''] = ''active''\n\n            \"\"\"\n            The userID in a session variable to use as an identifier to prevent a user reading\n            into unauthorized data, See Identifierbased authorization for more information and\n            code examples.\n            \"\"\"\n\n            //Setting the user Id\n            session[''id''] = user.id\n\n            return True\n\n        else:\n\n            //The user failed reauthenticating himself\n            setLog(session[''id''], \"Reauthentication failed\", \"FAIL\", str(datetime.utcnow()), \"null\", \"MOD\")\n            //If authentication failed destroyed the session\n            session.destroy()\n            session.regenerate()\n            session[''access''] = \"\"\n\n            return False\n\n\n    \"\"\"\n    Before we let a user perform certain actions he should first be challenged to authenticate\n    himself. imagine the following scenario, the user wants to change his email address.\n    \"\"\"\n\n    if reauthenticate(password) !== True :\n\n        return \"<div id=''error''>please reauthenticate yourself<div>\"\\\n    \t+ \"<form method=''post''>\"\\\n    \t+ \"<input type=''password'' name=''password''/>\"\\\n    \t+ \"<input type=''submit'' name=''authenticate''/>\"\\\n    \t+ \"</form>\"\n\n    else:\n    \t//Do operation for changing the email address\n    \treturn \"<div id=''success''>You can now change your email address!</div>\";\n\n", "code_lang": "flask"}, {"id": 152, "title": "Password storage (salting stretching hashing)", "content": " Password storage (salting/stretching/hashing)\n\n\n Example:\n\n\n    from flask.ext.bcrypt import Bcrypt\n\n    //Initialize the application with Bcrypt\n\tapp = Flask(__name__)\n\tbcrypt = Bcrypt(app)\n\n\t//For the encryption of passwords we use BCRYPT encryption method.\n\n\tdef createHash(pwd):\n\t\tsetLog(0, \"Create password Hash\", \"SUCCESS\", str(datetime.utcnow()), \"HIGH\")\n\t\treturn bcrypt.generate_password_hash(pwd)\n\n\t//Validate your password\n\n\tdef ValidatePassword(pwd_hash, pwd):\n\t\tsetLog(0, \"Start ValidatePassword\", \"SUCCESS\", str(datetime.utcnow()), \"HIGH\")\n\t\ttry:\n\t\t\treturn bcrypt.check_password_hash(pwd_hash, pwd)\n\t\t\tsetLog(0, \"ValidatePassword correct password\", \"SUCCESS\", str(datetime.utcnow()), \"HIGH\")\n\t\texcept ValueError:\n\t\t\treturn False\n\t\t\tsetLog(0, \"ValidatePassword incorrect password\", \"FAIL\", str(datetime.utcnow()), \"HIGH\")\n\n\t\t", "code_lang": "flask"}, {"id": 153, "title": "Debug enabling", "content": " Debug Enabling\n\n\n Example:\n\n    \n    \"\"\"\n    Debug mode makes it a major security risk and therefore it must never be used on production machines. It may even lead to execution of arbitrary code.\n    \"\"\"\n\n    //In Linux machines, never export the environment variable FLASK_DEBUG to 1\n    $ export FLASK_DEBUG=0\n    $ flask run\n\n    //On Windows you need to use set instead of export\n    $ set FLASK_DEBUG=0\n\n    //Even with python you can enable debug mode\n    app.debug = False\n\n    //By default it is False\n    app.run()", "code_lang": "flask"}, {"id": 154, "title": "Charsets", "content": " Charsets\n\n\n Example:\n\n\n    \"\"\"\n    In order to set the \"Charsets\" header you''ll have to add the following code to the head of your application, the following code could be used in your controller: For Example, text/html\n    \"\"\"\n\n    //You add directly into the HTML markup\n    <meta httpequiv=\"ContentType\" content=\"text/html; charset=utf8\">\n\n    @app.after_request\n    def content_Type_Charset(response):\n      response.headers[\"ContentType\"] = \"text/html; charset=utf8\"\n      return response\n", "code_lang": "flask"}, {"id": 155, "title": "Session cookies HttpOnly", "content": " Session cookies HttpOnly\n\n\n Example:\n\n\n\t\"\"\"\n\tWhenever a session is started, the \"httpOnly\" option should always be set to \"true\" or \"1\":\n\t\"\"\"\n\t\n\tfrom flask import Flask, session\n\n\t//Initialize the flask application\n\tapp = Flask(__name__)\n\n\t//Name of the session cookie\n\tapp.config[''SESSION_COOKIE_NAME''] = ''hrj''\n\n\t//Path for the session cookie\n\tapp.config[''SESSION_COOKIE_PATH''] = ''/''\n\t\n\t//Domain for the session cookie\n\t//Configure domains, do not use .yourdomain.com (wildcard)\n\t//This increases the attack surface!\n\tapp.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''\n\t\n\t//Controls if the cookie should be set with the secure flag\n\tapp.config[''SESSION_COOKIE_SECURE''] = True\n\t\n\t//Controls if the cookie should be set with the httponly flag\n\tapp.config[''SESSION_COOKIE_HTTPONLY''] = True\n\t\n\t//Lifetime of a permanent session\n\tapp.config[''PERMANENT_SESSION_LIFETIME''] = 3600\n\n\t//Store Value in session\n\tsession[''type''] = \"value\"\n", "code_lang": "flask"}, {"id": 156, "title": "Audit logs", "content": " Audit logs\n\n\n Example:\n\n\n    \"\"\"\n    The log function does not have to be complicated as long as you log at least these 6 values\n\n    Whenever a user is registered or added to your system, the application must also\n    automatically generate a table for this user which contains his userID, counter and blocker\n    variable in order to keep track of his behavior.\n    \"\"\"\n\n        def setLog(userId, error, value, date, threat):\n\n            \"\"\"\n            There are different threats : LOW, MEDIUM, HIGH\n\n            NULL if the operation is success\n\n            LOW threats are debugging logs or information logs when it goes wrong\n\n            MEDIUM threats can be failure of validation check, whitelisting checks failure\n\n            HIGH threats can even result in ban of users, security testing and maximum number of tries\n            \"\"\"\n            \n            //Take the client''s IP address\n            ip = request.remote_addr\n\n            //Save log file in a directory which has restrictions in place so no one can \n            file = \"restrictedfolder/logfile.txt\"\n            f = open(file, ''w+'')\n            \n            //Notice how we user the userID instead of the actual username in order to prevent the integrity of these usernames\n            f.write(date + str(userId) + error + value + threat + \"Ip : \" + str(ip))\n            f.close()\n\n\n        class Counter(db.Model):\n            __tablename__ = \"counter\"\n            count = db.Column(db.Integer, nullable=False)\n            blocker = db.Column(db.Integer, nullable=False)\n            userID = db.Column(''userID'', db.Integer, db.ForeignKey(''users.user_id''), primary_key=True)\n\n            def __init__(self, count, blocker, userID):\n                self.count = count \n                self.blocker = blocker\n                self.userID = userID\n\n            def increment(self, count):\n                self.count+= count\n                self.blocker+= count\n\n                if self.counter >= 3:\n                    setLog(self.userId,\"The users session was terminated\", \"SUCCESS\", datetime.utcnow(), \"NULL\")\n                    //After the counter has terminated a session he should be set to zero again\n                    self.count = 0\n                    //Log that the users sessions have been terminated\n                    logout()\n\n                if self.blocker >= 12:\n                    //If the blocker was bigger than 12 it means the user has made three strikes and his account should blocked\n                    setLog(self.userId,\"The users is denied access to system\", \"SUCCESS\", datetime.utcnow(), \"NULL\")\n                    user = User.query.filter_by(id=self.userID).first()\n                    user.status = ''Blocked''", "code_lang": "flask"}, {"id": 157, "title": "CSRF tokens", "content": " CSRF tokens\n\n\n Example:\n\n\n    //The random CSRF token generated need to be send to the server with every form submission. \n    //We are using FlaskWTF, for installing that: \n    //pip install U FlaskWTF\n    //In HTML Forms, for specifying the CSRF we can use the below code\n\n    <form method=\"post\">\n      <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\"/>\n    </form>\n\n\t//For ajax requests, we can use the below code\n\n    <script type=\"text/javascript\">\n    var csrf_token = \"{{ csrf_token() }}\";\n\n    $.ajaxSetup({\n        beforeSend: function(xhr, settings) {\n            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n                xhr.setRequestHeader(\"XCSRFToken\", csrf_token);\n            }\n        }\n    });\n    </script>\n\n\t//For configuring in the backend, you can use the below code\n    import base64\n    from OpenSSL import SSL, rand\n    from werkzeug.utils import secure_filename\n    from flask_wtf.csrf import CSRFProtect, CSRFError\n\n\t//Initialize the flask application \n    app = Flask(__name__)\n\n    //To Register CSRF protection globally for the app \n    csrf = CSRFProtect()\n    csrf.init_app(app)\n\n    //Configurations \n    //Strictly protection on SSL, Referrer \n    app.config[''WTF_CSRF_SSL_STRICT''] = True \n\n    \n    //Always use a WTF_CSRF_SECRET_KEY otherwise by default this will use the Flask app''s \n    //SECRET_KEY. So if user didn''t WTF_CSRF_SECRET_KEY it will choose SECRET_KEY, \n    //Which may impact the secret key\n\n    //Random string for generating CSRF token\n    app.config[''WTF_CSRF_SECRET_KEY''] = base64.b64encode(rand.bytes(128)) \n\n    //Function which is called when CSRF error happens\n    @app.errorhandler(CSRFError)\n    def handle_csrf_error(e):\n        return render_template(''csrf_error.html'', reason=e.description), 400\n\t", "code_lang": "flask"}, {"id": 158, "title": "Random password token generation", "content": " Random password/token generation\n\n\n Example:\n\n\n\t\"\"\"\n\tWhen needing to generate random numbers, always use proven methods \n\tinstead of writing your own.\n\t\"\"\"\n\t\n\t//Return a 50 character random string usable as a SECRET_KEY setting value.\n\tfrom django.core.management.utils import get_random_secret_key\n\tSECRET_KEY = get_random_secret_key()\n\t\n\t//Generate an even longer random string usable as a SECRET_KEY setting\n\tfrom django.utils.crypto import get_random_string\n\tchars = ''abcdefghijklmnopqrstuvwxyz0123456789!@$%^&*(_=+)''\n\tSECRET_KEY = get_random_string(100, chars)\n    \n", "code_lang": "flask"}, {"id": 159, "title": "HTML output", "content": " HTML output\n\n\n Example:\n\n\n    \"\"\"\n    Whenever user input is displayed in the application, whether, as content or a parameter value\n    submitted towards the url, all user input should be properly escaped to prevent XSS injections.\n    \"\"\"\n\n    For normal output this escaping will do the trick\n    from flask import escape\n    @app.route(''/'', methods=[''GET'', ''POST''])\n    def index():\n        return escape(request.form[''name''])\n\n    This also applies, for instance, when retrieving content from a database:\n    @app.route(''/'')\n        admin = User.query.filter_by(username=''admin'').first()\n        return escape(admin.email)\n    \n     For removing dangerous characters : \n\n    wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''\"'' : ''&quot;'', \"''\" : ''&x27;'', ''/'' : &x2F;, ''\\'' : ''\\\\''}\n\n    for key in wordDict:\n        input = input.replace(key, wordDict[key])\n\n     For UNTRUSTED DATA in <a href=\"/site/search?value=UNTRUSTED DATA\">clickme</a>\n     URL Encoding for defense\n\n    import urllib\n    input = urllib.quote_plus(input)\n\n    \"\"\"\n    Security consists of different layers of protection, in order to guarantee the integrity\n    of your application. This means that the value submitted from the user should\n    already be sanitized before being submitted towards the database in order to prevent XSS.\n    As an example, you are expecting only alphanumerical value here:\n    \"\"\"\n    match = re.findall(\"^[azAZ09]+$\", value)\n    if match:\n        return True\n    else:\n        raise Exception(\"User supplied value not in the range \" + range)\n\n    \"\"\"\n    This type of approach should be used whenever you are allowing userinput in\n    your DOM like for example, let''s say a user was allowed to upload an image and\n    set an alt text. when you do not sanitize his input a possible attack string could be:\n    \"\"\"\n    \n    this is an image\" onload=\"alert(''XSS'');\"\n\n    \"\"\"\n    whenever this string now is added to the users image this will be the outcome, leading\n    to xss:\n    \"\"\"\n\n    <img src=\"http://image.com/image.jpg\" alt=\"this is an image\" onload=\"alert(''XSS'')\"\" />\n\n    \"\"\"\n    After this sanitation malicious code can no longer exist in the $_POST[''value''] variable.\n\n    Another possibility for attackers to execute an XSS injection, is to pass malicious code directly\n    into the URL by means of a \"href\", e.g.:\n    javascript:alert(document.cookie);\n    or\n    data:text/html;base64,base64xssinjection\n\n    In the following scenario escaping with htmlspecialchars() is not sufficient to block the injection.\n    By checking the URL to see if it starts with either http:// or https:// whenever a link has\n    been submitted to the web application by a user.\n\n    def before_request(url):\n        if url.startswith(''http://'') or url.startswith(''https://''):\n            return True\n        else:\n            raise Exception(\"Not a valid URL : \" + url)\n\n    \n\n    \n", "code_lang": "flask"}, {"id": 160, "title": "Sandboxing", "content": " Sandboxing\n\n\n Example:\n\n\n\t<iframe sandbox=\"value\">\n\t\t/*\n\t\tsandbox=\"\"  Applies all restrictions\n\t\tallowforms  Reenables form submission\n\t\tallowpointerlock  Reenables APIs\n\t\tallowpopups  Reenables popups\n\t\tallowsameorigin  Allows the iframe content to be treated as being from the same origin\n\t\tallowscripts  Reenables scripts\n\t\tallowtopnavigation  Allows the iframe content to navigate its toplevel browsing context\n\t\t*/\n\t</iframe>\n\n", "code_lang": "flask"}, {"id": 161, "title": "SQL query", "content": " SQL query\n\n\n Example:\n\n\n    \"\"\"\n    SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.\n\t\"\"\"\n\n\tfrom flask_sqlalchemy import SQLAlchemy\n\t\n\t//Will track modifications of objects and emit signals\n\tapp.config[''SQLALCHEMY_TRACK_MODIFICATIONS''] = True\n\t//Database URI is used for connection\n\tapp.config[''SQLALCHEMY_DATABASE_URI''] = ''sqlite:///test.db''\n\t//Create object of SQL Alchemy\n\tdb = SQLAlchemy(app)\n\n\t//Class Model that is a declarative base which can be used to declare models\n\tclass User(db.Model):\n    \tid = db.Column(db.Integer, primary_key=True)\n    \tusername = db.Column(db.String(80), unique=True, nullable=False)\n    \tpassword = db.Column(db.String(120), unique=True, nullable=False)\n\n    \tdef __repr__(self):\t\n        \treturn ''<User %r>'' % self.username\n\n    \n    //create the tables and database\n    from yourapplication import db\n\tdb.create_all()\n\n\t//Inserting data into the database  create, add and commit\n\tadmin = User(username=''admin'', password=''9u3$$_m3_1f_y0u_C@n'')\n\tdb.session.add(admin)\n\tdb.session.commit()\n\n\t//Delete entries from the table\n\tdb.session.delete(admin)\n\tdb.session.commit()\n\n\t//Querying Records\n\t//Retrieve the user with username\n\tadmin = User.query.filter_by(username=''admin'').first()\n\tadmin.id\n\n\t//SQL raw string approach\n\n\tfrom sqlalchemy import text\n\n\tif inputValidation(inputParameter, ''alphanumeric'') == False:\n\t\t//Protection from string interpolation attack\n\t\tsql = text(\"select name from penguins where id =%s\" % (inputParameter,) )\n\t\n\t\tresult = db.engine.execute(sql)\n\t\tprint result[0]", "code_lang": "flask"}, {"id": 162, "title": "X path query", "content": " Xpath query\n\n\n Example:\n\n\n    \"\"\"\n    Define the allowed characters and input parameter and count level for the\n    user lockout like:\n    controller(\"<''>&\", $_GET[''filename''], \"3\")\n    \n    In order to prevent xpath injections we have to treat these query''s similar as \n    to the sql query''s. \n    \"\"\"\n    \n    def controller(allowed, input, count):\n        \n        \"\"\"\n        First we build our encoding method, see \"input validation\" code example for\n        more detailed information about encoding and escaping.\n        \"\"\"\n        \n        return = encoder(allowed, input, count)\n\n        //If the encoder came back false we do not process the function!\n\n        if return != False:\n\n            //Parse the register.xml\n            root = etree.parse(\"register.xml\")\n\n            //Extract the id from the XML using XPath\n            find = etree.XPath(''/Employees/Employee[ID='' + return + '']'')\n\n            for x in find(root):\n                print x.text\n", "code_lang": "flask"}, {"id": 163, "title": "Encoder", "content": " Character encoding\n\n\n Example:\n\n\t\n    \"\"\"\n    This is the encoder class for whenever you have to allow certain\n    possibly dangerous characters into your code for i.e names such as O''Reilly\n\t\"\"\"\n\n\tdef encoder(allowed, input, count):\n\t    \n\t    \"\"\"\n\t    As you can see you can specify allowed characters in your function\n\t    \"\"\"\n\t    \n\t    flag = True\n\t    match = re.findall(\"/^[azAZ09 \" + allowed+\"]+$/\", input)\n\n\t    if match:\n\n\t        \"\"\"\n\t        Set a log for whenever there is unexpected userinput with a threat level\n\t        See \"audit logs\" code example for more information:\n\t        \"\"\"\n\n\t        setLog(session[''id''], \"Bad userinputs\", \"FAIL\", datetime.utcnow(), \"HIGH\")\n\t        \n\t        \"\"\"\n\t        Set counter if counter hits 3 the users session must terminated\n\t        After 3 session terminations the user account must be blocked\n\t        See \"audit logs\" code example for more information:\n\t        \"\"\"\n\t        \n\t        counter.increment()\n\t        flag = False\n\n\t        //Remove Dangerous Characters\n\t        wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''\"'' : ''&quot;'', \"''\" : ''&x27;'', ''/'' : &x2F;, ''\\'' : ''\\\\''}\n\n\t        for key in wordDict:\n\t        \tinput = input.replace(key, wordDict[key])\n\n\t        return input\n", "code_lang": "flask"}, {"id": 164, "title": "Logout function", "content": " Logout function\n\n\n Example:\n\n\n    from flask_login import login_user, LoginManager, UserMixin, logout_user, login_required\n\n    \"\"\"\n    This way, the logout functionality will revoke the complete session:\n    \"\"\"\n  \n    @app.route(\"/logout\")\n    @login_required\n    def logout():\n      logout_user()\n      setLog(self.userId,\"Logout User\", \"SUCCESS\", datetime.utcnow(), \"NULL\")\n      return render_template(''index.html'')", "code_lang": "flask"}, {"id": 165, "title": "Anti caching headers", "content": " Anticaching headers\n\n\n Example:\n\n\n\t\"\"\"\n\tAdd the following headers to your application head in order to prevent the browser from caching\n\t\"\"\"\n\n\t@app.after_request\n\tdef antiCaching(response):\n\t\tresponse.headers[\"CacheControl\"] = \"nostore, nocache, mustrevalidate\" HTTP/1.1\n\t\tresponse.headers[\"CacheControl\"] = \"postcheck=0, precheck=0, false\"\n\t\tresponse.headers[\"Pragma\"] = \"nocache\"  HTTP/1.0\n\t\treturn response\n", "code_lang": "flask"}, {"id": 166, "title": "Input validation", "content": " Input validation\n\n\n Example:\n\n    \n\t\"\"\"\n\tThis function is where you store all your input validation controls. \n\tIt makes it easy to maintain whenever you want to apply changes for \n\tcertain input validation roles and reduces the chance of mistakes in your regexes.\n\t\"\"\"\n\n\tdef isAlphanumeric(str):\n\t\tmatch = re.findall(\"^[azAZ09]+$\" , str)\n\t\t//Check for alphanumeric\n\t\tif match:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\tdef isAlpha(str):\n\t\tmatch = re.findall(\"^[azAZ]+$\" , str)\n\t\t//Check for alpha\n\t\tif match:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\tdef isDigit(str):\n\t\tmatch = re.findall(\"^[09]+$\" , str)\n\t\t//Check for isDigit\n\t\tif match:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\t\n\n\tdef isBool(str):\n\t    match = re.findall(\"^(True|False)+$\" , str)\n\t\tif match:\n\t        return True\n\t    else:\n            return False\t\n    \n\tdef inputValidation(input, type):\n\t    if type == alphanumeric:\n\t    \t//Set the audit log\n\t    \tsetLog(session[\"id\"], \"Alphanumeric matched\", \"Success\", str(datetime.utcnow()), session[''privilege''])\n\t    \treturn isAlphanumeric(input)\n\t   \telif type == numeric:\n\t   \t\t//Set the audit log\n\t   \t\tsetLog(session[\"id\"], \"Numeric matched\", \"Success\", str(datetime.utcnow()), session[''privilege''])\n\t   \t\treturn isDigit(input)\n\t   \telif type == alpha:\n\t   \t\t//Set the audit log\n\t   \t\tsetLog(session[\"id\"], \"Alphabet matched\", \"Success\", str(datetime.utcnow()), session[''privilege''])\n\t   \t\treturn isAlpha(input)\n\t   \telif type == bool:\n\t   \t\t//Set the audit log\n\t   \t\tsetLog(session[\"id\"], \"Bool matched\", \"Success\", str(datetime.utcnow()), session[''privilege''])\n\t   \t\treturn isBool(input)\n\t   \telse:\n\t   \t\t//Set the audit log\n\t   \t\tsetLog(session[\"id\"], \"FAIL\", str(datetime.utcnow()), session[''privilege''])\n\t   \t\t//Increment the counter\n\t    \tcounter.increment(1)\n\t   \t\treturn False\n", "code_lang": "flask"}, {"id": 167, "title": "XML External entities", "content": " XML External entities\n\n\n Example:\n\n\n\t\"\"\"\n\tThe overall prevention method for loading external entities is adding the following line of code:\n\tTo be safe from loading external entities you have to turn off the entities in the parser.\n\t\"\"\"\n\t\n\t//If you are using lxml \n\n\tcontent = ''''''<?xml version=\"1.0\" encoding=\"UTF8\"?>\\\n\t<!DOCTYPE title [ <!ELEMENT title ANY >\\\n\t<!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>''''''\n\n\t\"\"\"\n\tIf the dtd_validation = True and resolve_entities=True and if the attacker can control the\n\tXML file which is taken in the parser, he can read any file using the file protocol file:/// or use some other protocols like expect://, gopher:// to even get a shell        \n\t\"\"\"\n\n\tfrom lxml import etree\n\t\n\t//Both the entities and DTD are turned off\n\tparser = etree.XMLParser(dtd_validation=False ,resolve_entities=False)\n\troot = etree.XML(\"<root><a/><b></b></root>\", parser)\n\t\n\n\t    \n\n\n\t    \n\n\n\n\n\n\t\n", "code_lang": "flask"}, {"id": 168, "title": "Enforce secure passwords", "content": " Enforce secure passwords\n\n\n Example:\n\n\n    def checkPassword(pwd):\n    \terror = []\n    \tproceed = True\n    \t//Recommended a longer password for Security\n    \tif(len(pwd) < 13):\n        \terror.append(\"Password is too Short!!\")\n        \tproceed = False\n    \n    //The password should include at least one number, a small letter, a CAPS,\n    //Plus a special character as defined in the patterns array:\n    \n    \tif not any(x.isupper() for x in pwd):\n        \terror.append(''Your password needs at least 1 capital letter'')\n    \tif not any(x.islower() for x in pwd):\n        \terror.append(''Your password needs at least 1 small letter'')\n    \tif not any(x.isdigit() for x in pwd):\n        \terror.append(''Your password needs at least 1 digit'')\n\n    \n    //Even though your password is sufficient according to all your standards, the password could still be weak.\n    //Just imagine the password \"Password!\"; this could easily be guessed by an attacker. To prevent the use of weak passwords we \n    //compare the password with a list of top 500 bad passwords and if matched, the password wil be rejected:\n\n    \tfile = open(''badpasswords.txt'').read()\n    \tpattern = file.split(\",\") \n\n    \tfor value in pattern:\n        \tif value != pwd:\n            \tpass\n        \telse:\n            \terror.append(\"Your password was matched with the bad password list, please try again.\")\n            \tproceed = False\n            \tbreak\n\n    \tif proceed == True:\n        \tflash(\"Your password is allowed!\")\n        \treturn True\n        else:\n        \tflash(\"Password validation failure(your choice is weak):\")\n        \tfor x in error:\n            \tprint x\n        \treturn False", "code_lang": "flask"}, {"id": 169, "title": "File upload", "content": " File upload\n\n\n Example:\n\n    \n\timport os\n\tfrom flask import render_template, flash\n\tfrom flask import Flask, render_template,request, redirect\n\tfrom flask import url_for,send_from_directory\n\tfrom werkzeug.utils import secure_filename\n\n\t\"\"\"\n\tAlways store the uploaded files in a directory somewhere outside the document root or that is not \n\taccessible from the web. Because there is chance that attacker could upload malicious file and \n\tlater access it via the web server. \n\t\"\"\"\n\t\n\t//Path to the upload directory\n\tapp.config[''UPLOAD_FOLDER''] = ''~/uploads/''\n\t\n\t//Extensions which are accepted to be uploaded\n\tapp.config[''ALLOWED_EXTENSIONS''] = set([''png'', ''jpg'', ''jpeg'', ''pdf''])\n\t\n\t//Check whether the file can be uploaded\n\tdef allowed_file(filename):\n\t    return ''.'' in filename and \\\n\t           filename.rsplit(''.'', 1)[1].lower() in app.config[''ALLOWED_EXTENSIONS'']\n\n\t//File upload route\n\t@app.route(''/upload'', methods=[''POST''])\n\tdef upload_file():\n\t\tsetLog(0, \"Upload function has started\", \"SUCCESS\", str(datetime.utcnow()), \"HIGH\")\n\n\t    //Check if the post request has the file part\n\t    if ''file'' not in request.files:\n\t        flash(''No file part'')\n\t        return redirect(request.url)\n\t    \n\t    //Get the name of the uploaded file\n\t    file = request.files[''file'']\n\n\t    //Submit a empty part without filename\n\t    if file.filename == '''':\n\t        flash(''No selected file'')\n\t        setLog(0, \"No File was selected\", \"FAIL\", str(datetime.utcnow()), \"HIGH\")\n\t        return redirect(request.url)\n\t    \n\t    //Check if the file is one of the allowed types/extensions\n\t    if file and allowed_file(file.filename):\n\t        \n\t        //Make the filename safe, remove unsupported chars\n\t        filename = secure_filename(file.filename)\n\t\n\t        //Remove the input when filename contains more than single dot\n\t        if len(filename.split(''.'')) > 1:\n\t        \treturn redirect(request.url)\n\n\t        //Move the file form the temporal folder to the upload folder we setup\n\t        file.save(os.path.join(app.config[''UPLOAD_FOLDER''], filename))\n\n\t        //Redirect the user to the uploaded_file route, which will basically show on the browser the uploaded file\n\t        setLog(0, \"Upload was successful\", \"SUCCESS\", str(datetime.utcnow()), \"HIGH\")\n\t        return redirect(url_for(''uploaded_file'', filename=filename))\n\t        \n\t    else:\n\t        flash(''Not allowed extensions'')       \n\t        //Log the unsuccessful upload\n\t        setLog(0, \"Upload was not successful, not allowed extensions\", \"FAIL\", str(datetime.utcnow()), \"HIGH\")\n\t        return redirect(request.url)\n\n\t@app.route(''/uploads/<filename>'')\n\tdef uploaded_file(filename):\n\t    return send_from_directory(app.config[''UPLOAD_FOLDER''], filename)\n\t\n", "code_lang": "flask"}, {"id": 170, "title": "X Content Type Options header", "content": " XContentTypeOptions header\n\n\n Example:\n\n\n    \"\"\"\n    In order to set the \"XContentTypeOptions\" header you''ll have to add the following code to the head of your application\n    \"\"\"\n\n    @app.after_request\n    def anti_ContentType(response):\n        response.headers[\"XContentTypeOptions\"] = \"nosniff\"\n        return response\n", "code_lang": "flask"}, {"id": 171, "title": "XSL injection prevention", "content": " XSL injection prevention\n\n\n Example:\n\n    \n    \"\"\"\n\tIn order to prevent XSL injections you must enforce strict policy''s whenever the\n\tfiles are loaded from a source controlled by an possible attacker.\n\n\tLet''s say for example that the user can choose from several XSL files on your application.\n\n\tABC.xsl arranges your employee names on alphabetical order\n\tCBA.xsl does not care and just shows the input by order of your XML file.\n\n\tBefore we want to attach the XSL files to the style sheet we first want to\n\tdo validation on the request to make sure the included file was one of our own pre\n\tdefined files, example:\n\tincluding(\"file1.xsl,file2.xsl,etc\", filename)\n\t\"\"\"\n\n\n\tdef including(whiteListing, input):\n\n\t\tcontinue = True\n\n\t\t\"\"\"\n\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09 and .\n\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\"\"\"\n\n\t\tif inputValidation(inputParameter, validationType, \"Invalid userinput\", \"HIGH\") == False:\n\t\t\tcontinue = False\n\n\t\t\"\"\"\n\t\tWe want to whitelist the paged for expected values, in this example they are,\n\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\"\"\"\n\n\t\tif whitelisting(whiteListing, input, count) == False:\n\t\t\tcontinue = False\n\n\t\t//If all went good we do the function\n\t\tif continue == True:\n\t\t\t//Load XML file\n\t\t\troot = etree.parse(\"test.xml\")\n\n\t\t\txslt_root = etree.XML(input)\n\t\t\ttransform = etree.XSLT(xslt_root)\n\n\t\t\t//Transform the XML\n\t\t\tresult_tree = transform(root)\n\n\t\telse: \n\n\t\t\treturn False", "code_lang": "flask"}, {"id": 172, "title": "System commands", "content": " System commands\n\n\n Example:\n\n\n\t\"\"\"\n\tDefine the whitelist pattern and validation type and input parameter like:\n\tgetFiles(\"value1,value2,etc\", \"alphanumeric\", filename)\n\t\"\"\"\n\n\tdef command(whiteListPattern, validationType, inputParameter){\n\n\t\tcontinue = True\n\n\t\t\"\"\"\n\t\tWhenever a system command is finished, you should properly sanitize and escape this user input.\n\t\tSystem command functions examples are: system(), eval(), exec()\n\n\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\"\"\"\n\n\t\tif inputValidation(inputParameter, validationType) == False:\n\t\t\tcontinue = False\n\n\t\t\t\"\"\"\n\t\t\tSecond, we want to whitelist the filenames for expected values, in this example they are,\n\t\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\t\"\"\"\n\n\t\tif whitelisting(whiteListPattern, inputParameter) == False:\n\t\t\tcontinue = False\n\n\t\t//If all went good we include the filename\n\t\tif continue == True:\n\t\t\t//Even though there is match we still escape the shelx.quote():\n\t\t\tcommand = ''./configure {}'' .format(quote(inputParameter))\n\t\t\tos.system(command)\n\t\telse:\n\t\t\treturn False", "code_lang": "django"}, {"id": 173, "title": "Password forget and disallow old passwords", "content": " Password forget & Disallow old passwords\n\n\n Example:\n\n\n    \"\"\"\n    Django has inbuilt feature of password reset. We just have to mentions the URL routes and\n    templates.\n    \"\"\"\n\n    //We need to add django.contrib.auth in INSTALLED_APPS\n    INSTALLED_APPS = [\n        ...\n        ''django.contrib.auth'',\n    ]\n\n    //Add URL routes for forget password\n    from django.contrib.auth import views as auth_views\n\n    urlpatterns = [\n        ...\n        url(r''^password_reset/$'', auth_views.password_reset, {''template_name'': ''polls/password_reset_form.html''} , name=''password_reset''),\n        url(r''^password_reset/done/$'', auth_views.password_reset_done, {''template_name'': ''polls/password_reset_done.html''}, name=''password_reset_done''),\n        url(r''^reset/(?P<uidb64>[09AZaz_\\]+)/(?P<token>[09AZaz]{1,13}[09AZaz]{1,20})/$'',\n            auth_views.password_reset_confirm, {''template_name'': ''polls/password_reset_confirm.html''} , name=''password_reset_confirm''),\n        url(r''^reset/done/$'', auth_views.password_reset_complete, {''template_name'': ''polls/password_reset_complete.html''} , name=''password_reset_complete''),    \n    ]\n\n    //Template for password_reset_form.html\n    \n    {% extends ''base.html'' %}\n    {% block content %}\n      <h3>Forgot password</h3>\n      <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n      </form>\n    {% endblock %}\n\n    //Template for password_reset_subject.txt\n    Password reset for Website\n    //Template for password_reset_email.html\n    {% autoescape %}\n    To initiate the password reset process for your {{ user.get_username }} TestSite Account,\n    click the link below:\n\n    {{ protocol }}://{{ domain }}{% url ''password_reset_confirm'' uidb64=uid token=token %}\n    If clicking the link above doesn''t work, please copy and paste the URL in a new browser\n    window instead.\n\n    Sincerely,\n    The TestSite Team\n    {% endautoescape %}\n  \n    //Template for password password_reset_done.html\n    {% extends ''base.html'' %}\n    {% block content %}\n      <p>\n        We''ve emailed you instructions for setting your password, if an account exists with the email you entered.\n        You should receive them shortly.\n      </p>\n      <p>\n        If you don''t receive an email, please make sure you''ve entered the address you registered with,\n        and check your spam folder.\n      </p>\n    {% endblock %}\n\n    //Template for password_reset_confirm.html\n    {% extends ''base.html'' %}\n    {% block content %}\n      {% if validlink %}\n        <h3>Change password</h3>\n        <form method=\"post\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <button type=\"submit\">Change password</button>\n        </form>\n      {% else %}\n        <p>\n          The password reset link was invalid, possibly because it has already been used.\n          Please request a new password reset.\n        </p>\n      {% endif %}\n    {% endblock %}\n\n    //Template for password_reset_complete.html\n    {% extends ''base.html'' %}\n    {% block content %}\n      <p>\n        Your password has been set. You may go ahead and <a href=\"{% url ''signin'' %}\">sign in</a> now.\n      </p>\n    {% endblock %}\n\n    //Setting Up SMTP Email Backend in settings.py\n    EMAIL_HOST = ''smtp.sendgrid.net''\n    EMAIL_PORT = 587\n    EMAIL_HOST_USER = ''test''\n    EMAIL_HOST_PASSWORD = ''password''\n    EMAIL_USE_TLS = True\n    DEFAULT_FROM_EMAIL = ''Test <noreply@example.com>''\n", "code_lang": "django"}, {"id": 174, "title": "Open forwards & redirects", "content": " Open forwards & redirects\n\n\n Example:\n\n\n    \"\"\"\n    When using forwards & redirects you should make sure the URL is being explicitly\n    declared in the code and cannot be manipulated by an attacker like example.com?page=dashboard :\n    \"\"\"\n\n    redirect(''dashboard'')\n\n    \"\"\"\n    Generally you should avoid getting input into the redirect which could contain\n    userinput by any means. if for any reason this may not be feasible than you\n    should make a whitelist input validation for the redirect like so:\n\n    Example : \n    If the whitelisting list is home, upload and redirectParam is home \n\n    redirectParam = home\n    redirecting(\"home,upload\", redirectParam, \"3\")\n    \"\"\"\n\n    def redirecting(whitelisting, input, count):\n        \n        \"\"\"\n        We want to whitelist the paged for expected values, in this example they are,\n        page1,page2 etc.. for more information about whitelisting see \"whitelisting\" \n        in the code examples:\n        \"\"\"\n\n        if whitelisting(whitelisting, input, count) == True:\n            //Redirect the Input if whitelisting is correct\n            redirect(input)", "code_lang": "django"}, {"id": 175, "title": "Secure session cookies", "content": " Secure session cookies\n\n\n Example:\n\n    \n    \"\"\"\n    If you use SLL you can also make your cookies secure (encrypted) to \n    avoid \"maninthemiddle\" cookies reading with\n\n    For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''\n\n    For adding HTTPONLY Cookies, we have to add the line in settings.py\n    SESSION_COOKIE_HTTPONLY = True\n\n    For adding Session Cookie age, we have to add the line in settings.py\n    SESSION_COOKIE_AGE = 60000\n\n    For setting session cookie domain, we have to add the line in settings.py\n    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''\n\n\tFor setting session cookie name, we have to add the line in settings.py\n\tSESSION_COOKIE_NAME = ''demo''    \n\t\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_PATH = ''/''\n\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_SECURE = True\n\t\"\"\"\n\n\t//For adding session cookie\n\trequest.session[''test''] = ''test''", "code_lang": "django"}, {"id": 176, "title": "Directory path traversal", "content": " Directory/path traversal\n\n\n Example:\n\n\t\"\"\"\n\tDefine the whitelist pattern and validation type and input parameter, countLevel like:\n\tgetFiles(\"images,css,js\", \"alphanumeric\", foldername)\n\t\"\"\"\n\n\tdef getFiles(request, whiteListPattern, validationType, inputParameter):\n\n\t\tcontinue = True\n        \n        \"\"\"\n\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09  alphanumeric\n\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\"\"\"\n\t\t\n\t\tif inputValidation(inputParameter, validationType) == False:\n\t\t\tcontinue = False\n\n\t\t\"\"\"\n\t\tSecond, we want to whitelist the filenames for expected values, in this example they are,\n\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\"\"\"\n\n\t\t//Check for filename Whitelisting\n\t\tif whitelisting(whiteListPattern, inputParameter):\n\t\t\tcontinue = False\n\n\t\tif continue == True:\n        \t//Create Path\n        \tpath = os.path.join(settings.MEDIA_ROOT, inputParameter)   \n        \timages = []\n\n        \t//List all the URL\n        \tfor f in os.listdir(path):\n            \tif f.endswith(\"jpg\") or f.endswith(\"png\"):\n                \timages.append(\"%s%s/%s\" % (settings.MEDIA_URL, inputParameter, f))\n        \n        \treturn render_to_response(''gallery.html'', {''images'': images})\n        else:\n\t\t\treturn render_to_response(''gallery.html'', {''images'': ''''})        \t\n\n    //gallery.html\n\n    {% for image in images %}\n    <img src=''{{image}}'' />\n    {% endfor %}", "code_lang": "django"}, {"id": 177, "title": "X XSS Protection header", "content": " XXSSProtection header\n\n\n Example:\n\n    \n    \"\"\"\n    In order to set the XXSSProtection header, you''ll have to add the following code to the head of your application\n\n    For adding XXSS Protection in every page we have to add a middleware\n    Make a middleware in yourapp/middleware.py\n    \"\"\"\n\n    class MyMiddleware:\n\n    \tdef __init__(self, get_response):\n        \tself.get_response = get_response\n\n    \tdef __call__(self, request):\n        \tresponse = self.get_response(request)\n        \tresponse[''XXSSProtection''] = \"1; mode=block\"\n        \treturn response\n   \t\n   \t//For adding middleware in the project, add in yourproject/settings.py\n   \tMIDDLEWARE = [\n    \t...,\n    \t''yourapp.middleware.MyMiddleware'',\n    \t...,\n\t]\t\n\n\t//For adding in the individual response page using render_to_response\n\tresponse = render_to_response(\"template.html\", {})\n\tresponse[''XXSSProtection''] = ''1; mode=block''\n\n\treturn response\n\n\t//For adding in the individual response page using render\n\tresponse = render(request, \"template.html\", {})\n\tresponse[''XXSSProtection''] = ''1; mode=block''\n\n\treturn response", "code_lang": "django"}, {"id": 178, "title": "Directory listing", "content": " Directory listing\n\n\n Example:\n\n\n    \"\"\"\n    To disable or prevent directory access, add following line in your .htaccess file. If\n    user points the browsers to a directory that does not have an index file, then a\n    \"403 Forbidden\" error will be displayed:\n\n    Add this line of code to your .htaccess file:\n    \"\"\"\n\n    Options Indexes\n\n\t\"\"\"\n\tPython code to display the files from the uploads folder\n\t\"\"\"\n\n\t//Views.py\n\n        def getFiles(request, whiteListPattern, validationType, inputParameter):\n\n            continue = True\n            \n            \"\"\"\n            First, we want to filter the filenames for expected values. For this example we use only az/09  alphanumeric\n            Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n            for more information about validation see \"input validations\" in the code examples:\n            \"\"\"\n            \n            if inputValidation(inputParameter, validationType) == False:\n                continue = False\n\n            \"\"\"\n            Second, we want to whitelist the filenames for expected values, in this example they are,\n            page1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n            \"\"\"\n\n            //Check for filename Whitelisting\n            if whitelisting(whiteListPattern, inputParameter) == False:\n                continue = False\n\n            if continue == True:\n                //Create Path\n                path = os.path.join(settings.MEDIA_ROOT, inputParameter)   \n                images = []\n\n                //List all the URL\n                for f in os.listdir(path):\n                    if f.endswith(\"jpg\") or f.endswith(\"png\"):\n                        images.append(\"%s%s/%s\" % (settings.MEDIA_URL, inputParameter, f))\n                return render_to_response(''gallery.html'', {''images'': images})\n            else:\n                return render_to_response(''gallery.html'', {''images'': ''''})                \n\n        //gallery.html\n        {% for image in images %}\n        <img src=''{{image}}'' />\n        {% endfor %}", "code_lang": "django"}, {"id": 179, "title": "Crossdomain.xml ", "content": " Crossdomain.xml\n\n\n Example:\n\n    \n\t\t//A bad example of a crossdomain.xml would be:\n\n\t\t<?xml version=\"1.0\" ?>\n\t\t<crossdomainpolicy>\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowaccessfrom domain=\"*\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*\" headers=\"*\"/>\n\t\t</crossdomainpolicy>\n\n\t\t//Because it allows access from all other domains.\n\n\t\t//Instead of this approach you might want to use the following restrictions.\n\t\t//Example by twitter''s crossdomain.xml:\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF8\"?>\n\t\t<crossdomainpolicy xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" xsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t\t\t<allowaccessfrom domain=\"twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"api.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"search.twitter.com\" />\n\t\t\t<allowaccessfrom domain=\"static.twitter.com\" />\n\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t<allowhttprequestheadersfrom domain=\"*.twitter.com\" headers=\"*\" secure=\"true\"/>\n\t\t</crossdomainpolicy>\n", "code_lang": "django"}, {"id": 180, "title": "Absolute timeout of a session", "content": " Absolute time out of a session\n\n\n Example:\n\n\n\t\"\"\"\n\tWhenever a session is started, absolute time out (lifetime) of a session should be set in seconds\n\t\n\tFor using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''\n\n    For adding HTTPONLY Cookies, we have to add the line in settings.py\n    SESSION_COOKIE_HTTPONLY = True\n\n    For adding Session Cookie age, we have to add the line in settings.py\n    SESSION_COOKIE_AGE = 60000\n\n    For setting session cookie domain, we have to add the line in settings.py\n    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''\n\n\tFor setting session cookie name, we have to add the line in settings.py\n\tSESSION_COOKIE_NAME = ''demo''    \n\t\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_PATH = ''/''\n\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_SECURE = True\n\t\"\"\"\n\n\t//For adding session cookie\n\trequest.session[''test''] = ''test''", "code_lang": "django"}, {"id": 181, "title": "XML injection prevention", "content": " XML injection prevention\n\n\n\n Example:\n\n\n    \"\"\"\n\t\n\tWhenever you are using XML parsers you must sanitize or encode al userinput before\n\tincluding this input into your XML file.\n\n\tSome methods like below, the Dom document already encodes the input before storing it\n\tinto the XML. But beware, since this encoded input is still a threat whenever you are\n\tdisplaying the this data on screen as HTML output. This encoded data should be escaped\n\tat all times before displaying.\n\n\tWhenever your XML function does not encode your data on the fly, you may want to write\n\tyour own function for achieving this. See the code examples and search for \"Input encoding\"\n\tfor more detailed information.\n\t\"\"\"\n\n\n\t//Let us take an easy example where we store your favorite number name into a XML file.\n\tfrom lxml import etree\n\n\t//Create Root Element employees\n\n\troot = etree.Element(\"employees\")\n\t\n\t//Create child Element for employees\n\temployee = etree.SubElement(root, \"employee\")\n\tname = etree.SubElement(employee, \"name\")\n\t\n\t//Insert the text in name tag\n\tname.text = request.form[''name'']\n\n\t//Save it in xml file\n\twith open(\"test.xml\", \"w\") as f:\n\t\tf.write(etree.tostring(root, pretty_print=True))\n\n\t\"\"\"\n\tWe will try to insert <script>alert(123);</script> into the XML file,\n\tNow after inserting the employee name into the XML file it will look like:\n\n\n\t\t<?xml version=\"1.0\"?>\n\t\t<employees>\n\t\t\t<employee>\n\t\t\t\t<name>&lt;script&gt;alert(123);&lt;/script&gt;</name>\n\t\t\t</employee>\n\t\t</employees>\n\n\t\tAs you can see de input has been encoded but still can trigger an XSS whenever we\n\t\textract the data as shown in the example below:\n\n\tNOTE: if you ever want to include the xml files by means of userselected sources,\n\tbe aware of the fact that an attacker could also include sources from external websites\n\tand even execute External entity injections on your applications. See the \"XSLT injection prevention\"\n\tcode example for more detailed information on how to implement this type of functionality since\n\tthe same principle''s apply to both functions.\n\t\"\"\"\n\t\n\t\t//Read from a XML file\n\t\tx = etree.parse(\"test.xml\")\n\n\n\t\tfor element in x.iter(\"name\"):\n   \t \t\t//This example is vulnerable to XSS\n   \t \t\tprint element.text\n\n   \t \t\t//This example is escaped\n   \t \t\tprint escape(element.text)\n\n\t\"\"\"\n\tWe recommend to not rely solely on the encoding of the input by the Dom document.\n\tSo before you insert userinput into the XML file you want to have it sanitized.\n\tSee the \"Encoding\" and \"input validation\" code examples for more detailed information\n\t\"\"\"\n\n \n", "code_lang": "django"}, {"id": 182, "title": "Session hijacking and fixation", "content": " Session hijacking and fixation\n\n\n Example:\n\n    \n    \"\"\"\n    Session hijacking and Session fixation are attempts to gain access to another user. \n    We Should never put session IDS in the URL, use SSL and secure connection and HTTP only\n    Cookies.\n\n    We should regenerate a SESSION ID when someone logs in. But Django does regenerating \n    Session ID automatically.  \n\n    First we implement the strict transport security header, this is in order to prevent\n    users from accessing your application over an unprotected connection.\n    \"\"\"\n\n    //Example of the strict transport security header:\n    response[''StrictTransportSecurity''] = \"maxage=31536000\"\n    //If all present and future subdomains will be HTTPS:\n    response[''StrictTransportSecurity''] = \"maxage=31536000; includeSubDomains\"    \n\n    \"\"\"\n    Recommended: If the site owner would like their domain to be included in the HSTS preload\n    list maintained by Chrome (and used by Firefox and Safari), then use:\n    \"\"\"\n\n    response[''StrictTransportSecurity''] = \"maxage=31536000; includeSubDomains; preload\"    \n\n    \"\"\"\n    The `preload` flag indicates the site owner''s consent to have their domain preloaded.\n    The site owner still needs to then go and submit the domain to the list. the preload list\n    enforces the browser to always present your application on HTTPS even on the first time\n    the user hits your application\n\n    Then we set the httpOnly flag in settings.py\n    (see \"HttpOnly\" in the code examples for more details about implementation)\n    \"\"\"\n    \t\n    SESSION_COOKIE_HTTPONLY = True\n\n    \"\"\"\n    Then we set the flag for session timeout in settings.py\n    (see \"Timeout\" in the code examples for more details about implementation)\n    \"\"\"\n    \t\n    SESSION_COOKIE_AGE = 60000 \n\n    \"\"\"\n    Then we set the session secure flag in settings.py\n    (see \"Secure flag\" in the code examples for more details about implementation)\n    \"\"\"\n    \n    SESSION_COOKIE_SECURE = True", "code_lang": "django"}, {"id": 183, "title": "White listing", "content": " Whitelisting\n\n\n Example:\n\n\n    \"\"\"\n    First we create a function which checks the allowed patterns:\n    whitelisting(\"value1,value2,value3\" , input)\n    Whitelisting is checking if a value is identically the same as the whitelist we created. Please rewrite the below part to reflect this.\n    \"\"\"\n\n    def whitelisting(allowed, input):\n        result = allowed.split('','')\n        flag = False\n        for x in result:\n            if x == match:\n            //If the value is valid we send a log to the logging file\n            setLog(session[\"id\"], \"Good whitelist validation\", \"SUCCESS\", datetime.utcnow(),\"HIGH\")\n            flag = True\n            //Whenever there was a valid match we return true\n            return True\n            \n        //Check for a false in order to send error to log and counter the user\n        if flag == False:\n            //If the whitelist is bad log the validation \n            setLog(session[\"id\"], \"Bad whitelist validation\", \"FAIL\", datetime.utcnow(), \"HIGH\")            \n            counter.increment()\n            return False    \n", "code_lang": "django"}, {"id": 184, "title": "Content type headers", "content": " Content type headers\n\n\n Example:\n\n\n\t\"\"\"\n    In order to set the \"ContentType\" header you''ll have to add the following code to the head of your application\n\n    For adding ContentType in every page we have to add a middleware\n    Make a middleware in yourapp/middleware.py\n    \"\"\"\n\n    class MyMiddleware:\n\n    \tdef __init__(self, get_response):\n        \tself.get_response = get_response\n\n    \tdef __call__(self, request):\n        \tresponse = self.get_response(request)\n        \t\n        \t//For HTML, the content type is text/html\n\t\t\tresponse[''ContentType''] = ''text/html; charset=UTF8''\n\t\t\t\n\t\t\t//For Json, the content type is application/json\n\t\t\tresponse[''ContentType''] = ''application/json''\n        \t\n        \treturn response\n   \t\n   \t//For adding middleware in the project, add in yourproject/settings.py\n   \tMIDDLEWARE = [\n    \t...,\n    \t''yourapp.middleware.MyMiddleware'',\n    \t...,\n\t]\t\n\n\t\"\"\"\n\tFor adding in the individual response page using render_to_response\n\t\"\"\"\n\n\tresponse = render_to_response(\"template.html\", {})\n\n\t//For HTML, the content type is text/html\n\tresponse[''ContentType''] = ''text/html; charset=UTF8''\n\t//For Json, the content type is application/json\n\tresponse[''ContentType''] = ''application/json''\n\t\n\treturn response\n\n\t\"\"\"\n\tFor adding in the individual response page using render\n\t\"\"\"\n\n\tresponse = render(request, \"template.html\", {})\n\t\n\t//For HTML, the content type is text/html\n\tresponse[''ContentType''] = ''text/html; charset=UTF8''\n\t//For Json, the content type is application/json\n\tresponse[''ContentType''] = ''application/json''\n\t\n\treturn response   ", "code_lang": "django"}, {"id": 185, "title": "Session cookies (domain)", "content": " Session cookies (domain)\n\n\n Example:\n\n\n\t\"\"\"\n\tWhenever a session is started, and you want to share it over different domains,\n\tthe domain value should be set to the specific domain\n\n    For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''\n\n    For adding HTTPONLY Cookies, we have to add the line in settings.py\n    SESSION_COOKIE_HTTPONLY = True\n\n    For adding Session Cookie age, we have to add the line in settings.py\n    SESSION_COOKIE_AGE = 60000\n\n    For setting session cookie domain, we have to add the line in settings.py\n    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''\n\n\tFor setting session cookie name, we have to add the line in settings.py\n\tSESSION_COOKIE_NAME = ''demo''    \n\t\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_PATH = ''/''\n\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_SECURE = True\n\t\"\"\"\n\n\t//For adding session cookie\n\trequest.session[''test''] = ''test''", "code_lang": "django"}, {"id": 186, "title": "Login functionality", "content": " Login functionality\n\n\n Example:\n\n\n    \"\"\"\n    For privilege based authentication we need an extra table in your database in order to write the users privileges to.\n\n    Django has inbuilt users table \n\n    TABLE users\n    \n    |ID|password|last_login|is_superuser|first_name|last_name|email|is_staff|is_active|date_joined|username |\n      \n    |1 |pbkdf2_s|20170831|\t  0\t\t| \tram    |  mohan  |ra@..|   0    |    1    |20170831.| ram12   |\n      \t\n    |2 |pbkdf2_s|20170829|\t  0\t    |\tjames  |  mathew |j@g..|   1    |    1    |20170830.| mathew  |\n      \n    |3 |pbkdf2_s|20170830|\t  1\t    |\tadmin  |  admin  |adm@.|   1    |    1    |20170829.| admin   |\n       \n\n\n    Now instead of using roles in sessions we rather want to assign privileges to users\n    by means of a DatabaseBased Authentication system.\n    Now we can easily assign a user certain privileges for him to access.\n    See \"Privilege based authentication\" code example for more information:\n    \n    Django authentication in default has inbuilt code for most part of the authentication\n    such as login, logout, password reset\n    \"\"\"\n    \n    //Create a login Template using form in django\n    //File location registration/login.html\n\n    {% extends ''base.html'' %}\n    {% block title %}Login{% endblock %}\n    {% block content %}\n      <h2>Login</h2>\n      <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Login</button>\n      </form>\n    {% endblock %}\n\n    //First we need to Configure the URL routes\n    //We need to import django.contrib.auth.views and add URL route for login and logout views \n\n    from django.conf.urls import url\n    from django.contrib.auth import views as auth_views\n\n    urlpatterns = [\n        url(r''^login/$'', auth_views.login, {''template_name'': ''core/login.html''} ,name=''login''),\n        url(r''^logout/$'', auth_views.logout, name=''logout''),\n    ]\n    \n    //In settings.py, we can set the location where django will redirect after authentication\n    LOGIN_REDIRECT_URL = ''home''\n\n    \"\"\"\n    There is no need to write login view again, Django has inbuilt view for login.\n    Proper input validation is also done in Django auth_view.login takes care for security.\n    But we need to implement a proper logging system for logouts, logins, retries\n    \"\"\"\n\n    //Logging is also a inbuilt feature in django, only we need to configure it\n    //Add logging system in Settings.py which logs app wise\n\n    LOGGING = {\n        ''version'': 1,\n        ''disable_existing_loggers'': False,\n        ''handlers'': {\n            ''file'': {\n                ''level'': ''DEBUG'',\n                ''class'': ''logging.FileHandler'',\n                ''filename'': ''debug.log'',\n            },\n            ''applogfile'': {\n                ''level'':''DEBUG'',\n                ''class'':''logging.handlers.RotatingFileHandler'',\n\n                //Specify the logging file name\n                \n                ''filename'': os.path.join(DJANGO_ROOT, ''polls.log''),\n                ''maxBytes'': 1024*1024*15,  15MB\n                ''backupCount'': 10,\n            },\n        },\n        ''loggers'': {\n            ''django'': {\n                ''handlers'': [''file''],\n                ''level'': ''DEBUG'',\n                ''propagate'': True,\n            },\n            ''polls'': {\n                ''handlers'': [''applogfile'',],\n                ''level'': ''DEBUG'',\n            },\n        },\n    }\n\n    //Add view for logging, logout, wrong logins in view.py\n\n    import logging\n    from django.contrib.auth.signals import user_logged_in, user_logged_out, user_login_failed\n    from django.dispatch import receiver\n\n    //Create your views for logging\n    log = logging.getLogger(__name__)\n\n    @receiver(user_logged_in)\n    def user_logged_in_callback(sender, request, user, **kwargs):\n\n        //Track the IP\n        ip = request.META.get(''REMOTE_ADDR'')\n\n        //Logging the details \n        log.debug(''login user: {user} via ip: {ip}''.format(\n            user=user,\n            ip=ip\n        ))\n\n    @receiver(user_logged_out)\n    def user_logged_out_callback(sender, request, user, **kwargs):\n\n        ip = request.META.get(''REMOTE_ADDR'')\n\n        log.debug(''logout user: {user} via ip: {ip}''.format(\n            user=user,\n            ip=ip\n        ))\n\n    @receiver(user_login_failed)\n    def user_login_failed_callback(sender, credentials, **kwargs):\n\n        log.warning(''logout failed for: {credentials}''.format(\n            credentials=credentials,\n        ))", "code_lang": "django"}, {"id": 187, "title": "Identifier based authorization", "content": " Identifierbased authorization\n\n\n Example:\n\n    \"\"\"\n    Define the whitelist pattern and validation type and input parameter like:\n    identity(\"page1,page2\", \"alphanumeric\", page)\n    \"\"\"\n\n    def identity(request, whiteListPattern, validationType, inputParameter):\n\n    \tcontinue = True\n\n    \t\"\"\"\n    \tFirst, we want to filter the filenames for expected values. For this example we use only az/09\n    \tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n    \tfor more information about validation see \"input validations\" in the code examples:\n    \t\"\"\"\n\n    \tif inputValidation(inputParameter, validationType, \"Invalid userinput\", \"HIGH\", countLevel) == False:\n            continue = False\n\n    \t\"\"\"\n    \tSecond, we want to whitelist the filenames for expected values, in this example they are,\n    \tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n    \t\"\"\"\n\n    \tif whitelisting(whiteListPattern, inputParameter) == False:\n            continue = False\n\n    \t\"\"\"\n    \tWhenever you are checking whether a user is restricted to review certain data,\n    \tthe access restrictions should be processed server side.\n    \tThe userID could be stored inside a session variable on login, and should be used to\n    \tretrieve user data from the database:\n    \t\"\"\"\n    \t\n        if continue == True : \n\n    \t\t\"\"\"\n    \t\tWe count the number of connections towards the database,\n    \t\tSee \"aggregate user controls\" code example for more information:\n    \t\t\"\"\"\n\n            countAccess(1)\n            current_user = request.user\n            data = Table.objects.filter(id=current_user.id, page=inputParameter).first()\n            \n            return data\n        else:\n            return False\n\n", "code_lang": "django"}, {"id": 188, "title": "RFD and file download injection prevention", "content": " Reflective file download and file download injection prevention\n\n\n Example:\n\n\n\timport os\n\tfrom django.conf import settings\n\tfrom django.http import HttpResponse\n\n\tdef downloadUserFiles(request, fileId):\n\t\t\n\t\t//Current_user\n\t\tcurrent_user = request.user\n\t\tproceed = True\n\n\t\t\"\"\"\n\t\tFor the sake of example we only allow the users to download their own files\n\t\tby identifier based sql query''s. As you can see we select the filename\n\t\tby its id. in this case we prevent direct userinput into the disposition header.\n\t\t\"\"\"\n\n\t\tif inputValidation(fileId, \"numeric\", \"validate was false\", \"HIGH\", 3) == False:\n\t\t\tproceed = False\n\n\t\tif proceed = True:\n\t\t\tfile = Download.objects.filter(fileId=password, userId=current_user.id).first()\n\t\t\tfilename = file.fileName\n\t\t\tmimeType = file.mimeType\n\n\t\t\tif filename:\n\n\t\t\t\t\"\"\"\n\t\t\t\tWe also define the mimetype per download file.\n\t\t\t\tThis is because whenever a user can only download images it is not necessary to set\n\t\t\t\tan uncommon contenttype header for it.\n\t\t\t\tNOTE: These mimetypes should not be stored based upon the mimetype which was send\n\t\t\t\tthe response header when the user uploaded the file. This value can be easily\n\t\t\t\tmanipulated with an intercepting proxy. You should get the mimetype from the file\n\t\t\t\titself after it was stored on the server.\n\t\t\t\t\"\"\"\n\n\t\t\t\tfile_path = os.path.join(settings.MEDIA_ROOT, filename)\n\t\t\t\tif os.path.exists(file_path):\n\t\t\t\t\twith open(file_path, ''rb'') as fh:\n\t\t\t\t\t\tresponse = HttpResponse(fh.read(), content_type=mimeType)\n\t\t\t\t\t\tresponse[\"ContentDescription\"] = \"File Transfer\"\n\t\t\t\t\t\tresponse[\"ContentDisposition\"] = \"attachment; filename=\" + filename\n\t\t\t\t\t\tresponse[\"Expires\"] = 0\n\t\t\t\t\t\tresponse[\"CacheControl\"] = \"nostore, nocache, mustrevalidate, maxage=0\"\n\t\t\t\t\t\tresponse[\"CacheControl\"] = \"postcheck=0, precheck=0\", false\n\t\t\t\t\t\treturn response\n\t\t\t\traise Http404\n\n\t\"\"\"\n\tThe second example is for whenever you are providing users with fixed downloads\n\tsuch as manuals etc. We do not only check if the file just exists, because that would\n\tallow an attacker to also download important other files from your server, so instead\n\twe whitelist them.\n\t\"\"\"\n\t\n\tdef downloadStored(filename):\n\t\tif os.path.exists(file_path):\n\t\t\twith open(file_path, ''rb'') as fh:\n\t\t\t\tif whitelisting(\"file1.txt,file2.txt\", $filename) != False:\n\t\t\t\t\tresponse = HttpResponse(fh.read(), content_type=''text/plain'')\n\t\t\t\t\tresponse.headers[\"ContentDescription\"] = \"File Transfer\"\n\t\t\t\t\tresponse.headers[\"ContentDisposition\"] = \"attachment; filename=\" + filename\n\t\t\t\t\tresponse.headers[\"Expires\"] = 0\n\t\t\t\t\tresponse.headers[\"CacheControl\"] = \"nostore, nocache, mustrevalidate, maxage=0\"\n\t\t\t\t\tresponse.headers[\"CacheControl\"] = \"postcheck=0, precheck=0\", false\n\t\t\t\t\tresponse.headers[\"ContentLength\"] = os.path.getsize(filename)\n\t\t\t\t\treturn response\nraise HTTP404", "code_lang": "django"}, {"id": 189, "title": "Privilege based authentication", "content": " Privilege based authentication\n\n\n Example:\n\n\n    \"\"\"\n    For privilege based authentication we will use the table permissions.\n\n    TABLE permissions\n    \n    |       *Name*      |       *Type*      |    *Extra*       |\n    \n    |         ID        |       Int(11)     |   AUTO_INCREMENT |\n    \n    |  content_type_id  |       Int(11)     |                  |\n    \n    |      codename     |    Varchar(255)   |                  |\n    \n    |        name       |    varchar(30)    |                  |\n    \n\n    Permissions are associated with models, and define the operations that can be performed on a model instance by a user who has the permission . Django automatically gives add, change, and delete permissions to all models by default.\n    \"\"\"\n\n    //Adding certain privileges to user\n    //Selecting particular User and adding permission\n    user = User.objects.filter(username=''user1'').first()\n    user.user_permissions = [Permission.objects.get(codename=''change_choice'')]\n\n    \"\"\"\n    Permissions can be checked in both templates and views.\n    In templates, Current user''s permission are checked in template variable {{ perms }}\n    In Views, Permissions can be tested in function view using the permission_required decorator or in class based view we can use PermissionRequiredMixin\n    \"\"\"\n    \n    //In templates\n    {% if perms.polls.change_choice %}\n      <! Add appropriate code. >\n    {% endif %}\n\n    //In Views \n    @permission_required(''polls.change_choice'')\n    @permission_required(''polls.can_edit'')\n    def my_view(request):\n      ...\n\n    //Permissionrequired for class based views\n    from django.contrib.auth.mixins import PermissionRequiredMixin\n\n    class MyView(PermissionRequiredMixin, View):\n        permission_required = ''catalog.can_mark_returned''\n        ...", "code_lang": "django"}, {"id": 190, "title": "Aggregate user controls", "content": " Aggregate user controls\n\n\n Example:\n\n \n    \"\"\"\n    In order to enforce Aggregate access control protection the best method would be to\n    define your rules by means of a database structure rather than sessions or log''s.\n    This is due to the fact that if the user drops his session the rating would start\n    al over again.\n\n\n    TABLE userAggregate\n       \n    |   id   | user_id  | AggregateControl\t|\n      \n    |   1    | Admin    | \t  2322    \t    |\n       \n    |   2    | User     |     0             |\n      \n    |   3    | Guest    |     125           |\n    \n    \t\n    \"\"\"\n\n    //Extend the existing User model by adding another model and linking it to the User model using //onetoone relation in models.py\n\n    class userAggregate(models.Model):\n       user = models.OneToOneField(User)\n       AggregateControl = models.IntegerField(default=0)\n\n\n    //countAccess in views.py\n\n    import logging\n\n    def countAccess(request, count):\n        \n        \"\"\"\n        Each time the user accesses the database we keep track of the number of times he\n        connected. Whenever the user passes a reasonable number he should be rejected\n        since he could be an attacker scraping your table contents and stealing company information\n        You could a CRON job in your mysql system in order to clean the Aggregate column within certain timeframes\n        \"\"\"\n        \n        ip = get_client_ip(request)\n        current_user = request.user\n        log = logging.getLogger(__name__)\n\n        //Add logging\n        log.debug(''User aggregate control updated: {user} via ip: {ip}''.format(\n            user=user,\n            ip=ip\n        ))\n\n        registered_user = userAggregate.objects.get(pk=current_user.id)\n        //We add the count to control variable for the update\n        control = registered_user.AggregateControl + count\n        //Check the aggregate\n        if control > 5000:\n            logger.warning(''User aggregate control breach: {user} via ip: {ip}''.format(\n                user=user,\n                ip=ip\n            ))\n                \n            \"\"\"\n            Then we lock out the users account assuming it has been compromised by\n            an attacker\n            \"\"\"\n                \n            access = 0\n            current_user.is_active = access\n            current_user.save()\n            //we update the users table and count +1 tot the AggregateControl column\n            registered_user.AggregateControl = control\n            registered_user.save()  ", "code_lang": "django"}, {"id": 191, "title": "User registration SQL truncation", "content": " User registration / Sql truncation prevention\n\n\n Example:\n\n    \"\"\"\n    In order to prevent Column truncation sql injection Solution we have to make sure the\n    applications structural logic does not mismatches with the database structural logic.\n    To achieve this imagine the follow example of a database structure of a users table\n\n    TABLE users\n    \n    |\t     *Name*          |\t   *Type*       |    *Extra*     |\n    \n    |        ID\t           |    Int(11)       | AUTO_INCREMENT |\n    \n    |       Username  \t   |    char(21)      |                |\n    \n    |       Password       |  Varchar(255)    |                |\n    \n    |      last_login      |      date        |                |\n       \n    |      is_superuser    |      int(1)      |                |\n    \n    |      first_name      |    varchar(30)   |                |\n    \n    |      last_name       |    varchar(30)   |                |\n    \n    |      email           |    varchar(30)   |                |\n    \n    |      is_staff        |      int(1)      |                |\n    \n    |      is_active       |      int(1)      |                |\n    \n    |      date_joined     |      date        |                |\n    \n    \"\"\"\n\n    //For URL routes for User Registration\n\n    from django.conf.urls import url\n    from mysite.core import views as core_views\n\n    urlpatterns = [\n        ...\n        url(r''^signup/$'', core_views.signup, name=''signup''),\n    ]\n\n    //View for signup\n    from django.contrib.auth import login, authenticate\n    from django.shortcuts import render, redirect\n\n    from .forms import SignUpForm\n\n    def signup(request):\n        if request.method == ''POST'':\n            form = SignUpForm(request.POST)\n            if form.is_valid():\n                form.save()\n                username = form.cleaned_data.get(''username'')\n                raw_password = form.cleaned_data.get(''password1'')\n                user = authenticate(username=username, password=raw_password)\n                login(request, user)\n                return redirect(''index'')\n        else:\n            form = SignUpForm()\n        return render(request, ''polls/signup.html'', {''form'': form})\n\n    //Template for signup.html\n    {% block content %}\n      <h2>Sign up</h2>\n      <form method=\"post\">\n        {% csrf_token %}\n        {% for field in form %}\n          <p>\n            {{ field.label_tag }}<br>\n            {{ field }}\n            {% if field.help_text %}\n              <small style=\"color: grey\">{{ field.help_text }}</small>\n            {% endif %}\n            {% for error in field.errors %}\n              <p style=\"color: red\">{{ error }}</p>\n            {% endfor %}\n          </p>\n        {% endfor %}\n        <button type=\"submit\">Sign up</button>\n      </form>\n    {% endblock %}\n\n    //forms.py for extra fields\n    class SignUpForm(UserCreationForm):\n    first_name = forms.CharField(max_length=30, required=False, help_text=''Optional.'')\n    last_name = forms.CharField(max_length=30, required=False, help_text=''Optional.'')\n    email = forms.EmailField(max_length=254, help_text=''Required. Inform a valid email address.'')\n\n    class Meta:\n        model = User\n        fields = (''username'', ''first_name'', ''last_name'', ''email'', ''password1'', ''password2'', )            ", "code_lang": "django"}, {"id": 192, "title": "Anti clickjacking headers", "content": " Anti clickjacking headers\n\n\n Example:\n\n\n    \"\"\"  \n    One way to defend against clickjacking is to include a \"framebreaker\" script in each\n    page that should not be framed. The following methodology will prevent a webpage from\n    being framed even in legacy browsers, that do not support the XFrameOptionsHeader.\n    In the document HEAD element, add the following:\n    First apply an ID to the style element itself:\n\t  \"\"\"\n\n    <style id=\"antiClickjack\">body{display:none !important;}</style>\n    //And then delete that style by its ID immediately after in the script:\n\n    <script type=\"text/javascript\">\n\t   if (self === top) {\n\t\t   var antiClickjack = document.getElementById(\"antiClickjack\");\n\t\t   antiClickjack.parentNode.removeChild(antiClickjack);\n\t   } else {\n\t\t   top.location = self.location;\n\t   }\n    </script>\n\n    \"\"\"\n    To set the same XFrameOptions value for all responses in your site, put ''django.middleware.clickjacking.XFrameOptionsMiddleware'' to MIDDLEWARE:\n\n    MIDDLEWARE = [\n        ...\n        ''django.middleware.clickjacking.XFrameOptionsMiddleware'',\n        ...\n    ]\n\n    Middleware will be enabled by default while starting the project.\n    By default the XFrameOptions header is set to SAMEORIGIN  \n    \"\"\"\n\n    //If we want to set the X_FRAME_OPTIONS to DENY\n    //If you want DENY instead, set the X_FRAME_OPTIONS setting\n\n    X_FRAME_OPTIONS = ''DENY''\n", "code_lang": "django"}, {"id": 193, "title": "Re authentication", "content": " Reauthentication\n\n\n Example:\n\n\n    \"\"\"\n    Whenever a user wants to change his credentials or do other important data exchanges such as\n    transferring money he should always be challenged to reauthenticate himself before\n    allowing them to perform these actions.\n    \"\"\"\n    \n    from django.contrib.auth import authenticate, login\n\n    def reauthenticate(request, password):\n        //Access current_user\n        current_user = request.user\n        username = current_user.username\n        //Authenticate user\n        user = authenticate(request, username=username, password=password)\n        //Validation of password \n        if user is not None:\n            //After successful validation we will log that password was validated successfully\n            log.info(''Successful reauthentication user : {user} via ip: {ip}''.format(\n                user=user,\n                ip=ip\n            ))\n\n            //Flush Session token \n            request.session.flush()\n            //Make the current_user active\n            current_user.is_active = 1\n            //Save the session ID \n            login(request, user)\n            //Success page \n            return render(request, ''polls/home.html'')\n        else:\n            //The user failed reauthenticating himself\n            log.warning(''Reauthentication Failed!! user : {user} via ip: {ip}''.format(\n                user=user,\n                ip=ip\n            ))\n            //If authentication failed destroyed the session\n            request.session.flush()\n            return render(request, ''polls/login.html'')\n\n    \"\"\"\n    Before we let a user perform certain actions he should first be challenged to authenticate\n    himself. imagine the following scenario, the user wants to change his email address.\n    \"\"\"\n\n    //Usage Example\n    reauthenticate(password) ", "code_lang": "django"}, {"id": 194, "title": "Debug enabling", "content": " Debug Enabling\n\n\n Example:\n\n\n    \"\"\"\n    Debug mode makes it a major security risk and therefore it must never be used on production machines. Django will display a detailed traceback with more details about the application such \n    as Django settings\n    \"\"\"\n\n    //The default settings.py file created by djangoadmin startproject sets DEBUG = True\n    //It should be set to False in production \n    DEBUG = False", "code_lang": "django"}, {"id": 195, "title": "Charsets", "content": " Charsets\n\n\n Example:\n\n\n    \"\"\"\n    In order to set the \"Charsets\" header you''ll have to add the following code to the head of your application, the following code could be used in your controller: For Example, text/html\n    \"\"\"\n\n    //You add directly into the HTML markup\n    <meta httpequiv=\"ContentType\" content=\"text/html; charset=utf8\">\n\n    \"\"\"\n    In order to set the \"ContentType\" header and charset you''ll have to add the following code\n    to the head of your application\n\n    For adding ContentType in every page we have to add a middleware\n    Make a middleware in yourapp/middleware.py\n    \"\"\"\n\n    class MyMiddleware:\n\n    \tdef __init__(self, get_response):\n        \tself.get_response = get_response\n\n    \tdef __call__(self, request):\n        \tresponse = self.get_response(request)\n        \t\n        \t//For HTML, the content type is text/html\n\t\t\tresponse[''ContentType''] = ''text/html; charset=UTF8''\n\n        \treturn response\n   \t\n   \t//For adding middleware in the project, add in yourproject/settings.py\n   \tMIDDLEWARE = [\n    \t...,\n    \t''yourapp.middleware.MyMiddleware'',\n    \t...,\n\t]\t\n\n\t\"\"\"\n\tFor adding in the individual response page using render_to_response\n\t\"\"\"\n\n\tresponse = render_to_response(\"template.html\", {})\n\t//For HTML, the content type is text/html\n\tresponse[''ContentType''] = ''text/html; charset=UTF8''\n\t\n\treturn response\n\n\t\"\"\"\n\tFor adding in the individual response page using render\n\t\"\"\"\n\n\tresponse = render(request, \"template.html\", {})\t\n\t//For HTML, the content type is text/html\n\tresponse[''ContentType''] = ''text/html; charset=UTF8''\n\n\treturn response  ", "code_lang": "django"}, {"id": 196, "title": "Session cookies HttpOnly", "content": " Session cookies HttpOnly\n\n\n Example:\n\n\n\t\"\"\"\n    Javascript cannot set or read cookie''s value if the HTTPOnly attribute is set on cookie.\n    It makes attacker client side attacks such as Cross Site scripting harder to exploit.\n    Attacker will not be able to steal the user''s cookies.\n\n    For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''\n\n    For adding HTTPONLY Cookies, we have to add the line in settings.py\n    SESSION_COOKIE_HTTPONLY = True\n\n    For adding Session Cookie age, we have to add the line in settings.py\n    SESSION_COOKIE_AGE = 60000\n\n    For setting session cookie domain, we have to add the line in settings.py\n    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''\n\n\tFor setting session cookie name, we have to add the line in settings.py\n\tSESSION_COOKIE_NAME = ''demo''    \n\t\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_PATH = ''/''\n\n\tFor setting session cookie path, we have to add the line in settings.py\n\tSESSION_COOKIE_SECURE = True\n\t\"\"\"\n\n\t//For adding session cookie\n\trequest.session[''test''] = ''test''", "code_lang": "django"}, {"id": 197, "title": "Audit logs", "content": " Audit logs\n\n\n Example:\n\n\n    \"\"\"\n    Django uses Python\u2019s builtin logging module to perform system logging. \n\n    Methods which should be logged : \n         Data Addition\n         Data modification\n         Data deletion\n         Data Exports\n         Identifying security incidents\n         Perfomance monitoring etc\n\n    Python logging configurations consists of four parts:\n\n      Loggers : is configured to have log level. Different log levels are DEBUG, INFO, \n                 WARNING, ERROR, CRITICAL. Each message that is written to the logger is a Log Record.\n      Handlers : It describes particular logging behavior such as writing message on the screen, a file or to network socket.  \n      Filters : We can place an additional criteria for logging process.\n      Formatters : Formatters describe the exact format of that text.\n\n    The logger module is inbuilt class in django for logging system information into files or sending logs through network.\n\n    Different logging calls or mehtods : \n         logger.debug()\n         logger.info()\n         logger.warning()\n         logger.error()\n         logger.critical()\n         logger.log()\n         logger.exception()\n    \"\"\"\n\n    //Configuring loggers with app in SETTINGS.PY\n    \"\"\"\n    This creates polls app log file polls.log\n    \"\"\"\n    LOGGING = {\n        ''version'': 1,\n        ''disable_existing_loggers'': False,\n        ''handlers'': {\n            ''file'': {\n                ''level'': ''DEBUG'',\n                ''class'': ''logging.FileHandler'',\n                ''filename'': ''debug.log'',\n            },\n            ''applogfile'': {\n                ''level'':''DEBUG'',\n                ''class'':''logging.handlers.RotatingFileHandler'',\n                ''filename'': os.path.join(DJANGO_ROOT, ''polls.log''),\n                ''maxBytes'': 1024*1024*15,  15MB\n                ''backupCount'': 10,\n            },\n        },\n        ''loggers'': {\n            ''django'': {\n                ''handlers'': [''file''],\n                ''level'': ''DEBUG'',\n                ''propagate'': True,\n            },\n            ''polls'': {\n                ''handlers'': [''applogfile'',],\n                ''level'': ''DEBUG'',\n            },\n        },\n    }\n\n    //Get Client IP\n\n    def get_client_ip(request):\n        x_forwarded_for = request.META.get(''HTTP_X_FORWARDED_FOR'')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split('','')[0]\n        else:\n            ip = request.META.get(''REMOTE_ADDR'')\n        return ip\n\n    //Example for logging error\n    import logging\n\n    //Get an instance of a logger\n    logger = logging.getLogger(__name__)\n\n    def my_view(request, arg1, arg):\n        ...\n        if bad_mojo:\n            //Log an error message\n            logger.error(''Something went wrong!'' + get_client_ip(request)) \n\n\n    //Example for logging critical\n    import logging\n\n    //Get an instance of a logger\n    logger = logging.getLogger(__name__)\n\n    def my_view(request, arg1, arg):\n        ...\n        if security_violation:\n            //Log an critical message\n            logger.critical(''Security violation!'' + get_client_ip(request))", "code_lang": "django"}, {"id": 198, "title": "CSRF tokens", "content": " CSRF tokens\n\n\n Example:\n\n    \n    \"\"\"\n    The random CSRF token generated need to be send to the server with every form submission. \n\n    The CSRF middleware and template tag provides easytouse protection against Cross Site Request Forgeries.\n    The CSRF middleware is activated by default in the MIDDLEWARE setting.\n    \"\"\"\n\n    \"\"\"\n    In HTML Forms, for specifying the CSRF we can use the below code\n    \"\"\"\n\n    <form method=\"post\">\n    \t{% csrf_token %}\n\t</form>\n\n\t\"\"\"\n    For the AJAX POST requests, ou have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom XCSRFToken header to the value of the CSRF token.\n\n    The CSRF token cookie is named csrftoken by default, but you can control the cookie name via the CSRF_COOKIE_NAME setting.\n\n    The CSRF header name is HTTP_X_CSRFTOKEN by default, but you can customize it using the CSRF_HEADER_NAME setting.\n\t\"\"\"\n\n\t<script type=\"text/javascript\">\n    \n    // using jQuery\n    function getCookie(name) {\n        var cookieValue = null;\n        if (document.cookie && document.cookie !== '''') {\n            var cookies = document.cookie.split('';'');\n            for (var i = 0; i < cookies.length; i++) {\n                var cookie = jQuery.trim(cookies[i]);\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length + 1) === (name + ''='')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n\n    $.ajaxSetup({\n        beforeSend: function(xhr, settings) {\n            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n                xhr.setRequestHeader(\"XCSRFToken\", getCookie(''csrftoken''));\n            }\n        }\n    });\n\t</script>\n\n    //Using CSRF in Jinja Templates\n    <form action=\"\" method=\"post\">{{ csrf_input }}", "code_lang": "django"}, {"id": 199, "title": "Random password token generation", "content": " Random password/token generation\n\n\n Example:\n\n\n\t\"\"\"\n\tWhen needing to generate random numbers, always use proven methods \n\tinstead of writing your own.\n\t\"\"\"\n\t\n\t//Generate a strong security key\n\tapp.secret_key = os.urandom(32)\n\n\t//A random string for generating WTF CSRF token\n\tapp.config[''WTF_CSRF_SECRET_KEY''] = base64.b64encode(rand.bytes(128))\n    \n", "code_lang": "django"}, {"id": 200, "title": "Password storage(salting stretching hashing)", "content": " Password storage(salting/stretching/hashing)\n\n\n Example:\n\n\n    \"\"\"\n    Django provides a flexible password storage system and uses PBKDF2 by default.\n\n    Password is of the format: \n    <algorithm>$<iterations>$<salt>$<hash>\n\t\"\"\"\n\n\n\t//For the encryption of passwords with salt\n\tfrom django.contrib.auth.hashers import make_password\n\n\tpwd = make_password(''some_password'')\n\t\n\t\n\t//Validate your password\n\tfrom django.contrib.auth.hashers import check_password\n\n\tcheck_password(password, pwd_hash)", "code_lang": "django"}, {"id": 201, "title": "HTML output", "content": " HTML output\n\n\n Example:\n\n\n    \"\"\"\n    Whenever user input is displayed in the application, whether, as content or a parameter value\n    submitted towards the url, all user input should be properly escaped to prevent XSS injections.\n    \n    Django has automatic HTML escaping, 5 characters are escaped : \n    < is converted to &lt;\n    > is converted to &gt;\n    '' (single quote) is converted to &39;\n    \" (double quote) is converted to &quot;\n    & is converted to &amp;\n    \"\"\"\n\n    //If data = \"<b>\"\n    //Template to show HTML escaping\n    This will be escaped: {{ data }}\n    This will not be escaped: {{ data|safe }}\n\n    //Output for HTML escaping\n    This will be escaped: &lt;b&gt;\n    This will not be escaped: <b>\n\n    //For removing dangerous characters : \n    wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''\"'' : ''&quot;'', \"''\" : ''&x27;'', ''/'' : &x2F;, ''\\'' : ''\\\\''}\n\n    for key in wordDict:\n        input = input.replace(key, wordDict[key])\n\n    //For UNTRUSTED DATA in <a href=\"/site/search?value=UNTRUSTED DATA\">clickme</a>\n    //URL Encoding for defense\n\n    import urllib\n    input = urllib.quote_plus(input) \n\n    \"\"\"\n    Security consists of different layers of protection, in order to guarantee the integrity\n    of your application. This means that the value submitted from the user should\n    already be sanitized before being submitted towards the database in order to prevent XSS.\n    As an example, you are expecting only alphanumerical value here:\n    \"\"\"\n    \n    match = re.findall(\"^[azAZ09]+$\", value)\n    if match:\n        return True\n    else:\n        raise Exception(\"User supplied value not in the range \" + range)\n\n    \"\"\"\n    This type of approach should be used whenever you are allowing userinput in\n    your DOM like for example, let''s say a user was allowed to upload an image and\n    set an alt text. when you do not sanitize his input a possible attack string could be:\n    \"\"\"\n    \n    this is an image\" onload=\"alert(''XSS'');\"\n\n    \"\"\"\n    whenever this string now is added to the users image this will be the outcome, leading\n    to xss:\n    \"\"\"\n\n    <img src=\"http://image.com/image.jpg\" alt=\"this is an image\" onload=\"alert(''XSS'')\"\" />\n\n    \"\"\"\n    After this sanitation malicious code can no longer exist in the $_POST[''value''] variable.\n\n    Another possibility for attackers to execute an XSS injection, is to pass malicious code directly\n    into the URL by means of a \"href\", e.g.:\n    javascript:alert(document.cookie);\n    or\n    data:text/html;base64,base64xssinjection\n\n    In the following scenario escaping with htmlspecialchars() is not sufficient to block the injection.\n    By checking the URL to see if it starts with either http:// or https:// whenever a link has\n    been submitted to the web application by a user.\n\n    def before_request(url):\n        if url.startswith(''http://'') or url.startswith(''https://''):\n            return True\n        else:\n            raise Exception(\"Not a valid URL : \" + url)\n\n    \n\n    \n", "code_lang": "django"}, {"id": 202, "title": "Sandboxing", "content": " Sandboxing\n\n\n Example:\n\n\n\t<iframe sandbox=\"value\">\n\n\t\t/*\n\t\tsandbox=\"\"  Applies all restrictions\n\t\tallowforms  Reenables form submission\n\t\tallowpointerlock  Reenables APIs\n\t\tallowpopups  Reenables popups\n\t\tallowsameorigin  Allows the iframe content to be treated as being from the same origin\n\t\tallowscripts  Reenables scripts\n\t\tallowtopnavigation  Allows the iframe content to navigate its toplevel browsing context\n\t\t*/\n\t</iframe>\n", "code_lang": "django"}, {"id": 203, "title": "SQL query", "content": " SQL query\n\n\n Example:\n\n\n    \"\"\"\n    Django supports almost most of the database backend.  \n\n    A model contains the essential fields and behaviors of the data you\u2019re storing.\n    Each model maps to a single database table.\n\n    CREATE TABLE myapp_person (\n    \t\"id\" serial NOT NULL PRIMARY KEY,\n    \t\"first_name\" varchar(30) NOT NULL,\n    \t\"last_name\" varchar(30) NOT NULL\n\t);\n\n\tModel for the above SQL query\n\t\"\"\"\n\n\tfrom django.db import models\n\n\tclass Publisher(models.Model):\n\n   \t\tname = models.CharField(max_length=30)\n   \t\taddress = models.CharField(max_length=50)\n\n\t\tdef __str__(self):\n\n    \t\treturn '' ''.join([\n        \t\tself.name,\n        \t\tself.address,\n    \t\t])\n\n    //In order to add your model to django, you have to add the app in INSTALLED_APP\n    INSTALLED_APPS = [\n    \t//...\n    \t''myapp'',\n    \t//...\n\t]\n\n\t\"\"\"\n\tAfter adding the application, in order to make the changes we need to make migrations\n\tand migrate  For creating tables \n\t\"\"\"\n\n\t$ python manage.py makemigrations\n\t$ python manage.py migrate\n\t//Needs to be added\n\n\t\"\"\"\n\tInserting data into the database  create, add and commit\n\t\"\"\"\n\t\n\tbook = Publisher(name=p1, address=p2)\n\tbook.save()\n\n\t\"\"\"\n\tDelete entries from the table\n\t\"\"\"\n\t\n\tinstance = Publisher.objects.get(name=name)\n\tinstance.delete()\n\n\t\"\"\"\n\tQuerying Records\n\t\"\"\"\n\t\n\t//Retrieve the user with username\n\tinstance = Publisher.objects.filter(name=name).all()\n\tinstance.address\n\n\t\"\"\"\n\tSQL raw string approach\n\t\"\"\"\n\t\n\tif inputValidation(inputParameter, ''alphanumeric'') == False:\n\t\tpeople = Person.objects.raw(''SELECT * FROM myapp_person WHERE last_name = %s'', [inputParameter])\n\t\n\t\tfor p in people:\n\t\t\tprint(\"%s is %s.\" % (p.first_name, p.age))", "code_lang": "django"}, {"id": 204, "title": "X path query", "content": " Xpath query\n\n\n Example:\n\n    \n    \"\"\"\n    Define the allowed characters and input parameter and count level for the\n    user lockout like:\n    controller(\"<''>&\", $_GET[''filename''], \"3\")\n    \n    In order to prevent xpath injections we have to treat these query''s similar as \n    to the sql query''s. \n    \"\"\"\n    \n    def controller(allowed, input, count):\n        \n        \"\"\"\n        First we build our encoding method, see \"input validation\" code example for\n        more detailed information about encoding and escaping.\n        \"\"\"\n        \n        return = encoder(allowed, input, count)\n\n        //If the encoder came back false we do not process the function!\n        if return != False:\n\n            //Parse the register.xml\n            root = etree.parse(\"register.xml\")\n            //Extract the id from the XML using XPath\n            find = etree.XPath(''/Employees/Employee[ID='' + return + '']'')\n\n            for x in find(root):\n                print x.text\n", "code_lang": "django"}, {"id": 205, "title": "Encoder", "content": " Character encoding\n\n\n Example:\n\n    \"\"\"\n    This is the encoder class for whenever you have to allow certain\n    possibly dangerous characters into your code for i.e names such as O''Reilly\n\t\"\"\"\n\n\tdef encoder(allowed, input, count):\n\t    \n\t    \"\"\"\n\t    As you can see you can specify allowed characters in your function\n\t    \"\"\"\n\t    \n\t    flag = True\n\t    match = re.findall(\"/^[azAZ09 \" + allowed+\"]+$/\", input)\n\n\t    if match:\n\n\t        \"\"\"\n\t        Set a log for whenever there is unexpected userinput with a threat level\n\t        See \"audit logs\" code example for more information:\n\t        \"\"\"\n\n\t        setLog(session[''id''], \"Bad userinputs\", \"FAIL\", datetime.utcnow(), \"HIGH\")\n\t        \n\t        \"\"\"\n\t        Set counter if counter hits 3 the users session must terminated\n\t        After 3 session terminations the user account must be blocked\n\t        See \"audit logs\" code example for more information:\n\t        \"\"\"\n\t        \n\t        counter.increment()\n\t        flag = False\n\n\t         Remove Dangerous Characters\n\t        wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''\"'' : ''&quot;'', \"''\" : ''&x27;'', ''/'' : &x2F;, ''\\'' : ''\\\\''}\n\n\t        for key in wordDict:\n\t        \tinput = input.replace(key, wordDict[key])\n\n\t        return input\n", "code_lang": "django"}, {"id": 206, "title": "Logout function", "content": " Logout function\n\n\n Example:\n\n\n    \"\"\"\n    This way, the logout functionality will revoke the complete session:\n    \"\"\"\n  \n    from django.contrib.auth import logout\n\n    def logout_view(request):   \n        //Logging logout\n        log.info(''Logout Successful : {user} via ip: {ip}''.format(\n            user=user,\n            ip=ip\n        ))\n        logout(request)\n        //Redirect to a success page.\n        return redirect(''login'')\n\n    \"\"\"\n    Django has inbuilt logout functionality\n    \"\"\"\n\n    //Adding urls.py \n    from django.conf.urls import url\n    from django.conf import settings\n    from django.contrib.auth.views import logout\n\n    urlpatterns = [\n        url(r''^logout/$'', logout, {''next_page'': settings.LOGOUT_REDIRECT_URL}, name=''logout'')\n    ]\n\n    //Add URI in Settings.py\n    LOGOUT_REDIRECT_URL = ''/login''\n", "code_lang": "django"}, {"id": 207, "title": "Anti caching headers", "content": " Anticaching headers\n\n\n Example:\n\n    \n\t\"\"\"\n    In order to set the AntiCaching header you''ll have to your application head in order to prevent the browser from caching\n\n    For adding AntiCaching header in every page we have to add a middleware\n\n    Make a middleware in yourapp/middleware.py\n    \"\"\"\n\n    class MyMiddleware:\n\n    \tdef __init__(self, get_response):\n        \tself.get_response = get_response\n\n    \tdef __call__(self, request):\n        \tresponse = self.get_response(request)\n\n        \tresponse[\"CacheControl\"] = \"nostore, nocache, mustrevalidate\" HTTP/1.1\n\t\t\tresponse[\"CacheControl\"] = \"postcheck=0, precheck=0, false\"\n\t\t\tresponse[\"Pragma\"] = \"nocache\"  HTTP/1.0\n        \t\n        \treturn response\n   \t\n   \t//For adding middleware in the project, add in yourproject/settings.py\n   \tMIDDLEWARE = [\n    \t...,\n    \t''yourapp.middleware.MyMiddleware'',\n    \t...,\n\t]\t\n\n\t\"\"\"\n\tFor adding in the individual response page using render_to_response\n\t\"\"\"\n\tresponse = render_to_response(\"template.html\", {})\n\tresponse[\"CacheControl\"] = \"nostore, nocache, mustrevalidate\" HTTP/1.1\n\tresponse[\"CacheControl\"] = \"postcheck=0, precheck=0, false\"\n\tresponse[\"Pragma\"] = \"nocache\"  HTTP/1.0\n\n\treturn response\n\t\n\t\"\"\"\n\tFor adding in the individual response page using render\n\t\"\"\"\n\n\tresponse = render(request, \"template.html\", {})\n\tresponse[\"CacheControl\"] = \"nostore, nocache, mustrevalidate\" HTTP/1.1\n\tresponse[\"CacheControl\"] = \"postcheck=0, precheck=0, false\"\n\tresponse[\"Pragma\"] = \"nocache\"  HTTP/1.0\n\t\n\treturn response", "code_lang": "django"}, {"id": 208, "title": "Input validation", "content": " input validation\n\n\n Example:\n\n\n\t\"\"\"\n\tThis function is where you store all your input validation controls. \n\tIt makes it easy to maintain whenever you want to apply changes for \n\tcertain input validation roles and reduces the chance of mistakes in your regexes.\n\t\"\"\"\n\n\tdef isFile(str):\n\t\t//Check whether this Filename\n\t\tif re.match(\"^[AZaz09.]*$\", str):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\tdef isAlphanumeric(str):\n\t\tmatch = re.findall(\"^[azAZ09]+$\" , str)\n\t\t//Check for alphanumeric\n\t\tif match:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\tdef isAlpha(str):\n\t\tmatch = re.findall(\"^[azAZ]+$\" , str)\n\t\t//Check for alpha\n\t\tif match:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\tdef isDigit(str):\n\t\tmatch = re.findall(\"^[09]+$\" , str)\n\t\t//Check for isDigit\n\t\tif match:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\t\n\n\tdef isBool(str):\n\t    match = re.findall(\"^(True|False)+$\" , str)\n\t\tif match:\n\t        return True\n\t    else:\n            return False\t\n\n\tdef inputValidation(input, type):\n\t    if type == alphanumeric:\n\t    \t//Set the audit log\n\t    \tlog.debug(''Boolean True: {user} via ip: {ip}''.format(\n\t    \t    user=user,\n\t    \t    ip=ip\n\t    \t))\n\t    \treturn isAlphanumeric(input)\n\t   \telif type == numeric:\n\t   \t\t//Set the audit log\n\t   \t\tlog.debug(''Boolean True: {user} via ip: {ip}''.format(\n\t   \t\t    user=user,\n\t   \t\t    ip=ip\n\t   \t\t))\n\t   \t\treturn isDigit(input)\n\t   \telif type == alpha:\n\t   \t\t//Set the audit log\n\t   \t\tlog.debug(''Boolean True: {user} via ip: {ip}''.format(\n\t   \t\t    user=user,\n\t   \t\t    ip=ip\n\t   \t\t))\n\t   \t\treturn isAlpha(input)\n\t   \telif type == bool:\n\t   \t\t//Set the audit log\n\t   \t\tlog.debug(''Boolean True: {user} via ip: {ip}''.format(\n\t   \t\t    user=user,\n\t   \t\t    ip=ip\n\t   \t\t))\n\t   \t\treturn isBool(input)\n\t   \telif type == filename:\n\t   \t\t//Set the audit log\n\t   \t\tlog.debug(''Boolean True: {user} via ip: {ip}''.format(\n\t   \t\t    user=user,\n\t   \t\t    ip=ip\n\t   \t\t))\n\t   \t\treturn isFile(input)\n\t   \telse:\n\t   \t\t//Set the audit log\n\t   \t\tlog.info(''Boolean False: {user} via ip: {ip}''.format(\n\t   \t\t    user=user,\n\t   \t\t    ip=ip\n\t   \t\t))\n\t   \t\t//Increment the counter\n\t    \tcounter.increment(1)\n\t   \t\treturn False\n\n", "code_lang": "django"}, {"id": 209, "title": "XML External entities", "content": " XML External entities\n\n\n Example:\n\n    \n\t\"\"\"\n\tDjango\u2019s serialization framework provides a mechanism for \u201ctranslating\u201d Django models into other formats. By which we can avoid XXE while using XML. \n\t\n\tModels can be easily translated to other formats such as XML, Json, YAML\n\t\"\"\"\n\n\t//Serialization of SomeModel defined in Models.py\n\tfrom django.core import serializers \n\tdata = serializers.serialize(\"xml\", SomeModel.objects.all())\n\n\t//Save serialized data to file file.xml\t\n\tXMLSerializer = serializers.get_serializer(\"xml\")\n\txml_serializer = XMLSerializer()\n\twith open(\"file.xml\", \"w\") as out:\n\t\txml_serializer.serialize(Question.objects.all(), stream=out)\n\tdata = xml_serializer.getvalue()\n\n\t//Deserialize the XML\n\tfor obj in serializers.deserialize(\"xml\", data):\n\t\t//Accessing object\n\t\tobj.object\n\n\n\t\n\n\n\n\n\n\n", "code_lang": "django"}, {"id": 210, "title": "Character encoding", "content": " Character encoding\n\n\n Example:\n\n\n    \"\"\"\n    This is the encoder class for whenever you have to allow certain\n    possibly dangerous characters into your code for i.e names such as O''Reilly\n\t\"\"\"\n\n\tdef encoder(allowed, input, count):\n\t    \n\t    \"\"\"\n\t    As you can see you can specify allowed characters in your function\n\t    \"\"\"\n\t    \n\t    flag = True\n\t    match = re.findall(\"/^[azAZ09 \" + allowed+\"]+$/\", input)\n\n\t    if match:\n\n\t        \"\"\"\n\t        Set a log for whenever there is unexpected userinput with a threat level\n\t        See \"audit logs\" code example for more information:\n\t        \"\"\"\n\n\t        setLog(session[''id''], \"Bad userinputs\", \"FAIL\", datetime.utcnow(), \"HIGH\")\n\t        \n\t        \"\"\"\n\t        Set counter if counter hits 3 the users session must terminated\n\t        After 3 session terminations the user account must be blocked\n\t        See \"audit logs\" code example for more information:\n\t        \"\"\"\n\t        \n\t        counter.increment()\n\t        flag = False\n\t        //Remove Dangerous Characters\n\t        wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''\"'' : ''&quot;'', \"''\" : ''&x27;'', ''/'' : &x2F;, ''\\'' : ''\\\\''}\n\n\t        for key in wordDict:\n\t        \tinput = input.replace(key, wordDict[key])\n\t        return input\n", "code_lang": "django"}, {"id": 211, "title": "Enforce secure passwords", "content": " Enforce secure passwords\n\n\n Example:\n\n    \n    def checkPassword(pwd):\n    \terror = []\n    \tproceed = True\n\n    \t//Recommended a longer password for Security\n    \tif(len(pwd) < 13):\n        \terror.append(\"Password is too Short!!\")\n        \tproceed = False\n    \n\t\t\"\"\"\n\t\tThe password should include at least one number, a small letter, a CAPS,\n\t\tand a special character as defined in the patterns array:\n\t\t\"\"\"\n    \n    \tif not any(x.isupper() for x in pwd):\n        \terror.append(''Your password needs at least 1 capital letter'')\n    \tif not any(x.islower() for x in pwd):\n        \terror.append(''Your password needs at least 1 small letter'')\n    \tif not any(x.isdigit() for x in pwd):\n        \terror.append(''Your password needs at least 1 digit'')\n\n\t\t\"\"\"\n\t\tEven though your password is sufficient according to all your standards, the password could still be weak.\n\t\tJust imagine the password \"Password!\"; this could easily be guessed by an attacker. To prevent the use of weak passwords we \n\t\tcompare the password with a list of top 500 bad passwords and if matched, the password wil be rejected:\n\t\t\"\"\"\n\n    \tfile = open(''badpasswords.txt'').read()\n    \tpattern = file.split(\",\") \n\n    \tfor value in pattern:\n        \tif value != pwd:\n            \tpass\n        \telse:\n            \terror.append(\"Your password was matched with the bad password list, please try again.\")\n            \tproceed = False\n            \tbreak\n    \tif proceed == True:\n        \tflash(\"Your password is allowed!\")\n        \treturn True\n        else:\n        \tflash(\"Password validation failure(your choice is weak):\")\n        \tfor x in error:\n            \tprint x\n        \treturn False", "code_lang": "django"}, {"id": 212, "title": "File upload", "content": " File upload\n\n\n Example:\n\n        \n\t\"\"\"\n\tIn Django the file data is placed in request.FILES\n\n\tForms should be always submitted using POST request\n\n\tIt is mandatory for the HTML form to have enctype=\"multipart/formdata\" otherwise the \n\trequest.FILES will be empty\n\n\tDjango have proper models to handle the uploaded files : FileField and ImageField, they \n\thave the reference the location where the file is  stored\n\t\"\"\"\n\n\t//set MEDIA_URL and MEDIA_ROOT in project''s settings.py\n\tMEDIA_URL = ''/media/''\n\tMEDIA_ROOT = os.path.join(BASE_DIR, ''media'')\n\n\t//Add the urls.py file \n\tfrom django.conf import settings\n\tfrom django.conf.urls.static import static\n\n\turlpatterns = [\n    \t//Project url patterns...\n\t]\n\n\t//While development you may need to serve the user uploaded files\n\tif settings.DEBUG:\n    \turlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n\n    \"\"\"\n   \tFile Upload with model Forms\n\n    In model form approach we can store the data about the reference of the file, details such \n    description when was it uploaded. It is more convenient to perform input validation, build\n    absolute path and solve the issue of file name conflict.\n    \"\"\"\n\n    //Create a Model Document to store the detail\n    from django.db import models\n\n    def user_directory_path(instance, filename):\n    \t//file will be uploaded to MEDIA_ROOT/user_<id>/<filename>\n    \treturn ''user_{0}/{1}''.format(instance.user.id, filename)\n\n\tclass Document(models.Model):\n    \tdescription = models.CharField(max_length=255, blank=True)\n    \tdocument = models.FileField(upload_to=user_directory_path, validators=[validate_file_extension])\n    \tuploaded_at = models.DateTimeField(auto_now_add=True)\n\n    //Add validators.py for Input Validation\n    import os\n    from django.core.exceptions import ValidationError\t\n\n    def validate_file_extension(value):\n        //[0] returns path+filename\n    \text = os.path.splitext(value.name)[1]  \n    \t\n        //Adding valid extensions\n        valid_extensions = [''.jpg'', ''.png'']\n    \t\n        if not ext.lower() in valid_extensions:\n            //Adding logging for extension error\n            log.error(''Wrong Extension Uploaded: {user} via ip: {ip}''.format(\n                user=user,\n                ip=ip\n            ))\n\n        \traise ValidationError(u''Unsupported file extension.'')\n\n    //Create a forms.py which will process the forms\n    from django import forms\n\tfrom .models import Document\n\n\tclass DocumentForm(forms.ModelForm):\n    \tclass Meta:\n        \tmodel = Document\n        \tfields = (''description'', ''document'', ) \n\n    //Template for upload.html \n    {% block content %}\n  \t<form method=\"post\" enctype=\"multipart/formdata\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Upload</button>\n  \t</form>\n\n  \t<p><a href=\"{% url ''home'' %}\">Return to home</a></p>\n\t{% endblock %}\n\n\n    //Create a view for upload functionality\n    \n    def model_form_upload(request):\n    \tif request.method == ''POST'':\n        \tform = DocumentForm(request.POST, request.FILES)\n        \t\n            //Check whether the form is valid\n            if form.is_valid():\n                //Save the form data\n            \tform.save()\n\n                //Upload Successful\n                log.info(''Uploaded Successful : {user} via ip: {ip}''.format(\n                    user=user,\n                    ip=ip\n                ))\n                return redirect(''home'')\n    \telse:\n        \tform = DocumentForm()\n    \treturn render(request, ''app/upload.html'', {\n            ''form'': form\n    \t})", "code_lang": "django"}, {"id": 213, "title": "X Content Type Options header", "content": " XContentTypeOptions header\n\n\n\n Example:\n\n    \"\"\"\n    In order to set the \"XContentTypeOptions\" header you''ll have to add the following code to the head of your application\n\n    For adding XContentTypeOptions in every page we have to add a middleware\n    Make a middleware in yourapp/middleware.py\n    \"\"\"\n\n    class MyMiddleware:\n\n    \tdef __init__(self, get_response):\n        \tself.get_response = get_response\n\n    \tdef __call__(self, request):\n        \tresponse = self.get_response(request)\n        \tresponse[''XContentTypeOptions''] = \"nosniff\"\n        \treturn response\n   \t\n   \t//For adding middleware in the project, add in yourproject/settings.py\n   \tMIDDLEWARE = [\n    \t...,\n    \t''yourapp.middleware.MyMiddleware'',\n    \t...,\n\t]\t\n\n\t//For adding in the individual response page using render_to_response\n\tresponse = render_to_response(\"template.html\", {})\n\tresponse[''XContentTypeOptions''] = ''nosniff''\n\n\treturn response\n\n\t//For adding in the individual response page using render\n\tresponse = render(request, \"template.html\", {})\n\tresponse[''XContentTypeOptions''] = ''nosniff''\n\t\n\treturn response\n", "code_lang": "django"}, {"id": 214, "title": "XSL injection prevention", "content": " XSL injection prevention\n\n\n\n Example:\n\n\n    \"\"\"\n\tIn order to prevent XSL injections you must enforce strict policy''s whenever the\n\tfiles are loaded from a source controlled by an possible attacker.\n\n\tLet''s say for example that the user can choose from several XSL files on your application.\n\n\tABC.xsl arranges your employee names on alphabetical order\n\tCBA.xsl does not care and just shows the input by order of your XML file.\n\n\tBefore we want to attach the XSL files to the style sheet we first want to\n\tdo validation on the request to make sure the included file was one of our own pre\n\tdefined files, example:\n\tincluding(\"file1.xsl,file2.xsl,etc\", ''filename'' , $_GET[''xslfile''])\n\t\"\"\"\n\n\tdef including(whiteListing, validation ,input, count):\n\n\t\tcontinue = True\n\n\t\t\"\"\"\n\t\tFirst, we want to filter the filenames for expected values. For this example we use only az/09 and .\n\t\tWhenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n\t\tfor more information about validation see \"input validations\" in the code examples:\n\t\t\"\"\"\n\n\t\tif inputValidation(inputParameter, validationType, \"Invalid userinput\", \"HIGH\") == False:\n\t\t\tcontinue = False\n\n\t\t\"\"\"\n\t\tWe want to whitelist the paged for expected values, in this example they are,\n\t\tpage1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n\t\t\"\"\"\n\n\t\tif whitelisting(whiteListing, input, count) == False:\n\t\t\tcontinue = False\n\n\t\t//If all went good we do the function\n\t\tif continue == True:\n\t\t\t//Load XML file\n\t\t\troot = etree.parse(\"test.xml\")\n\n\t\t\txslt_root = etree.XML(input)\n\t\t\ttransform = etree.XSLT(xslt_root)\n\n\t\t\t//Transform the XML\n\t\t\tresult_tree = transform(root)\n\t\telse: \n\t\t\treturn False", "code_lang": "django"}, {"id": 215, "title": "X Content Type Options Header", "content": "XContentTypeOptions Header\n\n\n Example:\n\n\tconst (\n\t  ContentTypeOptionsHeader = \"XContentTypeOptions\"\n\t  ContentTypeOptionsValue  = \"nosniff\"\n\t)\n\n\tfunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n\t  // Add XContentTypeOptions header\n\t  w.Header().Add(ContentTypeOptionsHeader, ContentTypeOptionsValue)\n\n\t  // Respond with request\n\t  w.Write([]byte(\"I have XContentTypeOptions header set to nosniff!\"))\n\t}\n", "code_lang": "go"}, {"id": 216, "title": "Anti Caching Headers", "content": "Anticaching Headers\n\n\n Example:\n\n\tconst (\n\t  CacheControlHeader = \"CacheControl\"\n\t\tCacheControlValue = \"nocache, nostore, mustrevalidate\"\n\t\tPragmaHeader = \"Pragma\"\n\t\tPragmaValue = \"nocache\"\n\t\tExpiresHeader = \"Expires\"\n\t\tExpiresValue = \"0\"\n\t)\n\n\tfunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n\t  // Add CacheControl header\n\t\t// HTTP 1.1\n\t  w.Header().Add(CacheControlHeader, CacheControlValue)\n\n\t\t// Add Pragma header\n\t\t// HTTP 1.0\n\t\tw.Header().Add(PragmaHeader, PragmaValue)\n\n\t\t// Add Expires header\n\t\t// Proxies\n\t\tw.Header().Add(ExpiresHeader, ExpiresValue)\n\n\t  // Respond with request\n\t  w.Write([]byte(\"I have anticaching headers!\"))\n\t}\n", "code_lang": "go"}, {"id": 217, "title": "Anti Clickjacking Headers", "content": "Anti Clickjacking Headers\n\n\n Example:\n\nThe preferred method to prevent against clickjacking is to use \"security headers\".\nThere are three options for setting the \"anticlickjacking\" headers in your application:\n\n\tconst (\n\t\tXFrameOptionsHeader = \"XFrameOptions\"\n\t\tXFrameOptionsDeny  = \"DENY\"\n\t\tXFrameOptionsSameOrigin = \"SAMEORIGIN\"\n\t\tXFrameOptionsFromUri = \"FROMURI http://www.example.com\"\n\t)\n\n\tfunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n\n\t\t// Prevent page from being displayed in an iframe\n\t  \tw.Header().Add(XFrameOptionsHeader, XFrameOptionsDeny)\n\n\t\t// Prevent page from being displayed in an iframe on other sites\n\t\t// w.Header().Add(XFrameOptionsHeader, XFrameOptionsSameOrigin)\n\n\t\t// Allow page at specified URI to display page in an iframe\n\t\t// NOTE: Limited support in modern browsers\n\t\t// w.Header().Add(XFrameOptionsHeader, XFrameOptionsFromUri)\n\n\t\t// Respond with request\n\t  \tw.Write([]byte(\"I have security headers!\"))\n\t}\n", "code_lang": "go"}, {"id": 218, "title": "Content Type Headers", "content": "ContentType Headers\n\n\n Example:\n\n\tconst (\n\t  ContentTypeHeader = \"ContentType:text/html\"\n\t  ContentTypeValue  = \"charset=UTF8\"\n\t)\n\n\tfunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n\t  // Add ContentType header\n\t  w.Header().Add(ContentTypeHeader, ContentTypeValue)\n\n\t  // Respond with request\n\t  w.Write([]byte(\"I have a ContentType of text/html in UTF8!\"))\n\t}\n", "code_lang": "go"}, {"id": 219, "title": "X XSS Protection Header", "content": "XXSSProtection Header\n\n\n Example:\n\n\tconst (\n\t  XSSProtectionHeader = \"XXSSProtection\"\n\t  XSSProtectionValue  = \"1; mode=block\"\n\t)\n\n\tfunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n\t  // Add XXSSProtection header\n\t  w.Header().Add(XSProtectionHeader, XSSProtectionValue)\n\n\t  // Respond with request\n\t  w.Write([]byte(\"Hello World.\"))\n\t}\n", "code_lang": "go"}, {"id": 220, "title": "System commands", "content": " System commands\n\n\n Example:\n\n\n    // Define the whitelist pattern and validation type andz input parameter like:\n    // get_files(\"value1,value2,etc\", \"alphanumeric\", params[''filename''], \"3\")\n    class SystemCommands\n      // Ruby implementation of PHP escapeshellcmd written by Prof. Edgar Gonzalez\n      def escape_shell_command(cmd)\n        cmd.gsub(/([\"''//&;`|*?~<>^()\\[\\]{}$\\\\\\x0A\\xFF])/) { '''' }\n      end\n\n      // Whenever a system command is finished, you should properly sanitize and escape this user input.\n      // System command methods examples are: %x{command}, `command`, system(\"command\")\n\n      // First, we want to filter the filenames for expected values. For this example we use only az/09\n      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n      // for more information about validation see \"input validations\" in the code examples:\n      def exec(param, validation_type, pattern)\n        validator = Validation.new\n\n        case validation_type\n        when numeric\n          return false unless validator.numeric?(command)\n        when alphanumeric\n          return false unless validator.alphanumeric?(command)\n        else\n          return false\n        end\n\n        return false unless check_pattern(param, pattern)\n\n        // If all went good we include the filename\n        // Even though there is a match we still escape the shellcommand:\n        command = ''./configure '' + param\n        escaped_command = self.escape_shell_command(command)\n\n        // Only after validation do we put the shell command into the system() method:\n        system(escaped_command)\n      end\n    end\n", "code_lang": "ruby"}, {"id": 221, "title": "Enforce sequential step order shopping", "content": " Enforce sequential step order \n\n\n Example:\n\n\n\t// Whenever an functionality consists out of following several steps to achieve some goal i.e,\n\t// \"User adds items to chart\", \"User enters shipping information\", \"User pays for goods\",\n\t// \"Items will be shipped.\" You want to make sure the user can not skip the payment step in\n\t// order to receive his goods.\n\n\tclass Product < ApplicationRecord\n\tend\n\n\tclass Order < ApplicationRecord\n\t\thas_many :products, through: :products_orders\n\n\t\tbelongs_to :customer\n\t\tbelongs_to :payment\n\tend\n\n\t// As you can see above we have a very simplified database structure for your average\n\t// web shop. now we can walk through the different steps needed to enforce the user to take\n\t// all steps before payment.\n\t//\n\t// We wont cover the entire shopping cart functions since that would become a rather big\n\t// example so let''s cover the basics of enforcing the sequential steps.\n\t//\n\t// Step1: would be, the user adding items to his cart.\n\t//\n\t// Step2: would be, the user adding products to checkout. Whenever he is done shopping\n\t// we''ll change the state of the Order\n\t//\n\t// For managing the state we could use a Ruby gem that implements an interface\n\t// for a state machine, like Statesman (https://github.com/gocardless/statesman)\n\t// It even provides adapters for ActiveRecord models and can save the entire\n\t// state transition history for later audit.\n\n\t// First, we should create a state machine:\n\tclass OrderStateMachine\n\t\tinclude Statesman::Machine\n\n\t\tstate :pending, initial: true\n\t\tstate :checking_out\n\t\tstate :purchased\n\t\tstate :cancelled\n\n\t\ttransition from: :pending,      to: [:checking_out, :cancelled]\n\ttransition from: :checking_out, to: [:purchased, :cancelled]\n\tend\n\n\t// Then, we can link it to our ActiveRecord model:\n\tclass Order < ApplicationRecord\n\t\tinclude Statesman::Adapters::ActiveRecordQueries\n\n\t\thas_many :order_transitions, autosave: false\n\t\thas_many :products, through: :products_orders\n\n\t\tbelongs_to :customer\n\t\tbelongs_to :payment\n\n\t\t// Optionally delegate some methods\n\t\tdelegate :can_transition_to?, :transition_to!, :transition_to, :current_state,\n\t\t\tto: :state_machine\n\n\t\tdef state_machine\n\t\t\t@state_machine ||= OrderStateMachine.new(self, transition_class: OrderTransition)\n\t\tend\n\n\t\tdef self.transition_class\n\t\t\tOrderTransition\n\t\tend\n\n\t\tdef self.initial_state\n\t\t\t:pending\n\t\tend\n\t\tprivate_class_method :initial_state\n\tend\n\n\t// Next, lets create an AR model to represent state transitions:\n\tclass OrderTransition < ActiveRecord::Base\n\tinclude Statesman::Adapters::ActiveRecordTransition\n\n\tbelongs_to :order, inverse_of: :order_transitions\n\tend\n\n\t// And lets put the following code into confing/initializers/statesman.rb\n\t// So that Statesman knows it should persist the state to DB\n\tStatesman.configure do\n\tstorage_adapter(Statesman::Adapters::ActiveRecord)\n\tend\n\n\t// Now in your controllers you can use the following methods:\n\t//  Machine//can_transition_to?(state): true|false\n\t//  Machine//transition_to(state): true|false\n\t//  Machine//transition_to!(state): true|Statesman::TransitionFailedError|Statesman::GuardFailedError\n\torder = Order.create!\n\n\torder.current_state\n\t// => pending\n\n\torder.can_transition_to?(:purchased)\n\t// => false\n\n\torder.transition_to(:purchased)\n\t// => false\n\n\t// order still in the pending state:\n\torder.current_state\n\t// => pending\n\n\t// You definitely should check out the gem''s Github page (https://github.com/gocardless/statesman)\n\t// as it has a great README with a more broad example\n    ", "code_lang": "ruby"}, {"id": 222, "title": "Password forget and disallow old passwords", "content": " Enforce secure passwords\n\n\n Example:\n\n\n    // It is highly recommended to use Devise gem that handles authentication on your RoR app.\n    // more info: https://github.com/plataformatec/devise\n    // Then install Devise Security Extension gem (https://github.com/phatworx/devise_security_extension)\n    // Follow the installing instructions mentioned on Github\n\n    // After successful installation you should have created user''s views and controllers\n\n    // Firstly, configure the mail settings\n\n    // APP_DIR/config/environments/production.rb\n    config.action_mailer.delivery_method = :smtp\n    config.action_mailer.smtp_settings = {\n    :address              => \"smtp.yoursite.com\",\n    :port                 => 587,\n    :user_name            => ENV[''email_username''], // it is not recommended to hardcode sensitive data\n    :password             => ENV[''email_password''],\n    :ssl                  => true,\n    :enable_starttls_auto => true\n    }\n\n    // Now it''s time to configure the gem in APP_DIR/config/initializers/devise.rb\n    // Uncomment and customize following lines of code\n    config.password_archiving_count = 5\n    config.deny_old_passwords = true\n\n\n    // Now update your model\n    // For example:\n    class User < ApplicationRecord\n      has_many :posts\n\n      // add :recoverable that allows user reset the password\n      devise :database_authenticatable, :registerable,\n            :recoverable, :rememberable, :trackable, :secure_validatable\n    end\n\n", "code_lang": "ruby"}, {"id": 223, "title": "Open forwards & redirects", "content": " Open forwards & redirects\n\n\n Example:\n\n\n\t// When using forwards & redirects you should make sure the URL is being explicitly\n\t// declared in the code and cannot be manipulated by an attacker like:\n\n\tredirect_to params[:redirect]\n\n\t// Generally you should avoid getting input into the redirect which could contain\n\t// userinput by any means. if for any reason this may not be feasible than you\n\t// should make a whitelist input validation for the redirect\n\n\tdef redirecting\n\t\tif params[:redirect] =~ %r{^https\\:\\/\\/trustedsite.com\\/.+$}\n\t\t\tredirect_to params[:redirect]\n\t\tend\n\tend", "code_lang": "ruby"}, {"id": 224, "title": "Secure session cookies", "content": " Secure session cookies\n\n\n Example:\n\n    \n    // Add \"secure: true\" option to APP_DIR/config/initializers/session_store.rb\n    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', expire_after: 1.hour, secure: true", "code_lang": "ruby"}, {"id": 225, "title": "Directory path traversal", "content": " Directory/path traversal\n\n\n Example:\n\n      \n    def get_files(input_parameter, pattern)\n      validator = Validation.new\n\n      // First, we want to filter the filenames for expected values. For this example we use only az/09\n      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n      // for more information about validation see \"input validations\" in the code examples:\n      return false unless validator.alphanumeric?(input_parameter)\n\n      // Second, we want to whitelist the filenames for expected values, in this example they are,\n      // page1,page2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n      // pass the pattern to the check pattern, for instance  pattern = %w[page1 page2]\n      return false unless check_pattern(input_parameter, pattern)\n\n      //If all went good we can send file based on user''s given name\n      send_file input_parameter\n      true\n    end\n", "code_lang": "ruby"}, {"id": 226, "title": "X XSS Protection header", "content": " XXSSProtection header\n\n\n Example:\n\n\n    // Ruby on Rails sets XXSSProtection header with \"1; mode=block\" option by default.\n    // If in your case it doesn''t, you can add the header manually.\n\n    // Add the following code to APP_DIR/config/environments/production.rb\n\n    config.action_dispatch.default_headers = {\n      ''XXSSProtection'' => ''1; mode=block''\n    }\n", "code_lang": "ruby"}, {"id": 227, "title": "Directory listing", "content": " Directory Listing\n\n\n Example:\n\n\n    // Directory Listing is a server based feature not Ruby''s based. If you are using\n    // Apache and other Web Application Server (like popular Passenger), follow\n    // this tutorial\n\n    // To disable or prevent directory access, add following line in your .htaccess file. If\n    // user points the browsers to a directory that does not have an index file, then a\n    // \"403 Forbidden\" error will be displayed:\n\n    // Add this line of code to your .htaccess file:\n    Options Indexes", "code_lang": "ruby"}, {"id": 228, "title": "XML injection prevention", "content": " XML Injection Prevention\n\n\n Example:\n\n\n    // Whenever you are using XML parsers you must sanitize or encode all userinput before\n    // including this input into your XML file.\n\n    // Some methods like below, the Dom document already encodes the input before storing it\n    // into the XML. But beware, since this encoded input is still a threat whenever you are\n    // displaying the this data on screen as HTML output. This encoded data should be escaped\n    // at all times before displaying.\n\n    // Whenever your XML function does not encode your data on the fly, you may want to write\n    // your own function for achieving this. See the code examples and search for \"Input encoding\"\n    // for more detailed information.\n\n    require ''nokogiri''\n\n    xml_doc = Nokogiri::XML(''<employees><employee><name></name></employee></employees>'')\n\n    xml_doc.css(''employees employee name'').first.content = params[:name]\n\n    // In Nokogiri gem HTML Encoding is done by default. Printing xml_doc.to_xml should return\n    // => \"<?xml version=\\\"1.0\\\"?>\\n<employees>\\n  <employee>\\n    <name>&lt;script&gt;alert(\\\"1\\\")&lt;/script&gt;</name>\\n  </employee>\\n</employees>\\n\"\n\n    // Always check if user input is properly encoded, because displaying XML may lead to multiple vulnerabilities, for instance  XSS.\n", "code_lang": "ruby"}, {"id": 229, "title": "Session hijacking and fixation", "content": " Session hijacking and fixation\n\n\n Example:\n\n\n    // In order to secure your session, you have to turn on SECURE and HTTPONLY cookies'' flags\n    // More info in: \"Session cookies HTTPOnly\" and \"Secure session cookies\"\n\n    // Turn on `force_ssl` in config/environments/production.rb\n    Rails.application.configure do\n      // redirects all HTTP to HTTPS and also adds secure flag to your cookies\n      config.force_ssl = true\n\n      config.ssl_options = {\n        // HTTP Strict Transport Security configuration\n        hsts: {\n          // default\n          expires: 180.days,\n\n          // default  if all present and future subdomains will be HTTPS\n          subdomains: true,\n\n          // Recommended: If the site owner would like their domain to be included in the HSTS preload list\n          // defaults to false\n          preload: true\n        }\n      }\n\n      // more information can be found here: http://api.rubyonrails.org/classes/ActionDispatch/SSL.html\n    end\n\n    // After that add :trackable symbol to the devise configuration in users'' model\n\n    // For example:\n    class User < ApplicationRecord\n      has_many :posts\n\n      // Be sure that :trackable is added\n      devise :database_authenticatable, :registerable,\n            :recoverable, :rememberable, :trackable, :secure_validatable\n    end\n\n    // Now update controllers that need authenticated users to perform actions.\n    class ContollerWithAuthenticatedUsers < ApplicationController\n      before_action :authenticate_user!\n      before_action :check_ip\n\n      private\n      // After this modification current users'' IP address will be compared to\n      // the last IP that was used to log in on the account. If they dont match  \n      // user will be warned. This check will be performed every single user action.\n      def check_ip\n        if current_user.last_sign_in_ip != request.remote_ip\n          flash[:warning] = \"There are other active sessions on other IP addresses. \" +\n          \"Your session could be hijacked. Press logout in order to authenticate again \" +\n          \"for security reasons!\"\n        end\n      end  \n    end\n\n", "code_lang": "ruby"}, {"id": 230, "title": "White listing", "content": " White listing\n\n\n Example:\n\n    \n    def check_pattern(param, list = [])\n      // List should be an array of allowed patterns\n      // list = [\"value1\", \"value2\"]\n      if list.include? param\n        Rails.logger.info \"//{session.id} > Good whitelist validation\"\n        true\n      else\n        Rails.logger.warn \"//{session.id} > Bad whitelist validation\"\n        false\n      end\n    end\n", "code_lang": "ruby"}, {"id": 231, "title": "Session cookies (domain)", "content": " Session cookies (domain)\n\n\n Example:\n\n\n    // Whenever a session is started, and you want to share it over different domains,\n    // the domain value should be set to the specific domain:\n\n    // Add \"domain: DOMAIN_NAME\" option to APP_DIR/config/initializers/session_store.rb\n    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', domain: \"DOMAIN_NAME\"", "code_lang": "ruby"}, {"id": 232, "title": "Login functionality", "content": " Login functionality\n\n\n Example:\n\n\n    // Like in other authenthication cases  Ruby on Rails use a gem called \"Devise\" to handle login functionality. \n    // Use generators below to create required staff\n    $> rails generate devise:install\n    $> rails g devise:views\n    $> rails generate devise User\n    $> rake db:migrate\n\n    // Update your User model in APP_DIR/app/models/user.rb\n    devise :database_authenticatable, :registerable,\n        :recoverable, :rememberable, :trackable, :validatable\n\n    // Set routes in APP_DIR/config/routes.rb\n    devise_for :users\n\n    // And finally create login view\n    <h2>Log in</h2>\n\n    <%= simple_form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>\n      <div class=\"forminputs\">\n        <%= f.input :email, required: false, autofocus: true %>\n        // Remember turning off autocomplete on password field\n        <%= f.input :password, required: false, autocomplete: off %> \n        <%= f.input :remember_me, as: :boolean if devise_mapping.rememberable? %>\n      </div>\n\n      <div class=\"formactions\">\n        <%= f.button :submit, \"Log in\" %>\n      </div>\n    <% end %>\n\n    <%= render \"devise/shared/links\" %>\n\n    // Also, remember turning on HTTPS on login site and setting cookies properly. More info: Secure session cookies.", "code_lang": "ruby"}, {"id": 233, "title": "Identifier based authorization", "content": " Identifier based authorization\n\n\n Example:\n\n\n    def identifier_based_authorization(input_parameter, pattern, id_to_auth)\n      validator = Validation.new\n\n      // First, we want to filter the filenames for expected values. For this example we use only numeric\n      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n      // for more information about validation see \"input validations\" in the code examples:\n      return false unless validator.numeric?(input_parameter)\n\n      // Second, we want to whitelist the filenames for expected values, in this example they are,\n      // file1,file2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n      // pass the pattern to the check pattern, for instance  pattern = %w[file1 file2]\n      return false unless check_pattern(input_parameter, pattern)\n\n      // Whenever you are checking whether a user is restricted to review certain data,\n      // the access restrictions should be processed serverside.\n      user = User.find_by(auth_id: input_parameter)\n\n      return true if id_to_auth == user.auth_id\n\n      false\n    end\n", "code_lang": "ruby"}, {"id": 234, "title": "Timeout a session", "content": " Timeout a session\n\n\n Example:\n\n\n    // Add \"expire_after: 1.hour option to APP_DIR/config/initializers/session_store.rb\n    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', secure: true, expire_after: 1.hour", "code_lang": "ruby"}, {"id": 235, "title": "RFD and file download injection prevention", "content": " RFD and file download injection prevention\n\n\n Example:\n\n\n    def get_files(input_parameter, pattern)\n      validator = Validation.new\n\n      // First, we want to filter the filenames for expected values. For this example we use only az/09\n      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.\n      // for more information about validation see \"input validations\" in the code examples:\n      return false unless validator.alphanumeric?(input_parameter)\n\n      // Second, we want to whitelist the filenames for expected values, in this example they are,\n      // file1,file2 etc.. for more information about whitelisting see \"whitelisting\" in the code examples:\n      // pass the pattern to the check pattern, for instance pattern = %w[file1 file2]\n      return false unless check_pattern(input_parameter, pattern)\n\n      // Set proper headers\n      response.headers[''CacheControl''] = ''nostore, nocache, mustrevalidate, maxage=0''\n      response.headers[''XContentTypeOptions''] = ''nosniff''\n      response.headers[''Pragma''] = ''nocache''\n\n      // If all went good we can send file based on user''s given name\n      send_file input_parameter\n      true\n    end\n", "code_lang": "ruby"}, {"id": 236, "title": "Privilege based authentication", "content": " Aggregate user controls\n\n\n Example:\n\n\n    // First of all, you have to know that Devise gem is AUTHENTICATION gem, not AUTHORIZATION.\n    // Using \"before_action\" in specific controllers will provide only authentication.\n\n    // It is recommended to use authorization gem like Pundit over creating your own code\n    // more info: https://github.com/elabs/pundit\n\n    // However, for simple privilege based authentication we can use simpler gem like Petergate\n    // more info: https://github.com/elorest/petergate\n\n    // Quick introduction to Petergate gem:\n    // 1. Use this generators\n    $> rails g petergate:install\n    $> rake db:migrate\n    // 2. Configure roles in user.rb\n    petergate(roles: [:admin, :editor], multiple: false)\n    // 3. Setup permissions in the specific controller\n    def YourController < ApplicationController\n      access all: [:show, :index], user: {except: [:destroy]}, company_admin: :all\n    end\n", "code_lang": "ruby"}, {"id": 237, "title": "Aggregate user controls", "content": " Aggregate user controls\n\n\n Example:\n\n\n\t\t// First of all, you have to know that Devise gem is AUTHENTICATION gem, not AUTHORIZATION.\n\t\t// Using \"before_action\" in specific controllers will provide only authentication.\n\n\t\t// It is recommended to use authorization gem like Pundit over creating your own code\n\t\t// more info: https://github.com/elabs/pundit\n\n\t\t// Quick introduction:\n\n\t\t// 1. Install gem and run generator  `rails g pundit:install`\n\t\t// 2. Create policies and update controllers\n\t\t// Policy example\n\t\t\tclass PostPolicy\n\t\t\t\tattr_reader :user, :post\n\n\t\t\t\tdef initialize(user, post)\n\t\t\t\t\t@user = user\n\t\t\t\t\t@post = post\n\t\t\t\tend\n\n\t\t\t\tdef update?\n\t\t\t\t\tuser.admin? || !post.published?\n\t\t\t\tend\n\t\t\tend\n\n\t\t\t// Controller authorization example\n\t\t\tdef admin_list\n\t\t\t\tauthorize Post // we don''t have a particular post to authorize\n\t\t\t\t// Rest of controller action\n\t\t\tend\n\n\t\t// 3. Make scopes for policies\n\t\t// 4. Ensure if policies and scopes are used\n", "code_lang": "ruby"}, {"id": 238, "title": "User registration SQL truncation", "content": " User registration SQL truncation\n\n\n Example:\n\n\n    // Ruby on Rails uses special gem called Devise to handle whole registration (and authentication). This gem makes you invulnerable to SQL truncation.\n    // Always remember to enforce better security in the User model (more info: \"Password storage\"). It is highly recommended to enforce\n    // SSL connection during user''s signing up and signing in (more info: \"Secure session cookies\").\n\n    // Examples of models, views and controllers containing registration\n\n    // User model\n    class User < ApplicationRecord\n      has_many :posts\n      // Include default devise modules. Others available are:\n      // :confirmable, :lockable, :timeoutable and :omniauthable\n      devise :database_authenticatable, :registerable,\n            :recoverable, :rememberable, :trackable\n    end\n\n\n    // Registration//new view\n    <h2>Sign up</h2>\n\n    <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>\n      <%= f.error_notification %>\n\n      <div class=\"forminputs\">\n        <%= f.input :email, required: true, autofocus: true %>\n        <%= f.input :password, required: true, hint: (\"//{@minimum_password_length} characters minimum\" if @minimum_password_length) %>\n        <%= f.input :password_confirmation, required: true %>\n      </div>\n\n      <div class=\"formactions\">\n        <%= f.button :submit, \"Sign up\" %>\n      </div>\n    <% end %>\n\n    <%= render \"devise/shared/links\" %>\n\n    // Devise has it own registration controller that can be seen here: https://github.com/plataformatec/devise/blob/master/app/controllers/devise/registrations_controller.rb", "code_lang": "ruby"}, {"id": 239, "title": "Anti clickjacking headers", "content": " Anti clickjacking headers\n\n\n Example:\n\n\n    // Ruby on Rails sets XFrameOptions header with \"SAMEORIGIN\" option by default.\n    // If in your case it doesn''t or you want to enforce \"DENY\" options, you can add that headers manually.\n\n    // Add the following code to APP_DIR/config/environments/production.rb\n\n    config.action_dispatch.default_headers = {\n      ''XFrameOptions'' => ''DENY'' // this will completely prevent your page from being displayed in an iframe.\n    }\n\n    // OR\n\n    config.action_dispatch.default_headers = {\n      ''XFrameOptions'' => ''SAMEORIGIN'' // this will completely prevent your page from being displayed in an iframe on other sites.\n    }\n", "code_lang": "ruby"}, {"id": 240, "title": "Re authentication", "content": " Re authentication\n\n\n Example:\n\n\n\t// Whenever a user wants to change his credentials or do other important data exchanges such as\n\t// transferring money he should always be challenged to reauthenticate himself before\n\t// allowing them to perform these actions.\n\n\t// Enforcing reauthentication before changing the password is provided by default in Devise gem. All you have\n\t// To do is add such link in your view\n\t<%= link_to \"Change your password\", edit_user_registration_path %\n\n\n\t// Other action may require adding your before_action method in specific controller\n\tclass SpecificController < ApplicationController\n\t\tbefore_action :re_entered_password?, only: [:edit] \n\n\t\tprivate\n\t\tdef re_entered_password? \n\t\t\tif session[:reauthenticated_at] == nil or session[:reauthenticated_at] > 2.minute\n\t\t\t\t// Redirect to view that requires entering your password\n\t\t\t\tredirect_to action: => \"re_authenticate\" \n\t\t\tend\n\t\tend\n\tend\n\n\t// After successful authentication set \n\tsession[:reauthenticated_at] = Time.now\n    ", "code_lang": "ruby"}, {"id": 241, "title": "Debug enabling", "content": " Debug enabling\n\n\n Example:\n\n    \n    //By default debugging is disabled if the environment is set to \"production\".\n    //If you want to make sure  check APP_DIR/config/environments/production.rb for:\n    config.consider_all_requests_local = false // \"true\" enables debugging", "code_lang": "ruby"}, {"id": 242, "title": "Charsets", "content": " XXSSProtection header\n\n\n Example:\n\n\n    // Ruby on Rails sets encoding header with \"utf8\" option by default.\n    // If in your case it doesn''t or you want to set different encoding, you can do it manually.\n\n    // Add the following code to APP_DIR/config/environments/production.rb\n    config.encoding = ''utf8''\n", "code_lang": "ruby"}, {"id": 243, "title": "Session cookies HttpOnly", "content": " Session cookies HTTPOnly\n\n\n Example:\n\n\n    // Add \"httponly: true\" option to APP_DIR/config/initializers/session_store.rb\n    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', httponly: true", "code_lang": "ruby"}, {"id": 244, "title": "Audit logs", "content": " Audit Logs\n\n\n Example:\n\n\n    // Logging is turned on in Ruby on Rails by default. Every request is logged that is nice but it may \n    // cause security issues like information disclosure. If attacker gets access to web server, it''s possible\n    // to read all requests containing confidential data like logins, passwords, card numbers etc. That''s why it\n    // is recommended to define which values shouldn''t be stored in logs.\n\n    // Add following line of code to APP_DIR/config/initializers/filter_parameter_logging.rb in order to filter\n    // confidential data being saved in logs.\n\n    Rails.application.config.filter_parameters += [:confidential_parameter]", "code_lang": "ruby"}, {"id": 245, "title": "CSRF tokens", "content": " CSRF Tokens\n\n\n Example:\n\n          \n    // Handling CrossSite Request Forgery is as simple as adding following line of code into \n    // your APP_DIR/controllers/application_controller.rb\n\n    class ApplicationController < ActionController::Base\n      protect_from_forgery with: :exception\n    end\n\n    // It''s important to know that RoR is REST based framework and CSRF protection does not work on HTTP GET requests.", "code_lang": "ruby"}, {"id": 246, "title": "Random password token generation", "content": " Random password token generation\n\n\n Example:\n\n\n    // A good random password would be:\n    password = SecureRandom.hex(32)\n\n    // A good random number would be:\n    number = SecureRandom.random_number\n\n    //A good random bytes would be:\n    bytes = SecureRandom.random_bytes(32)", "code_lang": "ruby"}, {"id": 247, "title": "Crossdomain.xml", "content": " Crossdomain.xml\n\n\n Example:\n\n\n\t\t// A bad example of a crossdomain.xml would be:\n\n\t\t\t<?xml version=\"1.0\" ?>\n\t\t\t<crossdomainpolicy>\n\t\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t\t<allowaccessfrom domain=\"*\"/>\n\t\t\t\t<allowhttprequestheadersfrom domain=\"*\" headers=\"*\"/>\n\t\t\t</crossdomainpolicy>\n\n\t\t//\tBecause it allows acces from all other domains.\n\n\t\t//\tInstead of this approach you might want to use the following restrictions. \n\t\t//\tExample by twitter''s crossdomain.xml:\n\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF8\"?>\n\t\t\t<crossdomainpolicy xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" \n\t\t\txsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t\t\t\t<allowaccessfrom domain=\"twitter.com\" />\n\t\t\t\t<allowaccessfrom domain=\"api.twitter.com\" />\n\t\t\t\t<allowaccessfrom domain=\"search.twitter.com\" />\n\t\t\t\t<allowaccessfrom domain=\"static.twitter.com\" />\n\t\t\t\t<sitecontrol permittedcrossdomainpolicies=\"masteronly\"/>\n\t\t\t\t<allowhttprequestheadersfrom domain=\"*.twitter.com\" headers=\"*\" secure=\"true\"/>\n\t\t\t</crossdomainpolicy>", "code_lang": "ruby"}, {"id": 248, "title": "Password storage(salting stretching hashing)", "content": " Password storage (salting sretching hashing)\n\n\n Example:\n\n    \n    // It is highly recommended to use Devise gem that handles authentication on your RoR app.\n    // more info: https://github.com/plataformatec/devise\n\n    // Configure the gem in APP_DIR/config/initializers/devise.rb\n    config.stretches = Rails.env.test? ? 3 : 11\n\n    // By default password hashing algorithm is set to BCRYPT which is good  it means that u can\n    // leave it with default settings\n\n    // Now update your model\n    // For example:\n    class User < ApplicationRecord\n      has_many :posts\n\n      // add :database_authenticatable to turn on password safe storing\n      devise :database_authenticatable, :registerable,\n            :recoverable, :rememberable, :trackable, :secure_validatable\n    end\n\n", "code_lang": "ruby"}, {"id": 249, "title": "HTML output", "content": " HTML output\n\n\n Example:\n\n\n\t// Whenever user input is displayed in the application, whether, as content or a parameter value\n\t// submitted towards the url, all user input should be properly escaped to prevent XSS injections.\n\n\t// For normal output it is recommended use sanitize with the most restrict options\n\t<%= sanitize(test, tags: [], attributes: []) %>\n\n\t// Security consists of different layers of protection, in order to guarantee the integrity\n\t// of your application. This means that the value submitted from the user should\n\t// already be sanitized before being submitted towards the database in order to prevent XSS.\n\t// As an example, you are expecting only alphanumerical value here:\n\n\tunless /^[azAZ09]+$/ =~ sanitize(input, tags: [], attributes: [])\n\t\t//do logout here\n\tend\n\n\t// This type of approach should be used whenever you are allowing userinput in\n\t// your DOM like for example, let''s say a user was allowed to upload an image and\n\t// set an alt text. when you do not sanitize his input a possible attack string could be:\n\n\tthis is an image\" onload=\"alert(''XSS'');\"\n\n\t// whenever this string now is added to the users image this will be the outcome, leading\n\t// to xss:\n\n\t<img src=\"http://image.com/image.jpg\" alt=\"this is an image\" onload=\"alert(''XSS'')\"\" />\n\n\t// After this sanitation malicious code can no longer exist in the post_params array.\n\n\t// Another possibility for attackers to execute an XSS injection, is to pass malicious code directly\n\t// into the URL by means of a \"href\", e.g.:\n\t// javascript:alert(document.cookie);\n\t// or\n\t// data:text/html;base64,base64xssinjection\n\n\t// In the following scenario escaping with sanitize() is not sufficient to block the injection.\n\t// By checking the URL to see if it starts with either http:// or https:// whenever a link has\n\t// been submitted to the web application by a user.", "code_lang": "ruby"}, {"id": 250, "title": "Content Type Headers", "content": " XContentType header\n\n\n Example:\n\n\n    // Ruby on Rails sets XContentTypeOptions header with \"nosniff\" option by default.\n    // If in your case it doesn''t, you can add the header manually.\n\n    // Add the following code to APP_DIR/app/controllers/YOUR_CONTROLLER.rb\n\n    class YourController < ApplicationController\n      def rendering_inline\n        render inline: ''Content of the file'', content_type: ''application/foo''\n      end\n\n      def rendering_from_file\n        render file: filename, content_type: ''application/foo''\n      end\n    end\n\n", "code_lang": "ruby"}, {"id": 251, "title": "Sandboxing", "content": " Sandboxing\n\n\n Example:\n\n\n<iframe sandbox=\"value\">\n\n\t\t// sandbox=\"\"  Applies all restrictions\n\t\t// allowforms  Reenables form submission\n\t\t// allowpointerlock  Reenables APIs\n\t\t// allowpopups  Reenables popups\n\t\t// allowsameorigin  Allows the iframe content to be treated as being from the same origin\n\t\t// allowscripts  Reenables scripts\n\t\t// allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context", "code_lang": "ruby"}, {"id": 252, "title": "SQL query", "content": " SQL Query\n\n\n Example:\n\n    \n    // You should try to use Active Record''s prepared methods to handle SQL Queries.\n    // Example 1: Take client with id = 40 from the database\n    client = Client.find(40)\n\n    // Example 2: Take last 5 clients\n    client = Client.last(5)\n\n    // Example 3: Find client by first name\n    client = Client.find_by first_name: \"Wojciech\"\n\n    // Example 4: Where conditions\n    // With 1 parameter\n    Client.where(\"parameter = ?\", params[:parameter]) \n    Client.where(\"parameter1 = ? AND parameter2 = ?\", params[:parameter1], params[:parameter2])\n\n    // !!!!!\n    // Using SQL Queries like this Client.where(\"param1 LIKE ''%//{params[:param1]}%''\")\n    // leads to SQL Injection attack. Never do that!\n    // !!!!!\n\n\n    // Example 5: Range conditions\n    Client.where(created_at: (Time.now.midnight  1.day)..Time.now.midnight)\n\n    // For more methods and examples check http://guides.rubyonrails.org/active_record_querying.html\n\n", "code_lang": "ruby"}, {"id": 253, "title": "X path query", "content": " X Path query\n\n\n Example:\n\n\n    require ''nokogiri''\n\n    class XPathControl\n      // Define the allowed characters and input parameter and count level for the\n      // user lockout like:\n      // call(params[:filename], \"<''>&\")\n\n      def call(user, input_param, allowed_characters)\n        encoder = Encoder.new\n        encoded = encoder.encode(user, input_param, allowed_characters)\n\n        if encoded\n          doc = Nokogiri::XML(File.read(''file.xml''))\n\n          // Assuming that you used the encoder function also for adding users, it will now retrieve the\n          // user O''reily from the query\n          query_result = doc.xpath(\"//lemonade[@supplier=\\\"//{doc}\\\"]/price\")\n        end\n      end\n    end\n", "code_lang": "ruby"}, {"id": 254, "title": "Encoder", "content": " Encoder\n\n\n Example:\n\n\n    // This is the encoder method for whenever you have to allow certain\n    // possibly dangerous characters into your code for i.e names such as O''reily\n\n    class Encoder\n      // include SanitizeHelper for the implementation of sanitize method\n      include ActionView::Helpers::SanitizeHelper\n      // and this one to provide sign_out\n      include Devise::Controllers::SignInOut\n\n      PATTERN = ''^[azAZ09%s]+$''.freeze\n\n      attr_reader :store\n\n      // If your application is running on multiple processes or machines make sure you use a keyvalue backend for Rails cache\n      // like Redis or Memcached. If you''re using Unicorn/Passenger/Puma in clustered mode you''re already running multiple processes!\n      // Alternatively you can provide your own implementation backed by either a keyvalue store or just your database.\n      def initialize(store = Rails.cache)\n        @store = store\n      end\n\n      def encode(user, input, allowed_characters)\n        pattern = PATTERN % allowed_characters\n\n        regex = Regexp.compile(pattern)\n\n        unless input =~ regex\n          cache_key = cache_key(user)\n          store.increment(cache_key)\n\n          // Every bad input validation has to be logged.\n          Rails.logger.warn \"//{user.id} > Bad user input\"\n\n          if store.fetch(cache_key) >= 3\n            sign_out(user)\n            store.delete(cache_key)\n          end\n\n          return false\n        end\n\n        sanitize(input)\n      end\n\n      private\n\n      def cache_key(user)\n        \"//{user.cache_key}/input_counter\"\n      end\n    end\n", "code_lang": "ruby"}, {"id": 255, "title": "Logout function", "content": " Logout function\n\n\n Example:\n\n\n    // It is highly recommended to use Devise gem that handles authentication on your RoR app.\n    // more info: https://github.com/plataformatec/devise\n\n    // When all authentication is done by Devise gem the implement logout function is as simple as\n    // adding the link into your base template. For my application this is \n    // APP_DIR/views/layouts/application.html.haml\n\n    %ul.nav.navbarnav.navbarright\n     if user_signed_in?\n      %li= link_to \"New Post\", new_post_path\n      %li= link_to \"Sign out\", destroy_user_session_path, method: :delete // Logout function\n     else\n      %li= link_to \"Sign in\", new_user_session_path\n      %li= link_to \"Sign up\", new_user_registration_path\n\n    // Also, remember about authenticate in controllers before performing any action in specific controllers\n    before_action :authenticate_user!, only: [Methods_here] ", "code_lang": "ruby"}, {"id": 256, "title": "Anti caching headers", "content": " Anti caching headers\n\n\n Example:\n\n    \n    // Add the following code to APP_DIR/config/environments/production.rb in order to prevent the browser from caching\n    config.action_controller.perform_caching = false\n    config.public_file_server.headers = {\n      ''CacheControl'' => ''nocache, nostore''\n    }\n    // Add the pragma header also for enforcing older browsers\n    config.action_dispatch.default_headers = {  \n      ''Pragma'' => ''nocache'' \n    } \n", "code_lang": "ruby"}, {"id": 257, "title": "Input validation", "content": " Input validation\n\n\n Example:\n\n    \n\t// This class is where you store all your input validation controls.\n\t// It makes it easy to maintain whenever you want to apply changes for\n\t// certain input validation roles and reduces the chance of mistakes in your regexes.\n\n\tclass Validation\n\n\t\t// Application has to protect itself. Every bad input the counter will increment. If the counter\n\t\t// hits 3 user''s session must be terminated. \n\t\tattr_reader :counter\n\n\t\tdef initialize\n\t\t\t@counter = 0\n\t\tend\n\n\t\tdef validation_failed\n\t\t\t\t@counter += 1\n\n\t\t\t\t// Every bad input validation has to be logged.\n\t\t\t\tRails.logger.warn \"//{session.id} > Bad user input\"\n\n\t\t\t\tif @counter >= 3\n\t\t\t\t\t// DO LOGOUT HERE\n\t\t\t\tend\n\t\tend\n\n\t\tdef numeric?(input)\n\t\t\tunless input =~ /^[09]+$/\n\t\t\t\tself.validation_failed\n\t\t\t\treturn false\n\t\t\tend\n\n\t\t\treturn true \n\t\tend\n\n\t\tdef alphanumeric?(input)\n\t\t\tunless input =~ /^[azAZ]+$/\n\t\t\t\tself.validation_failed\n\t\t\t\treturn false\n\t\t\tend\n\n\t\t\treturn true \n\t\tend\n\tend", "code_lang": "ruby"}, {"id": 258, "title": "XML External entities", "content": " XML External entities\n\n\n Example:\n\n    \n    // Typically parsing XML files is done by using external gems like Nokogiri. In Nokogiri using external entities\n    // is turned off by default. Always check it in the documentation. If you want to be sure  turn off parsing external\n    // entities explicitly.\n\n    // Example of turning off parsing external entities in Nokogiri gem\n    require ''nokogiri''\n    xml = ''<!DOCTYPE root [ <!ENTITY ent SYSTEM \\\"file:///etc/passwd\\\"> ]>\\n<root><e>&ent;</e></root>''\n    // \"nonet\" stands for No External Entities\n    parsed_xml = Nokogiri::XML.parse(xml) { |config| config.nonet } \n    \n    // parsed_xml.children.children.children.text should return now empty string\n", "code_lang": "ruby"}, {"id": 259, "title": "Enforce secure passwords", "content": " Enforce secure passwords\n\n\n Example:\n\n\n    // It is highly recommended to use Devise gem that handles authentication on your RoR app.\n    // more info: https://github.com/plataformatec/devise\n    // Then install Devise Security Extension gem (https://github.com/phatworx/devise_security_extension)\n    // Follow the installing instructions mentioned on Github\n\n    // Now it''s time to configure the gem in APP_DIR/config/initializers/devise.rb\n    // Uncomment and customize following lines of code\n\n    // Configuration of the gem core\n    config.password_length = 10..128\n\n    // Configuration of the gem extenstion\n    config.password_regex = /(?=.*\\d)(?=.*[az])(?=.*[AZ])/ // at least one number, big letter and small letter\n    config.password_archiving_count = 5\n    config.deny_old_passwords = true\n\n    // Now update your model\n    // For example:\n    class User < ApplicationRecord\n      has_many :posts\n\n      // add :secure_validatable. Remember not to use :secure_validatable with :validatable\n      devise :database_authenticatable, :registerable,\n            :recoverable, :rememberable, :trackable, :secure_validatable\n    end\n\n", "code_lang": "ruby"}, {"id": 260, "title": "File upload", "content": " File upload\n\n\n Example:\n\n\n    // Most of Ruby on Rails developers use specific gem to handle file upload. The most popular gem is to do this is Paperclip.\n\n    // To install Paperclip follow instructions at https://github.com/thoughtbot/paperclip\n    // Configuring gem is typical  creating proper model, views and controller.\n\n    // Now something about security  create strong validation rules in model. For example:\n\n    // File: APP_DIR/app/models/photo.rb\n    validates_attachment :image,\n                        presence: true,  validates if file is proper image\n                        content_type: {content_type: %w(image/jpeg image/gif image/png)},  whitelist content type\n                        size: {in: 0..10.kilobytes}  set maximum size of uploading\n    validates_attachment_file_name :image, matches: [/^[azAZ09]$/]  allow only alphanumerical file names\n    // Always upload files outside the website root directory \n\n    // Paperclip logs every upload action by default. If you want to turn logging on explicite add following line of code\n    // to your APP_DIR/config/environments/production.rb\n    Paperclip.options[:log] = true\n", "code_lang": "ruby"}, {"id": 261, "title": "X Content Type Options header", "content": " XContentTypeOptions header\n\n\n Example:\n\n\n    // Ruby on Rails sets XContentTypeOptions header with \"nosniff\" option by default.\n    // If in your case it doesn''t, you can add the header manually.\n\n    // Add the following code to APP_DIR/config/environments/production.rb\n\n    config.action_dispatch.default_headers = {\n      ''XContentTypeOptions'' => ''nosniff''\n    }\n", "code_lang": "ruby"}, {"id": 262, "title": "XSL injection prevention", "content": " XSL Injection prevention\n\n\n Example:\n\n\n    // In order to prevent XSL injections you must enforce strict policy''s whenever the\n    // files are loaded from a source controlled by an possible attacker.\n\n    // Let''s say for example that the user can choose from several XSL files on your application.\n\n    // ABC.xsl arranges your employee names on alphabetical order\n    // CBA.xsl does not care and just shows the input by order of your XML file.\n\n    // Before we want to attach the XSL files to the style sheet we first want to\n    // do validation on the request to make sure the included file was one of our own pre\n    // defined files, example:\n    // check_pattern(params[:xslfile], \"file1.xsl,file2.xsl,etc\")\n\n    require ''nokogiri''\n\n    // Include the classes of which you want to use objects from\n    require_relative ''classes''\n\n    class IncludeXSL\n      def including(param, white_list)\n        // check \"Whitelisting\" for method declaration\n        if check_pattern(param, white_list)\n          document = Nokogiri::XML(File.read(''input.xml''))\n          template = Nokogiri::XSLT(File.read(''template.xslt''))\n\n          transformed_document = template.transform(document)\n        end\n      end\n    end\n", "code_lang": "ruby"}, {"id": 263, "title": "Login function", "content": " Login Functionality \n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nUsing the [Passport middleware](http://www.passportjs.org/)\n\nThe following example assumes username/password authentication.\n\nFirst, configure the middleware:\n```\n var auth_manager = require(''passport'')\n  , LocalStrategy = require(''passportlocal'').Strategy;\n\nauth_manager.use(new LocalStrategy(\n  function(username, password, done) {\n    User.findOne({ username: username }, function(err, user) {\n      if (err) { return done(err); }\n      if (!user) {\n        return done(null, false, { message: ''Incorrect username.'' });\n      }\n      if (!user.validPassword(password)) {\n        return done(null, false, { message: ''Incorrect password.'' });\n      }\n      return done(null, user);\n    });\n  }\n));\n```\n\nThen, register the route handling authentication can be:\n```\napp.post(''/login'',\n  auth_manager.authenticate(''local'', { successRedirect: ''/'',\n                                   failureRedirect: ''/login''\n\t\t\t\t   })\n);\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 264, "title": "Randomizer function", "content": " Randomizer function\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nPlease see [documentation for randomizer function](https://nodejs.org/api/crypto.htmlcrypto_crypto_randombytes_size_callback).\n\n Example\nAsynchronous:\n```js\nconst crypto = require(''crypto'');\n\ncrypto.randomBytes(256, (err, buf) => {\n    //buf holds your bytes\n    if (err) throw err;\n\n    console.log(`${buf.length} bytes of random data: ${buf.toString(''hex'')}`);\n});\n```\n\nSynchronous:\n```js\nconst crypto = require(''crypto'');\nconst buf = crypto.randomBytes(256);\n\nconsole.log(`${buf.length} bytes of random data: ${buf.toString(''hex'')}`);\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 265, "title": "Anti clickjacking", "content": " Anticlickjacking\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nOne way to defend against clickjacking is to include a `framebreaker` script in each page that should not be framed. The following methodology will prevent a webpage from being framed even in legacy browsers, that do not support the `XFrameOptionsHeader`.\n\nIn the document `HEAD` element please add the following code:\n1. Apply an ID to the style element itself:\n```html\n<style id=\"antiClickjack\">\n    body {\n        display:none !important;\n    }\n</style>\n```\n2. And then delete that style by its ID immediately after in the script:\n```html\n <script type=\"text/javascript\">\n    if(self === top) {\n        const antiClickjack = document.getElementById(\"antiClickjack\");\n        antiClickjack.parentNode.removeChild(antiClickjack);\n    } else {\n        top.location = self.location;\n    }\n</script>\n```\n\nThe second option is to use security headers. There are two options for setting the `anticlickjacking` headers in your application:.\n\nThis will completely prevent your page from being displayed in an iframe:\n```js\nresponse.addHeader(''XFrameOptions'', ''deny'');\n```\n\nThis will completely prevent your page from being displayed in an iframe on other sites:\n```js\nresponse.addHeader(''XFrameOptions'', ''SAMEORIGIN'');\n```\n\nAlternatively you can use [`helmet` module]( https://www.npmjs.com/package/helmet) which sets `XFRAME` headers along with a host of other security headers.\n\nIf you only want `XFRAMEOPTIONS` please use [`frameguard`](https://github.com/helmetjs/frameguard).\n```js\nconst frameguard = require(''frameguard'');\n\n// Don''t allow me to be in ANY frames:\napp.use(frameguard({ action: ''deny'' }));\n\n// Only let me be framed by people of the same origin:\napp.use(frameguard({ action: ''sameorigin'' }));\napp.use(frameguard());  // defaults to sameorigin\n\n// Allow from a specific host:\napp.use(frameguard({\n    action: ''allowfrom'',\n    domain: ''http://example.com''\n}));\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 266, "title": "XSS Filtering", "content": " XSS filtering\n\n [General](general)\n [Example](example)\n   [Dangerous methods in frameworks](dangerousmethodsinframeworks)\n [Considerations](considerations)\n\n General\nTBA\n\n Example:\nIf you''re creating server  side pages you can use [`dompurify`](https://www.npmjs.com/package/dompurify) to sanitize strings as shown below:\n```js\nconst dompurify = require(''dompurify'');\n...\nconst clean = DOMPurify.sanitize(dirty);\n```\nThen you can use sanitized string as normal.\n\n Dangerous methods in frameworks\nIf you''re using a template engine or a framework, then **AVOID** using the following methods:\n\n {{ mustache }} and Handlebars\n```hbs\n{{{ raw html }}}\n```\n\n EJS\n```\n<% raw html %>\n```\n\n Nunjucks\n```\n{% raw html %}\n```\n\n Angular\n```\n<div ngbindhtml=\"raw html\" />\n```\n\n React\n```\n<div dangerouslySetInnerHTML={raw html} />\n```\n\n Vue.js\n```\n<div vhtml=\"raw html\" />\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 267, "title": "Prepared Statements SQL", "content": " Encoder (SQL  Parameterized Inputs)\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nExecute prepared statement with parameterized user inputs using [`mysql` module](https://www.npmjs.com/package/mysql):\n```js\nconst sqlQuery = ''SELECT * FROM accounts WHERE username=? AND password=?'';\n\nconnection.query(sqlQuery, [username, passwordHash], (err, rows, fields) => {\n\t// handle both success and failure for query result \n});\n\nconnection.end();\n```\n\n Considerations\nTBA\n\t\n", "code_lang": "nodejs-express"}, {"id": 268, "title": "Identifier based authorization", "content": " Identifierbased authorization\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nDatabase expected is MS SQL server making use of [mssql](https://www.npmjs.com/package/mssql).\n`file_access` is formatted as so:\n| user_id | file_id |\n|||\n| 1       | 2       |\nWhere both ids are foreign keys and the primary key is made of a composite of the two.\n\n Example\n```js\nconst express = require(''express'');\nconst session = require(''expresssession'')\nconst FileStore = require(''sessionfilestore'')(session);\nconst bodyParser = require(''bodyparser'');\nconst passport = require(''passport'');\nconst LocalStrategy = require(''passportlocal'').Strategy;\nconst sql = require(''mssql'')\n\n//Made up external files\nconst validator = require(''./validator''); //Handles validating logins\nconst files = require(''./files''); //Gets files from DB or store\n\n\n\n// configure passport.js to use the local strategy\npassport.use(new LocalStrategy(\n\t{ usernameField: ''email'' }, (email, password, done) => {\n\t\tconst user = validator.login(email, password); //Validator returns false if invalid\n\t\treturn done(null, user)\n\t}\n));\n\n// tell passport how to serialize the user\npassport.serializeUser((user, done) => {\n  \tdone(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n\tconst user = users.getUserById(id);\n  \tdone(null, user);\n});\n\n// create the server\nconst app = express();\n\n// add & configure middleware\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(bodyParser.json())\napp.use(session({\n  store: new FileStore(),\n  secret: process.env.sessionKey, //always use environment variables to pass in keys.\n  resave: false,\n  saveUninitialized: true\n}))\napp.use(passport.initialize());\napp.use(passport.session());\n\n//Login excluded\n\napp.get(''/post'',  passport.authenticate(''local'', { failureRedirect: ''/login'' }), //authenticates the user using session\n   async function(req, res) {\n\t  \tconst data = req.body;\n\t  \tlet pool = await sql.connect(config)\n\t\tlet result = await pool.request()\n\t\t\t.input(''user_id'', sql.Int, req.user.id) //sql.Int validates that only a integer value can be in the variable\n\t\t\t.input(''file_id'', sql.Int, data.id)\n            .query(''select * from file_access where user_id = @user_id and file_id = @file_id''); //variables inlined into sql query\n\n\t\tif(result.recordsets.length === 1) { //If the result exists the user has access\n\t\t\tres.send(files.getFile(data.id)) //sends file\n\t\t} else {\n\t\t\tres.redirect(''/invalidFile''); //redirects to a generic invalid file\n\t\t}\n  });\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 269, "title": "session hijacking and fixation", "content": " Session hijacking and fixation \n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nFirst you need to implement the strict transport security header. This is done in order to prevent users from accessing your application over an unprotected connection.\n\nStrict transport security header can be set as shown below:\n```js\nresponse.setHeader(''StrictTransportSecurity'', ''maxage=31536000'');\n```\n\nIf all present and future subdomains will be `HTTPS`:\n```js\nresponse.setHeader(''StrictTransportSecurity'', ''maxage=31536000; includeSubdomains;'');\n```\n\nWe recoomend to have your domain included in the `HSTS` preload list maintained by Chrome (and used by Firefox and Safari). To achieve this you need to do the following: \n```js\nresponse.setHeader(''StrictTransportSecurity'', ''maxage=31536000; includeSubdomains; preload'');\n```\n\nThe `preload` flag indicates the site owner''s consent to have their domain preloaded. The preload list\nenforces the browser to always present your application on HTTPS even on the first time the user hits your application.\n\nThen you should set the `httpOnly` flag (please see \"HttpOnly\" in the code examples for more details about implementation).\n\nThen set the flag for session timeout (please see \"Timeout\" in the code examples for more details about implementation).\n\nThen set the session `secure` flag (see \"Secure flag\" in the code examples for more details about implementation).\n\nOn login we also need to add another cookie with a random value to the application in order to prevent an attacker to fixate an `JSSESSION` id on your users and hijack their sessions (This code example can be found in the \"Login functionality\" for more detailed information).\n\nNow imagine the scenario after the login of the user (see the \"Login functionality\" in the code examples for more details). Whenever the user is logged in, the users IP address, user agent string and session id are also stored in the database these values are used in order to verify if there are multiple users active on the same session. \n\nIf so, we can let the user decide to terminate the session and terminate theother assigned sessions.\n```js\nconst login = (**args**) => {\n\t\t/* Passport prevents session fixation but doesn''t track concurrent long lived sessions, this is custom code on top of passport\n\t\t*/\n}\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 270, "title": "Sandboxing", "content": " Iframe Sandboxing\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nSandboxing applies a set of restrictions to the iframes in order to tighten security. It can be declared as follows:\n```html\n<iframe sandbox=\"value\">\n```\n\nFull list of permitted values is available in [MDN iframe documentation](https://developer.mozilla.org/enUS/docs/Web/HTML/Element/iframeattrsandbox).\n\n Example\nTo enable full sandbox mode please use the following code:\n```html\n<iframe sandbox>...</iframe>\n``` \n\nDesired restriction can be lifted as shown below: \n```html\n<iframe sandbox=\"allowforms allowscripts\">...</iframe>\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 271, "title": "Open Forwards and redirects", "content": " Open Forwards and Redirects \n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nWhen using forwards and redirects you should make sure the URL is being explicitly declared in the code and cannot be manipulated by an attacker like in the case of `redirectTo` being dynamically set based on user input:\n```js\napp.get(''/offers'', (req, res, next) => {\n    const redirectTo = req.query.redirect;\n    res.redirect(redirectTo);\n});\n```\n\nGenerally you should avoid getting parameters which could contain user input into the redirect by any means. If for any reason this is not feasible, then you should make a whitelist input validation for the redirect as shown below:\n```js\nconst validRedirectURLs = [...]; // list of URLs permitted for redirection\n\napp.get(''/offers'', (req, res, next) => {\n    const redirectTo = req.query.redirect;\n\n    if(validRedirectURLs.includes(redirectTo)) {\n        res.redirect(redirectTo);\n    } else {\n        return res.status(500).send({ error: ''Invalid redirection URL'' });\n    }\n});\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 272, "title": "RFD and file download injections", "content": " RFD and file download injections\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nYou should **not** accept random filenames for downloading from users and use path sanitizations as shown earlier with RBAC to make sure that the user owns the file being downloaded.\n\n Example:\nTBA\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 273, "title": "Timeout Sessions", "content": " Session timeout \n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example:\n```\napp.use(express.session({\n             secret : ''your_cookie_secret'',\n             cookie:{_expires : (10 * 60 * 1000)}, // time im ms, this is 10 minutes\n             })\n        ); \n     \n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 274, "title": "Directory path traversal attack", "content": " Directory Path traversal\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nFirst, we want to filter the filenames for expected values. For this example the filenames should consist of only alphanumeric characters, which we validate with the following regex  `/^[azAZ09]+$/`.\n```js\nconst isValidPath = path => {\n    const filenamesRegex = /^[azAZ09]+$/;\n    return filenamesRegex.test(path);\n};\n```\n\nThen we whitelist the path to only the allowed locations using the [path](https://nodejs.org/api/path.html) library. `dirWhitelist` is an array of directory pathnames (such as `/foo/bar/baz`) the application is allowed to load resources from:\n```js\nconst isAllowedLocation = path =>\n    dirWhitelist.includes(path.dirname(path));\n```\n\nTogether the methods shown above can be used as follows:\n```js\napp.get(''/readfile'', (req, res) => {\n    const filePath = req.query.filename;\n    if(isValidPath(filePath) && isAllowedLocation(filePath)) {\n        // serve request\n    } else {\n        // return error\n    }\n});\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 275, "title": "Logout", "content": " Logout Functionality\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\n\n Example\nUsing [Passport](http://www.passportjs.org/docs/logout/) as a middleware call logOut() or logout() on your req object.\n```\napp.get(''/logout'', function(req, res){\n  req.logout();\n  res.redirect(''/'');\n});\n\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 276, "title": "File uploading", "content": " File Uploading \n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nTBA\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 277, "title": "Password forget and disallow old passwords", "content": " Password forget and disallow of old passwords\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nWhenever you are developing a password forget function, these are the steps to follow in order to create hardened defenses. \n\n```\nTABLE users\n| userID | userName | password | emailAddress | access |\n|  |  |  |  |  |\n| 1 | Admin | securely hashed password | info@admin.com | TRUE |\n| 2 | User | securely hashed password | info@user.com | FALSE |\n| 3 | Guest | securely hashed password | info@guest.com | FALSE |\n\n\n`TABLE passwordForget`\n| forgotPasswordID | token | userID | active | oldPasswordHashes |\n|  |  |  |  |  |\n| 1 | c3ab8ff13720e.... | 1 | Yes | <......> |\n| 2 | 7dd39466b3c89.... | 1 | No | <......> |\n| 3 | 83d4a3960714c.... | 3 | No | <......> |\n```\n\nAs you can see we also store the old passwords into the password forget table. This is done in order to prevent the user from using old passwords later on in the process.\n\nAlso use a CRON job to make sure that the generated tokens for the password reset expire after a certain amount of time like 20 minutes.\n\nTHIS CODE NEEDS TO BE CLEANED UP\n\n```js\napp.post(''/forgot'', function(req, res, next) {\n      async.waterfall([\n        function(done) {\n          crypto.randomBytes(20, function(err, buf) {\n            var token = buf.toString(''hex'');\n            done(err, token);\n          }); \n        },\n        function(token, done) {\n          User.findOne({ email: req.body.email }, \n            function(err, user) { // get user by email\n              if (!user) {\n                req.flash(''Success'', ''You should receive an email with your password reset link shortly'');\n                return res.redirect(''/forgot'');\n              }\n              user.resetPasswordToken = token;\n              user.resetPasswordExpires = Date.now() + PASSWORD_EXPIRY_TOKEN_DURATION; // 1 hour\n              user.save(function(err) {\n                done(err, token, user);\n              });\n            });\n        },\n        function(token, user, done) {\n          send_reset_password_email()\n        }\n      ])\n    }, \n    function(err) {\n      if (err) return next(err);\n      res.redirect(''/forgot'');\n    });\n\n    app.get(''/reset/:token'', function(req, res) {\n      User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } }, function(err, user) {\n        if (!user) {\n          req.flash(''error'', ''Password reset token is invalid or has expired.'');\n          return res.redirect(''/forgot'');\n        }\n        res.render(''reset'', {\n          user: req.user\n        });\n      });\n    });\n\n    app.post(''/reset/:token'', function(req, res) {\n      async.waterfall([\n        function(done) {\n          User.findOne({ \n            resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() }, \n            function(err, user) {\n              if (!user) {\n                req.flash(''error'', ''Password reset token is invalid or has expired.'');\n                return res.redirect(''back'');\n              }\n              if (req.body.password ) {\n                hash = password_hash(req.body.password)\n                user.resetPasswordToken = undefined;\n                user.resetPasswordExpires = undefined;\n                user.save(function(err) {\n                  req.logIn(user, function(err) {\n                    done(err, user);\n                  });\n                });\n              });\n            }\n          });\n        }\n        function(user, done) {\n          send_pass_change_confirmation_email()\n        }\n      ]), \n      function(err) {\n        res.redirect(''/'');\n      })  \n    });\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 278, "title": "Charsets", "content": " Charsets\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nCharset header should be set on the response your server sends back to the client. For example, in the case of `text/html` this can be achieved by the following code: \n```js\nres.charset = ''utf8''; //utf8 is the default encoding for json\n```\n\nOr directly in your HTML markup:\n```html\n<meta httpequiv=\"ContentType\" content=\"text/html; charset=utf8\">\n```\n\n Considerations\nTBA\n    \t\t", "code_lang": "nodejs-express"}, {"id": 279, "title": "Anti caching headers", "content": " Anticashing headers \n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nAdd the following headers to your response head in order to prevent the browser from caching:\n\n HTTP 1.1\n```js\nresp.set(''CacheControl'', ''nocache, nostore, mustrevalidate'');\n```\n\n HTTP 1.0\n```js\nres.set(''Pragma'', ''nocache'');\n```\n\n Proxies\n```js\nres.set(''Expires'', ''0'');\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 280, "title": "HttpOnly flag", "content": " `httpOnly` flag\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\n`httpOnly` flag can be added to the `SetCookie` response header in order to dissalow clientside scripts from accessing or modifying the cookie in question. This can help to mitigate most common XSS attacks by protecting the cookie data.\n\n Example\nWhen setting sessions with [`expresssession` module](https://www.npmjs.com/package/expresssession) you can add the `cookie` portion of the configuration as shown below in order to protect session ID cookie:\n```js\nconst session = require(''expresssession'');\n\napp.use(session({\n  secret: ''some random and long value'',\n  key: ''sessionId'',\n  cookie: {\n    httpOnly: true,\n    secure: true\n  }\n}));\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 281, "title": "CSRF Token csurf", "content": " CSRF Tokens\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\n\nIf you''re using JSON over REST to mutate server state and the application doesn''t support plain HTML form submissions and your CORS configuration bans crossdomain requests then Express has builtin CSRF protection.\n\nIf you support plain HTML form submissions, read on.\n\n**Hint:** you can check if you support plain HTML form submissions by searching for:\n\n```js\nconst bodyParser = require(''bodyparser'');\nbodyParser.urlencoded();\n```\n\n Example\n\nThe following handlebar template snippet shows the code used to place the antiCSRF token inside a html page.\n\nWhen the page renders, the `<cu:antiCSRF/>` is created as a viewstate encoded html input tag which then carries the antiCSRF token. While in process of rendering the page, a new token is generated and added into the existing session.\n\nWhen the user presses the commandButton then CSRF token parameter is compared with the CSRF session parameter. \n\n```hbs\n<form action=\"/process\" method=\"POST\">\n\t<input type=\"hidden\" name=\"_csrf\" value=\"{{csrfToken}}\">\n\t...\n\t<button type=\"submit\">Submit</button>\n</form>\n```\n\nThe following snippet is used to generate and check the token:\n\n```js\nconst csrf = require(''csurf''); //csrf module\nconst csrfProtection = csrf({ cookie: true }); // setup route middlewares\n\n// This is required because \"cookie\" is true in csrfProtection\napp.use(cookieParser());\n\n// Error handler(Optional) shows custom error message when token is missing or mismatches\napp.use((err, req, res, next) => {\n\t// on token validation fail, error is thrown with code ''CSRFERROR''\n\tif (err.code !== ''CSRFERROR'') return next(err);\n\tres.status(403);\n\tres.send(''csrf error'');\n});\n\n// We need to pass the middleware to each route \napp.get(''/form'', csrfProtection, (req, res) => {\n\t// generate and pass the csrfToken to the view\n\tres.render(''send'', { csrfToken: req.csrfToken() });\n});\n\n// and check it when the request is being processed  \napp.post(''/process'', parseForm, csrfProtection, (req, res) => {\n\tres.send(''data is being processed'');\n});\n```\n\n Considerations \n`csurf` doesn''t protect by default requests such as `GET`, `OPTIONS`, `HEAD`.\n", "code_lang": "nodejs-express"}, {"id": 282, "title": "X Content Type Options header", "content": " `XContentTypeOptions` header\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nIn order to set the `XContentTypeOptions` header you''ll have to add the following code to the head of your application:\n```js\nres.set(''XContentTypeOptions'', ''nosniff'');\n```\n\nAlternatively you can use [`dontsniffmimetype` module](https://www.npmjs.com/package/dontsniffmimetype):\n```js\nconst nosniff = require(''dontsniffmimetype'');\n\napp.use(nosniff());\n```\n\nThe same can be achieved by using [`helmet` module]( https://www.npmjs.com/package/helmet) which sets XFRAME headers along with a host of other security headers.\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 283, "title": "Secure Session Cookies", "content": " Secure flag for session cookies\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nIn [`expresssession` module](https://www.npmjs.com/package/expresssession) it is possible to supply `secure` flag as a part of `cookie` configuration.\n\nThis flag instructs the browser to never send cookies over an `HTTP` request. The cookie will only be sent over `HTTPS` even if the user manually types in a request for `HTTP`. The HTTP request itself will be sent, but the browser will not send any cookies.\n\n Example\nA session with secured cookies can be created in the following way:\n```js\napp.use(session({\n    name: ''session'',\n    keys: [''key1'', ''key2''],\n    cokkie: {\n        secure: true\n        httpOnly: true,\n        domain: ''complete.subdomain.example.com'',\n        path: ''foo/bar'',\n        expires: expiryDate\n    } \n}));\n```\n\n Considerations\nThe `HTTP` request is still sent and thus could be manipulated by a man in the middle to perform convincing phishing attacks (please see Strict Transport Security for a recommended solution).\n\nSetting the `domain` attribute to a too permissive value, such as `example.com`, allows an attacker to launch attacks on the session IDs between different hosts and web applications belonging to the same domain, known as crosssubdomain cookies. For example, vulnerabilities in `example.com` might allow an attacker to get access to the session IDs from `secure.example.com`.\n", "code_lang": "nodejs-express"}, {"id": 284, "title": "Hashing", "content": " Hashing\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nFor this you can use [`bcrypt` module](https://www.npmjs.com/package/bcrypt):\n```js\nconst bcrypt = require(''bcrypt'')\n\t\nconst hash = password => {\n\tconst saltRounds = 10;\n\treturn bcrypt.hash(myPlaintextPassword, saltRounds);\n}\n```\n\nAsynchronous method:\n```js\nconst validatePassword = (user, password) => {\n\tbcrypt.compare(myPlaintextPassword, hash, (err, res) => {\n\t\tif(res) {\n\t\t\t// Passwords match, handle success\n\t\t} else {\n\t\t\t// Passwords don''t match, handle failure\n\t\t} \n\t});\n};\n```\n\nSynchronous method:\n```js\nconst validatePassword = (user, password) => {\n\tif(bcrypt.compareSync(''somePassword'', hash)) {\n\t\t// Passwords match, handle success\n\t\treturn true;\n\t} else {\n\t\t// Passwords don''t match, handle failure\n\t\treturn false;\n\t}\n}\n```\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}, {"id": 285, "title": "User Registration SQL truncation prevention", "content": " User registration SQL truncation prevention\n\n [General](general)\n [Example](example)\n [Considerations](considerations)\n\n General\nTBA\n\n Example\nIn order to prevent Column truncation SQL injection we have to make sure that the applications structural logic does not mismatches with the database structural logic.\n\nTo achieve this imagine the follow example of a user model:\n\n```\n// models/user.js\n// load the things we need\nvar database = require(''my_favorite_database'');\n\n\n// define the schema for our user model\nvar userSchema = database.Schema({\n\n    local            : {\n        email        : String,\n        password     : String,\n        firstname    : String,\n        lastname     : String,\n    }\n});\n```\n\nThen we need to define some methods to hash passwords and check password validity\n\n```\nvar bcrypt   = require(''bcryptnodejs'');\n// to hash\nuserSchema.methods.generateHash = function(password) {\n    return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);\n};\n\n// to validate\nuserSchema.methods.validPassword = function(password) {\n    return bcrypt.compareSync(password, this.local.password);\n};\n\n// create the model for users and expose it to our app\nmodule.exports = database.model(''User'', userSchema);\n\n```\nThen you can config the [Passport](http://www.passportjs.org/) middleware to handle your local authentication strategy\n\n```\n// authentication.js\n\n// load all the things we need\nvar LocalStrategy   = require(''passportlocal'').Strategy;\n\n// load up the user model\nvar User = require(''models/user'');\n\n// expose this function to our app using module.exports\nmodule.exports = function(passport) {\n\n    // passport needs ability to serialize and unserialize users out of session\n\n    // used to serialize the user for the session\n    passport.serializeUser(function(user, done) {\n        done(null, user.id);\n    });\n\n    // used to deserialize the user\n    passport.deserializeUser(function(id, done) {\n        User.findById(id, function(err, user) {\n            done(err, user);\n        });\n    });\n    \n    passport.use(''localsignup'', new LocalStrategy({\n        usernameField : ''email'',\n        passwordField : ''password'',\n        passReqToCallback : true\n    },\n    function(req, email, password, firstname, lastname done) {\n        process.nextTick(function() {\n            User.findOne({ ''local.email'' :  email }, function(err, user) {\n                if (err)\n                  return done(err);\n      \n                if (user) {\n                    return done(null, false, req.flash(''signupMessage'', ''User exists''));\n                } else {\n                    var user             = new User();\n                    user.local.email     = email;\n                    user.local.password  = user.generateHash(password);\n                    user.local.firstname = firstname;\n                    user.local.lastname  = lastname\n\n                // save the user\n                newUser.save(function(err) {\n                    if (err)\n                        throw err;\n                    return done(null, user);\n                });\n            }\n\n        });    \n\n        });\n\n    }));\n\n};\n\n```\n\nThen in the app routes\n\n```\n // signup form processing\n    app.post(''/register'', passport.authenticate(''localsignup'', {\n        successRedirect : ''/profile'', // redirect to the secure profile section\n        failureRedirect : ''/register'', // redirect back to the signup page if there is an error\n        failureFlash : true // allow flash messages\n    }));\n\n\n```\n\n\n Considerations\nTBA\n", "code_lang": "nodejs-express"}]}
